<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="Bridge__1_86_83_2Bridge_2src_2Bridge_8h" kind="file" language="C++">
    <compoundname>Bridge.h</compoundname>
    <includes local="no">Arduino.h</includes>
    <includes local="no">Stream.h</includes>
    <includes refid="Bridge__1_86_83_2Bridge_2src_2Console_8h" local="no">Console.h</includes>
    <includes refid="Bridge__1_86_83_2Bridge_2src_2Process_8h" local="no">Process.h</includes>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2Bridge_8cpp" local="yes">app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.cpp</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2BridgeClient_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeClient.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2BridgeServer_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeServer.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2BridgeSSLClient_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeSSLClient.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2BridgeUdp_8h" local="yes">app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeUdp.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2Console_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/Console.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2Mailbox_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/Mailbox.h</includedby>
    <includedby refid="Bridge__1_86_83_2Bridge_2src_2Process_8h" local="no">app/testdata/libraries/Bridge_1.6.3/Bridge/src/Process.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>Console.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Console_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Arduino.h</label>
      </node>
      <node id="5">
        <label>Process.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Process_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Bridge_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Stream.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/YunClient.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2YunClient_8h_source"/>
      </node>
      <node id="5">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeServer.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2BridgeServer_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeUdp.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2BridgeUdp_8h_source"/>
      </node>
      <node id="2">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeClient.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2BridgeClient_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/FileIO.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2FileIO_8h_source"/>
      </node>
      <node id="9">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/Mailbox.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Mailbox_8h_source"/>
      </node>
      <node id="6">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/YunServer.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2YunServer_8h_source"/>
      </node>
      <node id="3">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/BridgeSSLClient.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2BridgeSSLClient_8h_source"/>
      </node>
      <node id="8">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/Console.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Console_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/Process.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Process_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/HttpClient.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2HttpClient_8h_source"/>
      </node>
      <node id="1">
        <label>app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h</label>
        <link refid="Bridge__1_86_83_2Bridge_2src_2Bridge_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classBridgeClass" prot="public">BridgeClass</innerclass>
    <innerclass refid="classSerialBridgeClass" prot="public">SerialBridgeClass</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="Bridge__1_86_83_2Bridge_2src_2Bridge_8h_1a535f4df4a1a6abf1859e21c7439eae32" prot="public" static="no">
        <name>BRIDGE_BAUDRATE</name>
        <initializer>250000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" line="23" column="9" bodyfile="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Bridge__1_86_83_2Bridge_2src_2Bridge_8h_1afab0ac704cc8365f0a6b98d6c2e07cbb" prot="public" static="no" mutable="no">
        <type><ref refid="classSerialBridgeClass" kindref="compound">SerialBridgeClass</ref></type>
        <definition>SerialBridgeClass Bridge</definition>
        <argsstring></argsstring>
        <name>Bridge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" line="112" column="26" declfile="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" declline="112" declcolumn="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Bridge__1_86_83_2Bridge_2src_2Bridge_8h_1a21898e4608ca94957ea500e45140711d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkForRemoteSketchUpdate</definition>
        <argsstring>(uint8_t pin=7)</argsstring>
        <name>checkForRemoteSketchUpdate</name>
        <param>
          <type>uint8_t</type>
          <declname>pin</declname>
          <defval>7</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" line="120" column="13" bodyfile="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.cpp" bodystart="263" bodyend="265" declfile="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h" declline="120" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2013<sp/>Arduino<sp/>LLC.<sp/>All<sp/>right<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301<sp/>USA</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BRIDGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BRIDGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BRIDGE_BAUDRATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BRIDGE_BAUDRATE<sp/>250000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Stream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classBridgeClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBridgeClass" kindref="compound">BridgeClass</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBridgeClass" kindref="compound">BridgeClass</ref>(Stream<sp/>&amp;_stream);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Methods<sp/>to<sp/>handle<sp/>key/value<sp/>datastore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>put(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>put(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String<sp/>&amp;value)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>put(key.c_str(),<sp/>value.c_str());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/>uint8_t<sp/>*buff,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxlen)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get(key,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value),<sp/>maxlen);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trasnfer<sp/>a<sp/>frame<sp/>(with<sp/>error<sp/>correction<sp/>and<sp/>response)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>transfer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff1,<sp/>uint16_t<sp/>len1,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff2,<sp/>uint16_t<sp/>len2,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff3,<sp/>uint16_t<sp/>len3,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*rxbuff,<sp/>uint16_t<sp/>rxlen);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>inline<sp/>versions<sp/>of<sp/>the<sp/>same<sp/>function<sp/>to<sp/>allow<sp/>efficient<sp/>frame<sp/>concatenation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>transfer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff1,<sp/>uint16_t<sp/>len1)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transfer(buff1,<sp/>len1,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>transfer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff1,<sp/>uint16_t<sp/>len1,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*rxbuff,<sp/>uint16_t<sp/>rxlen)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transfer(buff1,<sp/>len1,<sp/>NULL,<sp/>0,<sp/>rxbuff,<sp/>rxlen);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>transfer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff1,<sp/>uint16_t<sp/>len1,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buff2,<sp/>uint16_t<sp/>len2,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*rxbuff,<sp/>uint16_t<sp/>rxlen)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transfer(buff1,<sp/>len1,<sp/>buff2,<sp/>len2,<sp/>NULL,<sp/>0,<sp/>rxbuff,<sp/>rxlen);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>getBridgeVersion()</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bridgeVersion;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>TRANSFER_TIMEOUT<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>index;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timedRead(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dropAll();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>bridgeVersion;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>crcUpdate(uint8_t<sp/>c);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>crcReset();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>crcWrite();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>crcCheck(uint16_t<sp/>_CRC);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>CRC;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>CTRL_C<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Stream<sp/>&amp;stream;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>started;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>max_retries;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>subclass<sp/>uses<sp/>a<sp/>serial<sp/>port<sp/>Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classSerialBridgeClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSerialBridgeClass" kindref="compound">SerialBridgeClass</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classBridgeClass" kindref="compound">BridgeClass</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSerialBridgeClass" kindref="compound">SerialBridgeClass</ref>(HardwareSerial<sp/>&amp;_serial)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classBridgeClass" kindref="compound">BridgeClass</ref>(_serial),<sp/>serial(_serial)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>baudrate<sp/>=<sp/>BRIDGE_BAUDRATE)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>serial.begin(baudrate);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BridgeClass::begin();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>HardwareSerial<sp/>&amp;serial;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classSerialBridgeClass" kindref="compound">SerialBridgeClass</ref><sp/>Bridge;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>microcrontrollers<sp/>don&apos;t<sp/>start<sp/>the<sp/>bootloader<sp/>after<sp/>a<sp/>reset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>intended<sp/>to<sp/>let<sp/>the<sp/>microcontroller<sp/>erase<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flash<sp/>after<sp/>checking<sp/>a<sp/>specific<sp/>signal<sp/>coming<sp/>from<sp/>the<sp/>external</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>device<sp/>without<sp/>the<sp/>need<sp/>to<sp/>press<sp/>the<sp/>erase<sp/>button<sp/>on<sp/>the<sp/>board.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>purpose<sp/>is<sp/>to<sp/>enable<sp/>a<sp/>software<sp/>update<sp/>that<sp/>does<sp/>not<sp/>require</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>manual<sp/>interaction<sp/>with<sp/>the<sp/>board.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkForRemoteSketchUpdate(uint8_t<sp/>pin<sp/>=<sp/>7);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BRIDGE_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Console.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Process.h&gt;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="app/testdata/libraries/Bridge_1.6.3/Bridge/src/Bridge.h"/>
  </compounddef>
</doxygen>
