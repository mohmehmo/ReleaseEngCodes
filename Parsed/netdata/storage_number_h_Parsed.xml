<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/storage_number/storage_number.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_STORAGE_NUMBER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_STORAGE_NUMBER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETDATA_WITHOUT_LONG_DOUBLE</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>powl</name></cpp:macro> <cpp:value>pow</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>modfl</name></cpp:macro> <cpp:value>modf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llrintl</name></cpp:macro> <cpp:value>llrint</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>roundl</name></cpp:macro> <cpp:value>round</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqrtl</name></cpp:macro> <cpp:value>sqrt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copysignl</name></cpp:macro> <cpp:value>copysign</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtold</name></cpp:macro> <cpp:value>strtod</cpp:value></cpp:define>

<typedef>typedef <type><name>double</name></type> <name>calculated_number</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT</name></cpp:macro> <cpp:value>"%0.7f"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT_ZERO</name></cpp:macro> <cpp:value>"%0.0f"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT_AUTO</name></cpp:macro> <cpp:value>"%f"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_DOUBLE_MODIFIER</name></cpp:macro> <cpp:value>"f"</cpp:value></cpp:define>
<typedef>typedef <type><name>double</name></type> <name>LONG_DOUBLE</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// NETDATA_WITHOUT_LONG_DOUBLE</comment>

<typedef>typedef <type><name>long</name> <name>double</name></type> <name>calculated_number</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT</name></cpp:macro> <cpp:value>"%0.7Lf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT_ZERO</name></cpp:macro> <cpp:value>"%0.0Lf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALCULATED_NUMBER_FORMAT_AUTO</name></cpp:macro> <cpp:value>"%Lf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_DOUBLE_MODIFIER</name></cpp:macro> <cpp:value>"Lf"</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LONG_DOUBLE</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// NETDATA_WITHOUT_LONG_DOUBLE</comment>

<comment type="line">//typedef long long calculated_number;</comment>
<comment type="line">//#define CALCULATED_NUMBER_FORMAT "%lld"</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>collected_number</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLLECTED_NUMBER_FORMAT</name></cpp:macro> <cpp:value>"%lld"</cpp:value></cpp:define>

<comment type="block">/*
typedef long double collected_number;
#define COLLECTED_NUMBER_FORMAT "%0.7Lf"
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_modf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>modfl(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_llrint</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>llrintl(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_round</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>roundl(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_fabs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fabsl(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_pow</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>powl(x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_epsilon</name></cpp:macro> <cpp:value>(calculated_number)0.0000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_equal</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(calculated_number_fabs((a) - (b)) &lt; calculated_number_epsilon)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>calculated_number_isnumber</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(fpclassify(a) &amp; (FP_NAN|FP_INFINITE)))</cpp:value></cpp:define>

<typedef>typedef <type><name>uint32_t</name></type> <name>storage_number</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_NUMBER_FORMAT</name></cpp:macro> <cpp:value>"%u"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SN_EXISTS</name></cpp:macro>           <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define> <comment type="line">// the value exists</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SN_EXISTS_RESET</name></cpp:macro>     <cpp:value>(1 &lt;&lt; 25)</cpp:value></cpp:define> <comment type="line">// the value has been overflown</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SN_EXISTS_100</name></cpp:macro>       <cpp:value>(1 &lt;&lt; 26)</cpp:value></cpp:define> <comment type="line">// very large value (multipler is 100 instead of 10)</comment>

<comment type="line">// extract the flags</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_storage_number_flags</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((storage_number)(value)) &amp; (1 &lt;&lt; 24)) | (((storage_number)(value)) &amp; (1 &lt;&lt; 25)) | (((storage_number)(value)) &amp; (1 &lt;&lt; 26)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SN_EMPTY_SLOT</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>

<comment type="line">// checks</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>does_storage_number_exist</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((get_storage_number_flags(value) != 0)?1:0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>did_storage_number_reset</name><parameter_list>(<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((get_storage_number_flags(value) == SN_EXISTS_RESET)?1:0)</cpp:value></cpp:define>

<function_decl><type><name>storage_number</name></type> <name>pack_storage_number</name><parameter_list>(<parameter><decl><type><name>calculated_number</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>calculated_number</name></type> <name>unpack_storage_number</name><parameter_list>(<parameter><decl><type><name>storage_number</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>print_calculated_number</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>calculated_number</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">//                                          sign       div/mul    &lt;--- multiplier / divider ---&gt;     10/100       RESET      EXISTS     VALUE</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_NUMBER_POSITIVE_MAX_RAW</name></cpp:macro> <cpp:value>(storage_number)( (0 &lt;&lt; 31) | (1 &lt;&lt; 30) | (1 &lt;&lt; 29) | (1 &lt;&lt; 28) | (1&lt;&lt;27) | (1 &lt;&lt; 26) | (0 &lt;&lt; 25) | (1 &lt;&lt; 24) | 0x00ffffff )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_NUMBER_POSITIVE_MIN_RAW</name></cpp:macro> <cpp:value>(storage_number)( (0 &lt;&lt; 31) | (0 &lt;&lt; 30) | (1 &lt;&lt; 29) | (1 &lt;&lt; 28) | (1&lt;&lt;27) | (0 &lt;&lt; 26) | (0 &lt;&lt; 25) | (1 &lt;&lt; 24) | 0x00000001 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_NUMBER_NEGATIVE_MAX_RAW</name></cpp:macro> <cpp:value>(storage_number)( (1 &lt;&lt; 31) | (0 &lt;&lt; 30) | (1 &lt;&lt; 29) | (1 &lt;&lt; 28) | (1&lt;&lt;27) | (0 &lt;&lt; 26) | (0 &lt;&lt; 25) | (1 &lt;&lt; 24) | 0x00000001 )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_NUMBER_NEGATIVE_MIN_RAW</name></cpp:macro> <cpp:value>(storage_number)( (1 &lt;&lt; 31) | (1 &lt;&lt; 30) | (1 &lt;&lt; 29) | (1 &lt;&lt; 28) | (1&lt;&lt;27) | (1 &lt;&lt; 26) | (0 &lt;&lt; 25) | (1 &lt;&lt; 24) | 0x00ffffff )</cpp:value></cpp:define>

<comment type="line">// accepted accuracy loss</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCURACY_LOSS_ACCEPTED_PERCENT</name></cpp:macro> <cpp:value>0.0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>accuracy_loss</name><parameter_list>(<parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((t1) == (t2) || (t1) == 0.0 || (t2) == 0.0) ? 0.0 : (100.0 - (((t1) &gt; (t2)) ? ((t2) * 100.0 / (t1) ) : ((t1) * 100.0 / (t2)))))</cpp:value></cpp:define>

<comment type="line">// Maximum acceptable rate of increase for counters. With a rate of 10% netdata can safely detect overflows with a</comment>
<comment type="line">// period of at least every other 10 samples.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INCREMENTAL_PERCENT_RATE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_STORAGE_NUMBER_H */</comment>
</unit>
