<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/web/server/web_client.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_WEB_CLIENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_CLIENT_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnetdata/libnetdata.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETDATA_WITH_ZLIB</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>web_enable_gzip</name></decl>,
        <decl><type ref="prev"/><name>web_gzip_level</name></decl>,
        <decl><type ref="prev"/><name>web_gzip_strategy</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_WITH_ZLIB */</comment>

<comment type="line">// HTTP_CODES 2XX Success</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_OK</name></cpp:macro>            <cpp:value>200</cpp:value></cpp:define>

<comment type="line">// HTTP_CODES 3XX Redirections</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_MOVED_PERM</name></cpp:macro>    <cpp:value>301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_REDIR_TEMP</name></cpp:macro>    <cpp:value>307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_REDIR_PERM</name></cpp:macro>    <cpp:value>308</cpp:value></cpp:define>

<comment type="line">// HTTP_CODES 4XX Client Errors</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_BAD_REQUEST</name></cpp:macro>   <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_FORBIDDEN</name></cpp:macro>     <cpp:value>403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_NOT_FOUND</name></cpp:macro>     <cpp:value>404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_PRECOND_FAIL</name></cpp:macro>  <cpp:value>412</cpp:value></cpp:define>

<comment type="line">// HTTP_CODES 5XX Server Errors</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_INTERNAL_SERVER_ERROR</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESP_BACKEND_FETCH_FAILED</name></cpp:macro> <cpp:value>503</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>respect_web_browser_do_not_track_policy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>web_x_frame_options</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>web_client_mode</name> <block>{
    <decl><name>WEB_CLIENT_MODE_NORMAL</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_MODE_FILECOPY</name>    <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_MODE_OPTIONS</name>     <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_MODE_STREAM</name>      <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>WEB_CLIENT_MODE</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>HTTP_VALIDATION_OK</name></decl>,
    <decl><name>HTTP_VALIDATION_NOT_SUPPORTED</name></decl>,
    <decl><name>HTTP_VALIDATION_MALFORMED_URL</name></decl>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_HTTPS</name></cpp:ifdef>
    <decl><name>HTTP_VALIDATION_INCOMPLETE</name></decl>,
    <decl><name>HTTP_VALIDATION_REDIRECT</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <name>HTTP_VALIDATION_INCOMPLETE</name></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></enum></type> <name>HTTP_VALIDATION</name>;</typedef>

<typedef>typedef <type><enum>enum <name>web_client_flags</name> <block>{
    <decl><name>WEB_CLIENT_FLAG_DEAD</name>              <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <comment type="line">// if set, this client is dead</comment>

    <decl><name>WEB_CLIENT_FLAG_KEEPALIVE</name>         <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>, <comment type="line">// if set, the web client will be re-used</comment>

    <decl><name>WEB_CLIENT_FLAG_WAIT_RECEIVE</name>      <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>, <comment type="line">// if set, we are waiting more input data</comment>
    <decl><name>WEB_CLIENT_FLAG_WAIT_SEND</name>         <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>, <comment type="line">// if set, we have data to send to the client</comment>

    <decl><name>WEB_CLIENT_FLAG_DO_NOT_TRACK</name>      <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>, <comment type="line">// if set, we should not set cookies on this client</comment>
    <decl><name>WEB_CLIENT_FLAG_TRACKING_REQUIRED</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>, <comment type="line">// if set, we need to send cookies</comment>

    <decl><name>WEB_CLIENT_FLAG_TCP_CLIENT</name>        <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>, <comment type="line">// if set, the client is using a TCP socket</comment>
    <decl><name>WEB_CLIENT_FLAG_UNIX_CLIENT</name>       <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>, <comment type="line">// if set, the client is using a UNIX socket</comment>

    <decl><name>WEB_CLIENT_FLAG_DONT_CLOSE_SOCKET</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal></expr></init></decl>,  <comment type="line">// don't close the socket when cleaning up (static-threaded web server)</comment>
}</block></enum></type> <name>WEB_CLIENT_FLAGS</name>;</typedef>

<comment type="line">//#ifdef HAVE_C___ATOMIC</comment>
<comment type="line">//#define web_client_flag_check(w, flag) (__atomic_load_n(&amp;((w)-&gt;flags), __ATOMIC_SEQ_CST) &amp; flag)</comment>
<comment type="line">//#define web_client_flag_set(w, flag)   __atomic_or_fetch(&amp;((w)-&gt;flags), flag, __ATOMIC_SEQ_CST)</comment>
<comment type="line">//#define web_client_flag_clear(w, flag) __atomic_and_fetch(&amp;((w)-&gt;flags), ~flag, __ATOMIC_SEQ_CST)</comment>
<comment type="line">//#else</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_flag_check</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;flags &amp; (flag))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_flag_set</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(w)-&gt;flags |= flag</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_flag_clear</name><parameter_list>(<parameter><type><name>w</name></type></parameter>, <parameter><type><name>flag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(w)-&gt;flags &amp;= ~flag</cpp:value></cpp:define>
<comment type="line">//#endif</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEB_CLIENT_IS_DEAD</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_DEAD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_check_dead</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_DEAD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_has_keepalive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_KEEPALIVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_enable_keepalive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_KEEPALIVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_disable_keepalive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_clear(w, WEB_CLIENT_FLAG_KEEPALIVE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_has_donottrack</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_DO_NOT_TRACK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_enable_donottrack</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_DO_NOT_TRACK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_disable_donottrack</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_clear(w, WEB_CLIENT_FLAG_DO_NOT_TRACK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_has_tracking_required</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_TRACKING_REQUIRED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_enable_tracking_required</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_TRACKING_REQUIRED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_disable_tracking_required</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_clear(w, WEB_CLIENT_FLAG_TRACKING_REQUIRED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_has_wait_receive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_WAIT_RECEIVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_enable_wait_receive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_WAIT_RECEIVE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_disable_wait_receive</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_clear(w, WEB_CLIENT_FLAG_WAIT_RECEIVE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_has_wait_send</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_WAIT_SEND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_enable_wait_send</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_WAIT_SEND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_disable_wait_send</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_clear(w, WEB_CLIENT_FLAG_WAIT_SEND)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_set_tcp</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_TCP_CLIENT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_set_unix</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_set(w, WEB_CLIENT_FLAG_UNIX_CLIENT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_check_unix</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_UNIX_CLIENT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_check_tcp</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_TCP_CLIENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_is_corkable</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>web_client_flag_check(w, WEB_CLIENT_FLAG_TCP_CLIENT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_REQUEST_URL_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_RESPONSE_ZLIB_CHUNK_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_RESPONSE_HEADER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_REQUEST_COOKIE_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_REQUEST_ORIGIN_HEADER_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_RESPONSE_INITIAL_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_REQUEST_RECEIVE_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_REQUEST_MAX_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<struct>struct <name>response</name> <block>{
    <decl_stmt><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>                 <comment type="line">// our response header</comment>
    <decl_stmt><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>header_output</name></decl>;</decl_stmt>          <comment type="line">// internal use</comment>
    <decl_stmt><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>                   <comment type="line">// our response data buffer</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>                       <comment type="line">// the HTTP response code</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name></decl>;</decl_stmt>                    <comment type="line">// if non-zero, the excepted size of ifd (input of firecopy)</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sent</name></decl>;</decl_stmt>                    <comment type="line">// current data length sent to output</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>zoutput</name></decl>;</decl_stmt>                    <comment type="line">// if set to 1, web_client_send() will send compressed data</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETDATA_WITH_ZLIB</name></cpp:ifdef>
    <decl_stmt><decl><type><name>z_stream</name></type> <name>zstream</name></decl>;</decl_stmt>               <comment type="line">// zlib stream for sending compressed output to client</comment>
    <decl_stmt><decl><type><name>Bytef</name></type> <name><name>zbuffer</name><index>[<expr><name>NETDATA_WEB_RESPONSE_ZLIB_CHUNK_SIZE</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// temporary buffer for storing compressed output</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zsent</name></decl>;</decl_stmt>                   <comment type="line">// the compressed bytes we have sent to the client</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zhave</name></decl>;</decl_stmt>                   <comment type="line">// the compressed bytes that we have received from zlib</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>zinitialized</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_WITH_ZLIB */</comment>

}</block>;</struct>

<struct>struct <name>web_client</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>WEB_CLIENT_FLAGS</name></type> <name>flags</name></decl>;</decl_stmt>         <comment type="line">// status flags for the client</comment>
    <decl_stmt><decl><type><name>WEB_CLIENT_MODE</name></type> <name>mode</name></decl>;</decl_stmt>           <comment type="line">// the operational mode of the client</comment>
    <decl_stmt><decl><type><name>WEB_CLIENT_ACL</name></type> <name>acl</name></decl>;</decl_stmt>             <comment type="line">// the access list of the client</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>port_acl</name></decl>;</decl_stmt>                   <comment type="line">// the operations permitted on the port the client connected to</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>auth_bearer_token</name></decl>;</decl_stmt>        <comment type="line">// the Bearer auth token (if sent)</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_parse_tries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_parse_last_size</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tcp_cork</name></decl>;</decl_stmt>                   <comment type="line">// 1 = we have a cork on the socket</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>ifd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ofd</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>client_ip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line">// Defined buffer sizes include null-terminators</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>client_port</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>server_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>client_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>decoded_url</name><index>[<expr><name>NETDATA_WEB_REQUEST_URL_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// we decode the URL in this buffer</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>decoded_query_string</name><index>[<expr><name>NETDATA_WEB_REQUEST_URL_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// we decode the Query String in this buffer</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>last_url</name><index>[<expr><name>NETDATA_WEB_REQUEST_URL_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>       <comment type="line">// we keep a copy of the decoded URL here</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>url_path_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>separator</name></decl>;</decl_stmt> <comment type="line">// This value can be either '?' or 'f'</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url_search_path</name></decl>;</decl_stmt> <comment type="line">//A pointer to the search path sent by the client</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_in</name></decl>, <decl><type ref="prev"/><name>tv_ready</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>cookie1</name><index>[<expr><name>NETDATA_WEB_REQUEST_COOKIE_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>cookie2</name><index>[<expr><name>NETDATA_WEB_REQUEST_COOKIE_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>origin</name><index>[<expr><name>NETDATA_WEB_REQUEST_ORIGIN_HEADER_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_agent</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>response</name></name></type> <name>response</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>stats_received_bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>stats_sent_bytes</name></decl>;</decl_stmt>

    <comment type="line">// cache of web_client allocations</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>        <comment type="line">// maintain a linked list of web clients</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>        <comment type="line">// for the web servers that need it</comment>

    <comment type="line">// MULTI-THREADED WEB SERVER MEMBERS</comment>
    <decl_stmt><decl><type><name>netdata_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>        <comment type="line">// the thread servicing this client</comment>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>running</name></decl>;</decl_stmt>           <comment type="line">// 1 when the thread runs, 0 otherwise</comment>

    <comment type="line">// STATIC-THREADED WEB SERVER MEMBERS</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pollinfo_slot</name></decl>;</decl_stmt>           <comment type="line">// POLLINFO slot of the web client</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pollinfo_filecopy_slot</name></decl>;</decl_stmt>  <comment type="line">// POLLINFO slot of the file read</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_HTTPS</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>struct</name> <name>netdata_ssl</name></name></type> <name>ssl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<function_decl><type><specifier>extern</specifier> <name>uid_t</name></type> <name>web_files_uid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uid_t</name></type> <name>web_files_gid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>web_client_permission_denied</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>web_client_send</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>web_client_receive</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>web_client_read_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_process_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_data_options2string</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>mysendfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon/common.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
