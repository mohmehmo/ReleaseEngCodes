<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/simple_pattern/simple_pattern.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_SIMPLE_PATTERN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_SIMPLE_PATTERN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>


<typedef>typedef <type><enum>enum <block>{
    <decl><name>SIMPLE_PATTERN_EXACT</name></decl>,
    <decl><name>SIMPLE_PATTERN_PREFIX</name></decl>,
    <decl><name>SIMPLE_PATTERN_SUFFIX</name></decl>,
    <decl><name>SIMPLE_PATTERN_SUBSTRING</name></decl>
}</block></enum></type> <name>SIMPLE_PREFIX_MODE</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>SIMPLE_PATTERN</name>;</typedef>

<comment type="line">// create a simple_pattern from the string given</comment>
<comment type="line">// default_mode is used in cases where EXACT matches, without an asterisk,</comment>
<comment type="line">// should be considered PREFIX matches.</comment>
<function_decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>simple_pattern_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separators</name></decl></parameter>, <parameter><decl><type><name>SIMPLE_PREFIX_MODE</name></type> <name>default_mode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// test if string str is matched from the pattern and fill 'wildcarded' with the parts matched by '*'</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>simple_pattern_matches_extract</name><parameter_list>(<parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>wildcarded</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wildcarded_size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// test if string str is matched from the pattern</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>simple_pattern_matches</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>simple_pattern_matches_extract(list, str, NULL, 0)</cpp:value></cpp:define>

<comment type="line">// free a simple_pattern that was created with simple_pattern_create()</comment>
<comment type="line">// list can be NULL, in which case, this does nothing.</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>simple_pattern_free</name><parameter_list>(<parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>simple_pattern_dump</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>debug_type</name></decl></parameter>, <parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>simple_pattern_is_potential_name</name><parameter_list>(<parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> ;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_SIMPLE_PATTERN_H</comment>
</unit>
