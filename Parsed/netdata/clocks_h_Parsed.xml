<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/clocks/clocks.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_CLOCKS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_CLOCKS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_STRUCT_TIMESPEC</name></cpp:ifndef>
<struct>struct <name>timespec</name> <block>{
    <decl_stmt><decl><type><name>time_t</name></type> <name>tv_sec</name></decl>;</decl_stmt>  <comment type="block">/* seconds */</comment>
    <decl_stmt><decl><type><name>long</name></type>   <name>tv_nsec</name></decl>;</decl_stmt> <comment type="block">/* nanoseconds */</comment>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_CLOCKID_T</name></cpp:ifndef>
<typedef>typedef <type><name>int</name></type> <name>clockid_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>nsec_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>msec_t</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>usec_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>susec_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>heartbeat</name> <block>{
    <decl_stmt><decl><type><name>usec_t</name></type> <name>monotonic</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>usec_t</name></type> <name>realtime</name></decl>;</decl_stmt>
}</block></struct></type> <name>heartbeat_t</name>;</typedef>

<comment type="block">/* Linux value is as good as any other */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLOCK_REALTIME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_REALTIME</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLOCK_MONOTONIC</name></cpp:ifndef>
<comment type="block">/* fallback to CLOCK_REALTIME if not available */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_MONOTONIC</name></cpp:macro> <cpp:value>CLOCK_REALTIME</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CLOCK_BOOTTIME</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CLOCK_UPTIME</name></cpp:ifdef>
<comment type="block">/* CLOCK_BOOTTIME falls back to CLOCK_UPTIME on FreeBSD */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_BOOTTIME</name></cpp:macro> <cpp:value>CLOCK_UPTIME</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// CLOCK_UPTIME</comment>
<comment type="block">/* CLOCK_BOOTTIME falls back to CLOCK_MONOTONIC */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_BOOTTIME</name></cpp:macro>  <cpp:value>CLOCK_MONOTONIC</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// CLOCK_UPTIME</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// CLOCK_BOOTTIME</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CLOCK_GETTIME</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOCK_BOOTTIME_IS_AVAILABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="line">// required for /proc/uptime</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_CLOCK_GETTIME</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// CLOCK_BOOTTIME</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_MSEC</name></cpp:macro>   <cpp:value>1000000ULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_SEC</name></cpp:macro>    <cpp:value>1000000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEC_PER_USEC</name></cpp:macro>   <cpp:value>1000ULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEC_PER_SEC</name></cpp:macro>    <cpp:value>1000000ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_PER_SEC</name></cpp:macro>    <cpp:value>1000ULL</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USEC_PER_MS</name></cpp:macro>     <cpp:value>1000ULL</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_CLOCK_GETTIME</name></cpp:ifndef>
<comment type="block">/* Fallback function for POSIX.1-2001 clock_gettime() function.
 *
 * We use a realtime clock from gettimeofday(), this will
 * make systems without clock_gettime() support sensitive
 * to time jumps or hibernation/suspend side effects.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>clock_gettime</name><parameter_list>(<parameter><decl><type><name>clockid_t</name></type> <name>clk_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Three clocks are available (cf. man 3 clock_gettime):
 *
 * REALTIME clock (i.e. wall-clock):
 *  This clock is affected by discontinuous jumps in the system time
 *  (e.g., if the system administrator manually changes the clock), and by the incremental adjustments performed by adjtime(3) and NTP.
 *
 * MONOTONIC clock
 *  Clock that cannot be set and represents monotonic time since some unspecified starting point.
 *  This clock is not affected by discontinuous jumps in the system time
 *  (e.g., if the system administrator manually changes the clock), but is affected by the incremental adjustments performed by adjtime(3) and NTP.
 *  If not available on the system, this clock falls back to REALTIME clock.
 *
 * BOOTTIME clock
 *  Identical to  CLOCK_MONOTONIC, except it also includes any time that the system is suspended.
 *  This allows applications to get a suspend-aware monotonic clock without having to deal with the complications of CLOCK_REALTIME,
 *  which may have discontinuities if the time is changed using settimeofday(2).
 *  If not available on the system, this clock falls back to MONOTONIC clock.
 *
 * All now_*_timeval() functions fill the `struct timeval` with the time from the appropriate clock.
 * Those functions return 0 on success, -1 else with errno set appropriately.
 *
 * All now_*_sec() functions return the time in seconds from the approriate clock, or 0 on error.
 * All now_*_usec() functions return the time in microseconds from the approriate clock, or 0 on error.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>now_realtime_timeval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>time_t</name></type> <name>now_realtime_sec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>now_realtime_usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>now_monotonic_timeval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>time_t</name></type> <name>now_monotonic_sec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>now_monotonic_usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>now_boottime_timeval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>time_t</name></type> <name>now_boottime_sec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>now_boottime_usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>timeval_usec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>msec_t</name></type> <name>timeval_msec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>dt_usec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>susec_t</name></type> <name>dt_usec_signed</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>heartbeat_init</name><parameter_list>(<parameter><decl><type><name>heartbeat_t</name> <modifier>*</modifier></type><name>hb</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Sleeps until next multiple of tick using monotonic clock.
 * Returns elapsed time in microseconds since previous heartbeat
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>heartbeat_next</name><parameter_list>(<parameter><decl><type><name>heartbeat_t</name> <modifier>*</modifier></type><name>hb</name></decl></parameter>, <parameter><decl><type><name>usec_t</name></type> <name>tick</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Returns elapsed time in microseconds since last heartbeat */</comment>
<function_decl><type><specifier>extern</specifier> <name>usec_t</name></type> <name>heartbeat_monotonic_dt_to_now_usec</name><parameter_list>(<parameter><decl><type><name>heartbeat_t</name> <modifier>*</modifier></type><name>hb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sleep_usec</name><parameter_list>(<parameter><decl><type><name>usec_t</name></type> <name>usec</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * When running a binary with CLOCK_BOOTTIME defined on a system with a linux kernel older than Linux 2.6.39 the
 * clock_gettime(2) system call fails with EINVAL. In that case it must fall-back to CLOCK_MONOTONIC.
 */</comment>
<function_decl><type><name>void</name></type> <name>test_clock_boottime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>collected_number</name></type> <name>uptime_msec</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_CLOCKS_H */</comment>
</unit>
