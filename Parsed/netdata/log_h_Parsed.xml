<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/log/log.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_LOG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_LOG_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_WEB_BUFFER</name></cpp:macro>        <cpp:value>0x0000000000000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_WEB_CLIENT</name></cpp:macro>        <cpp:value>0x0000000000000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_LISTENER</name></cpp:macro>          <cpp:value>0x0000000000000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_WEB_DATA</name></cpp:macro>          <cpp:value>0x0000000000000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_OPTIONS</name></cpp:macro>           <cpp:value>0x0000000000000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_PROCNETDEV_LOOP</name></cpp:macro>   <cpp:value>0x0000000000000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_RRD_STATS</name></cpp:macro>         <cpp:value>0x0000000000000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_WEB_CLIENT_ACCESS</name></cpp:macro> <cpp:value>0x0000000000000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_TC_LOOP</name></cpp:macro>           <cpp:value>0x0000000000000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_DEFLATE</name></cpp:macro>           <cpp:value>0x0000000000000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CONFIG</name></cpp:macro>            <cpp:value>0x0000000000000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_PLUGINSD</name></cpp:macro>          <cpp:value>0x0000000000000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CHILDS</name></cpp:macro>            <cpp:value>0x0000000000001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_EXIT</name></cpp:macro>              <cpp:value>0x0000000000002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CHECKS</name></cpp:macro>            <cpp:value>0x0000000000004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_NFACCT_LOOP</name></cpp:macro>       <cpp:value>0x0000000000008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_PROCFILE</name></cpp:macro>          <cpp:value>0x0000000000010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_RRD_CALLS</name></cpp:macro>         <cpp:value>0x0000000000020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_DICTIONARY</name></cpp:macro>        <cpp:value>0x0000000000040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_MEMORY</name></cpp:macro>            <cpp:value>0x0000000000080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CGROUP</name></cpp:macro>            <cpp:value>0x0000000000100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_REGISTRY</name></cpp:macro>          <cpp:value>0x0000000000200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_VARIABLES</name></cpp:macro>         <cpp:value>0x0000000000400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_HEALTH</name></cpp:macro>            <cpp:value>0x0000000000800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_CONNECT_TO</name></cpp:macro>        <cpp:value>0x0000000001000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_RRDHOST</name></cpp:macro>           <cpp:value>0x0000000002000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_LOCKS</name></cpp:macro>             <cpp:value>0x0000000004000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_BACKEND</name></cpp:macro>           <cpp:value>0x0000000008000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_STATSD</name></cpp:macro>            <cpp:value>0x0000000010000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_POLLFD</name></cpp:macro>            <cpp:value>0x0000000020000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_STREAM</name></cpp:macro>            <cpp:value>0x0000000040000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_RRDENGINE</name></cpp:macro>         <cpp:value>0x0000000100000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_SYSTEM</name></cpp:macro>            <cpp:value>0x8000000000000000</cpp:value></cpp:define>

<comment type="line">//#define DEBUG (D_WEB_CLIENT_ACCESS|D_LISTENER|D_RRD_STATS)</comment>
<comment type="line">//#define DEBUG 0xffffffff</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>web_server_is_multithreaded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>debug_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>program_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>stdaccess_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>stdaccess</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stdaccess_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stderr_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stdout_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>facility_log</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>access_log_syslog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>error_log_syslog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>output_log_syslog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>time_t</name></type> <name>error_log_throttle_period</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>error_log_errors_per_period</name></decl>, <decl><type ref="prev"/><name>error_log_errors_per_period_backup</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>error_log_limit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>reset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>open_all_log_files</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>reopen_all_log_files</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>debug_dummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error_log_limit_reset</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { error_log_errors_per_period = error_log_errors_per_period_backup; error_log_limit(1); } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error_log_limit_unlimited</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { \
        error_log_limit_reset(); \
        error_log_errors_per_period = ((error_log_errors_per_period_backup * 10) &lt; 10000) ? 10000 : (error_log_errors_per_period_backup * 10); \
    } while(0)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETDATA_INTERNAL_CHECKS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if(unlikely(debug_flags &amp; type)) debug_int(__FILE__, __FUNCTION__, __LINE__, ##args); } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>debug_dummy()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>info</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>info_int(__FILE__, __FUNCTION__, __LINE__, ##args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infoerr</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>error_int("INFO", __FILE__, __FUNCTION__, __LINE__, ##args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>error_int("ERROR", __FILE__, __FUNCTION__, __LINE__, ##args)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fatal</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>fatal_int(__FILE__, __FUNCTION__, __LINE__, ##args)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>send_statistics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>debug_int</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>4<operator>,</operator> 5</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>info_int</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>4<operator>,</operator> 5</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>error_int</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>5<operator>,</operator> 6</function_decl>)<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>fatal_int</name><argument_list>( <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>function</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>line</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument> )</argument_list> <name>NORETURN</name> <name>PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>log_access</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_LOG_H */</comment>
</unit>
