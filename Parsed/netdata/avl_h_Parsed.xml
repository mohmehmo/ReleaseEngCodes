<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/avl/avl.h"><comment type="line">// SPDX-License-Identifier: LGPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_AVL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_AVL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<comment type="block">/* Maximum AVL tree height. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AVL_MAX_HEIGHT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVL_MAX_HEIGHT</name></cpp:macro> <cpp:value>92</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AVL_WITHOUT_PTHREADS</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<comment type="line">// #define AVL_LOCK_WITH_MUTEX 1</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AVL_LOCK_WITH_MUTEX</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVL_LOCK_INITIALIZER</name></cpp:macro> <cpp:value>NETDATA_MUTEX_INITIALIZER</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AVL_LOCK_WITH_MUTEX */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVL_LOCK_INITIALIZER</name></cpp:macro> <cpp:value>NETDATA_RWLOCK_INITIALIZER</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AVL_LOCK_WITH_MUTEX */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AVL_WITHOUT_PTHREADS */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVL_LOCK_INITIALIZER</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AVL_WITHOUT_PTHREADS */</comment>

<comment type="block">/* Data structures */</comment>

<comment type="block">/* One element of the AVL tree */</comment>
<typedef>typedef <type><struct>struct <name>avl</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>avl</name></name> <modifier>*</modifier></type><name><name>avl_link</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Subtrees. */</comment>
    <decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>avl_balance</name></decl>;</decl_stmt>       <comment type="block">/* Balance factor. */</comment>
}</block></struct></type> <name>avl</name>;</typedef>

<comment type="block">/* An AVL tree */</comment>
<typedef>typedef <type><struct>struct <name>avl_tree</name> <block>{
    <decl_stmt><decl><type><name>avl</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>avl_tree</name>;</typedef>

<typedef>typedef <type><struct>struct <name>avl_tree_lock</name> <block>{
    <decl_stmt><decl><type><name>avl_tree</name></type> <name>avl_tree</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AVL_WITHOUT_PTHREADS</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AVL_LOCK_WITH_MUTEX</name></cpp:ifdef>
    <decl_stmt><decl><type><name>netdata_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* AVL_LOCK_WITH_MUTEX */</comment>
    <decl_stmt><decl><type><name>netdata_rwlock_t</name></type> <name>rwlock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AVL_LOCK_WITH_MUTEX */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AVL_WITHOUT_PTHREADS */</comment>
}</block></struct></type> <name>avl_tree_lock</name>;</typedef>

<comment type="block">/* Public methods */</comment>

<comment type="block">/* Insert element a into the AVL tree t
 * returns the added element a, or a pointer the
 * element that is equal to a (as returned by t-&gt;compar())
 * a is linked directly to the tree, so it has to
 * be properly allocated by the caller.
 */</comment>
<decl_stmt><decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_insert_lock</name><argument_list>(<argument><expr><name>avl_tree_lock</name> <operator>*</operator><name>tree</name></expr></argument>, <argument><expr><name>avl</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list> <name>NEVERNULL</name> <name>WARNUNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_insert</name><argument_list>(<argument><expr><name>avl_tree</name> <operator>*</operator><name>tree</name></expr></argument>, <argument><expr><name>avl</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list> <name>NEVERNULL</name> <name>WARNUNUSED</name></decl>;</decl_stmt>

<comment type="block">/* Remove an element a from the AVL tree t
 * returns a pointer to the removed element
 * or NULL if an element equal to a is not found
 * (equal as returned by t-&gt;compar())
 */</comment>
<decl_stmt><decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_remove_lock</name><argument_list>(<argument><expr><name>avl_tree_lock</name> <operator>*</operator><name>tree</name></expr></argument>, <argument><expr><name>avl</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list> <name>WARNUNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_remove</name><argument_list>(<argument><expr><name>avl_tree</name> <operator>*</operator><name>tree</name></expr></argument>, <argument><expr><name>avl</name> <operator>*</operator><name>item</name></expr></argument>)</argument_list> <name>WARNUNUSED</name></decl>;</decl_stmt>

<comment type="block">/* Find the element into the tree that equal to a
 * (equal as returned by t-&gt;compar())
 * returns NULL is no element is equal to a
 */</comment>
<function_decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_search_lock</name><parameter_list>(<parameter><decl><type><name>avl_tree_lock</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>avl</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>avl</name> <modifier>*</modifier></type><name>avl_search</name><parameter_list>(<parameter><decl><type><name>avl_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>avl</name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Initialize the avl_tree_lock
 */</comment>
<function_decl><type><name>void</name></type> <name>avl_init_lock</name><parameter_list>(<parameter><decl><type><name>avl_tree_lock</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>avl_init</name><parameter_list>(<parameter><decl><type><name>avl_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compar</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>avl_traverse_lock</name><parameter_list>(<parameter><decl><type><name>avl_tree_lock</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>avl_traverse</name><parameter_list>(<parameter><decl><type><name>avl_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* avl.h */</comment>
</unit>
