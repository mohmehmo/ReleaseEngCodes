<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/os.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_OS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_OS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnetdata.h"</cpp:file></cpp:include>

<comment type="line">// =====================================================================================================================</comment>
<comment type="line">// Linux</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>TARGET_OS</name> <operator>==</operator> <name>OS_LINUX</name><operator>)</operator></expr></cpp:if>


<comment type="line">// =====================================================================================================================</comment>
<comment type="line">// FreeBSD</comment>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>TARGET_OS</name> <operator>==</operator> <name>OS_FREEBSD</name><operator>)</operator></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_BY_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl_by_name(name, &amp;(var), sizeof(var))</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getsysctl_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_MIB</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mib</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl_mib(name, mib, sizeof(mib)/sizeof(int))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getsysctl_mib</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_SIMPLE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mib</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl_simple(name, mib, sizeof(mib)/sizeof(int), &amp;(var), sizeof(var))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_WSIZE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mib</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl_simple(name, mib, sizeof(mib)/sizeof(int), var, size)</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getsysctl_simple</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>miblen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_SIZE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mib</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl(name, mib, sizeof(mib)/sizeof(int), NULL, &amp;(size))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>mib</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl(name, mib, sizeof(mib)/sizeof(int), &amp;(var), &amp;(size))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getsysctl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mib</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>miblen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="line">// =====================================================================================================================</comment>
<comment type="line">// MacOS</comment>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>TARGET_OS</name> <operator>==</operator> <name>OS_MACOS</name><operator>)</operator></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETSYSCTL_BY_NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getsysctl_by_name(name, &amp;(var), sizeof(var))</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getsysctl_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="line">// =====================================================================================================================</comment>
<comment type="line">// unknown O/S</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> unsupported operating system</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="line">// =====================================================================================================================</comment>
<comment type="line">// common for all O/S</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>processors</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>long</name></type> <name>get_system_cpus</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>pid_t</name></type> <name>pid_max</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>pid_t</name></type> <name>get_system_pid_max</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>system_hz</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>get_system_HZ</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_OS_H</comment>
</unit>
