<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/buffer/buffer.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_WEB_BUFFER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_BUFFER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WEB_DATA_LENGTH_INCREASE_STEP</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>web_buffer</name> <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>        	<comment type="line">// allocation size of buffer, in bytes</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>     		<comment type="line">// current data length in buffer, in bytes</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>   		<comment type="line">// the buffer itself</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>contenttype</name></decl>;</decl_stmt>	<comment type="line">// the content type of the data in the buffer</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>options</name></decl>;</decl_stmt>		<comment type="line">// options related to the content</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>date</name></decl>;</decl_stmt>    		<comment type="line">// the timestamp this content has been generated</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>expires</name></decl>;</decl_stmt>			<comment type="line">// the timestamp this content expires</comment>
}</block></struct></type> <name>BUFFER</name>;</typedef>

<comment type="line">// options</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WB_CONTENT_CACHEABLE</name></cpp:macro>            <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WB_CONTENT_NO_CACHEABLE</name></cpp:macro>         <cpp:value>2</cpp:value></cpp:define>

<comment type="line">// content-types</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_JSON</name></cpp:macro>             <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TEXT_PLAIN</name></cpp:macro>                   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TEXT_HTML</name></cpp:macro>                    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_X_JAVASCRIPT</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TEXT_CSS</name></cpp:macro>                     <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TEXT_XML</name></cpp:macro>                     <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_XML</name></cpp:macro>              <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_TEXT_XSL</name></cpp:macro>                     <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_OCTET_STREAM</name></cpp:macro>     <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_X_FONT_TRUETYPE</name></cpp:macro>  <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_X_FONT_OPENTYPE</name></cpp:macro>  <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_FONT_WOFF</name></cpp:macro>        <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_FONT_WOFF2</name></cpp:macro>       <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_APPLICATION_VND_MS_FONTOBJ</name></cpp:macro>   <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_SVG_XML</name></cpp:macro>                <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_PNG</name></cpp:macro>                    <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_JPG</name></cpp:macro>                    <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_GIF</name></cpp:macro>                    <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_XICON</name></cpp:macro>                  <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_ICNS</name></cpp:macro>                   <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_IMAGE_BMP</name></cpp:macro>                    <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CT_PROMETHEUS</name></cpp:macro>                   <cpp:value>22</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffer_cacheable</name><parameter_list>(<parameter><type><name>wb</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>do { (wb)-&gt;options |= WB_CONTENT_CACHEABLE;    if((wb)-&gt;options &amp; WB_CONTENT_NO_CACHEABLE) (wb)-&gt;options &amp;= ~WB_CONTENT_NO_CACHEABLE; } while(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffer_no_cacheable</name><parameter_list>(<parameter><type><name>wb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (wb)-&gt;options |= WB_CONTENT_NO_CACHEABLE; if((wb)-&gt;options &amp; WB_CONTENT_CACHEABLE)    (wb)-&gt;options &amp;= ~WB_CONTENT_CACHEABLE;  (wb)-&gt;expires = 0; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffer_strlen</name><parameter_list>(<parameter><type><name>wb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((wb)-&gt;len)</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer_tostring</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>buffer_flush</name><parameter_list>(<parameter><type><name>wb</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>wb-&gt;buffer[(wb)-&gt;len = 0] = '\0'</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_reset</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_strcat</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_rrd_value</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>calculated_number</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_date</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hours</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minutes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_jsdate</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hours</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minutes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>BUFFER</name> <modifier>*</modifier></type><name>buffer_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_free</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_increase</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>free_size_required</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_snprintf</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>3<operator>,</operator> 4</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_vsprintf</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_sprintf</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator>3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_strcat_htmlescape</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_char_replace</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>to</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>print_number_lu_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>uvalue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>print_number_llu_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uvalue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>print_number_llu_r_smart</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uvalue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>buffer_print_llu</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>wb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uvalue</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>buffer_need_bytes</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needed_free_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>needed_free_size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>buffer_increase</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>needed_free_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_WEB_BUFFER_H */</comment>
</unit>
