<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/web/server/web_client_cache.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_WEB_CLIENT_CACHE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_CLIENT_CACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnetdata/libnetdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"web_client.h"</cpp:file></cpp:include>

<struct>struct <name>clients_cache</name> <block>{
    <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>used</name></decl>;</decl_stmt>    <comment type="line">// the structures of the currently connected clients</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>used_count</name></decl>;</decl_stmt>          <comment type="line">// the count the currently connected clients</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>avail</name></decl>;</decl_stmt>   <comment type="line">// the cached structures, available for future clients</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>avail_count</name></decl>;</decl_stmt>         <comment type="line">// the number of cached structures</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>reused</name></decl>;</decl_stmt>              <comment type="line">// the number of re-uses</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>allocated</name></decl>;</decl_stmt>           <comment type="line">// the number of allocations</comment>
}</block>;</struct>

<extern>extern __thread struct clients_cache web_clients_cache;</extern>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>web_client_get_from_cache_or_allocate</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_cache_destroy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_cache_verify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"web_server.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_WEB_CLIENT_CACHE_H</comment>
</unit>
