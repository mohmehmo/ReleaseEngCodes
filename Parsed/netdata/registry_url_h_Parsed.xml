<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/registry/registry_url.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_REGISTRY_URL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_REGISTRY_URL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"registry_internals.h"</cpp:file></cpp:include>

<comment type="line">// ----------------------------------------------------------------------------</comment>
<comment type="line">// URL structures</comment>
<comment type="line">// Save memory by de-duplicating URLs</comment>
<comment type="line">// so instead of storing URLs all over the place</comment>
<comment type="line">// we store them here and we keep pointers elsewhere</comment>

<struct>struct <name>registry_url</name> <block>{
    <decl_stmt><decl><type><name>avl</name></type> <name>avl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt>  <comment type="line">// the index hash</comment>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>links</name></decl>;</decl_stmt> <comment type="line">// the number of links to this URL - when none is left, we free it</comment>

    <decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name></decl>;</decl_stmt>   <comment type="line">// the length of the URL in bytes</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>url</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="line">// the URL - dynamically allocated to more size</comment>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>registry_url</name></name></type> <name>REGISTRY_URL</name>;</typedef>

<comment type="line">// REGISTRY_URL INDEX</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>registry_url_compare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>REGISTRY_URL</name> <modifier>*</modifier></type><name>registry_url_index_del</name><argument_list>(<argument><expr><name>REGISTRY_URL</name> <operator>*</operator><name>u</name></expr></argument>)</argument_list> <name>WARNUNUSED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>REGISTRY_URL</name> <modifier>*</modifier></type><name>registry_url_index_add</name><argument_list>(<argument><expr><name>REGISTRY_URL</name> <operator>*</operator><name>u</name></expr></argument>)</argument_list> <name>NEVERNULL</name> <name>WARNUNUSED</name></decl>;</decl_stmt>

<comment type="line">// REGISTRY_URL MANAGEMENT</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>REGISTRY_URL</name> <modifier>*</modifier></type><name>registry_url_get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>url</name></expr></argument>, <argument><expr><name>size_t</name> <name>urllen</name></expr></argument>)</argument_list> <name>NEVERNULL</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>registry_url_link</name><parameter_list>(<parameter><decl><type><name>REGISTRY_URL</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>registry_url_unlink</name><parameter_list>(<parameter><decl><type><name>REGISTRY_URL</name> <modifier>*</modifier></type><name>u</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_REGISTRY_URL_H</comment>
</unit>
