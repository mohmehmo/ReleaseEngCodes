<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/health/health.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_HEALTH_LIB</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_HEALTH_LIB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_ALARM_KEY</name></cpp:macro> <cpp:value>"alarm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_TEMPLATE_KEY</name></cpp:macro> <cpp:value>"template"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_CONTEXT_KEY</name></cpp:macro> <cpp:value>"context"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_CHART_KEY</name></cpp:macro> <cpp:value>"chart"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_HOST_KEY</name></cpp:macro> <cpp:value>"hosts"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_OS_KEY</name></cpp:macro> <cpp:value>"os"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_FAMILIES_KEY</name></cpp:macro> <cpp:value>"families"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_LOOKUP_KEY</name></cpp:macro> <cpp:value>"lookup"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEALTH_CALC_KEY</name></cpp:macro> <cpp:value>"calc"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>silencer</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alarms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>alarms_pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hosts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>hosts_pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contexts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>contexts_pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>charts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>charts_pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>families</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>families_pattern</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>silencer</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>SILENCER</name>;</typedef>

<typedef>typedef <type><enum>enum <name>silence_type</name> <block>{
    <decl><name>STYPE_NONE</name></decl>,
    <decl><name>STYPE_DISABLE_ALARMS</name></decl>,
    <decl><name>STYPE_SILENCE_NOTIFICATIONS</name></decl>
}</block></enum></type> <name>SILENCE_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>silencers</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>all_alarms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SILENCE_TYPE</name></type> <name>stype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SILENCER</name> <modifier>*</modifier></type><name>silencers</name></decl>;</decl_stmt>
}</block></struct></type> <name>SILENCERS</name>;</typedef>

<decl_stmt><decl><type><name>SILENCERS</name> <modifier>*</modifier></type><name>silencers</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>SILENCER</name> <modifier>*</modifier></type><name>create_silencer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>health_silencers_json_read_callback</name><parameter_list>(<parameter><decl><type><name>JSON_ENTRY</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>health_silencers_add</name><parameter_list>(<parameter><decl><type><name>SILENCER</name> <modifier>*</modifier></type><name>silencer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>SILENCER</name> <modifier>*</modifier></type> <name>health_silencers_addparam</name><parameter_list>(<parameter><decl><type><name>SILENCER</name> <modifier>*</modifier></type><name>silencer</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>health_initialize_global_silencers</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
