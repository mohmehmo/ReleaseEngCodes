<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/json/jsmn.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__JSMN_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__JSMN_H_</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<comment type="block" format="doxygen">/**
 * JSON type identifier. Basic types are:
 * 	o Object
 * 	o Array
 * 	o String
 * 	o Other primitive: number, boolean (true/false) or null
 */</comment>
<typedef>typedef <type><enum>enum <block>{
    <decl><name>JSMN_PRIMITIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>JSMN_OBJECT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>JSMN_ARRAY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>JSMN_STRING</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block></enum></type> <name>jsmntype_t</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
    <comment type="block">/* Not enough tokens were provided */</comment>
            <decl><name>JSMN_ERROR_NOMEM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
    <comment type="block">/* Invalid character inside JSON string */</comment>
            <decl><name>JSMN_ERROR_INVAL</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
    <comment type="block">/* The string is not a full JSON packet, more bytes expected */</comment>
            <decl><name>JSMN_ERROR_PART</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,
}</block></enum></type> <name>jsmnerr_t</name>;</typedef>

<comment type="block" format="doxygen">/**
 * JSON token description.
 *
 * @param		type	type (object, array, string etc.)
 * @param		start	start position in JSON data string
 * @param		end		end position in JSON data string
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>jsmntype_t</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>parent</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>jsmntok_t</name>;</typedef>

<comment type="block" format="doxygen">/**
 * JSON parser. Contains an array of token blocks available. Also stores
 * the string being parsed now and current position in that string
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl>;</decl_stmt> <comment type="block">/* offset in the JSON string */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>toknext</name></decl>;</decl_stmt> <comment type="block">/* next token to allocate */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>toksuper</name></decl>;</decl_stmt> <comment type="block">/* superior token node, e.g parent object or array */</comment>
}</block></struct></type> <name>jsmn_parser</name>;</typedef>

<comment type="block" format="doxygen">/**
 * Create JSON parser over an array of tokens
 */</comment>
<function_decl><type><name>void</name></type> <name>jsmn_init</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Run JSON parser. It parses a JSON data string into and array of tokens, each describing
 * a single JSON object.
 */</comment>
<function_decl><type><name>jsmnerr_t</name></type> <name>jsmn_parse</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
                     <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __JSMN_H_ */</comment></unit>
