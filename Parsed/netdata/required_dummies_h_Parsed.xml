<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/required_dummies.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_LIB_DUMMIES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_LIB_DUMMIES_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// callback required by fatal()</comment>
<function><type><name>void</name></type> <name>netdata_cleanup_and_exit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_statistics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>action</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>action_result</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>action_data</name></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<comment type="line">// callbacks required by popen()</comment>
<function><type><name>void</name></type> <name>signals_block</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name>signals_unblock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name>signals_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function><empty_stmt>;</empty_stmt>

<comment type="line">// callback required by eval()</comment>
<function><type><name>int</name></type> <name>health_variable_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rrdcalc</name></name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>calculated_number</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>variable</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<comment type="line">// required by get_system_cpus()</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>netdata_configured_host_prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// NETDATA_LIB_DUMMIES_H</comment>
</unit>
