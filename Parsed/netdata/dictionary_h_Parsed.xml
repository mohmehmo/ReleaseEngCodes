<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/dictionary/dictionary.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_DICTIONARY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_DICTIONARY_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<struct>struct <name>dictionary_stats</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>inserts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>deletes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>searches</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>entries</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>name_value</name> <block>{
    <decl_stmt><decl><type><name>avl</name></type> <name>avl</name></decl>;</decl_stmt>                <comment type="line">// the index - this has to be first!</comment>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt>          <comment type="line">// a simple hash to speed up searching</comment>
                            <comment type="line">// we first compare hashes, and only if the hashes are equal we do string comparisons</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>NAME_VALUE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>dictionary</name> <block>{
    <decl_stmt><decl><type><name>avl_tree</name></type> <name>values_index</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>dictionary_stats</name></name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>netdata_rwlock_t</name> <modifier>*</modifier></type><name>rwlock</name></decl>;</decl_stmt>
}</block></struct></type> <name>DICTIONARY</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_FLAG_DEFAULT</name></cpp:macro>                 <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_FLAG_SINGLE_THREADED</name></cpp:macro>         <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_FLAG_VALUE_LINK_DONT_CLONE</name></cpp:macro>   <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_FLAG_NAME_LINK_DONT_CLONE</name></cpp:macro>    <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DICTIONARY_FLAG_WITH_STATISTICS</name></cpp:macro>         <cpp:value>0x00000008</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>DICTIONARY</name> <modifier>*</modifier></type><name>dictionary_create</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>dictionary_destroy</name><parameter_list>(<parameter><decl><type><name>DICTIONARY</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>dictionary_set</name><argument_list>(<argument><expr><name>DICTIONARY</name> <operator>*</operator><name>dict</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>name</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>size_t</name> <name>value_len</name></expr></argument>)</argument_list> <name>NEVERNULL</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>dictionary_get</name><parameter_list>(<parameter><decl><type><name>DICTIONARY</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dictionary_del</name><parameter_list>(<parameter><decl><type><name>DICTIONARY</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dictionary_get_all</name><parameter_list>(<parameter><decl><type><name>DICTIONARY</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>dictionary_get_all_name_value</name><parameter_list>(<parameter><decl><type><name>DICTIONARY</name> <modifier>*</modifier></type><name>dict</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_DICTIONARY_H */</comment>
</unit>
