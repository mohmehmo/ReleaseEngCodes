<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/threads/threads.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_THREADS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_THREADS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>pid_t</name></type> <name>gettid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>NETDATA_THREAD_OPTION_DEFAULT</name>          <init>= <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
    <decl><name>NETDATA_THREAD_OPTION_JOINABLE</name>         <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
    <decl><name>NETDATA_THREAD_OPTION_DONT_LOG_STARTUP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
    <decl><name>NETDATA_THREAD_OPTION_DONT_LOG_CLEANUP</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
    <decl><name>NETDATA_THREAD_OPTION_DONT_LOG</name>         <init>= <expr><name>NETDATA_THREAD_OPTION_DONT_LOG_STARTUP</name><operator>|</operator><name>NETDATA_THREAD_OPTION_DONT_LOG_CLEANUP</name></expr></init></decl>,
}</block></enum></type> <name>NETDATA_THREAD_OPTIONS</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>netdata_thread_cleanup_push</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_cleanup_push(func, arg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>netdata_thread_cleanup_pop</name><parameter_list>(<parameter><type><name>execute</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pthread_cleanup_pop(execute)</cpp:value></cpp:define>

<typedef>typedef <type><name>pthread_t</name></type> <name>netdata_thread_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_THREAD_TAG_MAX</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>netdata_thread_tag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>netdata_threads_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>netdata_threads_init_after_fork</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>netdata_thread_create</name><parameter_list>(<parameter><decl><type><name>netdata_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>NETDATA_THREAD_OPTIONS</name></type> <name>options</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>netdata_thread_cancel</name><parameter_list>(<parameter><decl><type><name>netdata_thread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>netdata_thread_join</name><parameter_list>(<parameter><decl><type><name>netdata_thread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>netdata_thread_detach</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>netdata_thread_self</name></cpp:macro> <cpp:value>pthread_self</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>netdata_thread_testcancel</name></cpp:macro> <cpp:value>pthread_testcancel</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_THREADS_H</comment>
</unit>
