<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/collectors/proc.plugin/proc_self_mountinfo.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_PROC_SELF_MOUNTINFO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_PROC_SELF_MOUNTINFO_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_IS_DUMMY</name></cpp:macro>      <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_IS_REMOTE</name></cpp:macro>     <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_IS_BIND</name></cpp:macro>       <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_IS_SAME_DEV</name></cpp:macro>   <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_NO_STAT</name></cpp:macro>       <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_NO_SIZE</name></cpp:macro>       <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUNTINFO_READONLY</name></cpp:macro>      <cpp:value>0x00000040</cpp:value></cpp:define>

<struct>struct <name>mountinfo</name> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>                <comment type="line">// mount ID: unique identifier of the mount (may be reused after umount(2)).</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>parentid</name></decl>;</decl_stmt>          <comment type="line">// parent ID: ID of parent mount (or of self for the top of the mount tree).</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>major</name></decl>;</decl_stmt>    <comment type="line">// major:minor: value of st_dev for files on filesystem (see stat(2)).</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>minor</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>persistent_id</name></decl>;</decl_stmt>    <comment type="line">// a calculated persistent id for the mount point</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>persistent_id_hash</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>             <comment type="line">// root: root of the mount within the filesystem.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>root_hash</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mount_point</name></decl>;</decl_stmt>      <comment type="line">// mount point: mount point relative to the process's root.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mount_point_hash</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mount_options</name></decl>;</decl_stmt>    <comment type="line">// mount options: per-mount options.</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>optional_fields_count</name></decl>;</decl_stmt>
<comment type="block">/*
    char ***optional_fields; // optional fields: zero or more fields of the form "tag[:value]".
*/</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filesystem</name></decl>;</decl_stmt>       <comment type="line">// filesystem type: name of filesystem in the form "type[.subtype]".</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>filesystem_hash</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mount_source</name></decl>;</decl_stmt>     <comment type="line">// mount source: filesystem-specific information or "none".</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>mount_source_hash</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>super_options</name></decl>;</decl_stmt>    <comment type="line">// super options: per-superblock options.</comment>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>dev_t</name></type> <name>st_dev</name></decl>;</decl_stmt>           <comment type="line">// id of device as given by stat()</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>mountinfo_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>major</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>minor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>mountinfo_find_by_filesystem_mount_source</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filesystem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mount_source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>mountinfo_find_by_filesystem_super_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filesystem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>super_options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>mountinfo_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>mi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>mountinfo</name></name> <modifier>*</modifier></type><name>mountinfo_read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>do_statvfs</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_PROC_SELF_MOUNTINFO_H */</comment></unit>
