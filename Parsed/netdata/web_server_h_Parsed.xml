<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/web/server/web_server.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_WEB_SERVER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_WEB_SERVER_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnetdata/libnetdata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"web_client.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>API_LISTEN_PORT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_LISTEN_PORT</name></cpp:macro> <cpp:value>19999</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>API_LISTEN_BACKLOG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>API_LISTEN_BACKLOG</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>web_server_mode</name> <block>{
    <decl><name>WEB_SERVER_MODE_STATIC_THREADED</name></decl>,
    <decl><name>WEB_SERVER_MODE_NONE</name></decl>
}</block></enum></type> <name>WEB_SERVER_MODE</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_connections_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_connections_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_dashboard_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_dashboard_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_registry_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_registry_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_badges_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_badges_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_streaming_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_streaming_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_netdataconf_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_netdataconf_dns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>web_allow_mgmt_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type>             <name>web_allow_mgmt_dns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>WEB_SERVER_MODE</name></type> <name>web_server_mode</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>WEB_SERVER_MODE</name></type> <name>web_server_mode_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>web_server_mode_name</name><parameter_list>(<parameter><decl><type><name>WEB_SERVER_MODE</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>api_listen_sockets_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TIMEOUT_TO_RECEIVE_FIRST_WEB_REQUEST</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DISCONNECT_IDLE_WEB_CLIENTS_AFTER_SECONDS</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>web_client_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>web_client_first_request_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name></type> <name>web_client_streaming_rate_t</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEB_SERVER_INTERNALS</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <name>LISTEN_SOCKETS</name></type> <name>api_sockets</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_update_acl_matches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_server_log_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>web_client_initialize_connection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>web_client</name></name> <modifier>*</modifier></type><name>web_client_create_on_listenfd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>listener</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"web_client_cache.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// WEB_SERVER_INTERNALS</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"static/static-threaded.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon/common.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_WEB_SERVER_H */</comment>
</unit>
