<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/socket/socket.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_SOCKET_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_SOCKET_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAX_LISTEN_FDS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LISTEN_FDS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <name>web_client_acl</name> <block>{
    <decl><name>WEB_CLIENT_ACL_NONE</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_NOCHECK</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_DASHBOARD</name>   <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_REGISTRY</name>    <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_BADGE</name>       <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_MGMT</name>        <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_STREAMING</name>   <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_NETDATACONF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_SSL_OPTIONAL</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_SSL_FORCE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr></init></decl>,
    <decl><name>WEB_CLIENT_ACL_SSL_DEFAULT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></init></decl>
}</block></enum></type> <name>WEB_CLIENT_ACL</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_dashboard</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_DASHBOARD)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_registry</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_REGISTRY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_badges</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_BADGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_mgmt</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_MGMT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_stream</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_STREAMING)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_can_access_netdataconf</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;acl &amp; WEB_CLIENT_ACL_NETDATACONF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_is_using_ssl_optional</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;port_acl &amp; WEB_CLIENT_ACL_SSL_OPTIONAL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_is_using_ssl_force</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;port_acl &amp; WEB_CLIENT_ACL_SSL_FORCE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>web_client_is_using_ssl_default</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((w)-&gt;port_acl &amp; WEB_CLIENT_ACL_SSL_DEFAULT)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>listen_sockets</name> <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>              <comment type="line">// the config file to use</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config_section</name></decl>;</decl_stmt>         <comment type="line">// the netdata configuration section to read settings from</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_bind_to</name></decl>;</decl_stmt>        <comment type="line">// the default bind to configuration string</comment>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>default_port</name></decl>;</decl_stmt>              <comment type="line">// the default port to use</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>backlog</name></decl>;</decl_stmt>                        <comment type="line">// the default listen backlog to use</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>opened</name></decl>;</decl_stmt>                      <comment type="line">// the number of sockets opened</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>failed</name></decl>;</decl_stmt>                      <comment type="line">// the number of sockets attempted to open, but failed</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>fds</name><index>[<expr><name>MAX_LISTEN_FDS</name></expr>]</index></name></decl>;</decl_stmt>            <comment type="line">// the open sockets</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>fds_names</name><index>[<expr><name>MAX_LISTEN_FDS</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="line">// descriptions for the open sockets</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>fds_types</name><index>[<expr><name>MAX_LISTEN_FDS</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="line">// the socktype for the open sockets (SOCK_STREAM, SOCK_DGRAM)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name><name>fds_families</name><index>[<expr><name>MAX_LISTEN_FDS</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line">// the family of the open sockets (AF_UNIX, AF_INET, AF_INET6)</comment>
    <decl_stmt><decl><type><name>WEB_CLIENT_ACL</name></type> <name><name>fds_acl_flags</name><index>[<expr><name>MAX_LISTEN_FDS</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// the acl to apply to the open sockets (dashboard, badges, streaming, netdata.conf, management)</comment>
}</block></struct></type> <name>LISTEN_SOCKETS</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>strdup_client_description</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>listen_sockets_setup</name><parameter_list>(<parameter><decl><type><name>LISTEN_SOCKETS</name> <modifier>*</modifier></type><name>sockets</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>listen_sockets_close</name><parameter_list>(<parameter><decl><type><name>LISTEN_SOCKETS</name> <modifier>*</modifier></type><name>sockets</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>connect_to_this</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>definition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>connect_to_one_of</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>default_port</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>reconnects_counter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connected_to</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>connected_to_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_HTTPS</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>recv_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netdata_ssl</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>send_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>netdata_ssl</name></name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>recv_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>ssize_t</name></type> <name>send_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_setnonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_delnonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_setreuse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_setreuse_port</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reuse</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_enlarge_in</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sock_enlarge_out</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>connection_allowed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_host</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hostsize</name></decl></parameter>,
                              <parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>access_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_dns</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>accept_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ipsize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_port</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>portsize</name></decl></parameter>,
                         <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client_host</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hostsize</name></decl></parameter>, <parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>access_list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_dns</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_ACCEPT4</name></cpp:ifndef>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>accept4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>addrlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SOCK_NONBLOCK</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_NONBLOCK</name></cpp:macro> <cpp:value>00004000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* #ifndef SOCK_NONBLOCK */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SOCK_CLOEXEC</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCK_CLOEXEC</name></cpp:macro> <cpp:value>02000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* #ifndef SOCK_CLOEXEC */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* #ifndef HAVE_ACCEPT4 */</comment>


<comment type="line">// ----------------------------------------------------------------------------</comment>
<comment type="line">// poll() based listener</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLINFO_FLAG_SERVER_SOCKET</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLINFO_FLAG_CLIENT_SOCKET</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLINFO_FLAG_DONT_CLOSE</name></cpp:macro>    <cpp:value>0x00000004</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>poll</name></name></type> <name>POLLJOB</name>;</typedef>

<typedef>typedef <type><struct>struct <name>pollinfo</name> <block>{
    <decl_stmt><decl><type><name>POLLJOB</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>             <comment type="line">// the parent</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>slot</name></decl>;</decl_stmt>            <comment type="line">// the slot id</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>                 <comment type="line">// the file descriptor</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>socktype</name></decl>;</decl_stmt>           <comment type="line">// the client socket type</comment>
    <decl_stmt><decl><type><name>WEB_CLIENT_ACL</name></type> <name>port_acl</name></decl>;</decl_stmt> <comment type="line">// the access lists permitted on this web server port (it's -1 for client sockets)</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_ip</name></decl>;</decl_stmt>         <comment type="line">// Max INET6_ADDRSTRLEN bytes</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_port</name></decl>;</decl_stmt>       <comment type="line">// Max NI_MAXSERV bytes</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>client_host</name></decl>;</decl_stmt>       <comment type="line">// Max NI_MAXHOST bytes</comment>

    <decl_stmt><decl><type><name>time_t</name></type> <name>connected_t</name></decl>;</decl_stmt>     <comment type="line">// the time the socket connected</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>last_received_t</name></decl>;</decl_stmt> <comment type="line">// the time the socket last received data</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>last_sent_t</name></decl>;</decl_stmt>     <comment type="line">// the time the socket last sent data</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>recv_count</name></decl>;</decl_stmt>      <comment type="line">// the number of times the socket was ready for inbound traffic</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>send_count</name></decl>;</decl_stmt>      <comment type="line">// the number of times the socket was ready for outbound traffic</comment>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>         <comment type="line">// internal flags</comment>

    <comment type="line">// callbacks for this socket</comment>
    <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>del_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>rcv_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>snd_callback</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// the user data</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

    <comment type="line">// linking of free pollinfo structures</comment>
    <comment type="line">// for quickly finding the next available</comment>
    <comment type="line">// this is like a stack, it grows and shrinks</comment>
    <comment type="line">// (with gaps - lower empty slots are preferred)</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>POLLINFO</name>;</typedef>

<struct>struct <name>poll</name> <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>slots</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>used</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>min</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>limit</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>complete_request_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>idle_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>checks_every</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>time_t</name></type> <name>timer_milliseconds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_data</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>inf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>pollinfo</name></name> <modifier>*</modifier></type><name>first_free</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>access_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>allow_dns</name></decl>;</decl_stmt>

    <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>add_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>del_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>rcv_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>snd_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>tmr_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_data</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pollinfo_from_slot</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>slot</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;((p)-&gt;inf[(slot)]))</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>poll_default_snd_callback</name><parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>poll_default_rcv_callback</name><parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>poll_default_del_callback</name><parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>poll_default_add_callback</name><parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>POLLINFO</name> <modifier>*</modifier></type><name>poll_add_fd</name><parameter_list>(<parameter><decl><type><name>POLLJOB</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
                             , <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>
                             , <parameter><decl><type><name>int</name></type> <name>socktype</name></decl></parameter>
                             , <parameter><decl><type><name>WEB_CLIENT_ACL</name></type> <name>port_acl</name></decl></parameter>
                             , <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>
                             , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_ip</name></decl></parameter>
                             , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_port</name></decl></parameter>
                             , <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>client_host</name></decl></parameter>
                             , <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>add_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>
                             , <parameter><function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>del_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list></function_decl></parameter>
                             , <parameter><function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>rcv_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list></function_decl></parameter>
                             , <parameter><function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>snd_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list></function_decl></parameter>
                             , <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>
)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>poll_close_fd</name><parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>poll_events</name><parameter_list>(<parameter><decl><type><name>LISTEN_SOCKETS</name> <modifier>*</modifier></type><name>sockets</name></decl></parameter>
        , <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>add_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>
        , <parameter><function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>del_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>)</parameter_list></function_decl></parameter>
        , <parameter><function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>rcv_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list></function_decl></parameter>
        , <parameter><function_decl><type><name>int</name></type>   (<modifier>*</modifier><name>snd_callback</name>)<parameter_list>(<parameter><decl><type><name>POLLINFO</name> <modifier>*</modifier></type><name>pi</name></decl></parameter>, <parameter><decl><type><name>short</name> <name>int</name> <modifier>*</modifier></type><name>events</name></decl></parameter>)</parameter_list></function_decl></parameter>
        , <parameter><function_decl><type><name>void</name></type>  (<modifier>*</modifier><name>tmr_callback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_data</name></decl></parameter>)</parameter_list></function_decl></parameter>
        , <parameter><decl><type><name>SIMPLE_PATTERN</name> <modifier>*</modifier></type><name>access_list</name></decl></parameter>
        , <parameter><decl><type><name>int</name></type> <name>allow_dns</name></decl></parameter>
        , <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>
        , <parameter><decl><type><name>time_t</name></type> <name>tcp_request_timeout_seconds</name></decl></parameter>
        , <parameter><decl><type><name>time_t</name></type> <name>tcp_idle_timeout_seconds</name></decl></parameter>
        , <parameter><decl><type><name>time_t</name></type> <name>timer_milliseconds</name></decl></parameter>
        , <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>timer_data</name></decl></parameter>
        , <parameter><decl><type><name>size_t</name></type> <name>max_tcp_sockets</name></decl></parameter>
)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_SOCKET_H</comment>
</unit>
