<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/eval/eval.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_EVAL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_EVAL_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_MAX_VARIABLE_NAME_LENGTH</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>rrdcalc_status</name> <block>{
    <decl><name>RRDCALC_STATUS_REMOVED</name>       <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_UNDEFINED</name>     <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_UNINITIALIZED</name> <init>=  <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_CLEAR</name>         <init>=  <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_RAISED</name>        <init>=  <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_WARNING</name>       <init>=  <expr><literal type="number">3</literal></expr></init></decl>,
    <decl><name>RRDCALC_STATUS_CRITICAL</name>      <init>=  <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>RRDCALC_STATUS</name>;</typedef>

<typedef>typedef <type><struct>struct <name>eval_variable</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>eval_variable</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVAL_VARIABLE</name>;</typedef>

<typedef>typedef <type><struct>struct <name>eval_expression</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parsed_as</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RRDCALC_STATUS</name> <modifier>*</modifier></type><name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>calculated_number</name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name> <modifier>*</modifier></type><name>after</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name> <modifier>*</modifier></type><name>before</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>calculated_number</name></type> <name>result</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>error_msg</name></decl>;</decl_stmt>

    <comment type="line">// hidden EVAL_NODE *</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>

    <comment type="line">// custom data to be used for looking up variables</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>rrdcalc</name></name> <modifier>*</modifier></type><name>rrdcalc</name></decl>;</decl_stmt>
}</block></struct></type> <name>EVAL_EXPRESSION</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_VALUE_INVALID</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_VALUE_NUMBER</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_VALUE_VARIABLE</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_VALUE_EXPRESSION</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="line">// parsing and evaluation</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_OK</name></cpp:macro>                             <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// parsing errors</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_MISSING_CLOSE_SUBEXPRESSION</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_UNKNOWN_OPERAND</name></cpp:macro>                <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_MISSING_OPERAND</name></cpp:macro>                <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_MISSING_OPERATOR</name></cpp:macro>               <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_REMAINING_GARBAGE</name></cpp:macro>              <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_IF_THEN_ELSE_MISSING_ELSE</name></cpp:macro>      <cpp:value>6</cpp:value></cpp:define>

<comment type="line">// evaluation errors</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_INVALID_VALUE</name></cpp:macro>                <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_INVALID_NUMBER_OF_OPERANDS</name></cpp:macro>   <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_VALUE_IS_NAN</name></cpp:macro>                 <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_VALUE_IS_INFINITE</name></cpp:macro>            <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVAL_ERROR_UNKNOWN_VARIABLE</name></cpp:macro>             <cpp:value>105</cpp:value></cpp:define>

<comment type="line">// parse the given string as an expression and return:</comment>
<comment type="line">//   a pointer to an expression if it parsed OK</comment>
<comment type="line">//   NULL in which case the pointer to error has the error code</comment>
<function_decl><type><specifier>extern</specifier> <name>EVAL_EXPRESSION</name> <modifier>*</modifier></type><name>expression_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>failed_at</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// free all resources allocated for an expression</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>expression_free</name><parameter_list>(<parameter><decl><type><name>EVAL_EXPRESSION</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// convert an error code to a message</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expression_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// evaluate an expression and return</comment>
<comment type="line">// 1 = OK, the result is in: expression-&gt;result</comment>
<comment type="line">// 2 = FAILED, the error message is in: buffer_tostring(expression-&gt;error_msg)</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>expression_evaluate</name><parameter_list>(<parameter><decl><type><name>EVAL_EXPRESSION</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>health_variable_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>variable</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rrdcalc</name></name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>calculated_number</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_EVAL_H</comment>
</unit>
