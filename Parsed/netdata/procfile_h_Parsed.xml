<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/procfile/procfile.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_PROCFILE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_PROCFILE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libnetdata.h"</cpp:file></cpp:include>

<comment type="line">// ----------------------------------------------------------------------------</comment>
<comment type="line">// An array of words</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>     <comment type="line">// used entries</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>    <comment type="line">// capacity</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>words</name><index>[]</index></name></decl>;</decl_stmt>  <comment type="line">// array of pointers</comment>
}</block></struct></type> <name>pfwords</name>;</typedef>


<comment type="line">// ----------------------------------------------------------------------------</comment>
<comment type="line">// An array of lines</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>words</name></decl>;</decl_stmt>   <comment type="line">// how many words this line has</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>first</name></decl>;</decl_stmt>   <comment type="line">// the id of the first word of this line</comment>
                    <comment type="line">// in the words array</comment>
}</block></struct></type> <name>ffline</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>     <comment type="line">// used entries</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>    <comment type="line">// capacity</comment>
    <decl_stmt><decl><type><name>ffline</name></type> <name><name>lines</name><index>[]</index></name></decl>;</decl_stmt> <comment type="line">// array of lines</comment>
}</block></struct></type> <name>pflines</name>;</typedef>


<comment type="line">// ----------------------------------------------------------------------------</comment>
<comment type="line">// The procfile</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCFILE_FLAG_DEFAULT</name></cpp:macro>             <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCFILE_FLAG_NO_ERROR_ON_FILE_IO</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>procfile_separator</name> <block>{
    <decl><name>PF_CHAR_IS_SEPARATOR</name></decl>,
    <decl><name>PF_CHAR_IS_NEWLINE</name></decl>,
    <decl><name>PF_CHAR_IS_WORD</name></decl>,
    <decl><name>PF_CHAR_IS_QUOTE</name></decl>,
    <decl><name>PF_CHAR_IS_OPEN</name></decl>,
    <decl><name>PF_CHAR_IS_CLOSE</name></decl>
}</block></enum></type> <name>PF_CHAR_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><name>FILENAME_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// not populated until profile_filename() is called</comment>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>               <comment type="line">// the file desriptor</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>           <comment type="line">// the bytes we have placed into data</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>          <comment type="line">// the bytes we have allocated for data</comment>
    <decl_stmt><decl><type><name>pflines</name> <modifier>*</modifier></type><name>lines</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pfwords</name> <modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PF_CHAR_TYPE</name></type> <name><name>separators</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>          <comment type="line">// allocated buffer to keep file contents</comment>
}</block></struct></type> <name>procfile</name>;</typedef>

<comment type="line">// close the proc file and free all related memory</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>procfile_close</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// (re)read and parse the proc file</comment>
<function_decl><type><specifier>extern</specifier> <name>procfile</name> <modifier>*</modifier></type><name>procfile_readall</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// open a /proc or /sys file</comment>
<function_decl><type><specifier>extern</specifier> <name>procfile</name> <modifier>*</modifier></type><name>procfile_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separators</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// re-open a file</comment>
<comment type="line">// if separators == NULL, the last separators are used</comment>
<function_decl><type><specifier>extern</specifier> <name>procfile</name> <modifier>*</modifier></type><name>procfile_reopen</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>separators</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// example walk-through a procfile parsed file</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>procfile_print</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>procfile_set_quotes</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quotes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>procfile_set_open_close</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>open</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>close</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>procfile_filename</name><parameter_list>(<parameter><decl><type><name>procfile</name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// ----------------------------------------------------------------------------</comment>

<comment type="line">// set to the O_XXXX flags, to have procfile_open and procfile_reopen use them when opening proc files</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>procfile_open_flags</name></decl>;</decl_stmt>

<comment type="line">// set this to 1, to have procfile adapt its initial buffer allocation to the max allocation used so far</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>procfile_adaptive_initial_allocation</name></decl>;</decl_stmt>

<comment type="line">// return the number of lines present</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>procfile_lines</name><parameter_list>(<parameter><type><name>ff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ff)-&gt;lines-&gt;len)</cpp:value></cpp:define>

<comment type="line">// return the number of words of the Nth line</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>procfile_linewords</name><parameter_list>(<parameter><type><name>ff</name></type></parameter>, <parameter><type><name>line</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((line) &lt; procfile_lines(ff)) ? (ff)-&gt;lines-&gt;lines[(line)].words : 0)</cpp:value></cpp:define>

<comment type="line">// return the Nth word of the file, or empty string</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>procfile_word</name><parameter_list>(<parameter><type><name>ff</name></type></parameter>, <parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((word) &lt; (ff)-&gt;words-&gt;len) ? (ff)-&gt;words-&gt;words[(word)] : "")</cpp:value></cpp:define>

<comment type="line">// return the first word of the Nth line, or empty string</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>procfile_line</name><parameter_list>(<parameter><type><name>ff</name></type></parameter>, <parameter><type><name>line</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((line) &lt; procfile_lines(ff)) ? procfile_word((ff), (ff)-&gt;lines-&gt;lines[(line)].first) : "")</cpp:value></cpp:define>

<comment type="line">// return the Nth word of the current line</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>procfile_lineword</name><parameter_list>(<parameter><type><name>ff</name></type></parameter>, <parameter><type><name>line</name></type></parameter>, <parameter><type><name>word</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((line) &lt; procfile_lines(ff) &amp;&amp; (word) &lt; procfile_linewords((ff), (line))) ? procfile_word((ff), (ff)-&gt;lines-&gt;lines[(line)].first + (word)) : "")</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_PROCFILE_H */</comment>
</unit>
