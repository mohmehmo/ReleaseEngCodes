<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/backends/backends.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_BACKENDS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_BACKENDS_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon/common.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>backend_options</name> <block>{
    <decl><name>BACKEND_OPTION_NONE</name>              <init>= <expr><literal type="number">0</literal></expr></init></decl>,

    <decl><name>BACKEND_SOURCE_DATA_AS_COLLECTED</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
    <decl><name>BACKEND_SOURCE_DATA_AVERAGE</name>      <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
    <decl><name>BACKEND_SOURCE_DATA_SUM</name>          <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,

    <decl><name>BACKEND_OPTION_SEND_NAMES</name>        <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>
}</block></enum></type> <name>BACKEND_OPTIONS</name>;</typedef>

<typedef>typedef <type><enum>enum <name>backend_types</name> <block>{
    <decl><name>BACKEND_TYPE_UNKNOWN</name></decl>,                   <comment type="line">// Invalid type</comment>
    <decl><name>BACKEND_TYPE_GRAPHITE</name></decl>,                  <comment type="line">// Send plain text to Graphite</comment>
    <decl><name>BACKEND_TYPE_OPENTSDB_USING_TELNET</name></decl>,     <comment type="line">// Send data to OpenTSDB using telnet API</comment>
    <decl><name>BACKEND_TYPE_OPENTSDB_USING_HTTP</name></decl>,       <comment type="line">// Send data to OpenTSDB using HTTP API</comment>
    <decl><name>BACKEND_TYPE_JSON</name></decl>,                      <comment type="line">// Stores the data using JSON.</comment>
    <decl><name>BACKEND_TYPE_PROMETEUS</name></decl>,                 <comment type="line">// The user selected to use Prometheus backend</comment>
    <decl><name>BACKEND_TYPE_KINESIS</name></decl>,                   <comment type="line">// Send message to AWS Kinesis</comment>
    <decl><name>BACKEND_TYPE_MONGODB</name></decl>                    <comment type="line">// Send data to MongoDB collection</comment>
}</block></enum></type> <name>BACKEND_TYPE</name>;</typedef>


<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><modifier>*</modifier><name>backend_response_checker_t</name>)<parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><modifier>*</modifier><name>backend_request_formatter_t</name>)<parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RRDHOST</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RRDSET</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>RRDDIM</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>time_t</name></type></decl></parameter>, <parameter><decl><type><name>BACKEND_OPTIONS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKEND_OPTIONS_SOURCE_BITS</name></cpp:macro> <cpp:value>(BACKEND_SOURCE_DATA_AS_COLLECTED|BACKEND_SOURCE_DATA_AVERAGE|BACKEND_SOURCE_DATA_SUM)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKEND_OPTIONS_DATA_SOURCE</name><parameter_list>(<parameter><type><name>backend_options</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(backend_options &amp; BACKEND_OPTIONS_SOURCE_BITS)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>global_backend_update_every</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>BACKEND_OPTIONS</name></type> <name>global_backend_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>global_backend_prefix</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>backends_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>BACKEND_OPTIONS</name></type> <name>backend_parse_data_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>BACKEND_OPTIONS</name></type> <name>backend_options</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BACKENDS_INTERNALS</name></cpp:ifdef>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>backends_can_send_rrdset</name><parameter_list>(<parameter><decl><type><name>BACKEND_OPTIONS</name></type> <name>backend_options</name></decl></parameter>, <parameter><decl><type><name>RRDSET</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>calculated_number</name></type> <name>backend_calculate_value_from_stored_data</name><parameter_list>(
        <parameter><decl><type><name>RRDSET</name> <modifier>*</modifier></type><name>st</name></decl></parameter>                  <comment type="line">// the chart</comment>
        , <parameter><decl><type><name>RRDDIM</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>                <comment type="line">// the dimension</comment>
        , <parameter><decl><type><name>time_t</name></type> <name>after</name></decl></parameter>              <comment type="line">// the start timestamp</comment>
        , <parameter><decl><type><name>time_t</name></type> <name>before</name></decl></parameter>             <comment type="line">// the end timestamp</comment>
        , <parameter><decl><type><name>BACKEND_OPTIONS</name></type> <name>backend_options</name></decl></parameter>  <comment type="line">// BACKEND_SOURCE_* bitmap</comment>
        , <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>first_timestamp</name></decl></parameter>   <comment type="line">// the timestamp of the first point used in this response</comment>
        , <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>last_timestamp</name></decl></parameter>    <comment type="line">// the timestamp that should be reported to backend</comment>
)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>backend_name_copy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>usable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>discard_response</name><parameter_list>(<parameter><decl><type><name>BUFFER</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>strip_quotes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if<condition>(<expr><name>s</name> <operator>!=</operator> <name>str</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BACKENDS_INTERNALS</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/prometheus/backend_prometheus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/graphite/graphite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/json/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/opentsdb/opentsdb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_KINESIS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/aws_kinesis/aws_kinesis.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_PROMETHEUS_REMOTE_WRITE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/prometheus/remote_write/remote_write.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MONGOC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backends/mongodb/mongodb.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_BACKENDS_H */</comment>
</unit>
