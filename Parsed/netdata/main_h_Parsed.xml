<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/daemon/main.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_MAIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_MAIN_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>config</name></name></type> <name>netdata_config</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_MAIN_THREAD_RUNNING</name></cpp:macro>   <cpp:value>CONFIG_BOOLEAN_YES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_MAIN_THREAD_EXITING</name></cpp:macro>  <cpp:value>(CONFIG_BOOLEAN_YES + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_MAIN_THREAD_EXITED</name></cpp:macro>    <cpp:value>CONFIG_BOOLEAN_NO</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * This struct contains information about command line options.
 */</comment>
<struct>struct <name>option_def</name> <block>{
    <comment type="block" format="doxygen">/** The option character */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>val</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** The name of the long option. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Short descripton what the option does */</comment>
    <comment type="block" format="doxygen">/** Name of the argument displayed in SYNOPSIS */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_name</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Default value if not set */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_value</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>netdata_static_thread</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                         <comment type="line">// the name of the thread as it should appear in the logs</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_section</name></decl>;</decl_stmt>               <comment type="line">// the section of netdata.conf to check if this is enabled or not</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>config_name</name></decl>;</decl_stmt>                  <comment type="line">// the name of the config option to check if it is true or false</comment>

    <decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>enabled</name></decl>;</decl_stmt>      <comment type="line">// the current status of the thread</comment>

    <decl_stmt><decl><type><name>netdata_thread_t</name> <modifier>*</modifier></type><name>thread</name></decl>;</decl_stmt>           <comment type="line">// internal use, to maintain a pointer to the created thread</comment>

    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>        <comment type="line">// an initialization function to run before spawning the thread</comment>
    <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>    <comment type="line">// the threaded worker</comment>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>cancel_main_threads</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>killpid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>netdata_cleanup_and_exit</name><argument_list>(<argument><expr><name>int</name> <name>ret</name></expr></argument>)</argument_list> <name>NORETURN</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>send_statistics</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action_data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NETDATA_MAIN_H */</comment>
</unit>
