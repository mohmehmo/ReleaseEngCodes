<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/netdata/libnetdata/inlined.h"><comment type="line">// SPDX-License-Identifier: GPL-3.0-or-later</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NETDATA_INLINED_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NETDATA_INLINED_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libnetdata.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>KERNEL_32BIT</name></cpp:ifdef>
<typedef>typedef <type><name>uint32_t</name></type> <name>kernel_uint_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str2kernel_uint_t</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str2uint32_t(string)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_UINT_FORMAT</name></cpp:macro> <cpp:value>"%u"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>uint64_t</name></type> <name>kernel_uint_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str2kernel_uint_t</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str2uint64_t(string)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KERNEL_UINT_FORMAT</name></cpp:macro> <cpp:value>"%" PRIu64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>str2pid_t</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>str2uint32_t(string)</cpp:value></cpp:define>


<comment type="line">// for faster execution, allow the compiler to inline</comment>
<comment type="line">// these functions that are called thousands of times per second</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>simple_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hval</name> <init>= <expr><literal type="number">0x811c9dc5</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hval</name> <operator>*=</operator> <literal type="number">16777619</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hval</name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>hval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>simple_uhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hval</name> <init>= <expr><literal type="number">0x811c9dc5</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>hval</name> <operator>*=</operator> <literal type="number">16777619</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hval</name> <operator>^=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>hval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>simple_hash_strcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>hval</name> <init>= <expr><literal type="number">0x811c9dc5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>s</name> <operator>-</operator> <operator>*</operator><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>hval</name> <operator>*=</operator> <literal type="number">16777619</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>hval</name> <operator>^=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>hash</name> <operator>=</operator> <name>hval</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>str2i</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>negative</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>negative</name><operator>)</operator></expr>?</condition><then><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></then><else>:<expr><operator>*</operator><name>s</name></expr></else></ternary></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>negative</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>n</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>str2l</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>negative</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>negative</name><operator>)</operator></expr>?</condition><then><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></then><else>:<expr><operator>*</operator><name>s</name></expr></else></ternary></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>negative</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>n</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>str2uint32_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>str2uint64_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>str2ul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>str2ull</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>long</name></type> <name>str2ll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> ;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>s</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>negative</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><name>n</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>n</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>double</name></type> <name>str2ld</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>integer_part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>decimal_part</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>decimal_digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'-'</literal></expr>:</case>
            <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'+'</literal></expr>:</case>
            <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
            <if_stmt><if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>NAN</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'i'</literal></expr>:</case>
            <if_stmt><if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <return>return <expr><name>INFINITY</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>

    <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>integer_part</name> <operator>=</operator> <operator>(</operator><name>integer_part</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>decimal_part</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>decimal_part</name> <operator>=</operator> <operator>(</operator><name>decimal_part</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>decimal_digits</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strtold</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>negative</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>decimal_digits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>integer_part</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>decimal_part</name> <operator>/</operator> <call><name>powl</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>decimal_digits</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>integer_part</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>decimal_digits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>integer_part</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>decimal_part</name> <operator>/</operator> <call><name>powl</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>decimal_digits</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>integer_part</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETDATA_STRCMP_OVERRIDE</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>strcmp</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strcmp</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strsame(a, b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// NETDATA_STRCMP_OVERRIDE</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>strsame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><operator>*</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>a</name> <operator>==</operator> <operator>*</operator><name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
    <return>return <expr><operator>*</operator><name>a</name> <operator>-</operator> <operator>*</operator><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>strncpyz</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <name>n</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>read_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>read_single_number_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>str2ull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>read_single_signed_number_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">30</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//NETDATA_INLINED_H</comment>
</unit>
