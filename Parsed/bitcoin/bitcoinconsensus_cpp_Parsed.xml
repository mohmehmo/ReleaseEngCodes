<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/bitcoinconsensus.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/bitcoinconsensus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/interpreter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{

<comment type="block" format="doxygen">/** A class that deserializes a single CTransaction one time. */</comment>
<class>class <name>TxInputStream</name>
<block>{<private type="default">
</private><public>public:
    <constructor><name>TxInputStream</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nTypeIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVersionIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>txToLen</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>m_type</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>)</argument_list></call>,
    <call><name>m_version</name><argument_list>(<argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call>,
    <call><name>m_data</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>)</argument_list></call>,
    <call><name>m_remaining</name><argument_list>(<argument><expr><name>txToLen</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <name>m_remaining</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": end of data"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>pch</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": bad destination buffer"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>m_data</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": bad source buffer"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><name>m_data</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_remaining</name> <operator>-=</operator> <name>nSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_data</name> <operator>+=</operator> <name>nSize</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>TxInputStream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;&amp;</modifier></type> <name>obj</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>Unserialize</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>GetVersion</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><name>m_version</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>int</name></type> <name>GetType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><name>m_type</name></expr>;</return> </block_content>}</block></function>
</public><private>private:
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>m_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>m_remaining</name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><specifier>inline</specifier> <name>int</name></type> <name>set_error</name><parameter_list>(<parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name></type> <name>serror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <name>serror</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ECCryptoClosure</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ECCVerifyHandle</name></type> <name>handle</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>ECCryptoClosure</name></type> <name>instance_of_eccryptoclosure</name></decl>;</decl_stmt>
}</block></namespace> <comment type="line">// namespace</comment>

<comment type="block" format="doxygen">/** Check that all specified flags are part of the libconsensus interface. */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>verify_flags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptPubKeyLen</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>amount</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>        , <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>txToLen</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>verify_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_INVALID_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>TxInputStream</name></type> <name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>txToLen</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CTransaction</name></type> <name>tx</name><argument_list>(<argument><expr><name>deserialize</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nIn</name> <operator>&gt;=</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_INDEX</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>txToLen</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_SIZE_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// Regardless of the verification result, the tx did not error.</comment>
        <expr_stmt><expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PrecomputedTransactionData</name></type> <name>txdata</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>nIn</name></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptPubKey</name> <operator>+</operator> <name>scriptPubKeyLen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>nIn</name></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_DESERIALIZE</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// Error deserializing</comment>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>bitcoinconsensus_verify_script_with_amount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptPubKeyLen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>amount</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>        , <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>txToLen</name></decl></parameter>,
                                    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>am</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><operator>::</operator><name>verify_script</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptPubKeyLen</name></expr></argument>, <argument><expr><name>am</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>txToLen</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>bitcoinconsensus_verify_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptPubKeyLen</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>txTo</name></decl></parameter>        , <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>txToLen</name></decl></parameter>,
                                   <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bitcoinconsensus_error</name><modifier>*</modifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>set_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_AMOUNT_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>am</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><operator>::</operator><name>verify_script</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptPubKeyLen</name></expr></argument>, <argument><expr><name>am</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>txToLen</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>bitcoinconsensus_version</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Just use the API version for now</comment>
    <return>return <expr><name>BITCOINCONSENSUS_API_VER</name></expr>;</return>
</block_content>}</block></function>
</unit>
