<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/slice.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// Slice is a simple structure containing a pointer into some external</comment>
<comment type="line">// storage and a size.  The user of a Slice must ensure that the slice</comment>
<comment type="line">// is not used after the corresponding external storage has been</comment>
<comment type="line">// deallocated.</comment>
<comment type="line">//</comment>
<comment type="line">// Multiple threads can invoke const methods on a Slice without</comment>
<comment type="line">// external synchronization, but if any of the threads may call a</comment>
<comment type="line">// non-const method, all threads accessing the same Slice must use</comment>
<comment type="line">// external synchronization.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_SLICE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_SLICE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Slice</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Create an empty slice.</comment>
  <expr_stmt><expr><call><name>Slice</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>data_</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

  <comment type="line">// Create a slice that refers to d[0,n-1].</comment>
  <macro><name>Slice</name><argument_list>(<argument>const char* d</argument>, <argument>size_t n</argument>)</argument_list></macro> <operator>:</operator> <call><name>data_</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_</name><argument_list>(<argument>n</argument>)</argument_list></macro> <expr><block>{ }</block>

  <comment type="line">// Create a slice that refers to the contents of "s"</comment>
  <call><name>Slice</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>data_</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_</name><argument_list>(<argument>s.size()</argument>)</argument_list></macro> <expr><block>{ }</block>

  <comment type="line">// Create a slice that refers to s[0,strlen(s)-1]</comment>
  <call><name>Slice</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>data_</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_</name><argument_list>(<argument>strlen(s)</argument>)</argument_list></macro> <expr><block>{ }</block>

  <comment type="line">// Return a pointer to the beginning of the referenced data</comment>
  <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>data_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return the length (in bytes) of the referenced data</comment>
  <expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return true iff the length of the referenced data is zero</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return the ith byte in the referenced data.</comment>
  <comment type="line">// REQUIRES: n &lt; size()</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_t</name> <name>n</name></expr></argument>)</argument_list> const <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>data_</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

  <comment type="line">// Change this slice to refer to an empty array</comment>
  <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>data_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt> <expr_stmt><expr><name>size_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>

  <comment type="line">// Drop the first "n" bytes from this slice.</comment>
  <function><type><name>void</name></type> <name>remove_prefix</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>data_</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size_</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="line">// Return a string that contains the copy of the referenced data.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><name>data_</name></expr></argument>, <argument><expr><name>size_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Three-way comparison.  Returns value:</comment>
  <comment type="line">//   &lt;  0 iff "*this" &lt;  "b",</comment>
  <comment type="line">//   == 0 iff "*this" == "b",</comment>
  <comment type="line">//   &gt;  0 iff "*this" &gt;  "b"</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

  <comment type="line">// Return true iff "x" is a prefix of "*this"</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>starts_with</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>x</name></expr></argument>)</argument_list> const <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>size_</name> <operator>&gt;=</operator> <name><name>x</name><operator>.</operator><name>size_</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>data_</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>data_</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>size_</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></decl></decl_stmt>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size_</name></decl>;</decl_stmt>

  <comment type="line">// Intentionally copyable</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>x</name><operator>,</operator> <specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>y</name><operator>)</operator> <block>{
  <return>return <expr><operator>(</operator><operator>(</operator><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>y</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
          <operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>y</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>x</name><operator>,</operator> <specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>y</name><operator>)</operator> <block>{
  <return>return <expr><operator>!</operator><operator>(</operator><name>x</name> <operator>==</operator> <name>y</name><operator>)</operator></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>int</name> <name>Slice</name><operator>::</operator><macro><name>compare</name><argument_list>(<argument>const Slice&amp; b</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
  <expr><specifier>const</specifier> <name>size_t</name> <name>min_len</name> <operator>=</operator> <operator>(</operator><name>size_</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>size_</name></name><operator>)</operator> <operator>?</operator> <name>size_</name> <operator>:</operator> <name><name>b</name><operator>.</operator><name>size_</name></name></expr>;
  <expr><name>int</name> <name>r</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>data_</name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>data_</name></name></expr></argument>, <argument><expr><name>min_len</name></expr></argument>)</argument_list></call></expr>;
  <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size_</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>size_</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>size_</name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>size_</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt/>}</block_content>
  return r</block><empty_stmt>;</empty_stmt></if></if_stmt>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_SLICE_H_</comment>
</unit>
