<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/wallet/walletutil.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_WALLET_WALLETUTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_WALLET_WALLETUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** (client) version numbers for particular wallet features */</comment>
<enum>enum <name>WalletFeature</name>
<block>{
    <decl><name>FEATURE_BASE</name> <init>= <expr><literal type="number">10500</literal></expr></init></decl>, <comment type="line">// the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)</comment>

    <decl><name>FEATURE_WALLETCRYPT</name> <init>= <expr><literal type="number">40000</literal></expr></init></decl>, <comment type="line">// wallet encryption</comment>
    <decl><name>FEATURE_COMPRPUBKEY</name> <init>= <expr><literal type="number">60000</literal></expr></init></decl>, <comment type="line">// compressed public keys</comment>

    <decl><name>FEATURE_HD</name> <init>= <expr><literal type="number">130000</literal></expr></init></decl>, <comment type="line">// Hierarchical key derivation after BIP32 (HD Wallet)</comment>

    <decl><name>FEATURE_HD_SPLIT</name> <init>= <expr><literal type="number">139900</literal></expr></init></decl>, <comment type="line">// Wallet with HD chain split (change outputs will use m/0'/1'/k)</comment>

    <decl><name>FEATURE_NO_DEFAULT_KEY</name> <init>= <expr><literal type="number">159900</literal></expr></init></decl>, <comment type="line">// Wallet without a default key written</comment>

    <decl><name>FEATURE_PRE_SPLIT_KEYPOOL</name> <init>= <expr><literal type="number">169900</literal></expr></init></decl>, <comment type="line">// Upgraded to HD SPLIT and can have a pre-split keypool</comment>

    <decl><name>FEATURE_LATEST</name> <init>= <expr><name>FEATURE_PRE_SPLIT_KEYPOOL</name></expr></init></decl>
}</block>;</enum>



<enum>enum <name>WalletFlags</name> : <type><name>uint64_t</name></type> <block>{
    <comment type="line">// wallet flags in the upper section (&gt; 1 &lt;&lt; 31) will lead to not opening the wallet if flag is unknown</comment>
    <comment type="line">// unknown wallet flags in the lower section &lt;= (1 &lt;&lt; 31) will be tolerated</comment>

    <comment type="line">// will categorize coins as clean (not reused) and dirty (reused), and handle</comment>
    <comment type="line">// them with privacy considerations in mind</comment>
    <decl><name>WALLET_FLAG_AVOID_REUSE</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,

    <comment type="line">// Indicates that the metadata has already been upgraded to contain key origins</comment>
    <decl><name>WALLET_FLAG_KEY_ORIGIN_METADATA</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,

    <comment type="line">// will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)</comment>
    <decl><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>,

    <comment type="line" format="doxygen">//! Flag set when a wallet contains no HD seed and no private keys, scripts,</comment>
    <comment type="line" format="doxygen">//! addresses, and other watch only things, and is therefore "blank."</comment>
    <comment type="line" format="doxygen">//!</comment>
    <comment type="line" format="doxygen">//! The only function this flag serves is to distinguish a blank wallet from</comment>
    <comment type="line" format="doxygen">//! a newly created wallet when the wallet database is loaded, to avoid</comment>
    <comment type="line" format="doxygen">//! initialization that should only happen on first run.</comment>
    <comment type="line" format="doxygen">//!</comment>
    <comment type="line" format="doxygen">//! This flag is also a mandatory flag to prevent previous versions of</comment>
    <comment type="line" format="doxygen">//! bitcoin from opening the wallet, thinking it was newly created, and</comment>
    <comment type="line" format="doxygen">//! then improperly reinitializing it.</comment>
    <decl><name>WALLET_FLAG_BLANK_WALLET</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">33</literal><operator>)</operator></expr></init></decl>,
}</block>;</enum>

<comment type="line" format="doxygen">//! Get the path of the wallet directory.</comment>
<expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <call><name>GetWalletDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="line" format="doxygen">//! Get wallets in wallet directory.</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>fs</name><operator>::</operator><name>path</name></expr></argument>&gt;</argument_list></name> <call><name>ListWalletDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="line" format="doxygen">//! The WalletLocation class provides wallet information.</comment>
<decl_stmt><decl><type><name>class</name> <name>WalletLocation</name></type> <name>final</name>
<block>{<block_content>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <name>m_path</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
    <function><type><name>explicit</name></type> <name>WalletLocation</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
    <decl_stmt><decl><type><name>explicit</name></type> <name>WalletLocation</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get wallet name.</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_name</name></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Get wallet absolute path.</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name><operator>&amp;</operator> <macro><name>GetPath</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_path</name></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Return whether the wallet exists.</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>Exists</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_WALLET_WALLETUTIL_H</comment>
</unit>
