<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/flatfile.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_FLATFILE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_FLATFILE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<struct>struct <name>FlatFilePos</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nPos</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>nFile</name></expr></argument>, <argument><expr><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><call><name>FlatFilePos</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>nFile</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nPos</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>

    <macro><name>FlatFilePos</name><argument_list>(<argument>int nFileIn</argument>, <argument>unsigned int nPosIn</argument>)</argument_list></macro> <operator>:</operator>
        <call><name>nFile</name><argument_list>(<argument><expr><name>nFileIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <macro><name>nPos</name><argument_list>(<argument>nPosIn</argument>)</argument_list></macro>
    <expr><block>{}</block>

    <name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>FlatFilePos</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>FlatFilePos</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{
        <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>nFile</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nFile</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>nPos</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nPos</name></name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>FlatFilePos</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>FlatFilePos</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><name>nFile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>nPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
    <expr_stmt><expr><name>bool</name> <macro><name>IsNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>nFile</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * FlatFileSeq represents a sequence of numbered files storing raw data. This class facilitates
 * access to and efficient management of these files.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>FlatFileSeq</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <expr_stmt><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <name>m_dir</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>m_prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>m_chunk_size</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/**
     * Constructor
     *
     * @param dir The base directory that all files live in.
     * @param prefix A short prefix given to all file names.
     * @param chunk_size Disk space is pre-allocated in multiples of this amount.
     */</comment>
    <macro><name>FlatFileSeq</name><argument_list>(<argument>fs::path dir</argument>, <argument>const char* prefix</argument>, <argument>size_t chunk_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/** Get the name of the file at the given position. */</comment>
    <expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <macro><name>FileName</name><argument_list>(<argument>const FlatFilePos&amp; pos</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Open a handle to the file at the given position. */</comment>
    <function_decl><type><name>FILE</name><modifier>*</modifier></type> <name>Open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>read_only</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/**
     * Allocate additional space in a file after the given starting position. The amount allocated
     * will be the minimum multiple of the sequence chunk size greater than add_size.
     *
     * @param[in] pos The starting position that bytes will be allocated after.
     * @param[in] add_size The minimum number of bytes to be allocated.
     * @param[out] out_of_space Whether the allocation failed due to insufficient disk space.
     * @return The number of bytes successfully allocated.
     */</comment>
    <function_decl><type><name>size_t</name></type> <name>Allocate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>add_size</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>out_of_space</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/**
     * Commit a file to disk, and optionally truncate off extra pre-allocated bytes if final.
     *
     * @param[in] pos The first unwritten position in the file to be flushed.
     * @param[in] finalize True if no more data will be written to this file.
     * @return true on success, false on failure.
     */</comment>
    <function_decl><type><name>bool</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>finalize</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_FLATFILE_H</comment>
</unit>
