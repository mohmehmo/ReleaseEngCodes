<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/netbase.h"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NETBASE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NETBASE_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>nConnectTimeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>fNameLookup</name></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! -timeout default</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_CONNECT_TIMEOUT</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
<comment type="line" format="doxygen">//! -dns default</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_NAME_LOOKUP</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>proxyType</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>proxyType</name><argument_list>()</argument_list></call><operator>:</operator> <macro><name>randomize_credentials</name><argument_list>(<argument>false</argument>)</argument_list></macro> <block>{}</block>
    <name>explicit</name> <macro><name>proxyType</name><argument_list>(<argument>const CService &amp;_proxy</argument>, <argument>bool _randomize_credentials=false</argument>)</argument_list></macro><operator>:</operator> <call><name>proxy</name><argument_list>(<argument><expr><name>_proxy</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>randomize_credentials</name><argument_list>(<argument>_randomize_credentials</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>proxy</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>CService</name></type> <name>proxy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>randomize_credentials</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>Network</name></name></type> <name>ParseNetwork</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>net</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetNetworkName</name><argument_list>(<argument>enum Network net</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>bool</name></type> <name>SetProxy</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>Network</name></name></type> <name>net</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>proxyType</name> <modifier>&amp;</modifier></type><name>addrProxy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetProxy</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>Network</name></name></type> <name>net</name></decl></parameter>, <parameter><decl><type><name>proxyType</name> <modifier>&amp;</modifier></type><name>proxyInfoOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsProxy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>SetNameProxy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>proxyType</name> <modifier>&amp;</modifier></type><name>addrProxy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>HaveNameProxy</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetNameProxy</name><parameter_list>(<parameter><decl><type><name>proxyType</name> <modifier>&amp;</modifier></type><name>nameProxyOut</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>LookupHost</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>pszName</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CNetAddr</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vIP</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>nMaxSolutions</name></expr></argument>, <argument><expr><name>bool</name> <name>fAllowLookup</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>bool</name></type> <name>LookupHost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszName</name></decl></parameter>, <parameter><decl><type><name>CNetAddr</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fAllowLookup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>Lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszName</name></decl></parameter>, <parameter><decl><type><name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>portDefault</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fAllowLookup</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>Lookup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>pszName</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CService</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vAddr</name></expr></argument>, <argument><expr><name>int</name> <name>portDefault</name></expr></argument>, <argument><expr><name>bool</name> <name>fAllowLookup</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>nMaxSolutions</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>CService</name></type> <name>LookupNumeric</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>portDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>LookupSubNet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pszName</name></decl></parameter>, <parameter><decl><type><name>CSubNet</name><modifier>&amp;</modifier></type> <name>subnet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>SOCKET</name></type> <name>CreateSocket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name> <modifier>&amp;</modifier></type><name>addrConnect</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>ConnectSocketDirectly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name> <modifier>&amp;</modifier></type><name>addrConnect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SOCKET</name><modifier>&amp;</modifier></type> <name>hSocketRet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTimeout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>manual_connection</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>ConnectThroughProxy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>proxyType</name> <operator>&amp;</operator><name>proxy</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strDest</name></expr></argument>, <argument><expr><name>int</name> <name>port</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SOCKET</name><operator>&amp;</operator> <name>hSocketRet</name></expr></argument>, <argument><expr><name>int</name> <name>nTimeout</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator><name>outProxyConnectionFailed</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Return readable error string for a network error code */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>NetworkErrorString</name><argument_list>(<argument>int err</argument>)</argument_list></macro></expr>;</expr_stmt>
<comment type="block" format="doxygen">/** Close socket and set hSocket to INVALID_SOCKET */</comment>
<function_decl><type><name>bool</name></type> <name>CloseSocket</name><parameter_list>(<parameter><decl><type><name>SOCKET</name><modifier>&amp;</modifier></type> <name>hSocket</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Disable or enable blocking-mode for a socket */</comment>
<function_decl><type><name>bool</name></type> <name>SetSocketNonBlocking</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SOCKET</name><modifier>&amp;</modifier></type> <name>hSocket</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fNonBlocking</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Set the TCP_NODELAY flag on a socket */</comment>
<function_decl><type><name>bool</name></type> <name>SetSocketNoDelay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SOCKET</name><modifier>&amp;</modifier></type> <name>hSocket</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * Convert milliseconds to a struct timeval for e.g. select.
 */</comment>
<function_decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>MillisToTimeval</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nTimeout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InterruptSocks5</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>interrupt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NETBASE_H</comment>
</unit>
