<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/test/util/setup_common.h"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_TEST_UTIL_SETUP_COMMON_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_TEST_UTIL_SETUP_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scheduler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/thread.hpp&gt;</cpp:file></cpp:include>

<comment type="line">// Enable BOOST_CHECK_EQUAL for enum class types</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>typename</name> <name>std</name><operator>::</operator><name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>is_enum</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ostream</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>&amp;</operator> <name>stream</name><operator>,</operator> <specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>e</name><operator>)</operator>
<block>{
    <return>return <expr><name>stream</name> <operator>&lt;&lt;</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>underlying_type</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block" format="doxygen">/**
 * This global and the helpers that use it are not thread-safe.
 *
 * If thread-safety is needed, the global could be made thread_local (given
 * that thread_local is supported on all architectures we support) or a
 * per-thread instance could be used in the multi-threaded test.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>FastRandomContext</name></type> <name>g_insecure_rand_ctx</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Flag to make GetRand in random.h return the same number
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>g_mock_deterministic_tests</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>SeedRand</name> <block>{<block_content>
    <expr_stmt><expr><name>ZEROS</name></expr><operator>,</operator> <comment type="line" format="doxygen">//!&lt; Seed with a compile time constant of zeros</comment>
    <expr><name>SEED</name></expr><operator>,</operator></expr_stmt>  <comment type="line" format="doxygen">//!&lt; Call the Seed() helper</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Seed the given random ctx or use the seed passed in via an environment var */</comment>
<function_decl><type><name>void</name></type> <name>Seed</name><parameter_list>(<parameter><decl><type><name>FastRandomContext</name><modifier>&amp;</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>SeedInsecureRand</name><parameter_list>(<parameter><decl><type><name>SeedRand</name></type> <name>seed</name> <init>= <expr><name>SeedRand</name><operator>::</operator><name>SEED</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>seed</name> <operator>==</operator> <name>SeedRand</name><operator>::</operator><name>ZEROS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>g_insecure_rand_ctx</name> <operator>=</operator> <call><name>FastRandomContext</name><argument_list>(<comment type="block">/* deterministic */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>Seed</name><argument_list>(<argument><expr><name>g_insecure_rand_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>InsecureRand32</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_insecure_rand_ctx</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint256</name></type> <name>InsecureRand256</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_insecure_rand_ctx</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>InsecureRandBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_insecure_rand_ctx</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>InsecureRandRange</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_insecure_rand_ctx</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>InsecureRandBool</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_insecure_rand_ctx</name><operator>.</operator><name>randbool</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>CAmount</name></type> <name>CENT</name><block>{<block_content><expr><literal type="number">1000000</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Basic testing setup.
 * This just configures logging, data dir and chain parameters.
 */</comment>
<struct>struct <name>BasicTestingSetup</name> <block>{
    <decl_stmt><decl><type><name>ECCVerifyHandle</name></type> <name>globalVerifyHandle</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>explicit</name></type> <name>BasicTestingSetup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chainName</name> <operator>=</operator> <name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>BasicTestingSetup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
    <expr_stmt><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <name>m_path_root</name></expr>;</expr_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/** Testing setup that configures a complete environment.
 * Included are coins database, script check threads setup.
 */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>TestingSetup</name></name></type> <range>: <expr><name>public</name> <name>BasicTestingSetup</name> <block>{
    <expr><name>NodeContext</name> <name>m_node</name></expr>;
    <expr><name>boost</name><operator>::</operator><name>thread_group</name> <name>threadGroup</name></expr>;
    <expr><name>CScheduler</name> <name>scheduler</name></expr>;

    <expr><name>explicit</name> <call><name>TestingSetup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chainName</name> <operator>=</operator> <name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>TestingSetup</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Identical to TestingSetup, but chain set to regtest */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>RegTestingSetup</name></name></type> <range>: <expr><name>public</name> <name>TestingSetup</name> <block>{
    <expr><call><name>RegTestingSetup</name><argument_list>()</argument_list></call>
        <operator>:</operator> <name>TestingSetup</name><block>{<expr><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></expr>}</block> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CBlock</name></decl>;</decl_stmt>
<struct_decl>struct <name>CMutableTransaction</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>CScript</name></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">// Testing fixture that pre-creates a</comment>
<comment type="line">// 100-block REGTEST-mode block chain</comment>
<comment type="line">//</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>TestChain100Setup</name></name></type> <range>: <expr><name>public</name> <name>RegTestingSetup</name> <block>{
    <expr><call><name>TestChain100Setup</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Create a new block with just given transactions, coinbase paying to</comment>
    <comment type="line">// scriptPubKey, and try to add it to the current chain.</comment>
    <expr><name>CBlock</name> <call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>txns</name></expr></argument>,
                                 <argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>;

    <expr><operator>~</operator><call><name>TestChain100Setup</name><argument_list>()</argument_list></call></expr>;

    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>m_coinbase_txns</name></expr>; <comment type="line">// For convenience, coinbase transactions</comment>
    <expr><name>CKey</name> <name>coinbaseKey</name></expr>; <comment type="line">// private/public key needed to spend coinbase transactions</comment>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CTxMemPoolEntry</name></decl>;</decl_stmt>

<struct>struct <name>TestMemPoolEntryHelper</name>
<block>{
    <comment type="line">// Default values</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFee</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>spendsCoinbase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sigOpCost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockPoints</name></type> <name>lp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TestMemPoolEntryHelper</name><argument_list>()</argument_list></call> <operator>:</operator>
        <call><name>nFee</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nHeight</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <expr><call><name>spendsCoinbase</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>sigOpCost</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

    <name>CTxMemPoolEntry</name> <call><name>FromTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CMutableTransaction</name><operator>&amp;</operator> <name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>CTxMemPoolEntry</name></type> <name>FromTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Change the default value</comment>
    <function><type><name>TestMemPoolEntryHelper</name> <modifier>&amp;</modifier></type><name>Fee</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name>_fee</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>nFee</name> <operator>=</operator> <name>_fee</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>TestMemPoolEntryHelper</name> <modifier>&amp;</modifier></type><name>Time</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>_time</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>nTime</name> <operator>=</operator> <name>_time</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>TestMemPoolEntryHelper</name> <modifier>&amp;</modifier></type><name>Height</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_height</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>nHeight</name> <operator>=</operator> <name>_height</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>TestMemPoolEntryHelper</name> <modifier>&amp;</modifier></type><name>SpendsCoinbase</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>_flag</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>spendsCoinbase</name> <operator>=</operator> <name>_flag</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>TestMemPoolEntryHelper</name> <modifier>&amp;</modifier></type><name>SigOpsCost</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>_sigopsCost</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>sigOpCost</name> <operator>=</operator> <name>_sigopsCost</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></function>
}</block>;</struct>

<function_decl><type><name>CBlock</name></type> <name>getBlock13b8a</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// define an implicit conversion here so that uint256 may be used directly in BOOST_CHECK_*</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><name>std</name><operator>::</operator><name>ostream</name><operator>&amp;</operator> <name>os</name><operator>,</operator> <specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>num</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
