<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/test/db_tests.cpp"><comment type="line">// Copyright (c) 2018-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/db.h&gt;</cpp:file></cpp:include>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>db_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>getwalletenv_file</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>test_name</name> <init>= <expr><literal type="string">"test_name.dat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>file_path</name> <init>= <expr><name>datadir</name> <operator>/</operator> <name>test_name</name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name><name>std</name><operator>::</operator><name>ofstream</name></name></type> <name>f</name><parameter_list>(<parameter><decl><type><name><name>file_path</name><operator>.</operator><name>BOOST_FILESYSTEM_C_STR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filename</name> <operator>==</operator> <name>test_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>env</name><operator>-&gt;</operator><name>Directory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>getwalletenv_directory</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>expected_name</name> <init>= <expr><literal type="string">"wallet.dat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>filename</name> <operator>==</operator> <name>expected_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>env</name><operator>-&gt;</operator><name>Directory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>datadir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>getwalletenv_g_dbenvs_multiple</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"1"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir_2</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_1</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_2</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_3</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir_2</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>env_1</name> <operator>==</operator> <name>env_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>env_2</name> <operator>!=</operator> <name>env_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>getwalletenv_g_dbenvs_free_instance</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"1"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir_2</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name> <argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_1_a</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name> <argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_2_a</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir_2</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>env_1_a</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_1_b</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BerkeleyEnvironment</name></expr></argument>&gt;</argument_list></name></type> <name>env_2_b</name> <init>= <expr><call><name>GetWalletEnv</name><argument_list>(<argument><expr><name>datadir_2</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>env_1_a</name> <operator>!=</operator> <name>env_1_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>env_2_a</name> <operator>==</operator> <name>env_2_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
