<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/sign.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>valtype</name>;</typedef>

<constructor><name><name>MutableTransactionSignatureCreator</name><operator>::</operator><name>MutableTransactionSignatureCreator</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>*</modifier></type> <name>txToIn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nInIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amountIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashTypeIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>txTo</name><argument_list>(<argument><expr><name>txToIn</name></expr></argument>)</argument_list></call>, <call><name>nIn</name><argument_list>(<argument><expr><name>nInIn</name></expr></argument>)</argument_list></call>, <call><name>nHashType</name><argument_list>(<argument><expr><name>nHashTypeIn</name></expr></argument>)</argument_list></call>, <call><name>amount</name><argument_list>(<argument><expr><name>amountIn</name></expr></argument>)</argument_list></call>, <call><name>checker</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>amountIn</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>bool</name></type> <name><name>MutableTransactionSignatureCreator</name><operator>::</operator><name>CreateSig</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptCode</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>provider</name><operator>.</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Signing with uncompressed keys is disabled in witness scripts</comment>
    <if_stmt><if>if <condition>(<expr><name>sigversion</name> <operator>==</operator> <name><name>SigVersion</name><operator>::</operator><name>WITNESS_V0</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptCode</name></expr></argument>, <argument><expr><operator>*</operator><name>txTo</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>nHashType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetCScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>scriptid</name></decl></parameter>, <parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptid</name></expr></argument>, <argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Look for scripts in SignatureData</comment>
    <if_stmt><if>if <condition>(<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name><name>sigdata</name><operator>.</operator><name>redeem_script</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>scriptid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>script</name> <operator>=</operator> <name><name>sigdata</name><operator>.</operator><name>redeem_script</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CScriptID</name><argument_list>(<argument><expr><name><name>sigdata</name><operator>.</operator><name>witness_script</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>scriptid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>script</name> <operator>=</operator> <name><name>sigdata</name><operator>.</operator><name>witness_script</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Look for pubkey in all partial sigs</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>it</name> <init>= <expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Look for pubkey in pubkey list</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>pk_it</name> <init>= <expr><call><name><name>sigdata</name><operator>.</operator><name>misc_pubkeys</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pk_it</name> <operator>!=</operator> <call><name><name>sigdata</name><operator>.</operator><name>misc_pubkeys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <name><name>pk_it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Query the underlying provider</comment>
    <return>return <expr><call><name><name>provider</name><operator>.</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CreateSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>creator</name></decl></parameter>, <parameter><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sig_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptcode</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyid</name> <init>= <expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>it</name> <init>= <expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sig_out</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>info</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetKeyOrigin</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>misc_pubkeys</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>creator</name><operator>.</operator><name>CreateSig</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sig_out</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>scriptcode</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>, <argument><expr><call><name>SigPair</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>sig_out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Could not make signature or signature not found, add keyid to missing</comment>
    <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>missing_sigs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Sign scriptPubKey using signature made with creator.
 * Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed),
 * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.
 * Returns false if scriptPubKey could not be completely satisfied.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>SignStep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>creator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>,
                     <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>ret</name></decl></parameter>, <parameter><decl><type><name>txnouttype</name><modifier>&amp;</modifier></type> <name>whichTypeRet</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>, <parameter><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptRet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint160</name></type> <name>h160</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sig</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>vSolutions</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>whichTypeRet</name> <operator>=</operator> <call><name>Solver</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>vSolutions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>whichTypeRet</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>TX_NONSTANDARD</name></expr>:</case>
    <case>case <expr><name>TX_NULL_DATA</name></expr>:</case>
    <case>case <expr><name>TX_WITNESS_UNKNOWN</name></expr>:</case>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    <case>case <expr><name>TX_PUBKEY</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateSig</name><argument_list>(<argument><expr><name>creator</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><call><name>CPubKey</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <case>case <expr><name>TX_PUBKEYHASH</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name> <init>= <expr><call><name>CKeyID</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetPubKey</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>keyID</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Pubkey could not be found, add to missing</comment>
            <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>missing_pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateSig</name><argument_list>(<argument><expr><name>creator</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TX_SCRIPTHASH</name></expr>:</case>
        <expr_stmt><expr><name>h160</name> <operator>=</operator> <call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetCScript</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>h160</name></expr></argument>, <argument><expr><name>scriptRet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <macro><name>ret</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(scriptRet.begin(), scriptRet.end())</argument>)</argument_list></macro></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Could not find redeemScript, add to missing</comment>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>missing_redeem_script</name></name> <operator>=</operator> <name>h160</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>

    <case>case <expr><name>TX_MULTISIG</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>required</name> <init>= <expr><call><name><name>vSolutions</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>valtype</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// workaround CHECKMULTISIG bug</comment>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vSolutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name>CPubKey</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>required</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>CreateSig</name><argument_list>(<argument><expr><name>creator</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>required</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>required</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>valtype</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ok</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>TX_WITNESS_V0_KEYHASH</name></expr>:</case>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>

    <case>case <expr><name>TX_WITNESS_V0_SCRIPTHASH</name></expr>:</case>
        <expr_stmt><expr><call><name>CRIPEMD160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>h160</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GetCScript</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>, <argument><expr><name>h160</name></expr></argument>, <argument><expr><name>scriptRet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <macro><name>ret</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(scriptRet.begin(), scriptRet.end())</argument>)</argument_list></macro></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Could not find witnessScript, add to missing</comment>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>missing_witness_script</name></name> <operator>=</operator> <call><name>uint256</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>

    <default>default:</default>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CScript</name></type> <name>PushAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>valtype</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <call><name><name>CScript</name><operator>::</operator><name>EncodeOP_N</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>v</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ProduceSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>creator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>fromPubKey</name></decl></parameter>, <parameter><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>sigdata</name><operator>.</operator><name>complete</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>whichType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>solved</name> <init>= <expr><call><name>SignStep</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>fromPubKey</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>P2SH</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>solved</name> <operator>&amp;&amp;</operator> <name>whichType</name> <operator>==</operator> <name>TX_SCRIPTHASH</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Solver returns the subscript that needs to be evaluated;</comment>
        <comment type="line">// the final scriptSig is the signatures from that</comment>
        <comment type="line">// and then the serialized subscript:</comment>
        <expr_stmt><expr><name>subscript</name> <operator>=</operator> <call><name>CScript</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>redeem_script</name></name> <operator>=</operator> <name>subscript</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>solved</name> <operator>=</operator> <name>solved</name> <operator>&amp;&amp;</operator> <call><name>SignStep</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>whichType</name> <operator>!=</operator> <name>TX_SCRIPTHASH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>P2SH</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>solved</name> <operator>&amp;&amp;</operator> <name>whichType</name> <operator>==</operator> <name>TX_WITNESS_V0_KEYHASH</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witnessscript</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>witnessscript</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>txnouttype</name></type> <name>subType</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>solved</name> <operator>=</operator> <name>solved</name> <operator>&amp;&amp;</operator> <call><name>SignStep</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>witnessscript</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>subType</name></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>witness</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>solved</name> <operator>&amp;&amp;</operator> <name>whichType</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witnessscript</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>witness_script</name></name> <operator>=</operator> <name>witnessscript</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>txnouttype</name></type> <name>subType</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>solved</name> <operator>=</operator> <name>solved</name> <operator>&amp;&amp;</operator> <call><name>SignStep</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>witnessscript</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>subType</name></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>subType</name> <operator>!=</operator> <name>TX_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <name>subType</name> <operator>!=</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <name>subType</name> <operator>!=</operator> <name>TX_WITNESS_V0_KEYHASH</name></expr>;</expr_stmt>
        <macro><name>result</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(witnessscript.begin(), witnessscript.end())</argument>)</argument_list></macro></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>witness</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>solved</name> <operator>&amp;&amp;</operator> <name>whichType</name> <operator>==</operator> <name>TX_WITNESS_UNKNOWN</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>witness</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>P2SH</name></expr>)</condition> <block>{<block_content>
        <macro><name>result</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(subscript.begin(), subscript.end())</argument>)</argument_list></macro></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>scriptSig</name></name> <operator>=</operator> <call><name>PushAll</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test solution</comment>
    <expr_stmt><expr><name><name>sigdata</name><operator>.</operator><name>complete</name></name> <operator>=</operator> <name>solved</name> <operator>&amp;&amp;</operator> <call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>sigdata</name><operator>.</operator><name>scriptSig</name></name></expr></argument>, <argument><expr><name>fromPubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sigdata</name><operator>.</operator><name>scriptWitness</name></name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><call><name><name>creator</name><operator>.</operator><name>Checker</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>sigdata</name><operator>.</operator><name>complete</name></name></expr>;</return>
</block_content>}</block></function>

<namespace>namespace <block>{
<class>class <name>SignatureExtractorChecker</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>BaseSignatureChecker</name></super></super_list>
<block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BaseSignatureChecker</name><modifier>&amp;</modifier></type> <name>checker</name></decl>;</decl_stmt>

</private><public>public:
    <constructor><name>SignatureExtractorChecker</name><parameter_list>(<parameter><decl><type><name>SignatureData</name><modifier>&amp;</modifier></type> <name>sigdata</name></decl></parameter>, <parameter><decl><type><name>BaseSignatureChecker</name><modifier>&amp;</modifier></type> <name>checker</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>sigdata</name><argument_list>(<argument><expr><name>sigdata</name></expr></argument>)</argument_list></call>, <call><name>checker</name><argument_list>(<argument><expr><name>checker</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>CheckSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptCode</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>checker</name><operator>.</operator><name>CheckSig</name></name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>vchPubKey</name></expr></argument>, <argument><expr><name>scriptCode</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>SigPair</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<struct>struct <name>Stacks</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>script</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>witness</name></decl>;</decl_stmt>

    <constructor_decl><name>Stacks</name><parameter_list>()</parameter_list> = <specifier>delete</specifier>;</constructor_decl>
    <constructor_decl><name>Stacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Stacks</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>delete</specifier>;</constructor_decl>
    <constructor><specifier>explicit</specifier> <name>Stacks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>witness</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
        <expr_stmt><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>scriptSig</name></name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</struct>
}</block></namespace>

<comment type="line">// Extracts signatures and scripts from incomplete scriptSigs. Please do not extend this, use PSBT instead</comment>
<function><type><name>SignatureData</name></type> <name>DataFromTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>nIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>.</operator><name>scriptSig</name></name> <operator>=</operator> <name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>nIn</name></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>.</operator><name>scriptWitness</name></name> <operator>=</operator> <name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>nIn</name></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Stacks</name></type> <name>stack</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Get signatures</comment>
    <decl_stmt><decl><type><name>MutableTransactionSignatureChecker</name></type> <name>tx_checker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignatureExtractorChecker</name></type> <name>extractor_checker</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tx_checker</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>scriptSig</name></name></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>scriptWitness</name></name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><name>extractor_checker</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>complete</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Get scripts</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>solutions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>script_type</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SigVersion</name></type> <name>sigversion</name> <init>= <expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>next_script</name> <init>= <expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>script_type</name> <operator>==</operator> <name>TX_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the redeemScript</comment>
        <decl_stmt><decl><type><name>CScript</name></type> <name>redeem_script</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>redeem_script</name></name> <operator>=</operator> <name>redeem_script</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next_script</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>redeem_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get redeemScript type</comment>
        <expr_stmt><expr><name>script_type</name> <operator>=</operator> <call><name>Solver</name><argument_list>(<argument><expr><name>next_script</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>script_type</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Get the witnessScript</comment>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witness_script</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>witness_script</name></name> <operator>=</operator> <name>witness_script</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>next_script</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>witness_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get witnessScript type</comment>
        <expr_stmt><expr><name>script_type</name> <operator>=</operator> <call><name>Solver</name><argument_list>(<argument><expr><name>next_script</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stack</name><operator>.</operator><name>script</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>stack</name><operator>.</operator><name>witness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>witness</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sigversion</name> <operator>=</operator> <name><name>SigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>script_type</name> <operator>==</operator> <name>TX_MULTISIG</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Build a map of pubkey -&gt; signature by matching sigs to pubkeys:</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_pubkeys</name> <init>= <expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last_success_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>valtype</name><modifier>&amp;</modifier></type> <name>sig</name> <range>: <expr><name><name>stack</name><operator>.</operator><name>script</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><name>last_success_key</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pubkeys</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>valtype</name><modifier>&amp;</modifier></type> <name>pubkey</name> <init>= <expr><name><name>solutions</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <comment type="line">// We either have a signature for this pubkey, or we have found a signature and it is valid</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>signatures</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>CPubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>extractor_checker</name><operator>.</operator><name>CheckSig</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>, <argument><expr><name>next_script</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>last_success_key</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdateInput</name><parameter_list>(<parameter><decl><type><name>CTxIn</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>scriptSig</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>scriptSig</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>.</operator><name>scriptWitness</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>scriptWitness</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SignatureData</name><operator>::</operator><name>MergeSignatureData</name></name><parameter_list>(<parameter><decl><type><name>SignatureData</name></type> <name>sigdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>complete</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>sigdata</name><operator>.</operator><name>complete</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>redeem_script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sigdata</name><operator>.</operator><name>redeem_script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>redeem_script</name> <operator>=</operator> <name><name>sigdata</name><operator>.</operator><name>redeem_script</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>witness_script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>sigdata</name><operator>.</operator><name>witness_script</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>witness_script</name> <operator>=</operator> <name><name>sigdata</name><operator>.</operator><name>witness_script</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>signatures</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_move_iterator</name></name><argument_list>(<argument><expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>make_move_iterator</name></name><argument_list>(<argument><expr><call><name><name>sigdata</name><operator>.</operator><name>signatures</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SignSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name> <modifier>&amp;</modifier></type><name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>fromPubKey</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>txTo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nIn</name> <operator>&lt;</operator> <call><name><name>txTo</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MutableTransactionSignatureCreator</name></type> <name>creator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SignatureData</name></type> <name>sigdata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>creator</name></expr></argument>, <argument><expr><name>fromPubKey</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><call><name><name>txTo</name><operator>.</operator><name>vin</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>nIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SignSignature</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name> <modifier>&amp;</modifier></type><name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>txFrom</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>txTo</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nIn</name> <operator>&lt;</operator> <call><name><name>txTo</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <init>= <expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><name>nIn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>n</name></name> <operator>&lt;</operator> <call><name><name>txFrom</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <init>= <expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<namespace>namespace <block>{
<comment type="block" format="doxygen">/** Dummy signature checker which accepts all signatures. */</comment>
<class>class <name>DummySignatureChecker</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>BaseSignatureChecker</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><name>DummySignatureChecker</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
    <function><type><name>bool</name></type> <name>CheckSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptCode</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>
<decl_stmt><decl><type><specifier>const</specifier> <name>DummySignatureChecker</name></type> <name>DUMMY_CHECKER</name></decl>;</decl_stmt>

<class>class <name>DummySignatureCreator</name> <specifier>final</specifier> <super_list>: <super><specifier>public</specifier> <name>BaseSignatureCreator</name></super></super_list> <block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name>char</name></type> <name>m_r_len</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>m_s_len</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
</private><public>public:
    <constructor><name>DummySignatureCreator</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>r_len</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>s_len</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_r_len</name><argument_list>(<argument><expr><name>r_len</name></expr></argument>)</argument_list></call>, <call><name>m_s_len</name><argument_list>(<argument><expr><name>s_len</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><specifier>const</specifier> <name>BaseSignatureChecker</name><modifier>&amp;</modifier></type> <name>Checker</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content> <return>return <expr><name>DUMMY_CHECKER</name></expr>;</return> </block_content>}</block></function>
    <function><type><name>bool</name></type> <name>CreateSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyID</name><modifier>&amp;</modifier></type> <name>keyid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptCode</name></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier>
    <block>{<block_content>
        <comment type="line">// Create a dummy signature that is a valid DER-encoding</comment>
        <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>m_r_len</name> <operator>+</operator> <name>m_s_len</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="char">'\000'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x30</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>m_r_len</name> <operator>+</operator> <name>m_s_len</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>m_r_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>m_r_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>m_r_len</name></expr>]</index></name> <operator>=</operator> <name>m_s_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>m_r_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vchSig</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <name>m_r_len</name> <operator>+</operator> <name>m_s_len</name></expr>]</index></name> <operator>=</operator> <name>SIGHASH_ALL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

}</block></namespace>

<decl_stmt><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>DUMMY_SIGNATURE_CREATOR</name> <init>= <expr><call><name>DummySignatureCreator</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BaseSignatureCreator</name><modifier>&amp;</modifier></type> <name>DUMMY_MAXIMUM_SIGNATURE_CREATOR</name> <init>= <expr><call><name>DummySignatureCreator</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>IsSolvable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// This check is to make sure that the script we created can actually be solved for and signed by us</comment>
    <comment type="line">// if we were to have the private keys. This is just to make sure that the script is valid and that,</comment>
    <comment type="line">// if found in a transaction, we would still accept and relay that transaction. In particular,</comment>
    <comment type="line">// it will reject witness outputs that require signing with an uncompressed public key.</comment>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>sigs</name></decl>;</decl_stmt>
    <comment type="line">// Make sure that STANDARD_SCRIPT_VERIFY_FLAGS includes SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, the most</comment>
    <comment type="line">// important property this function is designed to test for.</comment>
    <assert type="static">static_assert<argument_list>(<argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="string">"IsSolvable requires standard script flags to include WITNESS_PUBKEYTYPE"</literal></expr></argument>)</argument_list>;</assert>
    <if_stmt><if>if <condition>(<expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>provider</name></expr></argument>, <argument><expr><name>DUMMY_SIGNATURE_CREATOR</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// VerifyScript check is just defensive, and should never fail.</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>verified</name> <init>= <expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>sigs</name><operator>.</operator><name>scriptSig</name></name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sigs</name><operator>.</operator><name>scriptWitness</name></name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><name>DUMMY_CHECKER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>verified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsSegWitOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>provider</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>solutions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>whichtype</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name> <operator>||</operator> <name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_V0_KEYHASH</name> <operator>||</operator> <name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>whichtype</name> <operator>==</operator> <name>TX_SCRIPTHASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>h160</name> <init>= <expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>.</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>h160</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>whichtype</name> <operator>=</operator> <call><name>Solver</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name> <operator>||</operator> <name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_V0_KEYHASH</name> <operator>||</operator> <name>whichtype</name> <operator>==</operator> <name>TX_WITNESS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>
</unit>
