<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/init.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INIT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INIT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>NodeContext</name>;</struct_decl>
<decl_stmt><decl><type><name>namespace</name></type> <name>boost</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>thread_group</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace boost</comment>

<comment type="block" format="doxygen">/** Interrupt threads */</comment>
<function_decl><type><name>void</name></type> <name>Interrupt</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>Shutdown</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line" format="doxygen">//!Initialize the logging infrastructure</comment>
<function_decl><type><name>void</name></type> <name>InitLogging</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="line" format="doxygen">//!Parameter interaction: change current parameters depending on various rules</comment>
<function_decl><type><name>void</name></type> <name>InitParameterInteraction</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Initialize bitcoin core: Basic context setup.
 *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.
 *  @pre Parameters should be parsed and config file should be read.
 */</comment>
<function_decl><type><name>bool</name></type> <name>AppInitBasicSetup</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * Initialization: parameter interaction.
 * @note This can be done before daemonization. Do not call Shutdown() if this function fails.
 * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.
 */</comment>
<function_decl><type><name>bool</name></type> <name>AppInitParameterInteraction</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * Initialization sanity checks: ecc init, sanity checks, dir lock.
 * @note This can be done before daemonization. Do not call Shutdown() if this function fails.
 * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.
 */</comment>
<function_decl><type><name>bool</name></type> <name>AppInitSanityChecks</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * Lock bitcoin core data directory.
 * @note This should only be done after daemonization. Do not call Shutdown() if this function fails.
 * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.
 */</comment>
<function_decl><type><name>bool</name></type> <name>AppInitLockDataDirectory</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/**
 * Bitcoin core main initialization.
 * @note This should only be done after daemonization. Call Shutdown() if this function fails.
 * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.
 */</comment>
<function_decl><type><name>bool</name></type> <name>AppInitMain</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Setup the arguments for gArgs
 */</comment>
<function_decl><type><name>void</name></type> <name>SetupServerArgs</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Returns licensing information (for -version) */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>LicenseInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INIT_H</comment>
</unit>
