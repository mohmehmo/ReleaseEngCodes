<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Test.java"><package>package <name><name>org</name><operator>.</operator><name>bitcoin</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>common</name><operator>.</operator><name>io</name><operator>.</operator><name>BaseEncoding</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>bitcoin</name><operator>.</operator><name>NativeSecp256k1Util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class holds test cases defined for testing this library.
 */</comment>
<class><specifier>public</specifier> class <name>NativeSecp256k1Test</name> <block>{

    <comment type="line">//TODO improve comments/add more tests</comment>
    <comment type="block" format="javadoc">/**
      * This tests verify() for a valid signature
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testVerifyPos</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "testing"</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sig</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3044022079BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F817980220294F14E883B3F525B5367756C2A11EF6CF84B730B36C17CB0C56F0AAB2C98589"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pub</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>NativeSecp256k1</name><operator>.</operator><name>verify</name></name><argument_list>( <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> , <argument><expr><literal type="string">"testVerifyPos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests verify() for a non-valid signature
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testVerifyNeg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A91"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "testing"</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sig</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3044022079BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F817980220294F14E883B3F525B5367756C2A11EF6CF84B730B36C17CB0C56F0AAB2C98589"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pub</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>NativeSecp256k1</name><operator>.</operator><name>verify</name></name><argument_list>( <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//System.out.println(" TEST " + new BigInteger(1, resultbytes).toString(16));</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> , <argument><expr><literal type="string">"testVerifyNeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests secret key verify() for a valid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testSecKeyVerifyPos</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>NativeSecp256k1</name><operator>.</operator><name>secKeyVerify</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//System.out.println(" TEST " + new BigInteger(1, resultbytes).toString(16));</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> , <argument><expr><literal type="string">"testSecKeyVerifyPos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests secret key verify() for an invalid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testSecKeyVerifyNeg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>NativeSecp256k1</name><operator>.</operator><name>secKeyVerify</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//System.out.println(" TEST " + new BigInteger(1, resultbytes).toString(16));</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> , <argument><expr><literal type="string">"testSecKeyVerifyNeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests public key create() for a valid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPubKeyCreatePos</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>computePubkey</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>pubkeyString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>pubkeyString</name></expr></argument> , <argument><expr><literal type="string">"04C591A8FF19AC9C4E4E5793673B83123437E975285E7B442F4EE2654DFFCA5E2D2103ED494718C697AC9AEBCFD19612E224DB46661011863ED2FC54E71861E2A6"</literal></expr></argument> , <argument><expr><literal type="string">"testPubKeyCreatePos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests public key create() for a invalid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPubKeyCreateNeg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
       <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

       <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>computePubkey</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>String</name></type> <name>pubkeyString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>pubkeyString</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> , <argument><expr><literal type="string">"testPubKeyCreateNeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests sign() for a valid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testSignPos</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "testing"</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>sign</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument>, <argument><expr><literal type="string">"30440220182A108E1448DC8F1FB467D06A0F3BB8EA0533584CB954EF8DA112F1D60E39A202201C66F36DA211C087F3AF88B50EDF4F9BDAA6CF5FD6817E74DCA34DB12390C6E9"</literal></expr></argument> , <argument><expr><literal type="string">"testSignPos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests sign() for a invalid secretkey
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testSignNeg</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "testing"</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>sign</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument> , <argument><expr><literal type="string">"testSignNeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests private key tweak-add
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPrivKeyTweakAdd_1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "tweak"</comment>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>privKeyTweakAdd</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument> , <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument> , <argument><expr><literal type="string">"A168571E189E6F9A7E2D657A4B53AE99B909F7E712D1C23CED28093CD57C88F3"</literal></expr></argument> , <argument><expr><literal type="string">"testPrivKeyAdd_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests private key tweak-mul
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPrivKeyTweakMul_1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "tweak"</comment>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>privKeyTweakMul</name></name><argument_list>( <argument><expr><name>sec</name></expr></argument> , <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument> , <argument><expr><literal type="string">"97F8184235F101550F3C71C927507651BD3F1CDB4A5A33B8986ACF0DEE20FFFC"</literal></expr></argument> , <argument><expr><literal type="string">"testPrivKeyMul_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests private key tweak-add uncompressed
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPrivKeyTweakAdd_2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pub</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "tweak"</comment>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>pubKeyTweakAdd</name></name><argument_list>( <argument><expr><name>pub</name></expr></argument> , <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument> , <argument><expr><literal type="string">"0411C6790F4B663CCE607BAAE08C43557EDC1A4D11D88DFCB3D841D0C6A941AF525A268E2A863C148555C48FB5FBA368E88718A46E205FABC3DBA2CCFFAB0796EF"</literal></expr></argument> , <argument><expr><literal type="string">"testPrivKeyAdd_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests private key tweak-mul uncompressed
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testPrivKeyTweakMul_2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pub</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "tweak"</comment>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>pubKeyTweakMul</name></name><argument_list>( <argument><expr><name>pub</name></expr></argument> , <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>sigString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>sigString</name></expr></argument> , <argument><expr><literal type="string">"04E0FE6FE55EBCA626B98A807F6CAF654139E14E5E3698F01A9A658E21DC1D2791EC060D4F412A794D5370F672BC94B722640B5F76914151CFCA6E712CA48CC589"</literal></expr></argument> , <argument><expr><literal type="string">"testPrivKeyMul_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
      * This tests seed randomization
      */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testRandomize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"A441B15FE9A3CF56661190A0B93B9DEC7D04127288CC87250967CF3B52894D11"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//sha256hash of "random"</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>randomize</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"testRandomize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>testCreateECDHSecret</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>sec</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pub</name> <init>= <expr><call><name><name>BaseEncoding</name><operator>.</operator><name>base16</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>decode</name><argument_list>(<argument><expr><literal type="string">"040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40"</literal><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>resultArr</name> <init>= <expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>createECDHSecret</name></name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>ecdhString</name> <init>= <expr><call><name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>bind</name><operator>.</operator><name>DatatypeConverter</name><operator>.</operator><name>printHexBinary</name></name><argument_list>(<argument><expr><name>resultArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><name>ecdhString</name></expr></argument>, <argument><expr><literal type="string">"2A2A67007A926E6594AF3EB564FC74005B37A9C8AEF2033C4552051B5C87F043"</literal></expr></argument> , <argument><expr><literal type="string">"testCreateECDHSecret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>


        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\n libsecp256k1 enabled: "</literal> <operator>+</operator> <call><name><name>Secp256k1Context</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr><call><name><name>Secp256k1Context</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="string">"isEnabled"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test verify() success/fail</comment>
        <expr_stmt><expr><call><name>testVerifyPos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testVerifyNeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test secKeyVerify() success/fail</comment>
        <expr_stmt><expr><call><name>testSecKeyVerifyPos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testSecKeyVerifyNeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test computePubkey() success/fail</comment>
        <expr_stmt><expr><call><name>testPubKeyCreatePos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testPubKeyCreateNeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test sign() success/fail</comment>
        <expr_stmt><expr><call><name>testSignPos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testSignNeg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test privKeyTweakAdd() 1</comment>
        <expr_stmt><expr><call><name>testPrivKeyTweakAdd_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test privKeyTweakMul() 2</comment>
        <expr_stmt><expr><call><name>testPrivKeyTweakMul_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test privKeyTweakAdd() 3</comment>
        <expr_stmt><expr><call><name>testPrivKeyTweakAdd_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test privKeyTweakMul() 4</comment>
        <expr_stmt><expr><call><name>testPrivKeyTweakMul_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test randomize()</comment>
        <expr_stmt><expr><call><name>testRandomize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Test ECDH</comment>
        <expr_stmt><expr><call><name>testCreateECDHSecret</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>NativeSecp256k1</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" All tests passed."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>
}</block></class>
</unit>
