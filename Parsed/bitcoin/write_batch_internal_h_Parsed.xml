<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/write_batch_internal.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/dbformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/write_batch.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemTable</name></decl>;</decl_stmt>

<comment type="line">// WriteBatchInternal provides static methods for manipulating a</comment>
<comment type="line">// WriteBatch that we don't want in the public WriteBatch interface.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WriteBatchInternal</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Return the number of entries in the batch.</comment>
  <function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Count</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Set the count for the number of entries in the batch.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetCount</name><parameter_list>(<parameter><decl><type><name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Return the sequence number for the start of this batch.</comment>
  <function_decl><type><specifier>static</specifier> <name>SequenceNumber</name></type> <name>Sequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Store the specified number as the sequence number for the start of</comment>
  <comment type="line">// this batch.</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetSequence</name><parameter_list>(<parameter><decl><type><name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name>SequenceNumber</name></type> <name>seq</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><type><specifier>static</specifier> <name>Slice</name></type> <name>Contents</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Slice</name><argument_list>(<argument><expr><name><name>batch</name><operator>-&gt;</operator><name>rep_</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>static</specifier> <name>size_t</name></type> <name>ByteSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>batch</name><operator>-&gt;</operator><name>rep_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetContents</name><parameter_list>(<parameter><decl><type><name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>contents</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>Status</name></type> <name>InsertInto</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name>MemTable</name><modifier>*</modifier></type> <name>memtable</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Append</name><parameter_list>(<parameter><decl><type><name>WriteBatch</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WriteBatch</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_WRITE_BATCH_INTERNAL_H_</comment>
</unit>
