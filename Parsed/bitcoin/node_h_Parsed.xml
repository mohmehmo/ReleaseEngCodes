<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/interfaces/node.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INTERFACES_NODE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INTERFACES_NODE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>     <comment type="line">// For CAmount</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>        <comment type="line">// For CConnman::NumConnections</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_types.h&gt;</cpp:file></cpp:include>  <comment type="line">// For banmap_t</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include> <comment type="line">// For Network</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include> <comment type="line">// For SecureString</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BanMan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CCoinControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CFeeRate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CNodeStats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Coin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RPCTimerInterface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UniValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>proxyType</name></decl>;</decl_stmt>
<struct_decl>struct <name>CNodeStateStats</name>;</struct_decl>
<struct_decl>struct <name>NodeContext</name>;</struct_decl>
<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>WalletCreationStatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Top-level interface for a bitcoin node (bitcoind process).</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>Node</name><argument_list>()</argument_list></macro> <block>{}</block>

    <comment type="line" format="doxygen">//! Send init error.</comment>
    <name>virtual</name> <name>void</name> <call><name>initError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Set command line arguments.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>parseParameters</name><argument_list>(<argument><expr><name>int</name> <name>argc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier> <name><name>argv</name><index>[]</index></name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Set a command line argument</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>forceSetArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>arg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Set a command line argument if it doesn't already have a value</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>softSetArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>arg</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Set a command line boolean argument if it doesn't already have a value</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>softSetBoolArg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>arg</name></expr></argument>, <argument><expr><name>bool</name> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Load settings from configuration file.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>readConfigFiles</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Choose network parameters.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>selectParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>network</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get the (assumed) blockchain size.</comment>
    <function_decl><type><name>virtual</name> <name>uint64_t</name></type> <name>getAssumedBlockchainSize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get the (assumed) chain state size.</comment>
    <function_decl><type><name>virtual</name> <name>uint64_t</name></type> <name>getAssumedChainStateSize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get network name.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getNetwork</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Init logging.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>initLogging</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Init parameter interaction.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>initParameterInteraction</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get warnings.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getWarnings</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>type</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// Get log flags.</comment>
    <function_decl><type><name>virtual</name> <name>uint32_t</name></type> <name>getLogCategories</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Initialize app dependencies.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>baseInitialize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Start node.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>appInitMain</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Stop node.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>appShutdown</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Start shutdown.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>startShutdown</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return whether shutdown was requested.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>shutdownRequested</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Setup arguments</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setupServerArgs</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Map port.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>mapPort</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_upnp</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get proxy.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getProxy</name><parameter_list>(<parameter><decl><type><name>Network</name></type> <name>net</name></decl></parameter>, <parameter><decl><type><name>proxyType</name><modifier>&amp;</modifier></type> <name>proxy_info</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get number of connections.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>size_t</name></type> <name>getNodeCount</name><argument_list>(<argument><expr><name>CConnman</name><operator>::</operator><name>NumConnections</name> <name>flags</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Get stats for connected nodes.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NodesStats</name> <init>= <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>CNodeStats</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>CNodeStateStats</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getNodesStats</name><parameter_list>(<parameter><decl><type><name>NodesStats</name><modifier>&amp;</modifier></type> <name>stats</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get ban map entries.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getBanned</name><parameter_list>(<parameter><decl><type><name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Ban node.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>ban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>, <parameter><decl><type><name>BanReason</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Unban node.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>unban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>ip</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Disconnect node by address.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Disconnect node by id.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>disconnect</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>id</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get total bytes recv.</comment>
    <function_decl><type><name>virtual</name> <name>int64_t</name></type> <name>getTotalBytesRecv</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get total bytes sent.</comment>
    <function_decl><type><name>virtual</name> <name>int64_t</name></type> <name>getTotalBytesSent</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get mempool size.</comment>
    <function_decl><type><name>virtual</name> <name>size_t</name></type> <name>getMempoolSize</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get mempool dynamic usage.</comment>
    <function_decl><type><name>virtual</name> <name>size_t</name></type> <name>getMempoolDynamicUsage</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get header tip height and time.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getHeaderTip</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>block_time</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get num blocks.</comment>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getNumBlocks</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get last block time.</comment>
    <function_decl><type><name>virtual</name> <name>int64_t</name></type> <name>getLastBlockTime</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get verification progress.</comment>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getVerificationProgress</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Is initial block download.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isInitialBlockDownload</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get reindex.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getReindex</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get importing.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getImporting</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Set network active.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setNetworkActive</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get network active.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getNetworkActive</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Estimate smart fee.</comment>
    <function_decl><type><name>virtual</name> <name>CFeeRate</name></type> <name>estimateSmartFee</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num_blocks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>conservative</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>returned_target</name> <init>= <expr><name>nullptr</name></expr></init></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get dust relay fee.</comment>
    <function_decl><type><name>virtual</name> <name>CFeeRate</name></type> <name>getDustRelayFee</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Execute rpc command.</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>UniValue</name></type> <name>executeRpc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>command</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>params</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>uri</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! List rpc commands.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>listRpcCommands</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Set RPC timer interface if unset.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>rpcSetTimerInterfaceIfUnset</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name><modifier>*</modifier></type> <name>iface</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Unset RPC timer interface.</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>rpcUnsetTimerInterface</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name><modifier>*</modifier></type> <name>iface</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Get unspent outputs associated with a transaction.</comment>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>getUnspentOutput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

    <comment type="line" format="doxygen">//! Return default wallet directory.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <call><name>getWalletDir</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Return available wallets in wallet directory.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <call><name>listWalletDir</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Return interfaces for accessing wallets (if any).</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <call><name>getWallets</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Attempts to load a wallet from file or directory.</comment>
    <comment type="line" format="doxygen">//! The loaded wallet is also notified to handlers previously registered</comment>
    <comment type="line" format="doxygen">//! with handleLoadWallet.</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name> <call><name>loadWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>warnings</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Create a wallet from file</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>WalletCreationStatus</name></type> <name>createWallet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SecureString</name><operator>&amp;</operator> <name>passphrase</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>wallet_creation_flags</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>error</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>warnings</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>result</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Register handler for init messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>InitMessageFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleInitMessage</name><argument_list>(<argument>InitMessageFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for message box messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>MessageBoxFn</name> <init>=
        <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name>, <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>caption</name>, <name>unsigned</name> <name>int</name> <name>style</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleMessageBox</name><argument_list>(<argument>MessageBoxFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for question messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>QuestionFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name>,
        <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>non_interactive_message</name>,
        <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>caption</name>,
        <name>unsigned</name> <name>int</name> <name>style</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleQuestion</name><argument_list>(<argument>QuestionFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for progress messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>ShowProgressFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>title</name>, <name>int</name> <name>progress</name>, <name>bool</name> <name>resume_possible</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleShowProgress</name><argument_list>(<argument>ShowProgressFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for load wallet messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>LoadWalletFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name> <name>wallet</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleLoadWallet</name><argument_list>(<argument>LoadWalletFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for number of connections changed messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NotifyNumConnectionsChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>int</name> <name>new_num_connections</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleNotifyNumConnectionsChanged</name><argument_list>(<argument>NotifyNumConnectionsChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for network active messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NotifyNetworkActiveChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>network_active</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleNotifyNetworkActiveChanged</name><argument_list>(<argument>NotifyNetworkActiveChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for notify alert messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NotifyAlertChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleNotifyAlertChanged</name><argument_list>(<argument>NotifyAlertChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for ban list messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>BannedListChangedFn</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleBannedListChanged</name><argument_list>(<argument>BannedListChangedFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for block tip messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NotifyBlockTipFn</name> <init>=
        <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>initial_download</name>, <name>int</name> <name>height</name>, <name>int64_t</name> <name>block_time</name>, <name>double</name> <name>verification_progress</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleNotifyBlockTip</name><argument_list>(<argument>NotifyBlockTipFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Register handler for header tip messages.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>NotifyHeaderTipFn</name> <init>=
        <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><name>bool</name> <name>initial_download</name>, <name>int</name> <name>height</name>, <name>int64_t</name> <name>block_time</name>, <name>double</name> <name>verification_progress</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name> <macro><name>handleNotifyHeaderTip</name><argument_list>(<argument>NotifyHeaderTipFn fn</argument>)</argument_list></macro> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Return pointer to internal chain interface, useful for testing.</comment>
    <function><type><name>virtual</name> <name>NodeContext</name><modifier>*</modifier></type> <name>context</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>nullptr</name></expr>;</return> </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line" format="doxygen">//! Return implementation of Node interface.</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name> <call><name>MakeNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INTERFACES_NODE_H</comment>
</unit>
