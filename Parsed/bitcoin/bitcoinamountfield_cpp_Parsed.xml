<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoinamountfield.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinamountfield.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/qvaluecombobox.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractSpinBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QHBoxLayout&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLineEdit&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** QSpinBox that uses fixed-point numbers internally and uses our own
 * formatting/parsing functions.
 */</comment>
<class>class <name>AmountSpinBox</name><super_list>: <super><specifier>public</specifier> <name>QAbstractSpinBox</name></super></super_list>
<block>{<private type="default">
    <macro><name>Q_OBJECT</name></macro>

</private><public>public:
    <constructor><specifier>explicit</specifier> <name>AmountSpinBox</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>QAbstractSpinBox</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content>
        <expr_stmt><expr><call><name>setAlignment</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AlignRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name>lineEdit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textEdited</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AmountSpinBox</name><operator>::</operator><name>valueChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name><name>QValidator</name><operator>::</operator><name>State</name></name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>QString</name> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>pos</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>text</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>QValidator</name><operator>::</operator><name>Intermediate</name></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>parse</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Make sure we return Intermediate so that fixup() is called on defocus */</comment>
        <return>return <expr><ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><name><name>QValidator</name><operator>::</operator><name>Intermediate</name></name></expr> </then><else>: <expr><name><name>QValidator</name><operator>::</operator><name>Invalid</name></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>fixup</name><parameter_list>(<parameter><decl><type><name>QString</name> <modifier>&amp;</modifier></type><name>input</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>val</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>m_allow_empty</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <name>m_min_amount</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>parse</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>qBound</name><argument_list>(<argument><expr><name>m_min_amount</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>m_max_amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>currentUnit</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lineEdit</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setText</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>CAmount</name></type> <name>value</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>valid_out</name><init>=<expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><call><name>parse</name><argument_list>(<argument><expr><call><name>text</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>valid_out</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>lineEdit</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>currentUnit</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>valueChanged</name><argument_list>()</argument_list></decl>;</decl_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetAllowEmpty</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>m_allow_empty</name> <operator>=</operator> <name>allow</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetMinValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>m_min_amount</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetMaxValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>m_max_amount</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>stepBy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>val</name> <init>= <expr><call><name>value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name> <operator>+</operator> <name>steps</name> <operator>*</operator> <name>singleStep</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>qBound</name><argument_list>(<argument><expr><name>m_min_amount</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>m_max_amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setDisplayUnit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>val</name> <init>= <expr><call><name>value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>currentUnit</name> <operator>=</operator> <name>unit</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lineEdit</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setPlaceholderText</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>currentUnit</name></expr></argument>, <argument><expr><name>m_min_amount</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setSingleStep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>step</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>singleStep</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>QSize</name></type> <name>minimumSizeHint</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>cachedMinimumSizeHint</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ensurePolished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>QFontMetrics</name></type> <name>fm</name><argument_list>(<argument><expr><call><name>fontMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>lineEdit</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>minimumSizeHint</name><argument_list>()</argument_list></call><operator>.</operator><call><name>height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>BTC</name></name></expr></argument>, <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>maxMoney</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>w</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// cursor blinking space</comment>

            <decl_stmt><decl><type><name>QStyleOptionSpinBox</name></type> <name>opt</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>initStyleOption</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>QSize</name></type> <name>hint</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QSize</name></type> <name>extra</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>opt</name><operator>.</operator><name>rect</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>hint</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>extra</name> <operator>+=</operator> <name>hint</name> <operator>-</operator> <call><name>style</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>subControlRect</name><argument_list>(<argument><expr><name><name>QStyle</name><operator>::</operator><name>CC_SpinBox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,
                                                    <argument><expr><name><name>QStyle</name><operator>::</operator><name>SC_SpinBoxEditField</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// get closer to final result by repeating the calculation</comment>
            <expr_stmt><expr><call><name><name>opt</name><operator>.</operator><name>rect</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name>hint</name> <operator>+</operator> <name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>extra</name> <operator>+=</operator> <name>hint</name> <operator>-</operator> <call><name>style</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>subControlRect</name><argument_list>(<argument><expr><name><name>QStyle</name><operator>::</operator><name>CC_SpinBox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,
                                                    <argument><expr><name><name>QStyle</name><operator>::</operator><name>SC_SpinBoxEditField</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hint</name> <operator>+=</operator> <name>extra</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hint</name><operator>.</operator><name>setHeight</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>opt</name><operator>.</operator><name>rect</name></name> <operator>=</operator> <call><name>rect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>cachedMinimumSizeHint</name> <operator>=</operator> <call><name>style</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>sizeFromContents</name><argument_list>(<argument><expr><name><name>QStyle</name><operator>::</operator><name>CT_SpinBox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>expandedTo</name><argument_list>(<argument><expr><call><name><name>QApplication</name><operator>::</operator><name>globalStrut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>cachedMinimumSizeHint</name></expr>;</return>
    </block_content>}</block></function>

</public><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>currentUnit</name><argument_list>{<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>BTC</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>singleStep</name><argument_list>{<argument><expr><macro><name>CAmount</name><argument_list>(<argument><literal type="number">100000</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt> <comment type="line">// satoshis</comment>
    <decl_stmt><decl><type><specifier>mutable</specifier> <name>QSize</name></type> <name>cachedMinimumSizeHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_allow_empty</name><argument_list>{<argument><expr><literal type="boolean">true</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>m_min_amount</name><argument_list>{<argument><expr><macro><name>CAmount</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>m_max_amount</name><argument_list>{<argument><expr><macro><name>BitcoinUnits</name></macro><name><operator>::</operator><name>maxMoney</name></name><operator>(</operator><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Parse a string into a number of base monetary units and
     * return validity.
     * @note Must return 0 if !valid.
     */</comment>
    <function><type><name>CAmount</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>valid_out</name><init>=<expr><literal type="null">nullptr</literal></expr></init></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>parse</name></name><argument_list>(<argument><expr><name>currentUnit</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>valid</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <call><name><name>BitcoinUnits</name><operator>::</operator><name>maxMoney</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>valid_out</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>*</operator><name>valid_out</name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

</private><protected>protected:
    <function><type><name>bool</name></type> <name>event</name><parameter_list>(<parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name> <operator>||</operator> <call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyRelease</name></name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>keyEvent</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>keyEvent</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Comma</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Translate a comma into a period</comment>
                <decl_stmt><decl><type><name>QKeyEvent</name></type> <name>periodKeyEvent</name><argument_list>(<argument><expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>Key_Period</name></name></expr></argument>, <argument><expr><call><name><name>keyEvent</name><operator>-&gt;</operator><name>modifiers</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><call><name><name>keyEvent</name><operator>-&gt;</operator><name>isAutoRepeat</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keyEvent</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <return>return <expr><call><name><name>QAbstractSpinBox</name><operator>::</operator><name>event</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>periodKeyEvent</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>QAbstractSpinBox</name><operator>::</operator><name>event</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>StepEnabled</name></type> <name>stepEnabled</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isReadOnly</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Disable steps when AmountSpinBox is read-only</comment>
            <return>return <expr><name>StepNone</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>text</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Allow step-up with empty field</comment>
            <return>return <expr><name>StepUpEnabled</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>StepEnabled</name></type> <name>rv</name> <init>= <expr><name>StepNone</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>val</name> <init>= <expr><call><name>value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>m_min_amount</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>StepDownEnabled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name>m_max_amount</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>rv</name> <operator>|=</operator> <name>StepUpEnabled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    </block_content>}</block></function>

<label><name>Q_SIGNALS</name>:</label>
    <function_decl><type><name>void</name></type> <name>valueChanged</name><parameter_list>()</parameter_list>;</function_decl>
</protected>}</block>;</class>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinamountfield.moc&gt;</cpp:file></cpp:include>

<constructor><name><name>BitcoinAmountField</name><operator>::</operator><name>BitcoinAmountField</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>amount</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>amount</name> <operator>=</operator> <operator>new</operator> <call><name>AmountSpinBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setLocale</name></name><argument_list>(<argument><expr><call><name><name>QLocale</name><operator>::</operator><name>c</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setMaximumWidth</name></name><argument_list>(<argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QHBoxLayout</name> <modifier>*</modifier></type><name>layout</name> <init>= <expr><operator>new</operator> <call><name>QHBoxLayout</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>unit</name> <operator>=</operator> <operator>new</operator> <call><name>QValueComboBox</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unit</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BitcoinUnits</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>-&gt;</operator><name>addStretch</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>layout</name><operator>-&gt;</operator><name>setContentsMargins</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setFocusPolicy</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>TabFocus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setFocusProxy</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If one if the widgets changes, the combined content changes as well</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AmountSpinBox</name><operator>::</operator><name>valueChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinAmountField</name><operator>::</operator><name>valueChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>connect</name><argument_list>(<argument>unit</argument>, <argument>static_cast&lt;void (QComboBox::*)(int)&gt;(&amp;QComboBox::currentIndexChanged)</argument>, <argument>this</argument>, <argument>&amp;BitcoinAmountField::unitChanged</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="line">// Set default based on configuration</comment>
    <expr_stmt><expr><call><name>unitChanged</name><argument_list>(<argument><expr><call><name><name>unit</name><operator>-&gt;</operator><name>currentIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>clear</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unit</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setEnabled</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fEnabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>fEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unit</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>fEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>validate</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setValid</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><name>STYLE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>FocusIn</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Clear invalid flag on focus</comment>
        <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QWidget</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QWidget</name> <modifier>*</modifier></type><name><name>BitcoinAmountField</name><operator>::</operator><name>setupTabChain</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>setTabOrder</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>setTabOrder</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>unit</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAmount</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>value</name></name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>valid_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>amount</name><operator>-&gt;</operator><name>value</name></name><argument_list>(<argument><expr><name>valid_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setValue</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>SetAllowEmpty</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>allow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>SetAllowEmpty</name></name><argument_list>(<argument><expr><name>allow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>SetMinValue</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>SetMinValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>SetMaxValue</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>SetMaxValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setReadOnly</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fReadOnly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setReadOnly</name></name><argument_list>(<argument><expr><name>fReadOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>unitChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Use description tooltip for current unit for the combobox</comment>
    <expr_stmt><expr><call><name><name>unit</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>unit</name><operator>-&gt;</operator><name>itemData</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>ToolTipRole</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Determine new unit ID</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>newUnit</name> <init>= <expr><call><name><name>unit</name><operator>-&gt;</operator><name>itemData</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>UnitRole</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setDisplayUnit</name></name><argument_list>(<argument><expr><name>newUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setDisplayUnit</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newUnit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>unit</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>newUnit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinAmountField</name><operator>::</operator><name>setSingleStep</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>step</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>amount</name><operator>-&gt;</operator><name>setSingleStep</name></name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
