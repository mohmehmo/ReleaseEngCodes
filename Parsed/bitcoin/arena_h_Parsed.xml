<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/arena.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_ARENA_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_ARENA_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Arena</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>Arena</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>Arena</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Return a pointer to a newly allocated memory block of "bytes" bytes.</comment>
  <function_decl><type><name>char</name><modifier>*</modifier></type> <name>Allocate</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Allocate memory with the normal alignment guarantees provided by malloc</comment>
  <function_decl><type><name>char</name><modifier>*</modifier></type> <name>AllocateAligned</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Returns an estimate of the total memory usage of data allocated</comment>
  <comment type="line">// by the arena.</comment>
  <expr_stmt><expr><name>size_t</name> <macro><name>MemoryUsage</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>memory_usage_</name><operator>.</operator><name>NoBarrier_Load</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>char</name><modifier>*</modifier></type> <name>AllocateFallback</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>char</name><modifier>*</modifier></type> <name>AllocateNewBlock</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>block_bytes</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Allocation state</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>alloc_ptr_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>alloc_bytes_remaining_</name></decl>;</decl_stmt>

  <comment type="line">// Array of new[] allocated memory blocks</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>blocks_</name></expr>;</expr_stmt>

  <comment type="line">// Total memory usage of the arena.</comment>
  <expr_stmt><expr><name>port</name><operator>::</operator><name>AtomicPointer</name> <name>memory_usage_</name></expr>;</expr_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Arena</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Arena</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Arena</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>char</name><operator>*</operator> <name>Arena</name><operator>::</operator><macro><name>Allocate</name><argument_list>(<argument>size_t bytes</argument>)</argument_list></macro> <block>{
  <comment type="line">// The semantics of what to return are a bit messy if we allow</comment>
  <comment type="line">// 0-byte allocations, so we disallow them here (we don't need</comment>
  <comment type="line">// them for our internal use).</comment>
  <expr><call><name>assert</name><argument_list>(<argument><expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
  <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;=</operator> <name>alloc_bytes_remaining_</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><name>alloc_ptr_</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>alloc_ptr_</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>alloc_bytes_remaining_</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  <expr_stmt/>}</block_content>
  return AllocateFallback(bytes</block></if></if_stmt>)</block></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

}  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_ARENA_H_</comment>
</unit>
