<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoinunits.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_BITCOINUNITS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_BITCOINUNITS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractListModel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<comment type="line">// U+2009 THIN SPACE = UTF-8 E2 80 89</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_THIN_SP_CP</name></cpp:macro> <cpp:value>0x2009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_THIN_SP_UTF8</name></cpp:macro> <cpp:value>"\xE2\x80\x89"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REAL_THIN_SP_HTML</name></cpp:macro> <cpp:value>"&amp;thinsp;"</cpp:value></cpp:define>

<comment type="line">// U+200A HAIR SPACE = UTF-8 E2 80 8A</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIR_SP_CP</name></cpp:macro> <cpp:value>0x200A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIR_SP_UTF8</name></cpp:macro> <cpp:value>"\xE2\x80\x8A"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAIR_SP_HTML</name></cpp:macro> <cpp:value>"&amp;#8202;"</cpp:value></cpp:define>

<comment type="line">// U+2006 SIX-PER-EM SPACE = UTF-8 E2 80 86</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIXPEREM_SP_CP</name></cpp:macro> <cpp:value>0x2006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIXPEREM_SP_UTF8</name></cpp:macro> <cpp:value>"\xE2\x80\x86"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIXPEREM_SP_HTML</name></cpp:macro> <cpp:value>"&amp;#8198;"</cpp:value></cpp:define>

<comment type="line">// U+2007 FIGURE SPACE = UTF-8 E2 80 87</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIGURE_SP_CP</name></cpp:macro> <cpp:value>0x2007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIGURE_SP_UTF8</name></cpp:macro> <cpp:value>"\xE2\x80\x87"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIGURE_SP_HTML</name></cpp:macro> <cpp:value>"&amp;#8199;"</cpp:value></cpp:define>

<comment type="line">// QMessageBox seems to have a bug whereby it doesn't display thin/hair spaces</comment>
<comment type="line">// correctly.  Workaround is to display a space in a small font.  If you</comment>
<comment type="line">// change this, please test that it doesn't cause the parent span to start</comment>
<comment type="line">// wrapping.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_HACK_SP</name></cpp:macro> <cpp:value>"&lt;span style='white-space: nowrap; font-size: 6pt'&gt; &lt;/span&gt;"</cpp:value></cpp:define>

<comment type="line">// Define THIN_SP_* variables to be our preferred type of thin space</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THIN_SP_CP</name></cpp:macro>   <cpp:value>REAL_THIN_SP_CP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THIN_SP_UTF8</name></cpp:macro> <cpp:value>REAL_THIN_SP_UTF8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THIN_SP_HTML</name></cpp:macro> <cpp:value>HTML_HACK_SP</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Bitcoin unit definitions. Encapsulates parsing and formatting
   and serves as list model for drop-down selection boxes.
*/</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BitcoinUnits</name><range>: <expr><name>public</name> <name>QAbstractListModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>BitcoinUnits</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Bitcoin units.
      @note Source: https://en.bitcoin.it/wiki/Units . Please add only sensible ones
     */</comment>
    enum <expr><name>Unit</name>
    <block>{
        <expr><name>BTC</name></expr>,
        <expr><name>mBTC</name></expr>,
        <expr><name>uBTC</name></expr>,
        <expr><name>SAT</name></expr>
    }</block></expr>;

    enum <expr><name>SeparatorStyle</name>
    <block>{
        <expr><name>separatorNever</name></expr>,
        <expr><name>separatorStandard</name></expr>,
        <expr><name>separatorAlways</name></expr>
    }</block></expr>;

    <comment type="line" format="doxygen">//! @name Static API</comment>
    <comment type="line" format="doxygen">//! Unit conversion and formatting</comment>
    <comment type="line" format="doxygen">///@{</comment>

    <comment type="line" format="doxygen">//! Get list of units, for drop-down box</comment>
    <expr><specifier>static</specifier> <name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>Unit</name></expr></argument>&gt;</argument_list></name> <call><name>availableUnits</name><argument_list>()</argument_list></call></expr>;
    <comment type="line" format="doxygen">//! Is unit ID valid?</comment>
    <expr><specifier>static</specifier> <name>bool</name> <macro><name>valid</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Long name</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>longName</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Short name</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>shortName</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Longer description</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>description</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Number of Satoshis (1e-8) per unit</comment>
    <expr><specifier>static</specifier> <name>qint64</name> <macro><name>factor</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Number of decimals left</comment>
    <expr><specifier>static</specifier> <name>int</name> <macro><name>decimals</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Format as string</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>format</name><argument_list>(<argument>int unit</argument>, <argument>const CAmount&amp; amount</argument>, <argument>bool plussign=false</argument>, <argument>SeparatorStyle separators=separatorStandard</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Format as string (with unit)</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>formatWithUnit</name><argument_list>(<argument>int unit</argument>, <argument>const CAmount&amp; amount</argument>, <argument>bool plussign=false</argument>, <argument>SeparatorStyle separators=separatorStandard</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Format as HTML string (with unit)</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>formatHtmlWithUnit</name><argument_list>(<argument>int unit</argument>, <argument>const CAmount&amp; amount</argument>, <argument>bool plussign=false</argument>, <argument>SeparatorStyle separators=separatorStandard</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Parse string to coin amount</comment>
    <expr><specifier>static</specifier> <name>bool</name> <macro><name>parse</name><argument_list>(<argument>int unit</argument>, <argument>const QString &amp;value</argument>, <argument>CAmount *val_out</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">//! Gets title for amount column including current display unit if optionsModel reference available */</comment>
    <expr><specifier>static</specifier> <name>QString</name> <macro><name>getAmountColumnTitle</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">///@}</comment>

    <comment type="line" format="doxygen">//! @name AbstractListModel implementation</comment>
    <comment type="line" format="doxygen">//! List model for unit drop-down selection box.</comment>
    <comment type="line" format="doxygen">///@{</comment>
    enum <expr><name>RoleIndex</name> <block>{
        <comment type="block" format="doxygen">/** Unit identifier */</comment>
        <expr><name>UnitRole</name> <operator>=</operator> <name>Qt</name><operator>::</operator><name>UserRole</name></expr>
    }</block></expr>;
    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <comment type="line" format="doxygen">///@}</comment>

    <expr><specifier>static</specifier> <name>QString</name> <macro><name>removeSpaces</name><argument_list>(<argument>QString text</argument>)</argument_list></macro>
    <block>{
        <expr><call><name><name>text</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>text</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>QChar</name><argument_list>(<argument><expr><name>THIN_SP_CP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>THIN_SP_CP</name> <operator>!=</operator> <name>REAL_THIN_SP_CP</name><operator>)</operator></expr></cpp:if>
        <expr><call><name><name>text</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>QChar</name><argument_list>(<argument><expr><name>REAL_THIN_SP_CP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><name>text</name></expr>;</return>
    }</block>

    <comment type="line" format="doxygen">//! Return maximum number of base units (Satoshis)</comment>
    <specifier>static</specifier> <name>CAmount</name> <call><name>maxMoney</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></expr></argument>&gt;</argument_list></name> <name>unitlist</name></expr>;
}</block></expr></range></decl>;</decl_stmt>
<typedef>typedef <expr_stmt><expr><name>BitcoinUnits</name><operator>::</operator><name>Unit</name> <name>BitcoinUnit</name></expr>;</expr_stmt></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_BITCOINUNITS_H</comment>
</unit>
