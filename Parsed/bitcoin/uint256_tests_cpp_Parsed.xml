<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/uint256_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arith_uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>uint256_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>R1Array</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x9c\x52\x4a\xdb\xcf\x56\x11\x12\x2b\x29\x12\x5e\x5d\x35\xd2\xd2"</literal>
    <literal type="string">"\x22\x81\xaa\xb5\x33\xf0\x08\x32\xd5\x56\xb1\xf9\xea\xe5\x1d\x7d"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>R1ArrayHex</name><index>[]</index></name> <init>= <expr><literal type="string">"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>R1L</name> <init>= <macro><name>uint256</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R1Array,R1Array+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint160</name></type> <name>R1S</name> <init>= <macro><name>uint160</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R1Array,R1Array+<literal type="number">20</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>R2Array</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x70\x32\x1d\x7c\x47\xa5\x6b\x40\x26\x7e\x0a\xc3\xa6\x9c\xb6\xbf"</literal>
    <literal type="string">"\x13\x30\x47\xa3\x19\x2d\xda\x71\x49\x13\x72\xf0\xb4\xca\x81\xd7"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>R2L</name> <init>= <macro><name>uint256</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R2Array,R2Array+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint160</name></type> <name>R2S</name> <init>= <macro><name>uint160</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R2Array,R2Array+<literal type="number">20</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ZeroArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal>
    <literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>ZeroL</name> <init>= <macro><name>uint256</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(ZeroArray,ZeroArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint160</name></type> <name>ZeroS</name> <init>= <macro><name>uint160</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(ZeroArray,ZeroArray+<literal type="number">20</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OneArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal>
    <literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>OneL</name> <init>= <macro><name>uint256</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(OneArray,OneArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint160</name></type> <name>OneS</name> <init>= <macro><name>uint160</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(OneArray,OneArray+<literal type="number">20</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>MaxArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"</literal>
    <literal type="string">"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>MaxL</name> <init>= <macro><name>uint256</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(MaxArray,MaxArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint160</name></type> <name>MaxS</name> <init>= <macro><name>uint160</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(MaxArray,MaxArray+<literal type="number">20</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ArrayToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>A</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>stringstream</name></name></type> <name>Stream</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>Stream</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>hex</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>Stream</name><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>setw</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>setfill</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>A</name><index>[<expr><name>width</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>uint160</name></type> <name>uint160S</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint160</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>inline</specifier> <name>uint160</name></type> <name>uint160S</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint160</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>basics</argument> )</argument_list></macro> <comment type="line">// constructors, equality, inequality</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// constructor uint256(vector&lt;char&gt;):</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R1Array</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R1Array</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R2Array</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R2Array</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>OneArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>OneArray</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>MaxArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>MaxArray</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// == and !=</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>!=</operator> <name>R2L</name> <operator>&amp;&amp;</operator> <name>R1S</name> <operator>!=</operator> <name>R2S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>!=</operator> <name>OneL</name> <operator>&amp;&amp;</operator> <name>ZeroS</name> <operator>!=</operator> <name>OneS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>OneL</name> <operator>!=</operator> <name>ZeroL</name> <operator>&amp;&amp;</operator> <name>OneS</name> <operator>!=</operator> <name>ZeroS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>!=</operator> <name>ZeroL</name> <operator>&amp;&amp;</operator> <name>MaxS</name> <operator>!=</operator> <name>ZeroS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// String Constructor and Copy Constructor</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>MaxL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"   0x"</literal><operator>+</operator><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"   "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><name>R1ArrayHex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256</name><argument_list>(<argument><expr><name>ZeroL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint256</name><argument_list>(<argument><expr><name>OneL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R2S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R2S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>ZeroS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>OneS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>MaxS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>MaxS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">"   0x"</literal><operator>+</operator><call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"   "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160S</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1S</name> <operator>==</operator> <call><name>uint160S</name><argument_list>(<argument><expr><name>R1ArrayHex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name>R1S</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name>ZeroS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name>OneS</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>comparison</argument> )</argument_list></macro> <comment type="line">// &lt;= &gt;= &lt; &gt;</comment>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>LastL</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>TmpL</name></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><call><name><name>TmpL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>LastL</name> <operator>&lt;</operator> <name>TmpL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>LastL</name> <operator>=</operator> <name>TmpL</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>ZeroL</name> <operator>&lt;</operator> <name>R1L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R2L</name> <operator>&lt;</operator> <name>R1L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>ZeroL</name> <operator>&lt;</operator> <name>OneL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>OneL</name> <operator>&lt;</operator> <name>MaxL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R1L</name> <operator>&lt;</operator> <name>MaxL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R2L</name> <operator>&lt;</operator> <name>MaxL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint160</name></type> <name>LastS</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">159</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint160</name></type> <name>TmpS</name></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><call><name><name>TmpS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>|=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><literal type="number">7</literal><operator>-</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>LastS</name> <operator>&lt;</operator> <name>TmpS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>LastS</name> <operator>=</operator> <name>TmpS</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>ZeroS</name> <operator>&lt;</operator> <name>R1S</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R2S</name> <operator>&lt;</operator> <name>R1S</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>ZeroS</name> <operator>&lt;</operator> <name>OneS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>OneS</name> <operator>&lt;</operator> <name>MaxS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R1S</name> <operator>&lt;</operator> <name>MaxS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R2S</name> <operator>&lt;</operator> <name>MaxS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>methods</argument> )</argument_list></macro> <comment type="line">// GetHex SetHex begin() end() size() GetLow64 GetSerializeSize, Serialize, Unserialize</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>uint256</name></type> <name>TmpL</name><parameter_list>(<parameter><decl><type><name>R1L</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <call><name>uint256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>TmpL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R2Array</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ZeroArray</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OneArray</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal> <operator>==</operator> <call><name><name>R1L</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal> <operator>==</operator> <call><name><name>R2L</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal> <operator>==</operator> <call><name><name>OneL</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal> <operator>==</operator> <call><name><name>MaxL</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>TmpL</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">32</literal> <operator>==</operator> <call><name><name>TmpL</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>ZeroL</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>R1L</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>R1Array</name></expr></argument>,<argument><expr><name>R1Array</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>==</operator> <name>TmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>ZeroL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><name>ZeroArray</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>==</operator> <name>TmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>MaxL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>MaxArray</name></expr></argument>,<argument><expr><name>MaxArray</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>==</operator> <name>TmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R2S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneS</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>OneS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxS</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>MaxS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>uint160</name></type> <name>TmpS</name><parameter_list>(<parameter><decl><type><name>R1S</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpS</name> <operator>==</operator> <name>R1S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpS</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpS</name> <operator>==</operator> <name>R2S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpS</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>ZeroS</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpS</name> <operator>==</operator> <call><name>uint160</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>TmpS</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>TmpS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>R2Array</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>ZeroS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ZeroArray</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>OneS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OneArray</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>R1S</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>R1S</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">20</literal> <operator>==</operator> <call><name><name>R1S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">20</literal> <operator>==</operator> <call><name><name>R2S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">20</literal> <operator>==</operator> <call><name><name>OneS</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">20</literal> <operator>==</operator> <call><name><name>MaxS</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>TmpS</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">20</literal> <operator>==</operator> <call><name><name>TmpS</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>R1S</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>ZeroS</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>R1S</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>R1Array</name></expr></argument>,<argument><expr><name>R1Array</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1S</name> <operator>==</operator> <name>TmpS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>ZeroS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><name>ZeroArray</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroS</name> <operator>==</operator> <name>TmpS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>MaxS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>MaxArray</name></expr></argument>,<argument><expr><name>MaxArray</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>TmpS</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxS</name> <operator>==</operator> <name>TmpS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>conversion</argument> )</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>ZeroL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>OneL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>R2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>ZeroL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name>OneL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name>R2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name>R2L</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>operator_with_self</argument> )</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>v</name> <init>= <expr><call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"02"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>v</name> <operator>*=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"04"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>/=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"01"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"02"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
