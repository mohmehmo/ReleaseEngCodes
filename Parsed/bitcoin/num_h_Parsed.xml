<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/num.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_NUM_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_NUM_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_NUM_NONE</name></cpp:ifndef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsecp256k1-config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_NUM_GMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num_gmp.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please select num implementation"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Copy a number. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_copy</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a number's absolute value to a binary big-endian string.
 *  There must be enough place. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_get_bin</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a number to the value of a binary big-endian string. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_set_bin</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>alen</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute a modular inverse. The input must be less than the modulus. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mod_inverse</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the jacobi symbol (a|b). b must be positive and odd. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_jacobi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compare the absolute value of two numbers. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Test whether two number are equal (including sign). */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Add two (signed) numbers. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Subtract two (signed) numbers. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_sub</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Multiply two (signed) numbers. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Replace a number by its remainder modulo m. M's sign is ignored. The result is a number between 0 and m-1,
    even if r was negative. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mod</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Right-shift the passed number by bits bits. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_shift</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a number is zero. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a number is one. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a number is strictly negative. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_neg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Change a number's sign. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_NUM_H */</comment>
</unit>
