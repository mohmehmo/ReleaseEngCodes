<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/num_gmp_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_NUM_REPR_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_NUM_REPR_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gmp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_sanity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>secp256k1_num_sanity</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_copy</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_get_bin</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>rlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mpn_get_str</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>(</operator><name>mp_limb_t</name><operator>*</operator><operator>)</operator><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><name>shift</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><name>shift</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><name>shift</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rlen</name> <operator>-</operator> <name>len</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>shift</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <name>rlen</name> <operator>-</operator> <name>len</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>shift</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_set_bin</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>alen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>alen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>alen</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mpn_set_str</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>NUM_LIMBS</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_add_abs</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name>c</name> <init>= <expr><call><name>mpn_add</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_sub_abs</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name>c</name> <init>= <expr><call><name>mpn_sub</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mod</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;=</operator> <name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>mp_limb_t</name></type> <name><name>t</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mpn_tdiv_qr</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_num_sub_abs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mod_inverse</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name><name>g</name><index>[<expr><name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name><name>u</name><index>[<expr><name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name><name>v</name><index>[<expr><name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mp_size_t</name></type> <name>sn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mp_size_t</name></type> <name>gn</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** mpn_gcdext computes: (G,S) = gcdext(U,V), where
     *  * G = gcd(U,V)
     *  * G = U*S + V*T
     *  * U has equal or more limbs than V, and V has no padding
     *  If we set U to be (a padded version of) a, and V = m:
     *    G = a*S + m*T
     *    G = a*S mod m
     *  Assuming G=1:
     *    S = 1/a mod m
     */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;=</operator> <name>NUM_LIMBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>a</name><operator>-&gt;</operator><name>limbs</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>sn</name> <operator>=</operator> <name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>gn</name> <operator>=</operator> <call><name>mpn_gcdext</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sn</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>gn</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>gn</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name> <operator>^</operator> <name><name>m</name><operator>-&gt;</operator><name>neg</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sn</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mpn_sub</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>-</operator><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name>sn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_jacobi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mpz_t</name></type> <name>ga</name></decl>, <decl><type ref="prev"/><name>gb</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>neg</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mpz_inits</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp_limb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mpz_import</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp_limb_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>neg</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mpz_neg</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>ga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpz_jacobi</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>mpz_clears</name><argument_list>(<argument><expr><name>ga</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_is_neg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>mpn_cmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_num_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>neg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>secp256k1_num_is_zero</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>neg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>secp256k1_num_is_zero</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>mpn_cmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_subadd</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bneg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>neg</name></name> <operator>^</operator> <name>bneg</name> <operator>^</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* a and b have the same sign */</comment>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_num_add_abs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_num_add_abs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>secp256k1_num_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>secp256k1_num_sub_abs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>neg</name></name> <operator>^</operator> <name>bneg</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>secp256k1_num_sub_abs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_subadd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_sub</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_subadd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_num</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>mp_limb_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_num_sanity</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mpn_mul</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>mpn_mul</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>limbs</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>mpn_copyi</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>neg</name></name> <operator>^</operator> <name><name>b</name><operator>-&gt;</operator><name>neg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_shift</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>%</operator> <name>GMP_NUMB_BITS</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Shift within limbs. */</comment>
        <expr_stmt><expr><call><name>mpn_rshift</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name></expr></argument>, <argument><expr><name>bits</name> <operator>%</operator> <name>GMP_NUMB_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name>GMP_NUMB_BITS</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <comment type="block">/* Shift full limbs. */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>limbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>i</name> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>/</operator> <name>GMP_NUMB_BITS</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>limbs</name></name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>NUM_LIMBS</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>limbs</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_num_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>neg</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_NUM_REPR_IMPL_H */</comment>
</unit>
