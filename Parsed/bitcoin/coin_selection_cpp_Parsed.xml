<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/coin_selection.cpp"><comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coinselection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addCoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wtxs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nextLockTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>nextLockTime</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// so all transactions get different hashes</comment>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wtxs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>, <argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Simple benchmark for wallet coin selection. Note that it maybe be necessary</comment>
<comment type="line">// to build up more complicated scenarios in order to get meaningful</comment>
<comment type="line">// measurements of performance. From laanwj, "Wallet coin selection is probably</comment>
<comment type="line">// the hardest, as you need a wider selection of scenarios, just testing the</comment>
<comment type="line">// same one over and over isn't too useful. Generating random isn't useful</comment>
<comment type="line">// either for measurements."</comment>
<comment type="line">// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CoinSelection</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>wtxs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add coins.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>addCoin</name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>wtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>addCoin</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>wtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create groups</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name></type> <name>groups</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>wtx</name> <range>: <expr><name>wtxs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>COutput</name></type> <name>output</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* iIn */</comment>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">24</literal></expr></argument> <comment type="block">/* nDepthIn */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* spendable */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* solvable */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* safe */</comment>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>output</name><operator>.</operator><name>GetInputCoin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CoinEligibilityFilter</name></type> <name>filter_standard</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CoinSelectionParams</name></type> <name>coin_selection_params</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">148</literal></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name></type> <name>setCoinsRet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nValueRet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>bnb_used</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>SelectCoinsMinConf</name></name><argument_list>(<argument><expr><literal type="number">1003</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><name>filter_standard</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><name>setCoinsRet</name></expr></argument>, <argument><expr><name>nValueRet</name></expr></argument>, <argument><expr><name>coin_selection_params</name></expr></argument>, <argument><expr><name>bnb_used</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nValueRet</name> <operator>==</operator> <literal type="number">1003</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>setCoinsRet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CInputCoin</name></expr></argument>&gt;</argument_list></name></type> <name>CoinSet</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>NodeContext</name></type> <name>testNode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>auto</name></type> <name>testChain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>testNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CWallet</name></type> <name>testWallet</name><argument_list>(<argument><expr><call><name><name>testChain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>wtxn</name></decl>;</decl_stmt>

<comment type="line">// Copied from src/wallet/test/coinselector_tests.cpp</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_coin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nInput</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nInput</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>nInput</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name></type> <name>wtx</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>testWallet</name></expr></argument>, <argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>COutput</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetInputCoin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wtxn</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line">// Copied from src/wallet/test/coinselector_tests.cpp</comment>
<function><type><specifier>static</specifier> <name>CAmount</name></type> <name>make_hard_case</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>utxos</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>utxo_pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>utxo_pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>utxos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>target</name> <operator>+=</operator> <operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add_coin</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>+</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>CAmount</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>utxos</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BnBExhaustion</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Setup</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>OutputGroup</name></expr></argument>&gt;</argument_list></name></type> <name>utxo_pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CoinSet</name></type> <name>selection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>value_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>not_input_fees</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Benchmark</comment>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>target</name> <init>= <expr><call><name>make_hard_case</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><name>utxo_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SelectCoinsBnB</name><argument_list>(<argument><expr><name>utxo_pool</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>value_ret</name></expr></argument>, <argument><expr><name>not_input_fees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Should exhaust</comment>

        <comment type="line">// Cleanup</comment>
        <expr_stmt><expr><call><name><name>utxo_pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selection</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>CoinSelection</name></expr></argument>, <argument><expr><literal type="number">650</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>BnBExhaustion</name></expr></argument>, <argument><expr><literal type="number">650</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
