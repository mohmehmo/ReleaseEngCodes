<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/crypto/chacha_poly_aead.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/chacha20.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>CHACHA20_POLY1305_AEAD_KEY_LEN</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>CHACHA20_POLY1305_AEAD_AAD_LEN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* 3 bytes length */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>CHACHA20_ROUND_OUTPUT</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* 64 bytes per round */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>AAD_PACKAGES_PER_ROUND</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* 64 / 3 round down*/</comment>

<comment type="block">/* A AEAD class for ChaCha20-Poly1305@bitcoin.
 *
 * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in
 * &lt;ref&gt;[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]&lt;/ref&gt;. It operates
 * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64
 * bit counter into 64 bytes of output. This output is used as a keystream, with
 * any unused bytes simply discarded.
 *
 * Poly1305 &lt;ref&gt;[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]&lt;/ref&gt;, also
 * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit
 * integrity tag given a message and a single-use 256 bit secret key.
 *
 * The chacha20-poly1305@bitcoin combines these two primitives into an
 * authenticated encryption mode. The construction used is based on that proposed
 * for TLS by Adam Langley in
 * &lt;ref&gt;[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 "ChaCha20
 * and Poly1305 based Cipher Suites for TLS", Adam Langley]&lt;/ref&gt;, but differs in
 * the layout of data passed to the MAC and in the addition of encryption of the
 * packet lengths.
 *
 * ==== Detailed Construction ====
 *
 * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as
 * output from the key exchange. Each key (K_1 and K_2) are used by two separate
 * instances of chacha20.
 *
 * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3
 * byte packet length field and has its own sequence number. The second instance,
 * keyed by K_2, is used in conjunction with poly1305 to build an AEAD
 * (Authenticated Encryption with Associated Data) that is used to encrypt and
 * authenticate the entire packet.
 *
 * Two separate cipher instances are used here so as to keep the packet lengths
 * confidential but not create an oracle for the packet payload cipher by
 * decrypting and using the packet length prior to checking the MAC. By using an
 * independently-keyed cipher instance to encrypt the length, an active attacker
 * seeking to exploit the packet input handling as a decryption oracle can learn
 * nothing about the payload contents or its MAC (assuming key derivation,
 * ChaCha20 and Poly1305 are secure).
 *
 * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by
 * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV
 * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20
 * block counter of zero. The K_2 ChaCha20 block counter is then set to the
 * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance
 * is used for encryption of the packet payload.
 *
 * ==== Packet Handling ====
 *
 * When receiving a packet, the length must be decrypted first. When 3 bytes of
 * ciphertext length have been received, they may be decrypted.
 *
 * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21
 * times a 3 bytes length field (21*3 = 63). The length field sequence number can
 * thus be used 21 times (keystream caching).
 *
 * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with
 * K_1 defined by block counter 0, the length field sequence number in little
 * endian and a keystream position from 0 to 60.
 *
 * Once the entire packet has been received, the MAC MUST be checked before
 * decryption. A per-packet Poly1305 key is generated as described above and the
 * MAC tag calculated using Poly1305 with this key over the ciphertext of the
 * packet length and the payload together. The calculated MAC is then compared in
 * constant time with the one appended to the packet and the packet decrypted
 * using ChaCha20 as described above (with K_2, the packet sequence number as
 * nonce and a starting block counter of 1).
 *
 * Detection of an invalid MAC MUST lead to immediate connection termination.
 *
 * To send a packet, first encode the 3 byte length and encrypt it using K_1 as
 * described above. Encrypt the packet payload (using K_2) and append it to the
 * encrypted length. Finally, calculate a MAC tag and append it.
 *
 * The initiating peer MUST use &lt;code&gt;K_1_A, K_2_A&lt;/code&gt; to encrypt messages on
 * the send channel, &lt;code&gt;K_1_B, K_2_B&lt;/code&gt; MUST be used to decrypt messages on
 * the receive channel.
 *
 * The responding peer MUST use &lt;code&gt;K_1_A, K_2_A&lt;/code&gt; to decrypt messages on
 * the receive channel, &lt;code&gt;K_1_B, K_2_B&lt;/code&gt; MUST be used to encrypt messages
 * on the send channel.
 *
 * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in
 * general, therefore it is very likely that encrypted messages require not more
 * CPU cycles per bytes then the current unencrypted p2p message format
 * (ChaCha20/Poly1305 versus double SHA256).
 *
 * The initial packet sequence numbers are 0.
 *
 * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for
 * encryption nor may it be used to encrypt more than 2^70 bytes under the same
 * {key, nonce}.
 *
 * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,
 * position-in-keystream} for encryption nor may it be used to encrypt more than
 * 2^70 bytes under the same {key, nonce}.
 *
 * We use message sequence numbers for both communication directions.
 */</comment>

<decl_stmt><decl><type><name>class</name></type> <name>ChaCha20Poly1305AEAD</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>ChaCha20</name></type> <name>m_chacha_main</name></decl>;</decl_stmt>                                      <comment type="line">// payload and poly1305 key-derivation cipher instance</comment>
    <decl_stmt><decl><type><name>ChaCha20</name></type> <name>m_chacha_header</name></decl>;</decl_stmt>                                    <comment type="line">// AAD cipher instance (encrypted length)</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>m_aad_keystream_buffer</name><index>[<expr><name>CHACHA20_ROUND_OUTPUT</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// aad keystream cache</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m_cached_aad_seqnr</name></decl>;</decl_stmt>                                 <comment type="line">// aad keystream cache hint</comment>

<label><name>public</name>:</label>
    <macro><name>ChaCha20Poly1305AEAD</name><argument_list>(<argument>const unsigned char* K_1</argument>, <argument>size_t K_1_len</argument>, <argument>const unsigned char* K_2</argument>, <argument>size_t K_2_len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <function_decl><type><name>explicit</name></type> <name>ChaCha20Poly1305AEAD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChaCha20Poly1305AEAD</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>delete</name></expr></init>;</function_decl>

    <comment type="block" format="doxygen">/** Encrypts/decrypts a packet
        seqnr_payload, the message sequence number
        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream
        aad_pos, position to use in the AAD keystream to encrypt the AAD
        dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes
        destlen, length of the destination buffer
        src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt
        src_len, the length of the source buffer
        is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)
        */</comment>
    <function_decl><type><name>bool</name></type> <name>Crypt</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>seqnr_payload</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seqnr_aad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aad_pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_encrypt</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */</comment>
    <function_decl><type><name>bool</name></type> <name>GetLength</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>len24_out</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seqnr_aad</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aad_pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ciphertext</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H</comment>
</unit>
