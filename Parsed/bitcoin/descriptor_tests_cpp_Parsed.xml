<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/descriptor_tests.cpp"><comment type="line">// Copyright (c) 2018-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{

<function><type><name>void</name></type> <name>CheckUnparsable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>prv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>pub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>expected_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>keys_priv</name></decl>, <decl><type ref="prev"/><name>keys_pub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>parse_priv</name> <init>= <expr><call><name>Parse</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>parse_pub</name> <init>= <expr><call><name>Parse</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name>keys_pub</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><name>parse_priv</name></expr></argument>, <argument><expr><name>prv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><name>parse_pub</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>error</name> <operator>==</operator> <name>expected_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>RANGE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Expected to be ranged descriptor</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>HARDENED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Derivation needs access to private keys</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>UNSOLVABLE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt> <comment type="line">// This descriptor is not expected to be solvable</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>SIGNABLE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt> <comment type="line">// We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)</comment>

<comment type="block" format="doxygen">/** Compare two descriptors. If only one of them has a checksum, the checksum is ignored. */</comment>
<function><type><name>bool</name></type> <name>EqualDescriptor</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>a_check</name> <init>= <expr><operator>(</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>b_check</name> <init>= <expr><operator>(</operator><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>a_check</name> <operator>!=</operator> <name>b_check</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a_check</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>b_check</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>b</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>a</name> <operator>==</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>UseHInsteadOfApostrophe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name> <init>= <expr><name>desc</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>ret</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ret</name><index>[<expr><name>it</name></expr>]</index></name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// GetDescriptorChecksum returns "" if the checksum exists but is bad.</comment>
    <comment type="line">// Switching apostrophes with 'h' breaks the checksum if it exists - recalculate it and replace the broken one.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GetDescriptorChecksum</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>ret</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"#"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GetDescriptorChecksum</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ONLY_EMPTY</name><argument_list>{<argument><expr><block>{}</block></expr></argument>}</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DoCheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>prv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scripts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>paths</name> <init>= <expr><name>ONLY_EMPTY</name></expr></init></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>replace_apostrophe_with_h_in_prv</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>replace_apostrophe_with_h_in_pub</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>keys_priv</name></decl>, <decl><type ref="prev"/><name>keys_pub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>left_paths</name> <init>= <expr><name>paths</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name></type> <name>parse_priv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name></type> <name>parse_pub</name></decl>;</decl_stmt>
    <comment type="line">// Check that parsing succeeds.</comment>
    <if_stmt><if>if <condition>(<expr><name>replace_apostrophe_with_h_in_prv</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>parse_priv</name> <operator>=</operator> <call><name>Parse</name><argument_list>(<argument><expr><call><name>UseHInsteadOfApostrophe</name><argument_list>(<argument><expr><name>prv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>parse_priv</name> <operator>=</operator> <call><name>Parse</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>replace_apostrophe_with_h_in_pub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>parse_pub</name> <operator>=</operator> <call><name>Parse</name><argument_list>(<argument><expr><call><name>UseHInsteadOfApostrophe</name><argument_list>(<argument><expr><name>pub</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keys_pub</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>parse_pub</name> <operator>=</operator> <call><name>Parse</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name>keys_pub</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>parse_priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>parse_pub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check private keys are extracted from the private version but not the public one.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keys_priv</name><operator>.</operator><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>keys_pub</name><operator>.</operator><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that both versions serialize back to the public version.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pub1</name> <init>= <expr><call><name><name>parse_priv</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pub2</name> <init>= <expr><call><name><name>parse_pub</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EqualDescriptor</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name>pub1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EqualDescriptor</name><argument_list>(<argument><expr><name>pub</name></expr></argument>, <argument><expr><name>pub2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that both can be serialized with private key back to the private version, but not without private key.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>prv1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>parse_priv</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EqualDescriptor</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>parse_priv</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><name>keys_pub</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>parse_pub</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EqualDescriptor</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>parse_pub</name><operator>-&gt;</operator><name>ToPrivateString</name></name><argument_list>(<argument><expr><name>keys_pub</name></expr></argument>, <argument><expr><name>prv1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check whether IsRange on both returns the expected result</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>parse_pub</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RANGE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>parse_priv</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RANGE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// * For ranged descriptors,  the `scripts` parameter is a list of expected result outputs, for subsequent</comment>
    <comment type="line">//   positions to evaluate the descriptors on (so the first element of `scripts` is for evaluating the</comment>
    <comment type="line">//   descriptor at 0; the second at 1; and so on). To verify this, we evaluate the descriptors once for</comment>
    <comment type="line">//   each element in `scripts`.</comment>
    <comment type="line">// * For non-ranged descriptors, we evaluate the descriptors at positions 0, 1, and 2, but expect the</comment>
    <comment type="line">//   same result in each case, namely the first element of `scripts`. Because of that, the size of</comment>
    <comment type="line">//   `scripts` must be one in that case.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>scripts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>scripts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// Iterate over the position we'll evaluate the descriptors in.</comment>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Call the expected result scripts `ref`.</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>ref</name> <init>= <expr><name><name>scripts</name><index>[<expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// When t=0, evaluate the `prv` descriptor; when t=1, evaluate the `pub` descriptor.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// When the descriptor is hardened, evaluate with access to the private keys inside.</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>FlatSigningProvider</name><modifier>&amp;</modifier></type> <name>key_provider</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>HARDENED</name><operator>)</operator></expr> ?</condition><then> <expr><name>keys_priv</name></expr> </then><else>: <expr><name>keys_pub</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="line">// Evaluate the descriptor selected by `t` in poisition `i`.</comment>
            <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>script_provider</name></decl>, <decl><type ref="prev"/><name>script_provider_cached</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>spks</name></decl>, <decl><type ref="prev"/><name>spks_cached</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>cache</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>t</name></expr> ?</condition><then> <expr><name>parse_priv</name></expr> </then><else>: <expr><name>parse_pub</name></expr></else></ternary><operator>)</operator><operator>-&gt;</operator><call><name>Expand</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>spks</name></expr></argument>, <argument><expr><name>script_provider</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Compare the output with the expected result.</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>spks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ref</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Try to expand again using cached data, and compare.</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>parse_pub</name><operator>-&gt;</operator><name>ExpandFromCache</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>spks_cached</name></expr></argument>, <argument><expr><name>script_provider_cached</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>spks</name> <operator>==</operator> <name>spks_cached</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>script_provider</name><operator>.</operator><name>pubkeys</name></name> <operator>==</operator> <name><name>script_provider_cached</name><operator>.</operator><name>pubkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>script_provider</name><operator>.</operator><name>scripts</name></name> <operator>==</operator> <name><name>script_provider_cached</name><operator>.</operator><name>scripts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>script_provider</name><operator>.</operator><name>origins</name></name> <operator>==</operator> <name><name>script_provider_cached</name><operator>.</operator><name>origins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// For each of the produced scripts, verify solvability, and when possible, try to sign a transaction spending it.</comment>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name><name>spks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ref</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>IsSolvable</name><argument_list>(<argument><expr><call><name>Merge</name><argument_list>(<argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>script_provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNSOLVABLE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SIGNABLE</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>spend</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>spend</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>spend</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><call><name>Merge</name><argument_list>(<argument><expr><name>keys_priv</name></expr></argument>, <argument><expr><name>script_provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>spend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="block">/* Infer a descriptor from the generated script, and verify its solvability and that it roundtrips. */</comment>
                <decl_stmt><decl><type><name>auto</name></type> <name>inferred</name> <init>= <expr><call><name>InferDescriptor</name><argument_list>(<argument><expr><name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>script_provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>inferred</name><operator>-&gt;</operator><name>IsSolvable</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNSOLVABLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>spks_inferred</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>provider_inferred</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>inferred</name><operator>-&gt;</operator><name>Expand</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>provider_inferred</name></expr></argument>, <argument><expr><name>spks_inferred</name></expr></argument>, <argument><expr><name>provider_inferred</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>spks_inferred</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>spks_inferred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>spks</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>IsSolvable</name><argument_list>(<argument><expr><name>provider_inferred</name></expr></argument>, <argument><expr><name><name>spks_inferred</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNSOLVABLE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>provider_inferred</name><operator>.</operator><name>origins</name></name> <operator>==</operator> <name><name>script_provider</name><operator>.</operator><name>origins</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Test whether the observed key path is present in the 'paths' variable (which contains expected, unobserved paths),</comment>
            <comment type="line">// and then remove it from that set.</comment>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>origin</name> <range>: <expr><name><name>script_provider</name><operator>.</operator><name>origins</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>paths</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>origin</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unexpected key path: "</literal> <operator>+</operator> <name>prv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left_paths</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>origin</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">// Verify no expected paths remain that were not observed.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>left_paths</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Not all expected key paths found: "</literal> <operator>+</operator> <name>prv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>prv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scripts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>paths</name> <init>= <expr><name>ONLY_EMPTY</name></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_apostrophes_in_prv</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_apostrophes_in_pub</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Do not replace apostrophes with 'h' in prv and pub</comment>
    <expr_stmt><expr><call><name>DoCheck</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Replace apostrophes with 'h' in prv but not in pub, if apostrophes are found in prv</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>prv</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>found_apostrophes_in_prv</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DoCheck</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <comment type="block">/* replace_apostrophe_with_h_in_prv = */</comment><argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/*replace_apostrophe_with_h_in_pub = */</comment><argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Replace apostrophes with 'h' in pub but not in prv, if apostrophes are found in pub</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>pub</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'\''</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>found_apostrophes_in_pub</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DoCheck</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <comment type="block">/* replace_apostrophe_with_h_in_prv = */</comment><argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/*replace_apostrophe_with_h_in_pub = */</comment><argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Replace apostrophes with 'h' both in prv and in pub, if apostrophes are found in both</comment>
    <if_stmt><if>if <condition>(<expr><name>found_apostrophes_in_prv</name> <operator>&amp;&amp;</operator> <name>found_apostrophes_in_pub</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>DoCheck</name><argument_list>(<argument><expr><name>prv</name></expr></argument>, <argument><expr><name>pub</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <comment type="block">/* replace_apostrophe_with_h_in_prv = */</comment><argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/*replace_apostrophe_with_h_in_pub = */</comment><argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

}</block></namespace>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>descriptor_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>descriptor_test</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Basic single-key compressed</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac"</literal></expr><operator>,</operator><expr><literal type="string">"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac"</literal></expr><operator>,</operator><expr><literal type="string">"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e"</literal></expr><operator>,</operator><expr><literal type="string">"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pkh([deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh([deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">0x80000002UL</literal></expr><operator>,</operator><expr><literal type="number">3</literal></expr><operator>,</operator><expr><literal type="number">0x80000004UL</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY2))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5))"</literal></expr></argument>, <argument><expr><literal type="string">"Pubkey '03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5' is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Invalid pubkey</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"pkh(deadbeef/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh(deadbeef/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><literal type="string">"Key origin start '[ character expected but not found, got 'd' instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Missing start bracket in key origin</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"pkh([deadbeef]/1/2'/3/4']L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh([deadbeef]/1/2'/3/4']03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><literal type="string">"Multiple ']' characters found for a single pubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Multiple end brackets in key origin</comment>

    <comment type="line">// Basic single-key uncompressed</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac"</literal></expr><operator>,</operator><expr><literal type="string">"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><literal type="string">"Uncompressed keys are not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// No uncompressed keys in witness</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))"</literal></expr></argument>, <argument><expr><literal type="string">"Uncompressed keys are not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// No uncompressed keys in witness</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))"</literal></expr></argument>, <argument><expr><literal type="string">"Uncompressed keys are not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// No uncompressed keys in witness</comment>

    <comment type="line">// Some unconventional single-key constructions</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a9141857af51a5e516552b3086430fd8ce55f7c1a52487"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// Versions with BIP32 derivations</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"combo([01234567]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)"</literal></expr></argument>, <argument><expr><literal type="string">"combo([01234567]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac"</literal></expr><operator>,</operator><expr><literal type="string">"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac"</literal></expr><operator>,</operator><expr><literal type="string">"001431a507b815593dfc51ffc7245ae7e5aee304246e"</literal></expr><operator>,</operator><expr><literal type="string">"a9142aafb926eb247cb18240a7f4c07983ad1f37922687"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)"</literal></expr></argument>, <argument><expr><literal type="string">"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)"</literal></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)"</literal></expr></argument>, <argument><expr><name>HARDENED</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0xFFFFFFFFUL</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"wpkh([ffffffff/13']xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)"</literal></expr></argument>, <argument><expr><literal type="string">"wpkh([ffffffff/13']xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)"</literal></expr></argument>, <argument><expr><name>RANGE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"0014326b2249e3a25d5dc60935f044ee835d090ba859"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0x8000000DUL</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">2</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">0x8000000DUL</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">2</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">0x8000000DUL</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">2</literal></expr><operator>,</operator> <expr><literal type="number">2</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><name>RANGE</name> <operator>|</operator> <name>HARDENED</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"a914bed59fc0024fae941d6e20a3b44a109ae740129287"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"a9148483aa1116eb9c05c482a72bada4b1db24af654387"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000000UL</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000001UL</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000002UL</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)"</literal></expr></argument>, <argument><expr><literal type="string">"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)"</literal></expr></argument>, <argument><expr><name>RANGE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac"</literal></expr><operator>,</operator><expr><literal type="string">"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac"</literal></expr><operator>,</operator><expr><literal type="string">"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2"</literal></expr><operator>,</operator><expr><literal type="string">"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac"</literal></expr><operator>,</operator><expr><literal type="string">"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac"</literal></expr><operator>,</operator><expr><literal type="string">"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7"</literal></expr><operator>,</operator><expr><literal type="string">"a91473e39884cb71ae4e5ac9739e9225026c99763e6687"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">1</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"combo([012345678]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)"</literal></expr></argument>, <argument><expr><literal type="string">"combo([012345678]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)"</literal></expr></argument>, <argument><expr><literal type="string">"Fingerprint is not 4 bytes (9 characters instead of 8 characters)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Too long key fingerprint</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)"</literal></expr></argument>, <argument><expr><literal type="string">"Key path value 2147483648 is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// BIP 32 path element overflow</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/1aa)"</literal></expr></argument>, <argument><expr><literal type="string">"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1aa)"</literal></expr></argument>, <argument><expr><literal type="string">"Key path value '1aa' is not a valid uint32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Path is not valid uint</comment>

    <comment type="line">// Multisig constructions</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sortedmulti(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"sortedmulti(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sortedmulti(1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"sortedmulti(1,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))"</literal></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a91445a9a622a8b0a1269944be477640eedc447bbd8487"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0x8000006FUL</literal></expr><operator>,</operator><expr><literal type="number">222</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sortedmulti(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc/*,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0/0/*)"</literal></expr></argument>, <argument><expr><literal type="string">"sortedmulti(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL/*,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0/0/*)"</literal></expr></argument>, <argument><expr><name>RANGE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"5221025d5fc65ebb8d44a5274b53bac21ff8307fec2334a32df05553459f8b1f7fe1b62102fbd47cc8034098f0e6a94c6aeee8528abf0a2153a5d8e46d325b7284c046784652ae"</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="string">"52210264fd4d1f5dea8ded94c61e9641309349b62f27fbffe807291f664e286bfbe6472103f4ece6dfccfa37b211eb3d0af4d0c61dba9ef698622dc17eecdf764beeb005a652ae"</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="string">"5221022ccabda84c30bad578b13c89eb3b9544ce149787e5b538175b1d1ba259cbb83321024d902e1a2fc7a8755ab5b694c575fce742c48d9ff192e63df5193e4c7afe1f9c52ae"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">1</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">2</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">1</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><literal type="number">2</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><name>HARDENED</name> <operator>|</operator> <name>RANGE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203"</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="string">"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0xFFFFFFFFUL</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">2</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">2</literal></expr><operator>,</operator><expr><literal type="number">1</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">1</literal></expr><operator>,</operator><expr><literal type="number">2</literal></expr><operator>,</operator><expr><literal type="number">2</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000000UL</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000001UL</literal></expr></block_content>}</block><operator>,</operator> <block>{<block_content><expr><literal type="number">10</literal></expr><operator>,</operator> <expr><literal type="number">20</literal></expr><operator>,</operator> <expr><literal type="number">30</literal></expr><operator>,</operator> <expr><literal type="number">40</literal></expr><operator>,</operator> <expr><literal type="number">0x80000002UL</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))"</literal></expr></argument>,<argument><expr><literal type="string">"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))"</literal></expr></argument>, <argument><expr><name>SIGNABLE</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))"</literal></expr></argument>,<argument><expr><literal type="string">"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))"</literal></expr></argument>, <argument><expr><literal type="string">"P2SH script is too large, 547 bytes is larger than 520 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2SH does not fit 16 compressed pubkeys in a redeemscript</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaa][aaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"Multiple ']' characters found for a single pubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Double key origin descriptor</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,[aaaagaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,[aaagaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"Fingerprint 'aaagaaaa' is not hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Non hex fingerprint</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaa],xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaa],xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"No key provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// No public key with origin</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,[aaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,[aaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"Fingerprint is not 4 bytes (7 characters instead of 8 characters)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Too short fingerprint</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaaa]xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(multi(2,[aaaaaaaaa]xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))"</literal></expr></argument>, <argument><expr><literal type="string">"Fingerprint is not 4 bytes (9 characters instead of 8 characters)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Too long fingerprint</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"multi(a,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"multi(a,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><literal type="string">"Multi threshold 'a' is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Invalid threshold</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"multi(0,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"multi(0,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><literal type="string">"Multisig threshold cannot be 0, must be at least 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Threshold of 0</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"multi(3,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)"</literal></expr></argument>, <argument><expr><literal type="string">"multi(3,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)"</literal></expr></argument>, <argument><expr><literal type="string">"Multisig threshold cannot be larger than the number of keys; threshold is 3 but only 2 keys specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Threshold larger than number of keys</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"multi(3,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f)"</literal></expr></argument>, <argument><expr><literal type="string">"multi(3,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8)"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have 4 pubkeys in bare multisig; only at most 3 pubkeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Threshold larger than number of keys</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>,<argument><expr><literal type="string">"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have 17 keys in multisig; must have between 1 and 16 keys, inclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cannot have more than 16 keys in a multisig</comment>

    <comment type="line">// Check for invalid nesting of structures</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><literal type="string">"A function is needed within P2SH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2SH needs a script, not a key</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have combo in non-top level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Old must be top level</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)"</literal></expr></argument>, <argument><expr><literal type="string">"A function is needed within P2WSH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2WSH needs a script, not a key</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have wpkh within wsh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cannot embed witness inside witness</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have sh in non-top level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cannot embed P2SH inside P2WSH</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have sh in non-top level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cannot embed P2SH inside P2SH</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))"</literal></expr></argument>, <argument><expr><literal type="string">"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))"</literal></expr></argument>, <argument><expr><literal type="string">"Cannot have wsh within wsh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cannot embed P2WSH inside P2WSH</comment>

    <comment type="line">// Checksums</comment>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t"</literal></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a91445a9a622a8b0a1269944be477640eedc447bbd8487"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0x8000006FUL</literal></expr><operator>,</operator><expr><literal type="number">222</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>Check</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))"</literal></expr></argument>, <argument><expr><name>DEFAULT</name></expr></argument>, <block>{<block_content><block>{<block_content><expr><literal type="string">"a91445a9a622a8b0a1269944be477640eedc447bbd8487"</literal></expr></block_content>}</block></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <block>{<block_content><block>{<block_content><expr><literal type="number">0x8000006FUL</literal></expr><operator>,</operator><expr><literal type="number">222</literal></expr></block_content>}</block><operator>,</operator><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></block_content>}</block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#"</literal></expr></argument>, <argument><expr><literal type="string">"Expected 8 character checksum, not 0 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Empty checksum</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfyq"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5tq"</literal></expr></argument>, <argument><expr><literal type="string">"Expected 8 character checksum, not 9 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Too long checksum</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxf"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5"</literal></expr></argument>, <argument><expr><literal type="string">"Expected 8 character checksum, not 7 characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Too short checksum</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(3,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggrsrxfy"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(3,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjg09x5t"</literal></expr></argument>, <argument><expr><literal type="string">"Provided checksum 'tjg09x5t' does not match computed checksum 'd4x0uxyv'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Error in payload</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))#ggssrxfy"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))#tjq09x4t"</literal></expr></argument>, <argument><expr><literal type="string">"Provided checksum 'tjq09x4t' does not match computed checksum 'tjg09x5t'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Error in checksum</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))##ggssrxfy"</literal></expr></argument>, <argument><expr><literal type="string">"sh(multi(2,[00000000/111'/222]xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))##tjq09x4t"</literal></expr></argument>, <argument><expr><literal type="string">"Multiple '#' symbols"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Error in checksum</comment>

    <comment type="line">// Addr and raw tests</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"addr(asdf)"</literal></expr></argument>, <argument><expr><literal type="string">"Address is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Invalid address</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"raw(asdf)"</literal></expr></argument>, <argument><expr><literal type="string">"Raw script is not hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Invalid script</comment>
    <expr_stmt><expr><call><name>CheckUnparsable</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"raw(Ã)#00000000"</literal></expr></argument>, <argument><expr><literal type="string">"Invalid characters in payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Invalid chars</comment>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
