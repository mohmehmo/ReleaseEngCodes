<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/string.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_STRING_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_STRING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Join a list of items
 *
 * @param list       The list to join
 * @param separator  The separator
 * @param unary_op   Apply this operator to each item in the list
 */</comment>
<expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>UnaryOp</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name>string</name> <macro><name>Join</name><argument_list>(<argument>const std::vector&lt;T&gt;&amp; list</argument>, <argument>const std::string&amp; separator</argument>, <argument>UnaryOp unary_op</argument>)</argument_list></macro>
<block>{
    <expr><name>std</name><operator>::</operator><name>string</name> <name>ret</name></expr>;
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>separator</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>unary_op</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
}

inline <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>Join</name><argument_list>(<argument>const std::vector&lt;std::string&gt;&amp; list</argument>, <argument>const std::string&amp; separator</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>Join</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><index>[]</index><operator>(</operator><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>i</name><operator>)</operator> <block>{ <return>return <expr><name>i</name></expr>;</return> }</block></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_STRENCODINGS_H</comment>
</unit>
