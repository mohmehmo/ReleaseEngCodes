<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/walletview.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_WALLETVIEW_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_WALLETVIEW_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStackedWidget&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BitcoinGUI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OverviewPage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ReceiveCoinsDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>AddressBookPage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QModelIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QProgressDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block">/*
  WalletView class. This class represents the view to a single wallet.
  It was added to support multiple wallet functionality. Each wallet gets its own WalletView instance.
  It communicates with both the client and the wallet models to give the user an up-to-date view of the
  current core state.
*/</comment>
<name>class</name></type> <name>WalletView</name> <range>: <expr><name>public</name> <name>QStackedWidget</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>WalletView</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>WalletView</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>setBitcoinGUI</name><argument_list>(<argument><expr><name>BitcoinGUI</name> <operator>*</operator><name>gui</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Set the client model.
        The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.
    */</comment>
    <expr><name>void</name> <call><name>setClientModel</name><argument_list>(<argument><expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>WalletModel</name> <operator>*</operator><macro><name>getWalletModel</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>walletModel</name></expr>;</return> }</block>
    <comment type="block" format="doxygen">/** Set the wallet model.
        The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending
        functionality.
    */</comment>
    <name>void</name> <call><name>setWalletModel</name><argument_list>(<argument><expr><name>WalletModel</name> <operator>*</operator><name>walletModel</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>bool</name> <call><name>handlePaymentRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SendCoinsRecipient</name><operator>&amp;</operator> <name>recipient</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <macro><name>showOutOfSyncWarning</name><argument_list>(<argument>bool fShow</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
    <name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr>;
    <expr><name>WalletModel</name> <operator>*</operator><name>walletModel</name></expr>;

    <expr><name>OverviewPage</name> <operator>*</operator><name>overviewPage</name></expr>;
    <expr><name>QWidget</name> <operator>*</operator><name>transactionsPage</name></expr>;
    <expr><name>ReceiveCoinsDialog</name> <operator>*</operator><name>receiveCoinsPage</name></expr>;
    <expr><name>SendCoinsDialog</name> <operator>*</operator><name>sendCoinsPage</name></expr>;
    <expr><name>AddressBookPage</name> <operator>*</operator><name>usedSendingAddressesPage</name></expr>;
    <expr><name>AddressBookPage</name> <operator>*</operator><name>usedReceivingAddressesPage</name></expr>;

    <expr><name>TransactionView</name> <operator>*</operator><name>transactionView</name></expr>;

    <expr><name>QProgressDialog</name> <operator>*</operator><name>progressDialog</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Switch to overview (home) page */</comment>
    <name>void</name> <call><name>gotoOverviewPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to history (transactions) page */</comment>
    <expr><name>void</name> <call><name>gotoHistoryPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to receive coins page */</comment>
    <expr><name>void</name> <call><name>gotoReceiveCoinsPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to send coins page */</comment>
    <expr><name>void</name> <macro><name>gotoSendCoinsPage</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Show Sign/Verify Message dialog and switch to sign message tab */</comment>
    <expr><name>void</name> <macro><name>gotoSignMessageTab</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Show Sign/Verify Message dialog and switch to verify message tab */</comment>
    <expr><name>void</name> <macro><name>gotoVerifyMessageTab</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Show incoming transaction notification for new transactions.

        The new items are those between start and end inclusive, under the given parent item.
    */</comment>
    <expr><name>void</name> <macro><name>processNewTransaction</name><argument_list>(<argument>const QModelIndex&amp; parent</argument>, <argument>int start</argument>, <argument>int</argument> <comment type="block">/*end*/</comment>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Encrypt the wallet */</comment>
    <expr><name>void</name> <macro><name>encryptWallet</name><argument_list>(<argument>bool status</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Backup the wallet */</comment>
    <expr><name>void</name> <call><name>backupWallet</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Change encrypted wallet passphrase */</comment>
    <expr><name>void</name> <call><name>changePassphrase</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Ask for passphrase to unlock wallet temporarily */</comment>
    <expr><name>void</name> <call><name>unlockWallet</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Show used sending addresses */</comment>
    <expr><name>void</name> <call><name>usedSendingAddresses</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show used receiving addresses */</comment>
    <expr><name>void</name> <call><name>usedReceivingAddresses</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Re-emit encryption status signal */</comment>
    <expr><name>void</name> <call><name>updateEncryptionStatus</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Show progress dialog e.g. for rescan */</comment>
    <expr><name>void</name> <macro><name>showProgress</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>int nProgress</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** User has requested more information about the out of sync state */</comment>
    <expr><name>void</name> <call><name>requestedSyncWarningInfo</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="block" format="doxygen">/**  Fired when a message should be reported to the user */</comment>
    <name>void</name> <macro><name>message</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>const QString &amp;message</argument>, <argument>unsigned int style</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Encryption status of wallet changed */</comment>
    <expr><name>void</name> <call><name>encryptionStatusChanged</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** HD-Enabled status of wallet changed (only possible during startup) */</comment>
    <expr><name>void</name> <call><name>hdEnabledStatusChanged</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Notify that a new transaction appeared */</comment>
    <expr><name>void</name> <macro><name>incomingTransaction</name><argument_list>(<argument>const QString&amp; date</argument>, <argument>int unit</argument>, <argument>const CAmount&amp; amount</argument>, <argument>const QString&amp; type</argument>, <argument>const QString&amp; address</argument>, <argument>const QString&amp; label</argument>, <argument>const QString&amp; walletName</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Notify that the out of sync warning icon has been pressed */</comment>
    <expr><name>void</name> <call><name>outOfSyncWarningClicked</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_WALLETVIEW_H</comment>
</unit>
