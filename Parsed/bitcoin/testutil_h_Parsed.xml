<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/testutil.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_TESTUTIL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_TESTUTIL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/random.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>test</name> <block>{<block_content>

<comment type="line">// Store in *dst a random string of length "len" and return a Slice that</comment>
<comment type="line">// references the generated data.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Slice</name></type> <name>RandomString</name><argument_list>(<argument><expr><name>Random</name><operator>*</operator> <name>rnd</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Return a random key with the specified length that may contain interesting</comment>
<comment type="line">// characters (e.g. \x00, \xff, etc.).</comment>
<extern>extern std::string RandomKey(Random* rnd<operator>,</operator> int len</extern>)</block_content></block></decl>;</decl_stmt>

<comment type="line">// Store in *dst a string of length "len" that will compress to</comment>
<comment type="line">// "N*compressed_fraction" bytes and return a Slice that references</comment>
<comment type="line">// the generated data.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Slice</name></type> <name>CompressibleString</name><argument_list>(<argument><expr><name>Random</name><operator>*</operator> <name>rnd</name></expr></argument>, <argument><expr><name>double</name> <name>compressed_fraction</name></expr></argument>,
                                <argument><expr><name>size_t</name> <name>len</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>dst</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// A wrapper that allows injection of errors.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ErrorEnv</name> <range>: <expr><name>public</name> <name>EnvWrapper</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <name>bool</name> <name>writable_file_error_</name></expr>;
  <expr><name>int</name> <name>num_writable_file_errors_</name></expr>;

  <expr><call><name>ErrorEnv</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>EnvWrapper</name><argument_list>(<argument><expr><name>Env</name><operator>::</operator><call><name>Default</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
               <expr><call><name>writable_file_error_</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>,
               <macro><name>num_writable_file_errors_</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

  <name>virtual</name> <name>Status</name> <macro><name>NewWritableFile</name><argument_list>(<argument>const std::string&amp; fname</argument>,
                                 <argument>WritableFile** result</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><name>writable_file_error_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>num_writable_file_errors_</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>Status</name><operator>::</operator><call><name>IOError</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"fake error"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <expr_stmt/>}</block_content>
    return target(</block></if></if_stmt>)<operator>-&gt;</operator><call><name>NewWritableFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></block></expr>;
  }</block>

  <name>virtual</name> <name>Status</name> <macro><name>NewAppendableFile</name><argument_list>(<argument>const std::string&amp; fname</argument>,
                                   <argument>WritableFile** result</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><name>writable_file_error_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>num_writable_file_errors_</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>Status</name><operator>::</operator><call><name>IOError</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"fake error"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <expr_stmt/>}</block_content>
    return target(</block></if></if_stmt>)<operator>-&gt;</operator><call><name>NewAppendableFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></block></expr></range></decl>;</decl_stmt>
  </block_content>}</block></decl></decl_stmt>
};

}  <comment type="line">// namespace test</comment>
}  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_TESTUTIL_H_</comment>
</unit>
