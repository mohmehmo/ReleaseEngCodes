<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/script_p2sh_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/tx_verify.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/settings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<comment type="line">// Helpers:</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type>
<name>Serialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sSerialized</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>sSerialized</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>Verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fStrict</name></decl></parameter>, <parameter><decl><type><name>ScriptError</name><modifier>&amp;</modifier></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Create dummy to/from transactions:</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txFrom</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txFrom</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txTo</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txTo</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txTo</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name>scriptSig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>fStrict</name></expr> ?</condition><then> <expr><name>SCRIPT_VERIFY_P2SH</name></expr> </then><else>: <expr><name>SCRIPT_VERIFY_NONE</name></expr></else></ternary></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>script_p2sh_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>sign</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Pay-to-script-hash looks like this:</comment>
    <comment type="line">// scriptSig:    &lt;sig&gt; &lt;sig...&gt; &lt;serialized_script&gt;</comment>
    <comment type="line">// scriptPubKey: HASH160 &lt;hash&gt; EQUAL</comment>

    <comment type="line">// Test SignSignature() (and therefore the version of Solver() that signs transactions)</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// 8 Scripts: checking all combinations of</comment>
    <comment type="line">// different keys, straight/P2SH, pubkey/pubkeyhash</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name><name>standardScripts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>standardScripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>standardScripts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>standardScripts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>standardScripts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name><name>evalScripts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name><name>standardScripts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>evalScripts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name><name>standardScripts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txFrom</name></decl>;</decl_stmt>  <comment type="line">// Funding transaction:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>reason</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txFrom</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name><name>evalScripts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>COIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name><name>standardScripts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>COIN</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name><name>txTo</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Spending transactions</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"SignSignature %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// All of the above should be OK, and the txTos have valid signatures</comment>
    <comment type="line">// Check to make sure signature verification fails if we use the wrong ScriptSig:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <function_decl><type><name>PrecomputedTransactionData</name></type> <name>txdata</name><parameter_list>(<parameter><decl><type><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CScript</name></type> <name>sigSave</name> <init>= <expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name><name>txTo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>sigOK</name> <init>= <expr><call><call><name>CScriptCheck</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txdata</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>sigOK</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"VerifySignature %d %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><name>sigOK</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"VerifySignature %d %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <name>sigSave</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>norecurse</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <comment type="line">// Make sure only the outer pay-to-script-hash does the</comment>
    <comment type="line">// extra-validation thing:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>invalidAsScript</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>invalidAsScript</name> <operator>&lt;&lt;</operator> <name>OP_INVALIDOPCODE</name> <operator>&lt;&lt;</operator> <name>OP_INVALIDOPCODE</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>p2sh</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>invalidAsScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>invalidAsScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Should not verify, because it will try to execute OP_INVALIDOPCODE</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>Verify</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>p2sh</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_BAD_OPCODE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Try to recur, and verification should succeed because</comment>
    <comment type="line">// the inner HASH160 &lt;&gt; EQUAL should only check the hash:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>p2sh2</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>p2sh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptSig2</name> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>invalidAsScript</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>p2sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Verify</name><argument_list>(<argument><expr><name>scriptSig2</name></expr></argument>, <argument><expr><name>p2sh2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>set</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Test the CScript::Set* methods</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CScript</name></type> <name><name>inner</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>inner</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inner</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inner</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name><name>outer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>outer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txFrom</name></decl>;</decl_stmt>  <comment type="line">// Funding transaction:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>reason</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txFrom</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name><name>outer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>CENT</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name><name>txTo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// Spending transactions</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name><name>inner</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"SignSignature %d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>txTo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"txTo[%d].IsStandard"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>is</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test CScript::IsPayToScriptHash()</comment>
    <decl_stmt><decl><type><name>uint160</name></type> <name>dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>p2sh</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p2sh</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>p2sh</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>direct</name> <init>= <expr><block>{<expr><name>OP_HASH160</name></expr>, <expr><literal type="number">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>direct</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>direct</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>direct</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>OP_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>direct</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>direct</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsPayToScriptHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata1</name> <init>= <expr><block>{<expr><name>OP_HASH160</name></expr>, <expr><name>OP_PUSHDATA1</name></expr>, <expr><literal type="number">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pushdata1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pushdata1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pushdata1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>OP_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsPayToScriptHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata2</name> <init>= <expr><block>{<expr><name>OP_HASH160</name></expr>, <expr><name>OP_PUSHDATA2</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pushdata2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pushdata2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pushdata2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>OP_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsPayToScriptHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata4</name> <init>= <expr><block>{<expr><name>OP_HASH160</name></expr>, <expr><name>OP_PUSHDATA4</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pushdata4</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pushdata4</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pushdata4</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>OP_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata4</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata4</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsPayToScriptHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>not_p2sh</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>not_p2sh</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>not_p2sh</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>not_p2sh</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>not_p2sh</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>not_p2sh</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>not_p2sh</name> <operator>&lt;&lt;</operator> <name>OP_NOP</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>not_p2sh</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>not_p2sh</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>not_p2sh</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>not_p2sh</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>switchover</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test switch over code</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>notValid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>notValid</name> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_12</name> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name>Serialize</name><argument_list>(<argument><expr><name>notValid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>fund</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>notValid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <comment type="line">// Validation should succeed under old rules (hash is correct):</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Verify</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>fund</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Fail under new:</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>Verify</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>fund</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EQUALVERIFY</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>AreInputsStandard</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>coinsDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name></type> <name>coins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coinsDummy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>key</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txFrom</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txFrom</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// First three are standard:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>pay1</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>pay1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>pay1of3</name> <init>= <expr><call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>pay1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// P2SH (OP_CHECKSIG)</comment>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>pay1</name></expr>;</expr_stmt> <comment type="line">// ordinary OP_CHECKSIG</comment>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>pay1of3</name></expr>;</expr_stmt> <comment type="line">// ordinary OP_CHECKMULTISIG</comment>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">3000</literal></expr>;</expr_stmt>

    <comment type="line">// vout[3] is complicated 1-of-3 AND 2-of-3</comment>
    <comment type="line">// ... that is OK if wrapped in P2SH:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>oneAndTwo</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>oneAndTwo</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oneAndTwo</name> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>oneAndTwo</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oneAndTwo</name> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>oneAndTwo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>oneAndTwo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">4000</literal></expr>;</expr_stmt>

    <comment type="line">// vout[4] is max sigops:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>fifteenSigops</name></decl>;</decl_stmt> <expr_stmt><expr><name>fifteenSigops</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_P2SH_SIGOPS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fifteenSigops</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>fifteenSigops</name> <operator>&lt;&lt;</operator> <name>OP_15</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>fifteenSigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>fifteenSigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

    <comment type="line">// vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>sixteenSigops</name></decl>;</decl_stmt> <expr_stmt><expr><name>sixteenSigops</name> <operator>&lt;&lt;</operator> <name>OP_16</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>sixteenSigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>sixteenSigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>twentySigops</name></decl>;</decl_stmt> <expr_stmt><expr><name>twentySigops</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>twentySigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>twentySigops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">6000</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txTo</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txTo</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>txTo</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// SignSignature doesn't know how to sign these. We're</comment>
    <comment type="line">// not testing validating signatures, so just create</comment>
    <comment type="line">// dummy signatures that DO include the correct P2SH scripts:</comment>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>oneAndTwo</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>oneAndTwo</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>fifteenSigops</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fifteenSigops</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>AreInputsStandard</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// 22 P2SH sigops for all inputs (1 for vin[0], 6 for vin[3], 15 for vin[4]</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetP2SHSigOpCount</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">22U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txToNonStd1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txToNonStd1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txToNonStd1</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>sixteenSigops</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sixteenSigops</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><operator>::</operator><name>AreInputsStandard</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txToNonStd1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetP2SHSigOpCount</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txToNonStd1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txToNonStd2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txToNonStd2</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd2</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txToNonStd2</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>txFrom</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txToNonStd2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>twentySigops</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>twentySigops</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><operator>::</operator><name>AreInputsStandard</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txToNonStd2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetP2SHSigOpCount</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txToNonStd2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
