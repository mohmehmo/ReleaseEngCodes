<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/policy/feerate.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>CURRENCY_UNIT</name> <init>= <expr><literal type="string">"BTC"</literal></expr></init></decl>;</decl_stmt>

<constructor><name><name>CFeeRate</name><operator>::</operator><name>CFeeRate</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nFeePaid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nBytes_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nBytes_</name> <operator>&lt;=</operator> <call><name>uint64_t</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSize</name> <init>= <expr><call><name>int64_t</name><argument_list>(<argument><expr><name>nBytes_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nSatoshisPerK</name> <operator>=</operator> <name>nFeePaid</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>nSize</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>nSatoshisPerK</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></constructor>

<function><type><name>CAmount</name></type> <name><name>CFeeRate</name><operator>::</operator><name>GetFee</name></name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nBytes_</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nBytes_</name> <operator>&lt;=</operator> <call><name>uint64_t</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSize</name> <init>= <expr><call><name>int64_t</name><argument_list>(<argument><expr><name>nBytes_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFee</name> <init>= <expr><name>nSatoshisPerK</name> <operator>*</operator> <name>nSize</name> <operator>/</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nFee</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nSatoshisPerK</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nFee</name> <operator>=</operator> <call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nSatoshisPerK</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nFee</name> <operator>=</operator> <call><name>CAmount</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>nFee</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CFeeRate</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d.%08d %s/kB"</literal></expr></argument>, <argument><expr><name>nSatoshisPerK</name> <operator>/</operator> <name>COIN</name></expr></argument>, <argument><expr><name>nSatoshisPerK</name> <operator>%</operator> <name>COIN</name></expr></argument>, <argument><expr><name>CURRENCY_UNIT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
