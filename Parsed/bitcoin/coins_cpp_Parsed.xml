<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/coins.cpp"><comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;logging.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name><name>CCoinsView</name><operator>::</operator><name>GetCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name> <modifier>&amp;</modifier></type><name>coin</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>uint256</name></type> <name><name>CCoinsView</name><operator>::</operator><name>GetBestBlock</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name><name>CCoinsView</name><operator>::</operator><name>GetHeadBlocks</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>CCoinsView</name><operator>::</operator><name>BatchWrite</name></name><parameter_list>(<parameter><decl><type><name>CCoinsMap</name> <modifier>&amp;</modifier></type><name>mapCoins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hashBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
<function><type><name>CCoinsViewCursor</name> <modifier>*</modifier></type><name><name>CCoinsView</name><operator>::</operator><name>Cursor</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><literal type="null">nullptr</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsView</name><operator>::</operator><name>HaveCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
    <return>return <expr><call><name>GetCoin</name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>CCoinsViewBacked</name><operator>::</operator><name>CCoinsViewBacked</name></name><parameter_list>(<parameter><decl><type><name>CCoinsView</name> <modifier>*</modifier></type><name>viewIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>base</name><argument_list>(<argument><expr><name>viewIn</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content> </block_content>}</block></constructor>
<function><type><name>bool</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>GetCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name> <modifier>&amp;</modifier></type><name>coin</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>GetCoin</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>HaveCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>HaveCoin</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>uint256</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>GetBestBlock</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>GetBestBlock</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>GetHeadBlocks</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>GetHeadBlocks</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>SetBackend</name></name><parameter_list>(<parameter><decl><type><name>CCoinsView</name> <modifier>&amp;</modifier></type><name>viewIn</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>base</name> <operator>=</operator> <operator>&amp;</operator><name>viewIn</name></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>BatchWrite</name></name><parameter_list>(<parameter><decl><type><name>CCoinsMap</name> <modifier>&amp;</modifier></type><name>mapCoins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hashBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>BatchWrite</name></name><argument_list>(<argument><expr><name>mapCoins</name></expr></argument>, <argument><expr><name>hashBlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>CCoinsViewCursor</name> <modifier>*</modifier></type><name><name>CCoinsViewBacked</name><operator>::</operator><name>Cursor</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>Cursor</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>size_t</name></type> <name><name>CCoinsViewBacked</name><operator>::</operator><name>EstimateSize</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name><name>base</name><operator>-&gt;</operator><name>EstimateSize</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<constructor><name><name>SaltedOutpointHasher</name><operator>::</operator><name>SaltedOutpointHasher</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>k0</name><argument_list>(<argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>k1</name><argument_list>(<argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<constructor><name><name>CCoinsViewCache</name><operator>::</operator><name>CCoinsViewCache</name></name><parameter_list>(<parameter><decl><type><name>CCoinsView</name> <modifier>*</modifier></type><name>baseIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>CCoinsViewBacked</name><argument_list>(<argument><expr><name>baseIn</name></expr></argument>)</argument_list></call>, <call><name>cachedCoinsUsage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>size_t</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>DynamicMemoryUsage</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name><name>memusage</name><operator>::</operator><name>DynamicUsage</name></name><argument_list>(<argument><expr><name>cacheCoins</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cachedCoinsUsage</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>FetchCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>cacheCoins</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>it</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>Coin</name></type> <name>tmp</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>base</name><operator>-&gt;</operator><name>GetCoin</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>ret</name> <init>= <expr><call><name><name>cacheCoins</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>piecewise_construct</name></name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>forward_as_tuple</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>forward_as_tuple</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ret</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// The parent only has an empty entry for this outpoint; we can consider our</comment>
        <comment type="line">// version as fresh.</comment>
        <expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>+=</operator> <call><name><name>ret</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>GetCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name> <modifier>&amp;</modifier></type><name>coin</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name>FetchCoin</name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>coin</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr>;</expr_stmt>
        <return>return <expr><operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>AddCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>&amp;&amp;</modifier></type> <name>coin</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>possible_overwrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>IsUnspendable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>inserted</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>inserted</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>piecewise_construct</name></name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>forward_as_tuple</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>tuple</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fresh</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inserted</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>-=</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>possible_overwrite</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Adding new coin that replaces non-pruned entry"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fresh</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>fresh</name></expr> ?</condition><then> <expr><name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>+=</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>AddCoins</name><parameter_list>(<parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransaction</name> <modifier>&amp;</modifier></type><name>tx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHeight</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>check</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>fCoinbase</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>overwrite</name> <init>= <expr><ternary><condition><expr><name>check</name></expr> ?</condition><then> <expr><call><name><name>cache</name><operator>.</operator><name>HaveCoin</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>fCoinbase</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <comment type="line">// Always set the possible_overwrite flag to AddCoin for coinbase txn, in order to correctly</comment>
        <comment type="line">// deal with the pre-BIP30 occurrences of duplicate coinbase transactions.</comment>
        <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>AddCoin</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Coin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nHeight</name></expr></argument>, <argument><expr><name>fCoinbase</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>SpendCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name><modifier>*</modifier></type> <name>moveout</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name>FetchCoin</name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>-=</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>moveout</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>moveout</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>cacheCoins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Coin</name></type> <name>coinEmpty</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>AccessCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name>FetchCoin</name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>coinEmpty</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>HaveCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name>FetchCoin</name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>it</name> <operator>!=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>HaveCoinInCache</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>cacheCoins</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>it</name> <operator>!=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint256</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>GetBestBlock</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>hashBlock</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>hashBlock</name> <operator>=</operator> <call><name><name>base</name><operator>-&gt;</operator><name>GetBestBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>hashBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>SetBestBlock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hashBlockIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>hashBlock</name> <operator>=</operator> <name>hashBlockIn</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>BatchWrite</name></name><parameter_list>(<parameter><decl><type><name>CCoinsMap</name> <modifier>&amp;</modifier></type><name>mapCoins</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hashBlockIn</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mapCoins</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>mapCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name> <operator>=</operator> <call><name><name>mapCoins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Ignore non-dirty entries (optimization).</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>itUs</name> <init>= <expr><call><name><name>cacheCoins</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>itUs</name> <operator>==</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// The parent cache does not have an entry, while the child does</comment>
            <comment type="line">// We can ignore it if it's both FRESH and pruned in the child</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name> <operator>&amp;&amp;</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="line">// Otherwise we will need to create it in the parent</comment>
                <comment type="line">// and move the data up and mark it as dirty</comment>
                <decl_stmt><decl><type><name>CCoinsCacheEntry</name><modifier>&amp;</modifier></type> <name>entry</name> <init>= <expr><name><name>cacheCoins</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>coin</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>+=</operator> <call><name><name>entry</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name></expr>;</expr_stmt>
                <comment type="line">// We can mark it FRESH in the parent if it was FRESH in the child</comment>
                <comment type="line">// Otherwise it might have just been flushed from the parent's cache</comment>
                <comment type="line">// and already exist in the grandparent</comment>
                <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Assert that the child cache entry was not marked FRESH if the</comment>
            <comment type="line">// parent cache entry has unspent outputs. If this ever happens,</comment>
            <comment type="line">// it means the FRESH flag was misapplied and there is a logic</comment>
            <comment type="line">// error in the calling code.</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"FRESH flag misapplied to cache entry for base transaction with spendable outputs"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Found the entry in the parent cache</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>FRESH</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// The grandparent does not have an entry, and the child is</comment>
                <comment type="line">// modified and being pruned. This means we can just delete</comment>
                <comment type="line">// it from the parent.</comment>
                <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>-=</operator> <call><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>cacheCoins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itUs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// A normal modification.</comment>
                <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>-=</operator> <call><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>+=</operator> <call><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>itUs</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>CCoinsCacheEntry</name><operator>::</operator><name>DIRTY</name></name></expr>;</expr_stmt>
                <comment type="line">// NOTE: It is possible the child has a FRESH flag here in</comment>
                <comment type="line">// the event the entry we found in the parent is pruned. But</comment>
                <comment type="line">// we must not copy that FRESH flag to the parent as that</comment>
                <comment type="line">// pruned state likely still needs to be communicated to the</comment>
                <comment type="line">// grandparent.</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>hashBlock</name> <operator>=</operator> <name>hashBlockIn</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>Flush</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>fOk</name> <init>= <expr><call><name><name>base</name><operator>-&gt;</operator><name>BatchWrite</name></name><argument_list>(<argument><expr><name>cacheCoins</name></expr></argument>, <argument><expr><name>hashBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cacheCoins</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>fOk</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>Uncache</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>CCoinsMap</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>cacheCoins</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>cacheCoins</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cachedCoinsUsage</name> <operator>-=</operator> <call><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>coin</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cacheCoins</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>GetCacheSize</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <return>return <expr><call><name><name>cacheCoins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAmount</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>GetValueIn</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nResult</name> <operator>+=</operator> <call><name>AccessCoin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call><operator>.</operator><name><name>out</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><name>nResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewCache</name><operator>::</operator><name>HaveInputs</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HaveCoin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MIN_TRANSACTION_OUTPUT_WEIGHT</name> <init>= <expr><name>WITNESS_SCALE_FACTOR</name> <operator>*</operator> <call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><call><name>CTxOut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MAX_OUTPUTS_PER_BLOCK</name> <init>= <expr><name>MAX_BLOCK_WEIGHT</name> <operator>/</operator> <name>MIN_TRANSACTION_OUTPUT_WEIGHT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>AccessByTxid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>COutPoint</name></type> <name>iter</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>iter</name><operator>.</operator><name>n</name></name> <operator>&lt;</operator> <name>MAX_OUTPUTS_PER_BLOCK</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>alternate</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>AccessCoin</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>alternate</name><operator>.</operator><name>IsSpent</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>alternate</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>iter</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>coinEmpty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCoinsViewErrorCatcher</name><operator>::</operator><name>GetCoin</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name> <modifier>&amp;</modifier></type><name>outpoint</name></decl></parameter>, <parameter><decl><type><name>Coin</name> <modifier>&amp;</modifier></type><name>coin</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <try>try <block>{<block_content>
        <return>return <expr><call><name><name>CCoinsViewBacked</name><operator>::</operator><name>GetCoin</name></name><argument_list>(<argument><expr><name>outpoint</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>f</name> <range>: <expr><name>m_err_callbacks</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>f</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Error reading from database: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Starting the shutdown sequence and returning false to the caller would be</comment>
        <comment type="line">// interpreted as 'entry not found' (as opposed to unable to read data), and</comment>
        <comment type="line">// could lead to invalid interpretation. Just exit immediately, as we can't</comment>
        <comment type="line">// continue anyway, and all writes should be atomic.</comment>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>abort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
</block_content>}</block></function>
</unit>
