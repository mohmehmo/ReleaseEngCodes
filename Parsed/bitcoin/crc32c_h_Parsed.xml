<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/crc32c.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_CRC32C_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_CRC32C_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>crc32c</name> <block>{<block_content>

<comment type="line">// Return the crc32c of concat(A, data[0,n-1]) where init_crc is the</comment>
<comment type="line">// crc32c of some string A.  Extend() is often used to maintain the</comment>
<comment type="line">// crc32c of a stream of data.</comment>
<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>Extend</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>init_crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Return the crc32c of data[0,n-1]</comment>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>Value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>Extend</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name>kMaskDelta</name> <init>= <expr><literal type="number">0xa282ead8ul</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Return a masked representation of crc.</comment>
<comment type="line">//</comment>
<comment type="line">// Motivation: it is problematic to compute the CRC of a string that</comment>
<comment type="line">// contains embedded CRCs.  Therefore we recommend that CRCs stored</comment>
<comment type="line">// somewhere (e.g., in files) should be masked before being stored.</comment>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>Mask</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>crc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Rotate right by 15 bits and add a constant.</comment>
  <return>return <expr><operator>(</operator><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>kMaskDelta</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Return the crc whose masked representation is masked_crc.</comment>
<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>Unmask</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>masked_crc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rot</name> <init>= <expr><name>masked_crc</name> <operator>-</operator> <name>kMaskDelta</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>rot</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>rot</name> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace crc32c</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_CRC32C_H_</comment>
</unit>
