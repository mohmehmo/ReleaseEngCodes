<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/bech32_tests.cpp"><comment type="line">// Copyright (c) 2017 Pieter Wuille</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bech32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/str.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>bech32_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bip173_testvectors_valid</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CASES</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"A12UEL5L"</literal></expr>,
        <expr><literal type="string">"a12uel5l"</literal></expr>,
        <expr><literal type="string">"an83characterlonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1tt5tgs"</literal></expr>,
        <expr><literal type="string">"abcdef1qpzry9x8gf2tvdw0s3jn54khce6mua7lmqqqxw"</literal></expr>,
        <expr><literal type="string">"11qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqc8247j"</literal></expr>,
        <expr><literal type="string">"split1checkupstagehandshakeupstreamerranterredcaperred2y9e3w"</literal></expr>,
        <expr><literal type="string">"?1ezyfcl"</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name> <range>: <expr><name>CASES</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><name><name>bech32</name><operator>::</operator><name>Decode</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>ret</name><operator>.</operator><name>first</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>recode</name> <init>= <expr><call><name><name>bech32</name><operator>::</operator><name>Encode</name></name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>ret</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>recode</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CaseInsensitiveEqual</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>recode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bip173_testvectors_invalid</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CASES</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">" 1nwldj5"</literal></expr>,
        <expr><literal type="string">"\x7f""</literal><literal type="number">1axkwrx</literal><literal type="string">",
        "</literal><operator>\</operator><name>x80</name><literal type="string">""</literal><literal type="number">1eym55h</literal><literal type="string">",
        "</literal><name>an84characterslonghumanreadablepartthatcontainsthenumber1andtheexcludedcharactersbio1569pvx</name><literal type="string">",
        "</literal><name>pzry9x0s0muk</name><literal type="string">",
        "</literal><literal type="number">1pzry9x0s0muk</literal><literal type="string">",
        "</literal><name>x1b4n0q5v</name><literal type="string">",
        "</literal><name>li1dgmt3</name><literal type="string">",
        "</literal><name>de1lg7wt</name><operator>\</operator><name>xff</name><literal type="string">",
        "</literal><name>A1G7SGD8</name><literal type="string">",
        "</literal><literal type="number">10a06t8</literal><literal type="string">",
        "</literal><literal type="number">1qzzfhee</literal><literal type="string">",
        "</literal><name>a12UEL5L</name><literal type="string">",
        "</literal><name>A12uEL5L</name><literal type="string">"</literal></expr></block></expr></init></decl></decl_stmt></block_content></block>,
    };
    for (const std::string&amp; str : CASES) {
        auto ret = bech32::Decode(str);
        BOOST_CHECK(ret.first.empty());
    }
}

BOOST_AUTO_TEST_SUITE_END()
</unit>
