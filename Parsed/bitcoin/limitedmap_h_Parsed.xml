<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/limitedmap.h"><comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_LIMITEDMAP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_LIMITEDMAP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** STL-like map container that only keeps the N elements with the highest value. */</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>limitedmap</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <typedef>typedef <type><name>K</name></type> <name>key_type</name>;</typedef>
    <typedef>typedef <type><name>V</name></type> <name>mapped_type</name>;</typedef>
    <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>key_type</name></expr></argument>, <argument><expr><name>mapped_type</name></expr></argument>&gt;</argument_list></name> <name>value_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>size_type</name> <name>size_type</name></expr>;</expr_stmt></typedef>

<label><name>protected</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name> <name>map</name></expr>;</expr_stmt>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name> <name>rmap</name></expr>;</expr_stmt>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>std</name><operator>::</operator><name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>, <argument><expr><name>iterator</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name> <name>rmap_iterator</name></expr>;</expr_stmt></typedef>
    <decl_stmt><decl><type><name>size_type</name></type> <name>nMaxSize</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <function><type><name>explicit</name></type> <name>limitedmap</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>nMaxSizeIn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nMaxSizeIn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nMaxSize</name> <operator>=</operator> <name>nMaxSizeIn</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>map</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>const_iterator</name></type> <name>find</name><argument_list>(<argument><expr><specifier>const</specifier> <name>key_type</name><operator>&amp;</operator> <name>k</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>size_type</name></type> <name>count</name><argument_list>(<argument><expr><specifier>const</specifier> <name>key_type</name><operator>&amp;</operator> <name>k</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>map</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>value_type</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <name>ret</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>.</operator><name>second</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>nMaxSize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>rmap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>rmap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>ret</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>key_type</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>iterator</name></type> <name>itTarget</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>itTarget</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>rmap_iterator</name></expr></argument>, <argument><expr><name>rmap_iterator</name></expr></argument>&gt;</argument_list></name> <name>itPair</name> <operator>=</operator> <call><name><name>rmap</name><operator>.</operator><name>equal_range</name></name><argument_list>(<argument><expr><name><name>itTarget</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>rmap_iterator</name></type> <name>it</name> <init>= <expr><name><name>itPair</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>itPair</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>==</operator> <name>itTarget</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt></block_content></block></for>
        <comment type="line">// Shouldn't ever get here</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>const_iterator</name></type> <name>itIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mapped_type</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Using map::erase() with empty range instead of map::find() to get a non-const iterator,</comment>
        <comment type="line">// since it is a constant time operation in C++11. For more details, see</comment>
        <comment type="line">// https://stackoverflow.com/questions/765148/how-to-remove-constness-of-const-iterator</comment>
        <decl_stmt><decl><type><name>iterator</name></type> <name>itTarget</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>itIn</name></expr></argument>, <argument><expr><name>itIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>itTarget</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>rmap_iterator</name></expr></argument>, <argument><expr><name>rmap_iterator</name></expr></argument>&gt;</argument_list></name> <name>itPair</name> <operator>=</operator> <call><name><name>rmap</name><operator>.</operator><name>equal_range</name></name><argument_list>(<argument><expr><name><name>itTarget</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>rmap_iterator</name></type> <name>it</name> <init>= <expr><name><name>itPair</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>itPair</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>==</operator> <name>itTarget</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>itTarget</name><operator>-&gt;</operator><name>second</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>itTarget</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt></block_content></block></for>
        <comment type="line">// Shouldn't ever get here</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    <expr_stmt><expr><name>size_type</name> <macro><name>max_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nMaxSize</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>size_type</name></type> <name>max_size</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>s</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>rmap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rmap</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>rmap</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>nMaxSize</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><name>nMaxSize</name></expr>;</return>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_LIMITEDMAP_H</comment>
</unit>
