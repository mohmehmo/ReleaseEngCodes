<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/rpcwallet.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;outputtype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/rbf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/rawtransaction_util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bip32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/moneystr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/url.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/feebumper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/psbtwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/rpcwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/walletdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/walletutil.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>WALLET_ENDPOINT_BASE</name> <init>= <expr><literal type="string">"/wallet/"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>GetAvoidReuseFlag</name><parameter_list>(<parameter><decl><type><name>CWallet</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>can_avoid_reuse</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_AVOID_REUSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>avoid_reuse</name> <init>= <expr><ternary><condition><expr><call><name><name>param</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>can_avoid_reuse</name></expr> </then><else>: <expr><call><name><name>param</name><operator>.</operator><name>get_bool</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>avoid_reuse</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>can_avoid_reuse</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"wallet does not have the \"avoid reuse\" feature enabled"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>avoid_reuse</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** Used by RPC commands that have an include_watchonly parameter.
 *  We default to true for watchonly wallets if include_watchonly isn't
 *  explicitly set.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseIncludeWatchonly</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>include_watchonly</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>pwallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>include_watchonly</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// if include_watchonly isn't explicitly set, then check if we have a watchonly wallet</comment>
        <return>return <expr><call><name><name>pwallet</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// otherwise return whatever include_watchonly was set to</comment>
    <return>return <expr><call><name><name>include_watchonly</name><operator>.</operator><name>get_bool</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** Checks if a CKey is in the given CWallet compressed or otherwise*/</comment>
<function><type><name>bool</name></type> <name>HaveKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key2</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>wallet</name><operator>.</operator><name>HaveKey</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>wallet</name><operator>.</operator><name>HaveKey</name></name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetWalletNameFromJSONRPCRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>wallet_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>request</name><operator>.</operator><name>URI</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>WALLET_ENDPOINT_BASE</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>WALLET_ENDPOINT_BASE</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// wallet endpoint was used</comment>
        <expr_stmt><expr><name>wallet_name</name> <operator>=</operator> <call><name>urlDecode</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>URI</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>WALLET_ENDPOINT_BASE</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>GetWalletForJSONRPCRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>wallet_name</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetWalletNameFromJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>wallet_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>pwallet</name> <init>= <expr><call><name>GetWallet</name><argument_list>(<argument><expr><name>wallet_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pwallet</name></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"Requested wallet does not exist or is not loaded"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <return>return <expr><name>pwallet</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>wallets</name> <init>= <expr><call><name>GetWallets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><call><name><name>wallets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>request</name><operator>.</operator><name>fHelp</name></name> <operator>&amp;&amp;</operator> <call><name><name>wallets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>wallets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>HelpRequiringPassphrase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type> <name>pwallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>pwallet</name> <operator>&amp;&amp;</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>
        ?</condition><then> <expr><literal type="string">"\nRequires wallet passphrase to be set with walletpassphrase call."</literal></expr>
        </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>EnsureWalletIsAvailable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type> <name>pwallet</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>avoidException</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pwallet</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>avoidException</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HasWallets</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(
            <argument><expr><name>RPC_METHOD_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"Method not found (wallet method is disabled because no wallet is loaded)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_NOT_SPECIFIED</name></expr></argument>,
        <argument><expr><literal type="string">"Wallet file not specified (must request wallet RPC through /wallet/&lt;filename&gt; uri-path)."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>EnsureWalletIsUnlocked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type> <name>pwallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsLocked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_UNLOCK_NEEDED</name></expr></argument>, <argument><expr><literal type="string">"Error: Please enter the wallet passphrase with walletpassphrase first."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>EnsureLegacyScriptPubKeyMan</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>LegacyScriptPubKeyMan</name><modifier>*</modifier></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>spk_man</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"This type of wallet does not support this command"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>*</operator><name>spk_man</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletTxToJSON</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name><operator>::</operator><name>Lock</name></name><modifier>&amp;</modifier></type> <name>locked_chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>confirms</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><name>confirms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"generated"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>confirms</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blockhash"</literal></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>m_confirm</name><operator>.</operator><name>hashBlock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blockheight"</literal></expr></argument>, <argument><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name><operator>.</operator><name>block_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blockindex"</literal></expr></argument>, <argument><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name><operator>.</operator><name>nIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>block_time</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found_block</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>findBlock</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name><operator>.</operator><name>hashBlock</name></name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* block */</comment>, <argument><expr><operator>&amp;</operator><name>block_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>found_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blocktime"</literal></expr></argument>, <argument><expr><name>block_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"trusted"</literal></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>IsTrusted</name></name><argument_list>(<argument><expr><name>locked_chain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>conflicts</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>conflict</name> <range>: <expr><call><name><name>wtx</name><operator>.</operator><name>GetConflicts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>conflicts</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>conflict</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"walletconflicts"</literal></expr></argument>, <argument><expr><name>conflicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetTxTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timereceived"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>wtx</name><operator>.</operator><name>nTimeReceived</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add opt-in RBF status</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rbfStatus</name> <init>= <expr><literal type="string">"no"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>confirms</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>RBFTransactionState</name></type> <name>rbfState</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>isRBFOptIn</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>rbfState</name> <operator>==</operator> <name><name>RBFTransactionState</name><operator>::</operator><name>UNKNOWN</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>rbfStatus</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>rbfState</name> <operator>==</operator> <name><name>RBFTransactionState</name><operator>::</operator><name>REPLACEABLE_BIP125</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>rbfStatus</name> <operator>=</operator> <literal type="string">"yes"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bip125-replaceable"</literal></expr></argument>, <argument><expr><name>rbfStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>mapValue</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>LabelFromValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <literal type="string">"*"</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_INVALID_LABEL_NAME</name></expr></argument>, <argument><expr><literal type="string">"Invalid label name"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getnewaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getnewaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns a new Bitcoin address for receiving payments.\n"</literal>
                <literal type="string">"If 'label' is specified, it is added to the address book \n"</literal>
                <literal type="string">"so payments received with the address will be associated with 'label'.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"\"\""</literal></expr><operator>,</operator> <expr><literal type="string">"The label name for the address to be linked to. It can also be set to the empty string \"\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address_type"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"set by -addresstype"</literal></expr><operator>,</operator> <expr><literal type="string">"The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"address\"    (string) The new bitcoin address\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getnewaddress"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getnewaddress"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>CanGetAddresses</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: This wallet has no available keys"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Parse the label first so we don't generate a key if there's an error</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>LabelFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>OutputType</name></type> <name>output_type</name> <init>= <expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_default_address_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseOutputType</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown address type '%s'"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetNewDestination</name></name><argument_list>(<argument><expr><name>output_type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_KEYPOOL_RAN_OUT</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getrawchangeaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getrawchangeaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns a new Bitcoin address, for receiving change.\n"</literal>
                <literal type="string">"This is for use with raw transactions, NOT normal use.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address_type"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"set by -changetype"</literal></expr><operator>,</operator> <expr><literal type="string">"The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"address\"    (string) The address\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getrawchangeaddress"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getrawchangeaddress"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>CanGetAddresses</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: This wallet has no available keys"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>OutputType</name></type> <name>output_type</name> <init>= <expr><ternary><condition><expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_default_change_type</name></name> <operator>!=</operator> <name><name>OutputType</name><operator>::</operator><name>CHANGE_AUTO</name></name></expr> ?</condition><then> <expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_default_change_type</name></name></expr> </then><else>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_default_address_type</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseOutputType</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown address type '%s'"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetNewChangeDestination</name></name><argument_list>(<argument><expr><name>output_type</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_KEYPOOL_RAN_OUT</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>setlabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"setlabel"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSets the label associated with the given address.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address to be associated with a label."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The label to assign to the address."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"setlabel"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"tabby\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"setlabel"</literal></argument>, <argument><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"tabby\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid Bitcoin address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name> <init>= <expr><call><name>LabelFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>SetAddressBook</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>SetAddressBook</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>CTransactionRef</name></type> <name>SendMoney</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name><operator>::</operator><name>Lock</name></name><modifier>&amp;</modifier></type> <name>locked_chain</name></decl></parameter>, <parameter><decl><type><name>CWallet</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>nValue</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSubtractFeeFromAmount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>, <parameter><decl><type><name>mapValue_t</name></type> <name>mapValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>curBalance</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>coin_control</name><operator>.</operator><name>m_avoid_address_reuse</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>m_mine_trusted</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Check amount</comment>
    <if_stmt><if>if <condition>(<expr><name>nValue</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid amount"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nValue</name> <operator>&gt;</operator> <name>curBalance</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_INSUFFICIENT_FUNDS</name></expr></argument>, <argument><expr><literal type="string">"Insufficient funds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <comment type="line">// Parse Bitcoin address</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create and send the transaction</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFeeRequired</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CRecipient</name></expr></argument>&gt;</argument_list></name></type> <name>vecSend</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nChangePosRet</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CRecipient</name></type> <name>recipient</name> <init>= <expr><block>{<expr><name>scriptPubKey</name></expr>, <expr><name>nValue</name></expr>, <expr><name>fSubtractFeeFromAmount</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vecSend</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>CreateTransaction</name></name><argument_list>(<argument><expr><name>locked_chain</name></expr></argument>, <argument><expr><name>vecSend</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nFeeRequired</name></expr></argument>, <argument><expr><name>nChangePosRet</name></expr></argument>, <argument><expr><name>strError</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fSubtractFeeFromAmount</name> <operator>&amp;&amp;</operator> <name>nValue</name> <operator>+</operator> <name>nFeeRequired</name> <operator>&gt;</operator> <name>curBalance</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strError</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Error: This transaction requires a transaction fee of at least %s"</literal></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>nFeeRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name>strError</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mapValue</name></expr></argument>)</argument_list></call></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt> <comment type="block">/* orderForm */</comment>)</block_content></block>;</function>
    <return>return <expr><name>tx</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>sendtoaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"sendtoaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSend an amount to a given address."</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address to send to."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"amount"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" to send. eg 0.1"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"comment"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A comment used to store what the transaction is for.\n"</literal>
            <literal type="string">"                             This is not part of the transaction, just kept in your wallet."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"comment_to"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A comment to store the name of the person or organization\n"</literal>
            <literal type="string">"                             to which you're sending the transaction. This is not part of the \n"</literal>
            <literal type="string">"                             transaction, just kept in your wallet."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"subtractfeefromamount"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"The fee will be deducted from the amount being sent.\n"</literal>
            <literal type="string">"                             The recipient will receive less bitcoins than you enter in the amount field."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"replaceable"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr><operator>,</operator> <expr><literal type="string">"Allow this transaction to be replaced by a transaction with higher fees via BIP 125"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"conf_target"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr><operator>,</operator> <expr><literal type="string">"Confirmation target (in blocks)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"estimate_mode"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"UNSET"</literal></expr><operator>,</operator> <expr><literal type="string">"The fee estimate mode, must be one of:\n"</literal>
            <literal type="string">"       \"UNSET\"\n"</literal>
            <literal type="string">"       \"ECONOMICAL\"\n"</literal>
            <literal type="string">"       \"CONSERVATIVE\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"avoid_reuse"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"(only available if avoid_reuse wallet flag is set) Avoid spending from dirty addresses; addresses are considered\n"</literal>
            <literal type="string">"                             dirty if they have previously been used in a transaction."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"txid\"                  (string) The transaction id.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendtoaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendtoaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"donation\" \"seans outpost\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendtoaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 0.1 \"\" \"\" true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"sendtoaddress"</literal></argument>, <argument><literal type="string">"\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\", 0.1, \"donation\", \"seans outpost\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Amount</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nAmount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid amount for send"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <comment type="line">// Wallet comments</comment>
    <decl_stmt><decl><type><name>mapValue_t</name></type> <name>mapValue</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>mapValue</name><index>[<expr><literal type="string">"comment"</literal></expr>]</index></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>mapValue</name><index>[<expr><literal type="string">"to"</literal></expr>]</index></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fSubtractFeeFromAmount</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fSubtractFeeFromAmount</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_confirm_target</name></name> <operator>=</operator> <call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>estimateMaxBlocks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FeeModeFromString</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin_control</name><operator>.</operator><name>m_fee_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid estimate_mode parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_avoid_address_reuse</name></name> <operator>=</operator> <call><name>GetAvoidReuseFlag</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// We also enable partial spend avoidance if reuse avoidance is set.</comment>
    <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_avoid_partial_spends</name></name> <operator>|=</operator> <name><name>coin_control</name><operator>.</operator><name>m_avoid_address_reuse</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name> <init>= <expr><call><name>SendMoney</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>nAmount</name></expr></argument>, <argument><expr><name>fSubtractFeeFromAmount</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mapValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listaddressgroupings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listaddressgroupings"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nLists groups of addresses which have had their common ownership\n"</literal>
                <literal type="string">"made public by common use as inputs or as the resulting change\n"</literal>
                <literal type="string">"in past transactions\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  [\n"</literal>
            <literal type="string">"    [\n"</literal>
            <literal type="string">"      \"address\",            (string) The bitcoin address\n"</literal>
            <literal type="string">"      amount,                 (numeric) The amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"      \"label\"               (string, optional) The label\n"</literal>
            <literal type="string">"    ]\n"</literal>
            <literal type="string">"    ,...\n"</literal>
            <literal type="string">"  ]\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listaddressgroupings"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listaddressgroupings"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>jsonGroupings</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>, <argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name></type> <name>balances</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetAddressBalances</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>grouping</name> <range>: <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetAddressGroupings</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>jsonGrouping</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>address</name> <range>: <expr><name>grouping</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>addressInfo</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>addressInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addressInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>balances</name><index>[<expr><name>address</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>addressInfo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name><name>jsonGrouping</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>addressInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>jsonGroupings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>jsonGrouping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>jsonGroupings</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>signmessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"signmessage"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSign a message with the private key of an address"</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address to use for the private key."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"message"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The message to create a signature of."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"signature\"          (string) The signature of the message encoded in base 64\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nUnlock the wallet for 30 seconds\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"\"mypassphrase\" 30"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nCreate the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signmessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nVerify the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"verifymessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"signmessage"</literal></argument>, <argument><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"my message\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddress</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMessage</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>PKHash</name> <modifier>*</modifier></type><name>pkhash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkhash</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Address does not refer to key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>script_pub_key</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><operator>*</operator><name>pkhash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>script_pub_key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>provider</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Private key not available"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name><argument_list>(<argument><expr><operator>*</operator><name>pkhash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>provider</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Private key not available"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CHashWriter</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessageMagic</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessage</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Sign failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <return>return <expr><call><name>EncodeBase64</name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getreceivedbyaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getreceivedbyaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address for transactions."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"Only include transactions confirmed at least this many times."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"amount   (numeric) The total amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" received at this address.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nThe amount from transactions with at least 1 confirmation\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nThe amount including unconfirmed transactions, zero confirmations\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 0"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nThe amount with at least 6 confirmations\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" 6"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getreceivedbyaddress"</literal></argument>, <argument><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", 6"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bitcoin address</comment>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid Bitcoin address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Address not found in wallet"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Minimum confirmations</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nMinDepth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nMinDepth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Tally</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint256</name></expr></argument>, <argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pairWtx</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>pairWtx</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>locked_chain</name><operator>-&gt;</operator><name>checkFinalTx</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name> <operator>==</operator> <name>scriptPubKey</name></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>nMinDepth</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>nAmount</name> <operator>+=</operator> <name><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block></for>

    <return>return  <expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getreceivedbylabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getreceivedbylabel"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the total amount received by addresses with &lt;label&gt; in transactions with at least [minconf] confirmations.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The selected label, may be the default label using \"\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"Only include transactions confirmed at least this many times."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"amount              (numeric) The total amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" received for this label.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nAmount received by the default label with at least 1 confirmation\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbylabel"</literal></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAmount received at the tabby label including unconfirmed amounts with zero confirmations\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbylabel"</literal></expr></argument>, <argument><expr><literal type="string">"\"tabby\" 0"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nThe amount with at least 6 confirmations\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getreceivedbylabel"</literal></expr></argument>, <argument><expr><literal type="string">"\"tabby\" 6"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getreceivedbylabel"</literal></argument>, <argument><literal type="string">"\"tabby\", 6"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Minimum confirmations</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nMinDepth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nMinDepth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Get the set of pub keys assigned to label</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name> <init>= <expr><call><name>LabelFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>setAddress</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetLabelAddresses</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Tally</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint256</name></expr></argument>, <argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pairWtx</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>pairWtx</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>locked_chain</name><operator>-&gt;</operator><name>checkFinalTx</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>setAddress</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>nMinDepth</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>nAmount</name> <operator>+=</operator> <name><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getbalance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getbalance"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the total available balance.\n"</literal>
                <literal type="string">"The available balance is what the wallet considers currently spendable, and is\n"</literal>
                <literal type="string">"thus affected by options which limit spendability such as -spendzeroconfchange.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"dummy"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"Remains for backward compatibility. Must be excluded or set to \"*\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"Only include transactions confirmed at least this many times."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator> <expr><literal type="string">"Also include balance in watch-only addresses (see 'importaddress')"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"avoid_reuse"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"(only available if avoid_reuse wallet flag is set) Do not include balance in dirty outputs; addresses are considered dirty if they have previously been used in a transaction."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"amount              (numeric) The total amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" received for this wallet.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nThe total amount in the wallet with 1 or more confirmations\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getbalance"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nThe total amount in the wallet at least 6 blocks confirmed\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getbalance"</literal></expr></argument>, <argument><expr><literal type="string">"\"*\" 6"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getbalance"</literal></argument>, <argument><literal type="string">"\"*\", 6"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>dummy_value</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dummy_value</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dummy_value</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="string">"*"</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_METHOD_DEPRECATED</name></expr></argument>, <argument><expr><literal type="string">"dummy first argument must be excluded or set to \"*\"."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>min_depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>min_depth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>include_watchonly</name> <init>= <expr><call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>avoid_reuse</name> <init>= <expr><call><name>GetAvoidReuseFlag</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>bal</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>(<argument><expr><name>min_depth</name></expr></argument>, <argument><expr><name>avoid_reuse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>include_watchonly</name></expr> ?</condition><then> <expr><name><name>bal</name><operator>.</operator><name>m_watchonly_trusted</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getunconfirmedbalance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name> <modifier>&amp;</modifier></type><name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getunconfirmedbalance"</literal></expr></argument>,
                <argument><expr><literal type="string">"DEPRECATED\nIdentical to getbalances().mine.untrusted_pending\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{<argument><expr><literal type="string">""</literal></expr></argument>}</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_untrusted_pending</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>sendmany</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"sendmany"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSend multiple times. Amounts are double-precision floating point numbers."</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"dummy"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Must be set to \"\" for backwards compatibility."</literal></expr><operator>,</operator> <expr><literal type="string">"\"\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"amounts"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"A json object with addresses and amounts"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"address"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The bitcoin address is the key, the numeric amount (can be string) in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" is the value"</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"Ignored dummy value"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"comment"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A comment"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"subtractfeefrom"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array with addresses.\n"</literal>
            <literal type="string">"                           The fee will be equally deducted from the amount of each selected address.\n"</literal>
            <literal type="string">"                           Those recipients will receive less bitcoins than you enter in their corresponding amount field.\n"</literal>
            <literal type="string">"                           If no addresses are specified here, the sender pays the fee."</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"address"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"Subtract fee from this address"</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"replaceable"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr><operator>,</operator> <expr><literal type="string">"Allow this transaction to be replaced by a transaction with higher fees via BIP 125"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"conf_target"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr><operator>,</operator> <expr><literal type="string">"Confirmation target (in blocks)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"estimate_mode"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"UNSET"</literal></expr><operator>,</operator> <expr><literal type="string">"The fee estimate mode, must be one of:\n"</literal>
            <literal type="string">"       \"UNSET\"\n"</literal>
            <literal type="string">"       \"ECONOMICAL\"\n"</literal>
            <literal type="string">"       \"CONSERVATIVE\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                 <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"txid\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \n"</literal>
            <literal type="string">"                                    the number of addresses.\n"</literal></expr></argument>
                 }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nSend two amounts to two different addresses:\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendmany"</literal></expr></argument>, <argument><expr><literal type="string">"\"\" \"{\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nSend two amounts to two different addresses setting the confirmation and comment:\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendmany"</literal></expr></argument>, <argument><expr><literal type="string">"\"\" \"{\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 6 \"testing\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nSend two amounts to two different addresses, subtract fee from amount:\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendmany"</literal></expr></argument>, <argument><expr><literal type="string">"\"\" \"{\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\":0.01,\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\":0.02}\" 1 \"\" \"[\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\",\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\"]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"sendmany"</literal></argument>, <argument><literal type="string">"\"\", {\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\":0.01,\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\":0.02}, 6, \"testing\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Dummy value must be set to \"\""</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>sendTo</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mapValue_t</name></type> <name>mapValue</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>mapValue</name><index>[<expr><literal type="string">"comment"</literal></expr>]</index></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>subtractFeeFromAmount</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>subtractFeeFromAmount</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_confirm_target</name></name> <operator>=</operator> <call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>estimateMaxBlocks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FeeModeFromString</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin_control</name><operator>.</operator><name>m_fee_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid estimate_mode parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>destinations</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CRecipient</name></expr></argument>&gt;</argument_list></name></type> <name>vecSend</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><call><name><name>sendTo</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name_</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>name_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Bitcoin address: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>name_</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>destinations</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Invalid parameter, duplicated address: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>name_</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>destinations</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>sendTo</name><index>[<expr><name>name_</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nAmount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid amount for send"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>fSubtractFeeFromAmount</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>subtractFeeFromAmount</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>addr</name> <init>= <expr><name><name>subtractFeeFromAmount</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>addr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>name_</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>fSubtractFeeFromAmount</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>CRecipient</name></type> <name>recipient</name> <init>= <expr><block>{<expr><name>scriptPubKey</name></expr>, <expr><name>nAmount</name></expr>, <expr><name>fSubtractFeeFromAmount</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vecSend</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Shuffle recipient list</comment>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>shuffle</name></name><argument_list>(<argument><expr><call><name><name>vecSend</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vecSend</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>FastRandomContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Send</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFeeRequired</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nChangePosRet</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strFailReason</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fCreated</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>CreateTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>vecSend</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>nFeeRequired</name></expr></argument>, <argument><expr><name>nChangePosRet</name></expr></argument>, <argument><expr><name>strFailReason</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fCreated</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_INSUFFICIENT_FUNDS</name></expr></argument>, <argument><expr><name>strFailReason</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mapValue</name></expr></argument>)</argument_list></call></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt> <comment type="block">/* orderForm */</comment>)</block_content></block>;</function>
    <return>return <expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>addmultisigaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"addmultisigaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\n"</literal>
                <literal type="string">"Each key is a Bitcoin address or hex-encoded public key.\n"</literal>
                <literal type="string">"This functionality is only intended for use with non-watchonly addresses.\n"</literal>
                <literal type="string">"See `importaddress` for watchonly p2sh address support.\n"</literal>
                <literal type="string">"If 'label' is specified, assign address to that label.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nrequired"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The number of required signatures out of the n keys or addresses."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"keys"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of bitcoin addresses or hex-encoded public keys"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"bitcoin address or hex-encoded public key"</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                        }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A label to assign the addresses to."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address_type"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"set by -addresstype"</literal></expr><operator>,</operator> <expr><literal type="string">"The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"address\":\"multisigaddress\",    (string) The value of the new multisig address.\n"</literal>
            <literal type="string">"  \"redeemScript\":\"script\"         (string) The string value of the hex-encoded redemption script.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nAdd a multisig address from 2 addresses\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"addmultisigaddress"</literal></expr></argument>, <argument><expr><literal type="string">"2 \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"addmultisigaddress"</literal></argument>, <argument><literal type="string">"2, \"[\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\",\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\"]\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>spk_man</name> <init>= <expr><call><name>EnsureLegacyScriptPubKeyMan</name><argument_list>(<argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>LabelFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the public keys</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>keys_or_addrs</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>pubkeys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys_or_addrs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IsHex</name><argument_list>(<argument><expr><name><name>keys_or_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>keys_or_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">66</literal> <operator>||</operator> <name><name>keys_or_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">130</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>HexToPubKey</name><argument_list>(<argument><expr><name><name>keys_or_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>AddrToPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name><name>keys_or_addrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>OutputType</name></type> <name>output_type</name> <init>= <expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_default_address_type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseOutputType</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown address type '%s'"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Construct using pay-to-script-hash:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>inner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>AddAndGetMultisigDestination</name><argument_list>(<argument><expr><name>required</name></expr></argument>, <argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><name>output_type</name></expr></argument>, <argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>SetAddressBook</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"redeemScript"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>inner</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>inner</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>tallyitem</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nConf</name><argument_list>{<argument><expr><macro><name>std</name></macro><name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><operator>(</operator><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>txids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fIsWatchonly</name><argument_list>{<argument><expr><literal type="boolean">false</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <constructor><name>tallyitem</name><parameter_list>()</parameter_list>
    <block>{<block_content>
    </block_content>}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>UniValue</name></type> <name>ListReceived</name><argument_list>(<argument><expr><name><name>interfaces</name><operator>::</operator><name>Chain</name><operator>::</operator><name>Lock</name></name><operator>&amp;</operator> <name>locked_chain</name></expr></argument>, <argument><expr><name>CWallet</name> <operator>*</operator> <specifier>const</specifier> <name>pwallet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>params</name></expr></argument>, <argument><expr><name>bool</name> <name>by_label</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list>
<argument_list>{
    <comment type="line">// Minimum confirmations</comment>
    <argument><expr><name>int</name> <name>nMinDepth</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
    if <argument><expr><operator>(</operator><operator>!</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call><operator>)</operator>
        <name>nMinDepth</name> <operator>=</operator> <name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>;

    <comment type="line">// Whether to include empty labels</comment>
    <argument><expr><name>bool</name> <name>fIncludeEmpty</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;
    if <argument><expr><operator>(</operator><operator>!</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call><operator>)</operator>
        <name>fIncludeEmpty</name> <operator>=</operator> <name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></argument>;

    <argument><expr><name>isminefilter</name> <name>filter</name> <operator>=</operator> <name>ISMINE_SPENDABLE</name></expr></argument>;

    if <argument><expr><operator>(</operator><call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call><operator>)</operator> <block>{
        <expr><name>filter</name> <operator>|=</operator> <name>ISMINE_WATCH_ONLY</name></expr>;
    }</block>

    <name>bool</name> <name>has_filtered_address</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;
    <argument><expr><name>CTxDestination</name> <name>filtered_address</name> <operator>=</operator> <call><name>CNoDestination</name><argument_list>()</argument_list></call></expr></argument>;
    if <argument><expr><operator>(</operator><operator>!</operator><name>by_label</name> <operator>&amp;&amp;</operator> <call><name><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator> <block>{
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestinationString</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
            <throw>throw <argument_list>JSONRPCError<argument><expr><operator>(</operator><name>RPC_WALLET_ERROR</name><operator>,</operator> <literal type="string">"address_filter parameter was invalid"</literal><operator>)</operator></expr></argument></argument_list></throw>;
        }</block>
        <name>filtered_address</name> <operator>=</operator> <call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></if></if_stmt>
        <name>has_filtered_address</name> <operator>=</operator> <literal type="boolean">true</literal></block></expr></argument>;
    }</argument_list>

    <comment type="line">// Tally</comment>
    <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>, <argument><expr><name>tallyitem</name></expr></argument>&gt;</argument_list></name> <name>mapTally</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint256</name></expr></argument>, <argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pairWtx</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>pairWtx</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>locked_chain</name><operator>.</operator><name>checkFinalTx</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>nDepth</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nDepth</name> <operator>&lt;</operator> <name>nMinDepth</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>has_filtered_address</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>filtered_address</name> <operator>==</operator> <name>address</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>isminefilter</name></type> <name>mine</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>mine</name> <operator>&amp;</operator> <name>filter</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>tallyitem</name><modifier>&amp;</modifier></type> <name>item</name> <init>= <expr><name><name>mapTally</name><index>[<expr><name>address</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>item</name><operator>.</operator><name>nAmount</name></name> <operator>+=</operator> <name><name>txout</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>item</name><operator>.</operator><name>nConf</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>nConf</name></name></expr></argument>, <argument><expr><name>nDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>txids</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mine</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>item</name><operator>.</operator><name>fIsWatchonly</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">// Reply</comment>
    <function_decl><type><name>UniValue</name></type> <name>ret</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>tallyitem</name></expr></argument>&gt;</argument_list></name></type> <name>label_tally</name></decl>;</decl_stmt>

    <comment type="line">// Create mapAddressBook iterator</comment>
    <comment type="line">// If we aren't filtering, go from begin() to end()</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>start</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// If we are filtering, find() the applicable entry</comment>
    <if_stmt><if>if <condition>(<expr><name>has_filtered_address</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>filtered_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>next</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>auto</name></type> <name>item_it</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>item_it</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>item_it</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>address</name> <init>= <expr><name><name>item_it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>label</name> <init>= <expr><name><name>item_it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>mapTally</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mapTally</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>fIncludeEmpty</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nConf</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>fIsWatchonly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapTally</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nAmount</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>nAmount</name></name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nConf</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>nConf</name></name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fIsWatchonly</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>fIsWatchonly</name></name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>by_label</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>tallyitem</name><modifier>&amp;</modifier></type> <name>_item</name> <init>= <expr><name><name>label_tally</name><index>[<expr><name>label</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>_item</name><operator>.</operator><name>nAmount</name></name> <operator>+=</operator> <name>nAmount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>_item</name><operator>.</operator><name>nConf</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>_item</name><operator>.</operator><name>nConf</name></name></expr></argument>, <argument><expr><name>nConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>_item</name><operator>.</operator><name>fIsWatchonly</name></name> <operator>=</operator> <name>fIsWatchonly</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <function_decl><type><name>UniValue</name></type> <name>obj</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <if_stmt><if>if<condition>(<expr><name>fIsWatchonly</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"involvesWatchonly"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>,       <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>,        <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>nConf</name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>nConf</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <function_decl><type><name>UniValue</name></type> <name>transactions</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapTally</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>_item</name> <range>: <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name><name>second</name><operator>.</operator><name>txids</name></name></name></expr></range></decl></init>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>transactions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>_item</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txids"</literal></expr></argument>, <argument><expr><name>transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>by_label</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>label_tally</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>nAmount</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nConf</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>nConf</name></name></expr></init></decl>;</decl_stmt>
            <function_decl><type><name>UniValue</name></type> <name>obj</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>fIsWatchonly</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"involvesWatchonly"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>,        <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>nConf</name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>nConf</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>,         <argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>listreceivedbyaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listreceivedbyaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nList balances by receiving address.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"The minimum number of confirmations before payments are included."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_empty"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to include addresses that haven't received any payments."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to include watch-only addresses (see 'importaddress')"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address_filter"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"If present, only return information on this address."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"involvesWatchonly\" : true,        (bool) Only returns true if imported addresses were involved in transaction.\n"</literal>
            <literal type="string">"    \"address\" : \"receivingaddress\",  (string) The receiving address\n"</literal>
            <literal type="string">"    \"amount\" : x.xxx,                  (numeric) The total amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" received by the address\n"</literal>
            <literal type="string">"    \"confirmations\" : n,               (numeric) The number of confirmations of the most recent transaction included\n"</literal>
            <literal type="string">"    \"label\" : \"label\",               (string) The label of the receiving address. The default label is \"\".\n"</literal>
            <literal type="string">"    \"txids\": [\n"</literal>
            <literal type="string">"       \"txid\",                         (string) The ids of transactions received with the address \n"</literal>
            <literal type="string">"       ...\n"</literal>
            <literal type="string">"    ]\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">"6 true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleRpc</name><argument_list>(<argument><expr><literal type="string">"listreceivedbyaddress"</literal></expr></argument>, <argument><expr><literal type="string">"6, true, true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listreceivedbyaddress"</literal></argument>, <argument><literal type="string">"6, true, true, \"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>ListReceived</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listreceivedbylabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listreceivedbylabel"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nList received transactions by label.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"The minimum number of confirmations before payments are included."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_empty"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to include labels that haven't received any payments."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to include watch-only addresses (see 'importaddress')"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"involvesWatchonly\" : true,   (bool) Only returns true if imported addresses were involved in transaction.\n"</literal>
            <literal type="string">"    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this label\n"</literal>
            <literal type="string">"    \"confirmations\" : n,          (numeric) The number of confirmations of the most recent transaction included\n"</literal>
            <literal type="string">"    \"label\" : \"label\"           (string) The label of the receiving address. The default label is \"\".\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listreceivedbylabel"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listreceivedbylabel"</literal></expr></argument>, <argument><expr><literal type="string">"6 true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listreceivedbylabel"</literal></argument>, <argument><literal type="string">"6, true, true"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>ListReceived</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MaybePushAddress</name><parameter_list>(<parameter><decl><type><name>UniValue</name> <modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * List transactions based on the given criteria.
 *
 * @param  pwallet        The wallet.
 * @param  wtx            The wallet transaction.
 * @param  nMinDepth      The minimum confirmation depth.
 * @param  fLong          Whether to include the JSON version of the transaction.
 * @param  ret            The UniValue into which the result is stored.
 * @param  filter_ismine  The "is mine" filter flags.
 * @param  filter_label   Optional label string to filter incoming transactions.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ListTransactions</name><argument_list>(<argument><expr><name><name>interfaces</name><operator>::</operator><name>Chain</name><operator>::</operator><name>Lock</name></name><operator>&amp;</operator> <name>locked_chain</name></expr></argument>, <argument><expr><name>CWallet</name><operator>*</operator> <specifier>const</specifier> <name>pwallet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CWalletTx</name><operator>&amp;</operator> <name>wtx</name></expr></argument>, <argument><expr><name>int</name> <name>nMinDepth</name></expr></argument>, <argument><expr><name>bool</name> <name>fLong</name></expr></argument>, <argument><expr><name>UniValue</name><operator>&amp;</operator> <name>ret</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>isminefilter</name><operator>&amp;</operator> <name>filter_ismine</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>*</operator> <name>filter_label</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CAmount</name> <name>nFee</name></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>COutputEntry</name></expr></argument>&gt;</argument_list></name> <name>listReceived</name></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>COutputEntry</name></expr></argument>&gt;</argument_list></name> <name>listSent</name></expr></argument>;

    <argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetAmounts</name></name><argument_list>(<argument><expr><name>listReceived</name></expr></argument>, <argument><expr><name>listSent</name></expr></argument>, <argument><expr><name>nFee</name></expr></argument>, <argument><expr><name>filter_ismine</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>bool</name> <name>involvesWatchonly</name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>IsFromMe</name></name><argument_list>(<argument><expr><name>ISMINE_WATCH_ONLY</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Sent</comment>
    if <argument><expr><operator>(</operator><operator>!</operator><name>filter_label</name><operator>)</operator>
    <block>{
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>COutputEntry</name><modifier>&amp;</modifier> <name>s</name> : <name>listSent</name></type></decl></init>)</control>
        <expr_stmt><expr><block>{
            <expr><name>UniValue</name> <call><name>entry</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr>;
            <if_stmt><if>if <condition>(<expr><name>involvesWatchonly</name> <operator>||</operator> <operator>(</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name><operator>)</operator></expr>)</condition> <expr_stmt><expr><block>{
                <expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"involvesWatchonly"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;
            }</block>
            <call><name>MaybePushAddress</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></if></if_stmt>
            <call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></for>
            <call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><operator>-</operator><name><name>s</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></block></expr></argument>;
            if <argument><expr><operator>(</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call><operator>)</operator> <block>{
                <expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><index>[<expr><name><name>s</name><operator>.</operator><name>destination</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;
            }</block>
            <call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr></argument>;
            <argument><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><operator>-</operator><name>nFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
            if <argument><expr><operator>(</operator><name>fLong</name><operator>)</operator>
                <call><name>WalletTxToJSON</name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locked_chain</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>;
            <argument><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"abandoned"</literal></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>isAbandoned</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
            <argument><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>;
        }</argument_list></decl></decl_stmt>
    }

    <comment type="line">// Received</comment>
    if <expr_stmt><expr><operator>(</operator><call><name><name>listReceived</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>nMinDepth</name><operator>)</operator> <block>{
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>COutputEntry</name><modifier>&amp;</modifier></type> <name>r</name> <range>: <expr><name>listReceived</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><index>[<expr><name><name>r</name><operator>.</operator><name>destination</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></if></if_stmt></block_content></block></for>}</block></expr></expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>filter_label</name> <operator>&amp;&amp;</operator> <name>label</name> <operator>!=</operator> <operator>*</operator><name>filter_label</name></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <function_decl><type><name>UniValue</name></type> <name>entry</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <if_stmt><if>if <condition>(<expr><name>involvesWatchonly</name> <operator>||</operator> <operator>(</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"involvesWatchonly"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>MaybePushAddress</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><literal type="string">"orphan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsImmatureCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><literal type="string">"immature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><literal type="string">"generate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>fLong</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>WalletTxToJSON</name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locked_chain</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }
    }
}

static <function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>TransactionDescriptionString</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="string">"    \"confirmations\": n,                        (numeric) The number of confirmations for the transaction. Negative confirmations means the\n"</literal>
           <literal type="string">"                                                       transaction conflicted that many blocks ago.\n"</literal>
           <literal type="string">"    \"generated\": xxx,                          (bool) Only present if transaction only input is a coinbase one.\n"</literal>
           <literal type="string">"    \"trusted\": xxx,                            (bool) Only present if we consider transaction to be trusted and so safe to spend from.\n"</literal>
           <literal type="string">"    \"blockhash\": \"hashvalue\",                  (string) The block hash containing the transaction.\n"</literal>
           <literal type="string">"    \"blockheight\": n,                          (numeric) The block height containing the transaction.\n"</literal>
           <literal type="string">"    \"blockindex\": n,                           (numeric) The index of the transaction in the block that includes it.\n"</literal>
           <literal type="string">"    \"blocktime\": xxx,                          (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n"</literal>
           <literal type="string">"    \"txid\": \"transactionid\",                   (string) The transaction id.\n"</literal>
           <literal type="string">"    \"walletconflicts\": [                       (array) Conflicting transaction ids.\n"</literal>
           <literal type="string">"      \"txid\",                                  (string) The transaction id.\n"</literal>
           <literal type="string">"      ...\n"</literal>
           <literal type="string">"    ],\n"</literal>
           <literal type="string">"    \"time\": xxx,                               (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n"</literal>
           <literal type="string">"    \"timereceived\": xxx,                       (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\n"</literal>
           <literal type="string">"    \"comment\": \"...\",                          (string) If a comment is associated with the transaction, only present if not empty.\n"</literal>
           <literal type="string">"    \"bip125-replaceable\": \"yes|no|unknown\",    (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\n"</literal>
           <literal type="string">"                                                     may be unknown for unconfirmed transactions not in the mempool\n"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>listtransactions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listtransactions"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\n"</literal>
                <literal type="string">"\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"If set, should be a valid label name to return only incoming transactions\n"</literal>
            <literal type="string">"              with the specified label, or \"*\" to disable filtering and return all transactions."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"count"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"10"</literal></expr><operator>,</operator> <expr><literal type="string">"The number of transactions to return"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"skip"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"The number of transactions to skip"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator> <expr><literal type="string">"Include transactions to watch-only addresses (see 'importaddress')"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"involvesWatchonly\": xxx, (bool) Only returns true if imported addresses were involved in transaction.\n"</literal>
            <literal type="string">"    \"address\":\"address\",    (string) The bitcoin address of the transaction.\n"</literal>
            <literal type="string">"    \"category\":               (string) The transaction category.\n"</literal>
            <literal type="string">"                \"send\"                  Transactions sent.\n"</literal>
            <literal type="string">"                \"receive\"               Non-coinbase transactions received.\n"</literal>
            <literal type="string">"                \"generate\"              Coinbase transactions received with more than 100 confirmations.\n"</literal>
            <literal type="string">"                \"immature\"              Coinbase transactions received with 100 or fewer confirmations.\n"</literal>
            <literal type="string">"                \"orphan\"                Orphaned coinbase transactions received.\n"</literal>
            <literal type="string">"    \"amount\": x.xxx,          (numeric) The amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative for the 'send' category, and is positive\n"</literal>
            <literal type="string">"                                        for all other categories\n"</literal>
            <literal type="string">"    \"label\": \"label\",       (string) A comment for the address/transaction, if any\n"</literal>
            <literal type="string">"    \"vout\": n,                (numeric) the vout value\n"</literal>
            <literal type="string">"    \"fee\": x.xxx,             (numeric) The amount of the fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative and only available for the \n"</literal>
            <literal type="string">"                                         'send' category of transactions.\n"</literal>
            <operator>+</operator> <call><name>TransactionDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"    \"abandoned\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \n"</literal>
            <literal type="string">"                                         'send' category of transactions.\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nList the most recent 10 transactions in the systems\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listtransactions"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nList transactions 100 to 120\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listtransactions"</literal></expr></argument>, <argument><expr><literal type="string">"\"*\" 20 100"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listtransactions"</literal></argument>, <argument><literal type="string">"\"*\", 20, 100"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>*</modifier></type> <name>filter_label</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="string">"*"</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>filter_label</name> <operator>=</operator> <operator>&amp;</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>filter_label</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Label argument must be a valid label name or \"*\"."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCount</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nCount</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nFrom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nFrom</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>isminefilter</name></type> <name>filter</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>filter</name> <operator>|=</operator> <name>ISMINE_WATCH_ONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Negative count"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nFrom</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Negative from"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name><name>CWallet</name><operator>::</operator><name>TxItems</name></name> <modifier>&amp;</modifier></type> <name>txOrdered</name> <init>= <expr><name><name>pwallet</name><operator>-&gt;</operator><name>wtxOrdered</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// iterate backwards until we have nCount items to return:</comment>
        <for>for <control>(<init><decl><type><name><name>CWallet</name><operator>::</operator><name>TxItems</name><operator>::</operator><name>const_reverse_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>txOrdered</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>txOrdered</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CWalletTx</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pwtx</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ListTransactions</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><operator>*</operator><name>pwtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>filter_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>nCount</name><operator>+</operator><name>nFrom</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <comment type="line">// ret is newest to oldest</comment>

    <if_stmt><if>if <condition>(<expr><name>nFrom</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nFrom</name> <operator>=</operator> <call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nFrom</name> <operator>+</operator> <name>nCount</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nCount</name> <operator>=</operator> <call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>nFrom</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>arrTmp</name> <init>= <expr><call><name><name>ret</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>first</name> <init>= <expr><call><name><name>arrTmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>advance</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>nFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>last</name> <init>= <expr><call><name><name>arrTmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>advance</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>nFrom</name><operator>+</operator><name>nCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <call><name><name>arrTmp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arrTmp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><call><name><name>arrTmp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <call><name><name>arrTmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>arrTmp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>arrTmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>reverse</name></name><argument_list>(<argument><expr><call><name><name>arrTmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>arrTmp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Return oldest to newest</comment>

    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_backV</name></name><argument_list>(<argument><expr><name>arrTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listsinceblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listsinceblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\n"</literal>
                <literal type="string">"If \"blockhash\" is no longer a part of the main chain, transactions from the fork point onward are included.\n"</literal>
                <literal type="string">"Additionally, if include_removed is set, transactions affecting the wallet which were removed are returned in the \"removed\" array.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"If set, the block hash to list transactions since, otherwise list all transactions."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"target_confirmations"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"Return the nth block hash from the main chain. e.g. 1 would mean the best block hash. Note: this is not used as a filter, but only affects [lastblock] in the return value"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator> <expr><literal type="string">"Include transactions to watch-only addresses (see 'importaddress')"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_removed"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"Show transactions that were removed due to a reorg in the \"removed\" array\n"</literal>
            <literal type="string">"                                                           (not guaranteed to work on pruned nodes)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"transactions\": [\n"</literal>
            <literal type="string">"    \"involvesWatchonly\": xxx, (bool) Only returns true if imported addresses were involved in transaction.\n"</literal>
            <literal type="string">"    \"address\":\"address\",    (string) The bitcoin address of the transaction.\n"</literal>
            <literal type="string">"    \"category\":               (string) The transaction category.\n"</literal>
            <literal type="string">"                \"send\"                  Transactions sent.\n"</literal>
            <literal type="string">"                \"receive\"               Non-coinbase transactions received.\n"</literal>
            <literal type="string">"                \"generate\"              Coinbase transactions received with more than 100 confirmations.\n"</literal>
            <literal type="string">"                \"immature\"              Coinbase transactions received with 100 or fewer confirmations.\n"</literal>
            <literal type="string">"                \"orphan\"                Orphaned coinbase transactions received.\n"</literal>
            <literal type="string">"    \"amount\": x.xxx,          (numeric) The amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative for the 'send' category, and is positive\n"</literal>
            <literal type="string">"                                         for all other categories\n"</literal>
            <literal type="string">"    \"vout\" : n,               (numeric) the vout value\n"</literal>
            <literal type="string">"    \"fee\": x.xxx,             (numeric) The amount of the fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative and only available for the 'send' category of transactions.\n"</literal>
            <operator>+</operator> <call><name>TransactionDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"    \"abandoned\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.\n"</literal>
            <literal type="string">"    \"comment\": \"...\",       (string) If a comment is associated with the transaction.\n"</literal>
            <literal type="string">"    \"label\" : \"label\"       (string) A comment for the address/transaction, if any\n"</literal>
            <literal type="string">"    \"to\": \"...\",            (string) If a comment to is associated with the transaction.\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"removed\": [\n"</literal>
            <literal type="string">"    &lt;structure is the same as \"transactions\" above, only present if include_removed=true&gt;\n"</literal>
            <literal type="string">"    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"lastblock\": \"lastblockhash\"     (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listsinceblock"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listsinceblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listsinceblock"</literal></argument>, <argument><literal type="string">"\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The way the 'height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>height</name> <init>= <expr><call><name>MakeOptional</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>altheight</name></decl>;</decl_stmt> <comment type="line">// Height of the specified block, even if it's in a deactivated chain.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>target_confirms</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isminefilter</name></type> <name>filter</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>blockId</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blockId</name> <operator>=</operator> <call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>findFork</name></name><argument_list>(<argument><expr><name>blockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>altheight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>height</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>target_confirms</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>target_confirms</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>filter</name> <operator>|=</operator> <name>ISMINE_WATCH_ONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>include_removed</name> <init>= <expr><operator>(</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tip_height</name> <init>= <expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>depth</name> <init>= <expr><ternary><condition><expr><name>tip_height</name> <operator>&amp;&amp;</operator> <name>height</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>*</operator><name>tip_height</name> <operator>-</operator> <operator>*</operator><name>height</name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>transactions</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint256</name></expr></argument>, <argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pairWtx</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CWalletTx</name></type> <name>tx</name> <init>= <expr><name><name>pairWtx</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>depth</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>abs</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>depth</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ListTransactions</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>transactions</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* filter_label */</comment>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// when a reorg'd block is requested, we also list any relevant transactions</comment>
    <comment type="line">// in the blocks of the chain that was detached</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>removed</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>include_removed</name> <operator>&amp;&amp;</operator> <name>altheight</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>altheight</name> <operator>&gt;</operator> <operator>*</operator><name>height</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findBlock</name><argument_list>(<argument><expr><name>blockId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't read block from disk"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>tx</name> <range>: <expr><name><name>block</name><operator>.</operator><name>vtx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// We want all transactions regardless of confirmation count to appear here,</comment>
                <comment type="line">// even negative confirmation ones, hence the big negative.</comment>
                <expr_stmt><expr><call><name>ListTransactions</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">100000000</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>removed</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* filter_label */</comment>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>blockId</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><operator>*</operator><name>altheight</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name>int</name></type> <name>last_height</name> <init>= <expr><ternary><condition><expr><name>tip_height</name></expr> ?</condition><then> <expr><operator>*</operator><name>tip_height</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>target_confirms</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>lastblock</name> <init>= <expr><ternary><condition><expr><name>last_height</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>getBlockHash</name></name><argument_list>(<argument><expr><name>last_height</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"transactions"</literal></expr></argument>, <argument><expr><name>transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>include_removed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"removed"</literal></expr></argument>, <argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"lastblock"</literal></expr></argument>, <argument><expr><call><name><name>lastblock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>gettransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"gettransaction"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nGet detailed information about in-wallet transaction &lt;txid&gt;\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_watchonly"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr><operator>,</operator>
                            <expr><literal type="string">"Whether to include watch-only addresses in balance calculation and details[]"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator>
                            <expr><literal type="string">"Whether to include a `decoded` field containing the decoded transaction (equivalent to RPC decoderawtransaction)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"    \"amount\" : x.xxx,        (numeric) The transaction amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"    \"fee\": x.xxx,            (numeric) The amount of the fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative and only available for the \n"</literal>
            <literal type="string">"                              'send' category of transactions.\n"</literal>
            <operator>+</operator> <call><name>TransactionDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"    \"details\" : [\n"</literal>
            <literal type="string">"      {\n"</literal>
            <literal type="string">"        \"involvesWatchonly\": xxx,         (bool) Only returns true if imported addresses were involved in transaction.\n"</literal>
            <literal type="string">"        \"address\" : \"address\",          (string) The bitcoin address involved in the transaction\n"</literal>
            <literal type="string">"        \"category\" :                      (string) The transaction category.\n"</literal>
            <literal type="string">"                     \"send\"                  Transactions sent.\n"</literal>
            <literal type="string">"                     \"receive\"               Non-coinbase transactions received.\n"</literal>
            <literal type="string">"                     \"generate\"              Coinbase transactions received with more than 100 confirmations.\n"</literal>
            <literal type="string">"                     \"immature\"              Coinbase transactions received with 100 or fewer confirmations.\n"</literal>
            <literal type="string">"                     \"orphan\"                Orphaned coinbase transactions received.\n"</literal>
            <literal type="string">"        \"amount\" : x.xxx,                 (numeric) The amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"        \"label\" : \"label\",              (string) A comment for the address/transaction, if any\n"</literal>
            <literal type="string">"        \"vout\" : n,                       (numeric) the vout value\n"</literal>
            <literal type="string">"        \"fee\": x.xxx,                     (numeric) The amount of the fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">". This is negative and only available for the \n"</literal>
            <literal type="string">"                                           'send' category of transactions.\n"</literal>
            <literal type="string">"        \"abandoned\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \n"</literal>
            <literal type="string">"                                           'send' category of transactions.\n"</literal>
            <literal type="string">"      }\n"</literal>
            <literal type="string">"      ,...\n"</literal>
            <literal type="string">"    ],\n"</literal>
            <literal type="string">"    \"hex\" : \"data\"         (string) Raw data for transaction\n"</literal>
            <literal type="string">"    \"decoded\" : transaction         (json object) Optional, the decoded transaction (only present when `verbose` is passed), equivalent to the\n"</literal>
            <literal type="string">"                                                  RPC decoderawtransaction method, or the RPC getrawtransaction method when `verbose` is passed.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"gettransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"gettransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"gettransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" false true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"gettransaction"</literal></argument>, <argument><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>isminefilter</name></type> <name>filter</name> <init>= <expr><name>ISMINE_SPENDABLE</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>filter</name> <operator>|=</operator> <name>ISMINE_WATCH_ONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>verbose</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>entry</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid or non-wallet transaction id"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nCredit</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetCredit</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nDebit</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nNet</name> <init>= <expr><name>nCredit</name> <operator>-</operator> <name>nDebit</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFee</name> <init>= <expr><operator>(</operator><ternary><condition><expr><call><name><name>wtx</name><operator>.</operator><name>IsFromMe</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>nDebit</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nNet</name> <operator>-</operator> <name>nFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>IsFromMe</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>WalletTxToJSON</name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>details</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ListTransactions</name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>details</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* filter_label */</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"details"</literal></expr></argument>, <argument><expr><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHex</name> <init>= <expr><call><name>EncodeHexTx</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rpcSerializationFlags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><name>strHex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>decoded</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TxToUniv</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><call><name>uint256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"decoded"</literal></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>abandontransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"abandontransaction"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nMark in-wallet transaction &lt;txid&gt; as abandoned\n"</literal>
                <literal type="string">"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\n"</literal>
                <literal type="string">"for their inputs to be respent.  It can be used to replace \"stuck\" or evicted transactions.\n"</literal>
                <literal type="string">"It only works on transactions which are not included in a block and are not currently in the mempool.\n"</literal>
                <literal type="string">"It has no effect on transactions which are already abandoned.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"abandontransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"abandontransaction"</literal></argument>, <argument><literal type="string">"\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid or non-wallet transaction id"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>AbandonTransaction</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Transaction not eligible for abandonment"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>backupwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"backupwallet"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"destination"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The destination directory or file"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"backupwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"backup.dat\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"backupwallet"</literal></argument>, <argument><literal type="string">"\"backup.dat\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strDest</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>BackupWallet</name></name><argument_list>(<argument><expr><name>strDest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: Wallet backup failed!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>keypoolrefill</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"keypoolrefill"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nFills the keypool."</literal><operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"newsize"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"100"</literal></expr><operator>,</operator> <expr><literal type="string">"The new keypool size"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"keypoolrefill"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"keypoolrefill"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error: Private keys are disabled for this wallet"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>kpSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, expected valid size."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>kpSize</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>TopUpKeyPool</name></name><argument_list>(<argument><expr><name>kpSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetKeyPoolSize</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>kpSize</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error refreshing keypool."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>walletpassphrase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nStores the wallet decryption key in memory for 'timeout' seconds.\n"</literal>
                <literal type="string">"This is needed prior to performing transactions related to private keys such as sending bitcoins\n"</literal>
            <literal type="string">"\nNote:\n"</literal>
            <literal type="string">"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\n"</literal>
            <literal type="string">"time that overrides the old one.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"passphrase"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The wallet passphrase"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"timeout"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The time to keep the decryption key in seconds; capped at 100000000 (~3 years)."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nUnlock the wallet for 60 seconds\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"\"my pass phrase\" 60"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nLock the wallet again (before 60 seconds)\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletlock"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"walletpassphrase"</literal></argument>, <argument><literal type="string">"\"my pass phrase\", 60"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_WRONG_ENC_STATE</name></expr></argument>, <argument><expr><literal type="string">"Error: running with an unencrypted wallet, but walletpassphrase was called."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed</comment>
    <decl_stmt><decl><type><name>SecureString</name></type> <name>strWalletPass</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>strWalletPass</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)</comment>
    <comment type="line">// Alternately, find a way to make request.params[0] mlock()'d to begin with.</comment>
    <expr_stmt><expr><name>strWalletPass</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get the timeout</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSleepTime</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Timeout cannot be negative, otherwise it will relock immediately</comment>
    <if_stmt><if>if <condition>(<expr><name>nSleepTime</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Timeout cannot be negative."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Clamp timeout</comment>
    <decl_stmt><decl><type><specifier>constexpr</specifier> <name>int64_t</name></type> <name>MAX_SLEEP_TIME</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// larger values trigger a macos/libevent bug?</comment>
    <if_stmt><if>if <condition>(<expr><name>nSleepTime</name> <operator>&gt;</operator> <name>MAX_SLEEP_TIME</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nSleepTime</name> <operator>=</operator> <name>MAX_SLEEP_TIME</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>strWalletPass</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"passphrase can not be empty"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>(<argument><expr><name>strWalletPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_PASSPHRASE_INCORRECT</name></expr></argument>, <argument><expr><literal type="string">"Error: The wallet passphrase entered was incorrect."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>TopUpKeyPool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pwallet</name><operator>-&gt;</operator><name>nRelockTime</name></name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call> <operator>+</operator> <name>nSleepTime</name></expr>;</expr_stmt>

    <comment type="line">// Keep a weak pointer to the wallet so that it is possible to unload the</comment>
    <comment type="line">// wallet before the following callback is called. If a valid shared pointer</comment>
    <comment type="line">// is acquired in the callback then the wallet is still loaded.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>weak_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>weak_wallet</name> <init>= <expr><name>wallet</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rpcRunLater</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"lockwallet(%s)"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><name>weak_wallet</name></argument>]</capture> <block>{<block_content>
        <if_stmt><if>if <condition>(<decl><type><name>auto</name> <name>shared_wallet</name> = <name><name>weak_wallet</name><operator>.</operator><name>lock</name></name>(</type></decl>))</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>shared_wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>shared_wallet</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>shared_wallet</name><operator>-&gt;</operator><name>nRelockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>, <argument><expr><name>nSleepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>walletpassphrasechange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"walletpassphrasechange"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"oldpassphrase"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The current passphrase"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"newpassphrase"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The new passphrase"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrasechange"</literal></expr></argument>, <argument><expr><literal type="string">"\"old one\" \"new one\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"walletpassphrasechange"</literal></argument>, <argument><literal type="string">"\"old one\", \"new one\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_WRONG_ENC_STATE</name></expr></argument>, <argument><expr><literal type="string">"Error: running with an unencrypted wallet, but walletpassphrasechange was called."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)</comment>
    <comment type="line">// Alternately, find a way to make request.params[0] mlock()'d to begin with.</comment>
    <decl_stmt><decl><type><name>SecureString</name></type> <name>strOldWalletPass</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>strOldWalletPass</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strOldWalletPass</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SecureString</name></type> <name>strNewWalletPass</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>strNewWalletPass</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strNewWalletPass</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>strOldWalletPass</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>strNewWalletPass</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"passphrase can not be empty"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>ChangeWalletPassphrase</name></name><argument_list>(<argument><expr><name>strOldWalletPass</name></expr></argument>, <argument><expr><name>strNewWalletPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_PASSPHRASE_INCORRECT</name></expr></argument>, <argument><expr><literal type="string">"Error: The wallet passphrase entered was incorrect."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>walletlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"walletlock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nRemoves the wallet encryption key from memory, locking the wallet.\n"</literal>
                <literal type="string">"After calling this method, you will need to call walletpassphrase again\n"</literal>
                <literal type="string">"before being able to call any methods which require the wallet to be unlocked.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nSet the passphrase for 2 minutes to perform a transaction\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"\"my pass phrase\" 120"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nPerform a send (requires passphrase set)\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sendtoaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\" 1.0"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nClear the passphrase since we are done before 2 minutes is up\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletlock"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"walletlock"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_WRONG_ENC_STATE</name></expr></argument>, <argument><expr><literal type="string">"Error: running with an unencrypted wallet, but walletlock was called."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pwallet</name><operator>-&gt;</operator><name>nRelockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>encryptwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"encryptwallet"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\n"</literal>
                <literal type="string">"After this, any calls that interact with private keys such as sending or signing \n"</literal>
                <literal type="string">"will require the passphrase to be set prior the making these calls.\n"</literal>
                <literal type="string">"Use the walletpassphrase call for this, and then walletlock call.\n"</literal>
                <literal type="string">"If the wallet is already encrypted, use the walletpassphrasechange call.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"passphrase"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nEncrypt your wallet\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"encryptwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"my pass phrase\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nNow set the passphrase to use the wallet, such as for signing or sending bitcoin\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"\"my pass phrase\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nNow we can do something like sign\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signmessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"address\" \"test message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nNow lock the wallet again by removing the passphrase\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletlock"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"encryptwallet"</literal></argument>, <argument><literal type="string">"\"my pass phrase\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ENCRYPTION_FAILED</name></expr></argument>, <argument><expr><literal type="string">"Error: wallet does not contain private keys, nothing to encrypt."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_WRONG_ENC_STATE</name></expr></argument>, <argument><expr><literal type="string">"Error: running with an encrypted wallet, but encryptwallet was called."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)</comment>
    <comment type="line">// Alternately, find a way to make request.params[0] mlock()'d to begin with.</comment>
    <decl_stmt><decl><type><name>SecureString</name></type> <name>strWalletPass</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>strWalletPass</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>strWalletPass</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>strWalletPass</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"passphrase can not be empty"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>EncryptWallet</name></name><argument_list>(<argument><expr><name>strWalletPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ENCRYPTION_FAILED</name></expr></argument>, <argument><expr><literal type="string">"Error: Failed to encrypt the wallet."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="string">"wallet encrypted; The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup."</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>lockunspent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"lockunspent"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nUpdates list of temporarily unspendable outputs.\n"</literal>
                <literal type="string">"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\n"</literal>
                <literal type="string">"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\n"</literal>
                <literal type="string">"A locked transaction output will not be chosen by automatic coin selection, when spending bitcoins.\n"</literal>
                <literal type="string">"Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\n"</literal>
                <literal type="string">"is always cleared (by virtue of process exit) when a node stops or fails.\n"</literal>
                <literal type="string">"Also see the listunspent call\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"unlock"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Whether to unlock (true) or lock (false) the specified transactions"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"transactions"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"empty array"</literal></expr><operator>,</operator> <expr><literal type="string">"A json array of objects. Each object the txid (string) vout (numeric)."</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">""</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"txid"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The transaction id"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"vout"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The output number"</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"true|false    (boolean) Whether the command was successful or not\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nList the unspent transactions\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nLock an unspent transaction\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"lockunspent"</literal></expr></argument>, <argument><expr><literal type="string">"false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nList the locked transactions\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listlockunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nUnlock the transaction again\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"lockunspent"</literal></expr></argument>, <argument><expr><literal type="string">"true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"lockunspent"</literal></argument>, <argument><literal type="string">"false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fUnlock</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fUnlock</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>UnlockAllCoins</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>output_params</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create and validate the COutPoints first.</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>outputs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>outputs</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>output_params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>output_params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>o</name> <init>= <expr><name><name>output_params</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>RPCTypeCheckObj</name><argument_list>(<argument><expr><name>o</name></expr></argument>,
            <block>{<block_content>
                <block>{<block_content><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VSTR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"vout"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
            </block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></for>

        <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>txid</name><argument_list>(<argument><expr><call><name>ParseHashO</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nOutput</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vout"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nOutput</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, vout must be positive"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name></type> <name>outpt</name><argument_list>(<argument><expr><name>txid</name></expr></argument>, <argument><expr><name>nOutput</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>it</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>outpt</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, unknown transaction"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>trans</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>outpt</name><operator>.</operator><name>n</name></name> <operator>&gt;=</operator> <call><name><name>trans</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, vout index out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsSpent</name></name><argument_list>(<argument><expr><name><name>outpt</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>outpt</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, expected unspent output"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_locked</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsLockedCoin</name></name><argument_list>(<argument><expr><name><name>outpt</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>outpt</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>fUnlock</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_locked</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, expected locked output"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fUnlock</name> <operator>&amp;&amp;</operator> <name>is_locked</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid parameter, output already locked"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>outputs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">// Atomically set (un)locked status for the outputs.</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>outpt</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fUnlock</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>UnlockCoin</name></name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>LockCoin</name></name><argument_list>(<argument><expr><name>outpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>listlockunspent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listlockunspent"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns list of temporarily unspendable outputs.\n"</literal>
                <literal type="string">"See the lockunspent call to lock and unlock transactions for spending.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"txid\" : \"transactionid\",     (string) The transaction id locked\n"</literal>
            <literal type="string">"    \"vout\" : n                      (numeric) The vout value\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nList the unspent transactions\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nLock an unspent transaction\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"lockunspent"</literal></expr></argument>, <argument><expr><literal type="string">"false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nList the locked transactions\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listlockunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nUnlock the transaction again\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"lockunspent"</literal></expr></argument>, <argument><expr><literal type="string">"true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listlockunspent"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name></type> <name>vOutpts</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>ListLockedCoins</name></name><argument_list>(<argument><expr><name>vOutpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>outpt</name> <range>: <expr><name>vOutpts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>outpt</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>outpt</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>settxfee</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"settxfee"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"amount"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"true|false        (boolean) Returns true if successful\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"settxfee"</literal></expr></argument>, <argument><expr><literal type="string">"0.00001"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"settxfee"</literal></argument>, <argument><literal type="string">"0.00001"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>tx_fee_rate</name><argument_list>(<argument><expr><name>nAmount</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tx_fee_rate</name> <operator>==</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// automatic selection</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tx_fee_rate</name> <operator>&lt;</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>relayMinFee</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"txfee cannot be less than min relay tx fee (%s)"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>relayMinFee</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tx_fee_rate</name> <operator>&lt;</operator> <name><name>pwallet</name><operator>-&gt;</operator><name>m_min_fee</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"txfee cannot be less than wallet min fee (%s)"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>m_min_fee</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_pay_tx_fee</name></name> <operator>=</operator> <name>tx_fee_rate</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getbalances</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>rpc_wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><call><name><name>rpc_wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name> <init>= <expr><operator>*</operator><name>rpc_wallet</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{
        <argument><expr><literal type="string">"getbalances"</literal></expr></argument>,
        <argument><expr><literal type="string">"Returns an object with all balances in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">".\n"</literal></expr></argument>,
        <block>{<block_content><expr_stmt/>}</block_content></block>,
        <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"    \"mine\": {                        (object) balances from outputs that the wallet can sign\n"</literal>
            <literal type="string">"      \"trusted\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\n"</literal>
            <literal type="string">"      \"untrusted_pending\": xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\n"</literal>
            <literal type="string">"      \"immature\": xxx                (numeric) balance from immature coinbase outputs\n"</literal>
            <literal type="string">"      \"used\": xxx                    (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\n"</literal>
            <literal type="string">"    },\n"</literal>
            <literal type="string">"    \"watchonly\": {                   (object) watchonly balances (not present if wallet does not watch anything)\n"</literal>
            <literal type="string">"      \"trusted\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\n"</literal>
            <literal type="string">"      \"untrusted_pending\": xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\n"</literal>
            <literal type="string">"      \"immature\": xxx                (numeric) balance from immature coinbase outputs\n"</literal>
            <literal type="string">"    },\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>}</argument_list></call></expr></argument>,
        <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getbalances"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getbalances"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>bal</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>balances</name><argument_list>{<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>balances_mine</name><argument_list>{<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>balances_mine</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"trusted"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>balances_mine</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"untrusted_pending"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_untrusted_pending</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>balances_mine</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"immature"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_immature</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_AVOID_REUSE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// If the AVOID_REUSE flag is set, bal has been set to just the un-reused address balance. Get</comment>
            <comment type="line">// the total balance, and then subtract bal to get the reused address balance.</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>full_bal</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>balances_mine</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"used"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>full_bal</name><operator>.</operator><name>m_mine_trusted</name></name> <operator>+</operator> <name><name>full_bal</name><operator>.</operator><name>m_mine_untrusted_pending</name></name> <operator>-</operator> <name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name> <operator>-</operator> <name><name>bal</name><operator>.</operator><name>m_mine_untrusted_pending</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>balances</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mine"</literal></expr></argument>, <argument><expr><name>balances_mine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>spk_man</name> <operator>&amp;&amp;</operator> <call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>balances_watchonly</name><argument_list>{<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>balances_watchonly</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"trusted"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_watchonly_trusted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>balances_watchonly</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"untrusted_pending"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_watchonly_untrusted_pending</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>balances_watchonly</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"immature"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_watchonly_immature</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>balances</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"watchonly"</literal></expr></argument>, <argument><expr><name>balances_watchonly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>balances</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getwalletinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getwalletinfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"Returns an object containing various wallet state info.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"walletname\": xxxxx,               (string) the wallet name\n"</literal>
            <literal type="string">"  \"walletversion\": xxxxx,            (numeric) the wallet version\n"</literal>
            <literal type="string">"  \"balance\": xxxxxxx,                (numeric) DEPRECATED. Identical to getbalances().mine.trusted\n"</literal>
            <literal type="string">"  \"unconfirmed_balance\": xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\n"</literal>
            <literal type="string">"  \"immature_balance\": xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\n"</literal>
            <literal type="string">"  \"txcount\": xxxxxxx,                (numeric) the total number of transactions in the wallet\n"</literal>
            <literal type="string">"  \"keypoololdest\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\n"</literal>
            <literal type="string">"  \"keypoolsize\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\n"</literal>
            <literal type="string">"  \"keypoolsize_hd_internal\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\n"</literal>
            <literal type="string">"  \"unlocked_until\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n"</literal>
            <literal type="string">"  \"paytxfee\": x.xxxx,                (numeric) the transaction fee configuration, set in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB\n"</literal>
            <literal type="string">"  \"hdseedid\": \"&lt;hash160&gt;\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\n"</literal>
            <literal type="string">"  \"private_keys_enabled\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\n"</literal>
            <literal type="string">"  \"avoid_reuse\": true|false          (boolean) whether this wallet tracks clean/dirty coins in terms of reuse\n"</literal>
            <literal type="string">"  \"scanning\":                        (json object) current scanning details, or false if no scan is in progress\n"</literal>
            <literal type="string">"    {\n"</literal>
            <literal type="string">"      \"duration\" : xxxx              (numeric) elapsed seconds since scan start\n"</literal>
            <literal type="string">"      \"progress\" : x.xxxx,           (numeric) scanning progress percentage [0.0, 1.0]\n"</literal>
            <literal type="string">"    }\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getwalletinfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getwalletinfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>kpExternalSize</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>KeypoolCountExternalKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>bal</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetBalance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"walletname"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"walletversion"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"balance"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"unconfirmed_balance"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_untrusted_pending</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"immature_balance"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_immature</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txcount"</literal></expr></argument>,       <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"keypoololdest"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetOldestKeyPoolTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"keypoolsize"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>kpExternalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LegacyScriptPubKeyMan</name><modifier>*</modifier></type> <name>spk_man</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>spk_man</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>seed_id</name> <init>= <expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>GetHDChain</name></name><argument_list>()</argument_list></call><operator>.</operator><name>seed_id</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>seed_id</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hdseedid"</literal></expr></argument>, <argument><expr><call><name><name>seed_id</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"keypoolsize_hd_internal"</literal></expr></argument>,   <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetKeyPoolSize</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>kpExternalSize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"unlocked_until"</literal></expr></argument>, <argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>nRelockTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"paytxfee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>m_pay_tx_fee</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"private_keys_enabled"</literal></expr></argument>, <argument><expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"avoid_reuse"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_AVOID_REUSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsScanning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>scanning</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scanning</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>ScanningDuration</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scanning</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"progress"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>ScanningProgress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scanning"</literal></expr></argument>, <argument><expr><name>scanning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scanning"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listwalletdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listwalletdir"</literal></expr></argument>,
                <argument><expr><literal type="string">"Returns a list of wallets in the wallet directory.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"wallets\" : [                (json array of objects)\n"</literal>
            <literal type="string">"    {\n"</literal>
            <literal type="string">"      \"name\" : \"name\"          (string) The wallet name\n"</literal>
            <literal type="string">"    }\n"</literal>
            <literal type="string">"    ,...\n"</literal>
            <literal type="string">"  ]\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listwalletdir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listwalletdir"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>wallets</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>path</name> <range>: <expr><call><name>ListWalletDir</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>wallet</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallets</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"wallets"</literal></expr></argument>, <argument><expr><name>wallets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listwallets</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listwallets"</literal></expr></argument>,
                <argument><expr><literal type="string">"Returns a list of currently loaded wallets.\n"</literal>
                <literal type="string">"For full information on the wallet, use \"getwalletinfo\"\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[                         (json array of strings)\n"</literal>
            <literal type="string">"  \"walletname\"            (string) the wallet name\n"</literal>
            <literal type="string">"   ...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listwallets"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listwallets"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name> <range>: <expr><call><name>GetWallets</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NullUniValue</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>loadwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"loadwallet"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nLoads a wallet from a wallet file or directory."</literal>
                <literal type="string">"\nNote that all wallet command-line options used when starting bitcoind will be"</literal>
                <literal type="string">"\napplied to the new wallet (eg -zapwallettxes, upgradewallet, rescan, etc).\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"filename"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The wallet directory or .dat file."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"name\" :    &lt;wallet_name&gt;,        (string) The wallet name if loaded successfully.\n"</literal>
            <literal type="string">"  \"warning\" : &lt;warning&gt;,            (string) Warning message if wallet was not loaded cleanly.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"loadwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"test.dat\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"loadwallet"</literal></argument>, <argument><literal type="string">"\"test.dat\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>WalletLocation</name></type> <name>location</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>location</name><operator>.</operator><name>Exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"Wallet "</literal> <operator>+</operator> <call><name><name>location</name><operator>.</operator><name>GetName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" not found."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>is_directory</name></name><argument_list>(<argument><expr><call><name><name>location</name><operator>.</operator><name>GetPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// The given filename is a directory. Check that there's a wallet.dat file.</comment>
        <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>wallet_dat_file</name> <init>= <expr><call><name><name>location</name><operator>.</operator><name>GetPath</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"wallet.dat"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>symlink_status</name></name><argument_list>(<argument><expr><name>wallet_dat_file</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>type</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>fs</name><operator>::</operator><name>file_not_found</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"Directory "</literal> <operator>+</operator> <call><name><name>location</name><operator>.</operator><name>GetName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" does not contain a wallet.dat file."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>warning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>LoadWallet</name><argument_list>(<argument><expr><operator>*</operator><name>g_rpc_chain</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wallet</name></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><call><name>Join</name><argument_list>(<argument><expr><name>warning</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>setwalletflag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>flags</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name> <operator>:</operator> <name>WALLET_FLAG_MAP</name></expr></init>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>second</name></name> <operator>&amp;</operator> <name>MUTABLE_WALLET_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>flags</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>flags</name> <operator>==</operator> <literal type="string">""</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name><name>it</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"setwalletflag"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nChange the state of the given wallet flag for a wallet.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"flag"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The name of the flag to change. Current available flags: "</literal> <operator>+</operator> <name>flags</name></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"value"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"The new state."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"    \"flag_name\": string   (string) The name of the flag that was modified\n"</literal>
            <literal type="string">"    \"flag_state\": bool    (bool) The new state of the flag\n"</literal>
            <literal type="string">"    \"warnings\": string    (string) Any warnings associated with the change\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"setwalletflag"</literal></expr></argument>, <argument><expr><literal type="string">"avoid_reuse"</literal></expr></argument>)</argument_list></call>
                  <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"setwalletflag"</literal></argument>, <argument><literal type="string">"\"avoid_reuse\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>flag_str</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>value</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>WALLET_FLAG_MAP</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown wallet flag: %s"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>flag</name> <init>= <expr><call><name><name>WALLET_FLAG_MAP</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>MUTABLE_WALLET_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Wallet flag is immutable: %s"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>res</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>value</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Wallet flag is already set to %s: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"flag_name"</literal></expr></argument>, <argument><expr><name>flag_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"flag_state"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>SetWalletFlag</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>UnsetWalletFlag</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>&amp;&amp;</operator> <call><name><name>WALLET_FLAG_CAVEATS</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warnings"</literal></expr></argument>, <argument><expr><call><name><name>WALLET_FLAG_CAVEATS</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>createwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{
        <argument><expr><literal type="string">"createwallet"</literal></expr></argument>,
        <argument><expr><literal type="string">"\nCreates and loads a new wallet.\n"</literal></expr></argument>,
        <block>{<block_content>
            <block>{<block_content><expr_stmt><expr><literal type="string">"wallet_name"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The name for the new wallet. If this is a path, the wallet will be created at the path location."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"disable_private_keys"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"Disable the possibility of private keys (only watchonlys are possible in this mode)."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"blank"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"passphrase"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr><operator>,</operator> <expr><literal type="string">"Encrypt the wallet with this passphrase."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"avoid_reuse"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
        <expr_stmt/>}</block_content></block>,
        <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"name\" :    &lt;wallet_name&gt;,        (string) The wallet name if created successfully. If the wallet was created using a full path, the wallet_name will be the full path.\n"</literal>
            <literal type="string">"  \"warning\" : &lt;warning&gt;,            (string) Warning message if wallet was not loaded cleanly.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
        }</argument_list></call></expr></argument>,
        <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"createwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"testwallet\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"createwallet"</literal></argument>, <argument><literal type="string">"\"testwallet\""</literal></argument>)</argument_list></macro></expr></argument>
        }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WALLET_FLAG_BLANK_WALLET</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SecureString</name></type> <name>passphrase</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>passphrase</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>warnings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>passphrase</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>passphrase</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Empty string means unencrypted</comment>
            <expr_stmt><expr><call><name><name>warnings</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"Empty string given as passphrase, wallet will not be encrypted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>WALLET_FLAG_AVOID_REUSE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WalletCreationStatus</name></type> <name>status</name> <init>= <expr><call><name>CreateWallet</name><argument_list>(<argument><expr><operator>*</operator><name>g_rpc_chain</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>warnings</name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>WalletCreationStatus</name><operator>::</operator><name>CREATION_FAILED</name></name></expr>:</case>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
        <case>case <expr><name><name>WalletCreationStatus</name><operator>::</operator><name>ENCRYPTION_FAILED</name></name></expr>:</case>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ENCRYPTION_FAILED</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
        <case>case <expr><name><name>WalletCreationStatus</name><operator>::</operator><name>SUCCESS</name></name></expr>:</case>
            <break>break;</break>
        <comment type="line">// no default case, so the compiler can warn about missing cases</comment>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><call><name>Join</name><argument_list>(<argument><expr><name>warnings</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>unloadwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"unloadwallet"</literal></expr></argument>,
                <argument><expr><literal type="string">"Unloads the wallet referenced by the request endpoint otherwise unloads the wallet specified in the argument.\n"</literal>
                <literal type="string">"Specifying the wallet name on a wallet endpoint is invalid."</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"wallet_name"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"the wallet name from the RPC request"</literal></expr><operator>,</operator> <expr><literal type="string">"The name of the wallet to unload."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"unloadwallet"</literal></expr></argument>, <argument><expr><literal type="string">"wallet_name"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"unloadwallet"</literal></argument>, <argument><literal type="string">"wallet_name"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>wallet_name</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetWalletNameFromJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>wallet_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Cannot unload the requested wallet"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>wallet_name</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name>GetWallet</name><argument_list>(<argument><expr><name>wallet_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wallet</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"Requested wallet does not exist or is not loaded"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Release the "main" shared pointer and prevent further notifications.</comment>
    <comment type="line">// Note that any attempt to load the same wallet would fail until the wallet</comment>
    <comment type="line">// is destroyed (see CheckUniqueFileid).</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested wallet already unloaded"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>UnloadWallet</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listunspent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{
                <argument><expr><literal type="string">"listunspent"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns array of unspent transaction outputs\n"</literal>
                <literal type="string">"with between minconf and maxconf (inclusive) confirmations.\n"</literal>
                <literal type="string">"Optionally filter to only include txouts paid to specified addresses.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"minconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"The minimum confirmations to filter"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"maxconf"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"9999999"</literal></expr><operator>,</operator> <expr><literal type="string">"The maximum confirmations to filter"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"addresses"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"empty array"</literal></expr><operator>,</operator> <expr><literal type="string">"A json array of bitcoin addresses to filter"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"address"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"bitcoin address"</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_unsafe"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"Include outputs that are not safe to spend\n"</literal>
            <literal type="string">"                  See description of \"safe\" attribute below."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"query_options"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"JSON with query options"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"minimumAmount"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr>, <expr><literal type="string">"Minimum value of each UTXO in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"maximumAmount"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"unlimited"</literal></expr>, <expr><literal type="string">"Maximum value of each UTXO in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"maximumCount"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"unlimited"</literal></expr>, <expr><literal type="string">"Maximum number of UTXOs"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"minimumSumAmount"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"unlimited"</literal></expr>, <expr><literal type="string">"Minimum sum value of all UTXOs in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"query_options"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[                   (array of json object)\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"txid\" : \"txid\",          (string) the transaction id \n"</literal>
            <literal type="string">"    \"vout\" : n,               (numeric) the vout value\n"</literal>
            <literal type="string">"    \"address\" : \"address\",    (string) the bitcoin address\n"</literal>
            <literal type="string">"    \"label\" : \"label\",        (string) The associated label, or \"\" for the default label\n"</literal>
            <literal type="string">"    \"scriptPubKey\" : \"key\",   (string) the script key\n"</literal>
            <literal type="string">"    \"amount\" : x.xxx,         (numeric) the transaction output amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"    \"confirmations\" : n,      (numeric) The number of confirmations\n"</literal>
            <literal type="string">"    \"redeemScript\" : \"script\" (string) The redeemScript if scriptPubKey is P2SH\n"</literal>
            <literal type="string">"    \"witnessScript\" : \"script\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\n"</literal>
            <literal type="string">"    \"spendable\" : xxx,        (bool) Whether we have the private keys to spend this output\n"</literal>
            <literal type="string">"    \"solvable\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\n"</literal>
            <literal type="string">"    \"reused\" : xxx,           (bool) (only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\n"</literal>
            <literal type="string">"    \"desc\" : xxx,             (string, only when solvable) A descriptor for spending this output\n"</literal>
            <literal type="string">"    \"safe\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\n"</literal>
            <literal type="string">"                              from outside keys and unconfirmed replacement transactions are considered unsafe\n"</literal>
            <literal type="string">"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">"6 9999999 \"[\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\",\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\"]\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleRpc</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">"6, 9999999 \"[\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\",\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\"]\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">"6 9999999 '[]' true '{ \"minimumAmount\": 0.005 }'"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listunspent"</literal></argument>, <argument><literal type="string">"6, 9999999, [] , true, { \"minimumAmount\": 0.005 } "</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nMinDepth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nMinDepth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nMaxDepth</name> <init>= <expr><literal type="number">9999999</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nMaxDepth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>destinations</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>inputs</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>inputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>input</name> <init>= <expr><name><name>inputs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Bitcoin address: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>input</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>destinations</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Invalid parameter, duplicated address: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>input</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>include_unsafe</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>include_unsafe</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nMinimumAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nMaximumAmount</name> <init>= <expr><name>MAX_MONEY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nMinimumSumAmount</name> <init>= <expr><name>MAX_MONEY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nMaximumCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>options</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"minimumAmount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nMinimumAmount</name> <operator>=</operator> <call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"minimumAmount"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"maximumAmount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nMaximumAmount</name> <operator>=</operator> <call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"maximumAmount"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"minimumSumAmount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nMinimumSumAmount</name> <operator>=</operator> <call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"minimumSumAmount"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"maximumCount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nMaximumCount</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"maximumCount"</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>results</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name></type> <name>vecOutputs</name></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CCoinControl</name></type> <name>cctl</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cctl</name><operator>.</operator><name>m_avoid_address_reuse</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cctl</name><operator>.</operator><name>m_min_depth</name></name> <operator>=</operator> <name>nMinDepth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cctl</name><operator>.</operator><name>m_max_depth</name></name> <operator>=</operator> <name>nMaxDepth</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>AvailableCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>vecOutputs</name></expr></argument>, <argument><expr><operator>!</operator><name>include_unsafe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cctl</name></expr></argument>, <argument><expr><name>nMinimumAmount</name></expr></argument>, <argument><expr><name>nMaximumAmount</name></expr></argument>, <argument><expr><name>nMinimumSumAmount</name></expr></argument>, <argument><expr><name>nMaximumCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>avoid_reuse</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_AVOID_REUSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>COutput</name><modifier>&amp;</modifier></type> <name>out</name> <range>: <expr><name>vecOutputs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name> <init>= <expr><name><name>out</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name><name>out</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>fValidAddress</name> <init>= <expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>reused</name> <init>= <expr><name>avoid_reuse</name> <operator>&amp;&amp;</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>IsUsedDestination</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>destinations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>fValidAddress</name> <operator>||</operator> <operator>!</operator><call><name><name>destinations</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>entry</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>out</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>fValidAddress</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>provider</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>scriptPubKey</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptID</name><modifier>&amp;</modifier></type> <name>hash</name> <init>= <expr><call><name>CScriptID</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CScript</name></type> <name>redeemScript</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"redeemScript"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// Now check if the redeemScript is actually a P2WSH script</comment>
                        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>witness_destination</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>redeemScript</name><operator>.</operator><name>IsPayToWitnessScriptHash</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>bool</name></type> <name>extracted</name> <init>= <expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>, <argument><expr><name>witness_destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="line">// Also return the witness script</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>WitnessV0ScriptHash</name><modifier>&amp;</modifier></type> <name>whash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>witness_destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>CScriptID</name></type> <name>id</name></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name>CRIPEMD160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>whash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>whash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <decl_stmt><decl><type><name>CScript</name></type> <name>witnessScript</name></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"witnessScript"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>witnessScript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>witnessScript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>scriptPubKey</name><operator>.</operator><name>IsPayToWitnessScriptHash</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>WitnessV0ScriptHash</name><modifier>&amp;</modifier></type> <name>whash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CScriptID</name></type> <name>id</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>CRIPEMD160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>whash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>whash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>CScript</name></type> <name>witnessScript</name></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"witnessScript"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>witnessScript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>witnessScript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name><name>out</name><operator>.</operator><name>i</name></name></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>nDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"spendable"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>fSpendable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"solvable"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>fSolvable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>out</name><operator>.</operator><name>fSolvable</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>provider</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>auto</name></type> <name>descriptor</name> <init>= <expr><call><name>InferDescriptor</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>*</operator><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"desc"</literal></expr></argument>, <argument><expr><call><name><name>descriptor</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>avoid_reuse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"reused"</literal></expr></argument>, <argument><expr><name>reused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"safe"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>fSafe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FundTransaction</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>fee_out</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>change_position</name></decl></parameter>, <parameter><decl><type><name>UniValue</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coinControl</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>change_position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>lockUnspents</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>subtractFeeFromOutputs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>setSubtractFeeFromOutputs</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>options</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// backward compatibility bool only fallback</comment>
        <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>fAllowWatchOnly</name></name> <operator>=</operator> <call><name><name>options</name><operator>.</operator><name>get_bool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RPCTypeCheckObj</name><argument_list>(<argument><expr><name>options</name></expr></argument>,
            <block>{<block_content>
                <block>{<block_content><expr><literal type="string">"changeAddress"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VSTR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"changePosition"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"change_type"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VSTR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"includeWatching"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VBOOL</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"lockUnspents"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VBOOL</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"feeRate"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>()</argument_list></macro></block_content>}</block><operator>,</operator> <comment type="line">// will be checked below</comment>
                <block>{<block_content><expr><literal type="string">"subtractFeeFromOutputs"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VARR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"replaceable"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VBOOL</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"conf_target"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"estimate_mode"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VSTR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
            </block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator>
            <expr_stmt><expr><literal type="boolean">true</literal></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"changeAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"changeAddress"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"changeAddress must be a valid bitcoin address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>destChange</name></name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"changePosition"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>change_position</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"changePosition"</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"change_type"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"changeAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Cannot specify both changeAddress and address_type options"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>m_change_type</name></name> <operator>=</operator> <name><name>pwallet</name><operator>-&gt;</operator><name>m_default_change_type</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseOutputType</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"change_type"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name><name>coinControl</name><operator>.</operator><name>m_change_type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown change type '%s'"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><literal type="string">"change_type"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>fAllowWatchOnly</name></name> <operator>=</operator> <call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"includeWatching"</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"lockUnspents"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>lockUnspents</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"lockUnspents"</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"feeRate"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>m_feerate</name></name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"feeRate"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>fOverrideFeeRate</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"subtractFeeFromOutputs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>subtractFeeFromOutputs</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"subtractFeeFromOutputs"</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"replaceable"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"replaceable"</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"conf_target"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"feeRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Cannot specify both conf_target and feeRate"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>m_confirm_target</name></name> <operator>=</operator> <call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"conf_target"</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>estimateMaxBlocks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"estimate_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"feeRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Cannot specify both estimate_mode and feeRate"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FeeModeFromString</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"estimate_mode"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coinControl</name><operator>.</operator><name>m_fee_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid estimate_mode parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function> <if_stmt><else>else <block>{<block_content>
        <comment type="line">// if options is null and not a bool</comment>
        <expr_stmt><expr><name><name>coinControl</name><operator>.</operator><name>fAllowWatchOnly</name></name> <operator>=</operator> <call><name>ParseIncludeWatchonly</name><argument_list>(<argument><expr><name>NullUniValue</name></expr></argument>, <argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"TX must have at least one output"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>change_position</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>change_position</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>change_position</name></expr></argument> &gt;</argument_list></name> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"changePosition out of bounds"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>subtractFeeFromOutputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>subtractFeeFromOutputs</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>setSubtractFeeFromOutputs</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid parameter, duplicated position: %d"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid parameter, negative position: %d"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <call><name>int</name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid parameter, position too large: %d"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>setSubtractFeeFromOutputs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strFailReason</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>FundTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>fee_out</name></expr></argument>, <argument><expr><name>change_position</name></expr></argument>, <argument><expr><name>strFailReason</name></expr></argument>, <argument><expr><name>lockUnspents</name></expr></argument>, <argument><expr><name>setSubtractFeeFromOutputs</name></expr></argument>, <argument><expr><name>coinControl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name>strFailReason</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
}

static <function><type><name>UniValue</name></type> <name>fundrawtransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"fundrawtransaction"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nAdd inputs to a transaction until it has enough in value to meet its out value.\n"</literal>
                <literal type="string">"This will not modify existing inputs, and will add at most one change output to the outputs.\n"</literal>
                <literal type="string">"No existing outputs will be modified unless \"subtractFeeFromOutputs\" is specified.\n"</literal>
                <literal type="string">"Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.\n"</literal>
                <literal type="string">"The inputs added will not be signed, use signrawtransactionwithkey\n"</literal>
                <literal type="string">" or signrawtransactionwithwallet for that.\n"</literal>
                <literal type="string">"Note that all existing inputs must have their previous output transaction be in the wallet.\n"</literal>
                <literal type="string">"Note that all inputs selected must be of standard form and P2SH scripts must be\n"</literal>
                <literal type="string">"in the wallet using importaddress or addmultisigaddress (to calculate fees).\n"</literal>
                <literal type="string">"You can see whether this is the case by checking the \"solvable\" field in the listunspent output.\n"</literal>
                <literal type="string">"Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"hexstring"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The hex string of the raw transaction"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"options"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"for backward compatibility: passing in a true instead of an object will result in {\"includeWatching\":true}"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"changeAddress"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"pool address"</literal></expr>, <expr><literal type="string">"The bitcoin address to receive the change"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"changePosition"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"random"</literal></expr>, <expr><literal type="string">"The index of the change output"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"change_type"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"set by -changetype"</literal></expr>, <expr><literal type="string">"The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"includeWatching"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr>, <expr><literal type="string">"Also select inputs which are watch only.\n"</literal>
                                                          <literal type="string">"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\n"</literal>
                                                          <literal type="string">"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field."</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"lockUnspents"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">"Lock selected unspent outputs"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"feeRate"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"not set: makes wallet determine the fee"</literal></expr>, <expr><literal type="string">"Set a specific fee rate in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"subtractFeeFromOutputs"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"empty array"</literal></expr>, <expr><literal type="string">"A json array of integers.\n"</literal>
                            <literal type="string">"                              The fee will be equally deducted from the amount of each specified output.\n"</literal>
                            <literal type="string">"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\n"</literal>
                            <literal type="string">"                              If no outputs are specified here, the sender pays the fee."</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"vout_index"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"The zero-based output index, before a change output is added."</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                            <expr><block>{<expr><literal type="string">"replaceable"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr>, <expr><literal type="string">"Marks this transaction as BIP125 replaceable.\n"</literal>
                            <literal type="string">"                              Allows this transaction to be replaced by a transaction with higher fees"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"conf_target"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr>, <expr><literal type="string">"Confirmation target (in blocks)"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"estimate_mode"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"UNSET"</literal></expr>, <expr><literal type="string">"The fee estimate mode, must be one of:\n"</literal>
                            <literal type="string">"         \"UNSET\"\n"</literal>
                            <literal type="string">"         \"ECONOMICAL\"\n"</literal>
                            <literal type="string">"         \"CONSERVATIVE\""</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"options"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"iswitness"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"depends on heuristic tests"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether the transaction hex is a serialized witness transaction.\n"</literal>
                        <literal type="string">"If iswitness is not present, heuristic tests will be used in decoding.\n"</literal>
                        <literal type="string">"If true, only witness deserialization will be tried.\n"</literal>
                        <literal type="string">"If false, only non-witness deserialization will be tried.\n"</literal>
                        <literal type="string">"This boolean should reflect whether the transaction has inputs\n"</literal>
                        <literal type="string">"(e.g. fully valid, or on-chain transactions), if known by the caller."</literal></expr></expr_stmt>
                    }</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
                            <argument><expr><literal type="string">"{\n"</literal>
                            <literal type="string">"  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)\n"</literal>
                            <literal type="string">"  \"fee\":       n,         (numeric) Fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" the resulting transaction pays\n"</literal>
                            <literal type="string">"  \"changepos\": n          (numeric) The position of the added change output, or -1\n"</literal>
                            <literal type="string">"}\n"</literal></expr></argument>
                                }</argument_list></call></expr></argument>,
                                <argument><expr><call><name>RPCExamples</name><argument_list>{
                            <argument><expr><literal type="string">"\nCreate a transaction with no inputs\n"</literal>
                            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"[]\" \"{\\\"myaddress\\\":0.01}\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                            <literal type="string">"\nAdd sufficient unsigned inputs to meet the output value\n"</literal>
                            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"fundrawtransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"rawtransactionhex\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                            <literal type="string">"\nSign the transaction\n"</literal>
                            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signrawtransactionwithwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"fundedtransactionhex\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                            <literal type="string">"\nSend the transaction\n"</literal>
                            <operator>+</operator> <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"sendrawtransaction"</literal></argument>, <argument><literal type="string">"\"signedtransactionhex\""</literal></argument>)</argument_list></macro></expr></argument>
                                }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <expr><call><name>UniValueType</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>

    <comment type="line">// parse hex string from parameter</comment>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>try_witness</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>try_no_witness</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeHexTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>try_no_witness</name></expr></argument>, <argument><expr><name>try_witness</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TX decode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>fee</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>change_position</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>FundTransaction</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>fee</name></expr></argument>, <argument><expr><name>change_position</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>EncodeHexTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"changepos"</literal></expr></argument>, <argument><expr><name>change_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}

UniValue <macro><name>signrawtransactionwithwallet</name><argument_list>(<argument>const JSONRPCRequest&amp; request</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"signrawtransactionwithwallet"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSign inputs for raw transaction (serialized, hex-encoded).\n"</literal>
                <literal type="string">"The second optional argument (may be null) is an array of previous transaction outputs that\n"</literal>
                <literal type="string">"this transaction depends on but may not yet be in the block chain."</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"hexstring"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction hex string"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"prevtxs"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of previous dependent transaction outputs"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">""</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"txid"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The transaction id"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"vout"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The output number"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"scriptPubKey"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"script key"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"redeemScript"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"(required for P2SH) redeem script"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"witnessScript"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"(required for P2WSH or P2SH-P2WSH) witness script"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"amount"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"(required for Segwit inputs) the amount spent"</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"sighashtype"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"ALL"</literal></expr><operator>,</operator> <expr><literal type="string">"The signature hash type. Must be one of\n"</literal>
            <literal type="string">"       \"ALL\"\n"</literal>
            <literal type="string">"       \"NONE\"\n"</literal>
            <literal type="string">"       \"SINGLE\"\n"</literal>
            <literal type="string">"       \"ALL|ANYONECANPAY\"\n"</literal>
            <literal type="string">"       \"NONE|ANYONECANPAY\"\n"</literal>
            <literal type="string">"       \"SINGLE|ANYONECANPAY\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"hex\" : \"value\",                  (string) The hex-encoded raw transaction with signature(s)\n"</literal>
            <literal type="string">"  \"complete\" : true|false,          (boolean) If the transaction has a complete set of signatures\n"</literal>
            <literal type="string">"  \"errors\" : [                      (json array of objects) Script verification errors (if there are any)\n"</literal>
            <literal type="string">"    {\n"</literal>
            <literal type="string">"      \"txid\" : \"hash\",              (string) The hash of the referenced, previous transaction\n"</literal>
            <literal type="string">"      \"vout\" : n,                   (numeric) The index of the output to spent and used as input\n"</literal>
            <literal type="string">"      \"scriptSig\" : \"hex\",          (string) The hex-encoded signature script\n"</literal>
            <literal type="string">"      \"sequence\" : n,               (numeric) Script sequence number\n"</literal>
            <literal type="string">"      \"error\" : \"text\"              (string) Verification or signing error related to the input\n"</literal>
            <literal type="string">"    }\n"</literal>
            <literal type="string">"    ,...\n"</literal>
            <literal type="string">"  ]\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signrawtransactionwithwallet"</literal></expr></argument>, <argument><expr><literal type="string">"\"myhex\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"signrawtransactionwithwallet"</literal></argument>, <argument><literal type="string">"\"myhex\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><literal type="boolean">true</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeHexTx</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TX decode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Sign the transaction</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Fetch previous transactions (inputs):</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>coins</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <range>: <expr><name><name>mtx</name><operator>.</operator><name>vin</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>coins</name><index>[<expr><name><name>txin</name><operator>.</operator><name>prevout</name></name></expr>]</index></name></expr>;</expr_stmt> <comment type="line">// Create empty map entry keyed by prevout.</comment>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findCoins</name><argument_list>(<argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse the prevtxs array</comment>
    <expr_stmt><expr><call><name>ParsePrevouts</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>providers</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>coin_pair</name> <range>: <expr><name>coins</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name><name>coin_pair</name><operator>.</operator><name>second</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>provider</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>providers</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name><name>providers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// When there are no available providers, use DUMMY_SIGNING_PROVIDER so we can check if the tx is complete</comment>
        <expr_stmt><expr><call><name><name>providers</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>DUMMY_SIGNING_PROVIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <range>: <expr><name>providers</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>SignTransaction</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
     <return>return <expr><name>result</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>bumpfee</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"bumpfee"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\n"</literal>
                <literal type="string">"An opt-in RBF transaction with the given txid must be in the wallet.\n"</literal>
                <literal type="string">"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\n"</literal>
                <literal type="string">"If `totalFee` (DEPRECATED) is given, adding inputs is not supported, so there must be a single change output that is big enough or it will fail.\n"</literal>
                <literal type="string">"All inputs in the original transaction will be included in the replacement transaction.\n"</literal>
                <literal type="string">"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\n"</literal>
                <literal type="string">"By default, the new fee will be calculated automatically using estimatesmartfee.\n"</literal>
                <literal type="string">"The user can specify a confirmation target for estimatesmartfee.\n"</literal>
                <literal type="string">"Alternatively, the user can specify totalFee (DEPRECATED), or fee_rate ("</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" per kB) for the new transaction .\n"</literal>
                <literal type="string">"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\n"</literal>
                <literal type="string">"returned by getnetworkinfo) to enter the node's mempool.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The txid to be bumped"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"options"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">""</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"confTarget"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr>, <expr><literal type="string">"Confirmation target (in blocks)"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"totalFee"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"fallback to 'confTarget'"</literal></expr>, <expr><literal type="string">"Total fee (NOT feerate) to pay, in satoshis. (DEPRECATED)\n"</literal>
            <literal type="string">"                         In rare cases, the actual fee paid might be slightly higher than the specified\n"</literal>
            <literal type="string">"                         totalFee if the tx change output has to be removed because it is too close to\n"</literal>
            <literal type="string">"                         the dust threshold."</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"fee_rate"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"fallback to 'confTarget'"</literal></expr>, <expr><literal type="string">"FeeRate (NOT total fee) to pay, in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" per kB\n"</literal>
            <literal type="string">"                         Specify a fee rate instead of relying on the built-in fee estimator.\n"</literal>
            <literal type="string">"                         Must be at least 0.0001 BTC per kB higher than the current transaction fee rate.\n"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"replaceable"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr>, <expr><literal type="string">"Whether the new transaction should still be\n"</literal>
            <literal type="string">"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\n"</literal>
            <literal type="string">"                         be left unchanged from the original. If false, any input sequence numbers in the\n"</literal>
            <literal type="string">"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\n"</literal>
            <literal type="string">"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\n"</literal>
            <literal type="string">"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\n"</literal>
            <literal type="string">"                         are replaceable)."</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"estimate_mode"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"UNSET"</literal></expr>, <expr><literal type="string">"The fee estimate mode, must be one of:\n"</literal>
            <literal type="string">"         \"UNSET\"\n"</literal>
            <literal type="string">"         \"ECONOMICAL\"\n"</literal>
            <literal type="string">"         \"CONSERVATIVE\""</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"options"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"txid\":    \"value\",   (string)  The id of the new transaction\n"</literal>
            <literal type="string">"  \"origfee\":  n,         (numeric) Fee of the replaced transaction\n"</literal>
            <literal type="string">"  \"fee\":      n,         (numeric) Fee of the new transaction\n"</literal>
            <literal type="string">"  \"errors\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nBump the fee, get the new transaction\'s txid\n"</literal> <operator>+</operator>
                    <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"bumpfee"</literal></argument>, <argument><literal type="string">"&lt;txid&gt;"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// optional parameters</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>totalFee</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>options</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>RPCTypeCheckObj</name><argument_list>(<argument><expr><name>options</name></expr></argument>,
            <block>{<block_content>
                <block>{<block_content><expr><literal type="string">"confTarget"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"totalFee"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"fee_rate"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VNUM</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"replaceable"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VBOOL</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
                <block>{<block_content><expr><literal type="string">"estimate_mode"</literal></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>(<argument>UniValue::VSTR</argument>)</argument_list></macro></block_content>}</block><operator>,</operator>
            </block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator>
            <expr_stmt><expr><literal type="boolean">true</literal></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"confTarget"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"totalFee"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"fee_rate"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"confTarget can't be set with totalFee or fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"fee_rate"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"totalFee"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"fee_rate can't be set along with totalFee."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"confTarget"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// TODO: alias this to conf_target</comment>
            <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_confirm_target</name></name> <operator>=</operator> <call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"confTarget"</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>estimateMaxBlocks</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"totalFee"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rpcEnableDeprecated</name><argument_list>(<argument><expr><literal type="string">"totalFee"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"totalFee argument has been deprecated and will be removed in 0.20. Please use -deprecatedrpc=totalFee to continue using this argument until removal."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>totalFee</name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"totalFee"</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>totalFee</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid totalFee %s (must be greater than 0)"</literal></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>totalFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"fee_rate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CFeeRate</name></type> <name>fee_rate</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"fee_rate"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fee_rate</name> <operator>&lt;=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid fee_rate %s (must be greater than 0)"</literal></expr></argument>, <argument><expr><call><name><name>fee_rate</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_feerate</name></name> <operator>=</operator> <name>fee_rate</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"replaceable"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <name><name>options</name><index>[<expr><literal type="string">"replaceable"</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"estimate_mode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FeeModeFromString</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><literal type="string">"estimate_mode"</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin_control</name><operator>.</operator><name>m_fee_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid estimate_mode parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    }

    <comment type="line">// Make sure the results are valid at least up to the most recent block</comment>
    <comment type="line">// the user could have gotten from another RPC command prior to now</comment>
    pwallet<expr_stmt><expr><operator>-&gt;</operator><call><name>BlockUntilSyncedToCurrentChain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>errors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>old_fee</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>new_fee</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>feebumper</name><operator>::</operator><name>Result</name></name></type> <name>res</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>totalFee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Targeting total fee bump. Requires a change output of sufficient size.</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>feebumper</name><operator>::</operator><name>CreateTotalBumpTransaction</name></name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>totalFee</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>new_fee</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Targeting feerate bump.</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>feebumper</name><operator>::</operator><name>CreateRateBumpTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>pwallet</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>new_fee</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_ADDRESS_OR_KEY</name></name></expr>:</case>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                <break>break;</break>
            <case>case <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_REQUEST</name></name></expr>:</case>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_REQUEST</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                <break>break;</break>
            <case>case <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>:</case>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                <break>break;</break>
            <case>case <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>:</case>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// sign bumped transaction</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>feebumper</name><operator>::</operator><name>SignTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>pwallet</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't sign transaction."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// commit the bumped transaction</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txid</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>feebumper</name><operator>::</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>pwallet</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errors</name></expr></argument>, <argument><expr><name>txid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><name><name>errors</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>txid</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"origfee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>old_fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>new_fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>UniValue</name></type> <name>result_errors</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name> <range>: <expr><name>errors</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result_errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><name>result_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}

UniValue <macro><name>rescanblockchain</name><argument_list>(<argument>const JSONRPCRequest&amp; request</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"rescanblockchain"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nRescan the local blockchain for wallet related transactions.\n"</literal>
                <literal type="string">"Note: Use \"getwalletinfo\" to query the scanning progress.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"start_height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"block height where the rescan should start"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"stop_height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"the last block height that should be scanned. If none is provided it will rescan up to the tip at return time of this call."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"start_height\"     (numeric) The block height where the rescan started (the requested height or 0)\n"</literal>
            <literal type="string">"  \"stop_height\"      (numeric) The height of the last rescanned block. May be null in rare cases if there was a reorg and the call didn't scan any blocks because they were already scanned in the background.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"rescanblockchain"</literal></expr></argument>, <argument><expr><literal type="string">"100000 120000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"rescanblockchain"</literal></argument>, <argument><literal type="string">"100000, 120000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><parameter_list>(<parameter><decl><type><name>pwallet</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wallet is currently rescanning. Abort existing rescan or wait."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>start_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>start_block</name></decl>, <decl><type ref="prev"/><name>stop_block</name></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tip_height</name> <init>= <expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>start_height</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>start_height</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>tip_height</name> <operator>||</operator> <name>start_height</name></expr></argument> &gt;</argument_list></name> <operator>*</operator><name>tip_height</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid start_height"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stop_height</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>stop_height</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>stop_height</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>tip_height</name> <operator>||</operator> <operator>*</operator><name>stop_height</name></expr></argument> &gt;</argument_list></name> <operator>*</operator><name>tip_height</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid stop_height"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>*</operator><name>stop_height</name> <operator>&lt;</operator> <name>start_height</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"stop_height must be greater than start_height"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// We can't rescan beyond non-pruned blocks, stop and throw an error</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>findPruned</name></name><argument_list>(<argument><expr><name>start_height</name></expr></argument>, <argument><expr><name>stop_height</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>tip_height</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>start_block</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>getBlockHash</name></name><argument_list>(<argument><expr><name>start_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// If called with a stop_height, set the stop_height here to</comment>
            <comment type="line">// trigger a rescan to that height.</comment>
            <comment type="line">// If called without a stop height, leave stop_height as null here</comment>
            <comment type="line">// so rescan continues to the tip (even if the tip advances during</comment>
            <comment type="line">// rescan).</comment>
            <if_stmt><if>if <condition>(<expr><name>stop_height</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>stop_block</name> <operator>=</operator> <call><name><name>locked_chain</name><operator>-&gt;</operator><name>getBlockHash</name></name><argument_list>(<argument><expr><operator>*</operator><name>stop_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>=
        <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><name>start_block</name></expr></argument>, <argument><expr><name>stop_block</name></expr></argument>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* fUpdate */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>result</name><operator>.</operator><name>status</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>SUCCESS</name></name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>FAILURE</name></name></expr>:</case>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rescan failed. Potentially corrupted data files."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    <case>case <expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>USER_ABORT</name></name></expr>:</case>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Rescan aborted."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        <comment type="line">// no default case, so the compiler can warn about missing cases</comment>
    </block_content>}</block></switch>
    <function_decl><type><name>UniValue</name></type> <name>response</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"start_height"</literal></expr></argument>, <argument><expr><name>start_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"stop_height"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr> </then><else>: <expr><call><name>UniValue</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>response</name></expr>;</return>
</block_content>}</block>

<class>class <name>DescribeWalletAddressVisitor</name> <super_list>: <super><specifier>public</specifier> <name><name>boost</name><operator>::</operator><name>static_visitor</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>provider</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>ProcessSubScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>subscript</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>obj</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <comment type="line">// Always present: script type and redeemscript</comment>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>solutions_data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>txnouttype</name></type> <name>which_type</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>solutions_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"script"</literal></expr></argument>, <argument><expr><call><name>GetTxnOutputType</name><argument_list>(<argument><expr><name>which_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>subscript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>subscript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>embedded</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>embedded</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Only when the script corresponds to an address.</comment>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>subobj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>detail</name> <init>= <expr><call><name>DescribeAddress</name><argument_list>(<argument><expr><name>embedded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>subobj</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>wallet_detail</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>apply_visitor</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>embedded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>subobj</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>wallet_detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subobj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>embedded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subobj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>subscript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>subscript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>subobj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"pubkey"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pubkey"</literal></expr></argument>, <argument><expr><name><name>subobj</name><index>[<expr><literal type="string">"pubkey"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"embedded"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>subobj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>which_type</name> <operator>==</operator> <name>TX_MULTISIG</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Also report some information on multisig scripts (which do not have a corresponding address).</comment>
            <comment type="line">// TODO: abstract out the common functionality between this logic and ExtractDestinations.</comment>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"sigsrequired"</literal></expr></argument>, <argument><expr><name><name>solutions_data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>pubkeys</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>solutions_data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CPubKey</name></type> <name>key</name><argument_list>(<argument><expr><name><name>solutions_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>solutions_data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pubkeys"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <constructor><specifier>explicit</specifier> <name>DescribeWalletAddressVisitor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>_provider</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>provider</name><argument_list>(<argument><expr><name>_provider</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNoDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>UniValue</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PKHash</name><modifier>&amp;</modifier></type> <name>pkhash</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name><argument_list>(<argument><expr><name>pkhash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>vchPubKey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><name>keyID</name></expr></argument>, <argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pubkey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"iscompressed"</literal></expr></argument>, <argument><expr><call><name><name>vchPubKey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ScriptHash</name><modifier>&amp;</modifier></type> <name>scripthash</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptID</name><argument_list>(<argument><expr><name>scripthash</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><name>scriptID</name></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ProcessSubScript</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessV0KeyHash</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>-&gt;</operator><name>GetPubKey</name></name><argument_list>(<argument><expr><call><name>CKeyID</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pubkey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessV0ScriptHash</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CRIPEMD160</name></type> <name>hasher</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><call><name><name>id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>provider</name> <operator>&amp;&amp;</operator> <call><name><name>provider</name><operator>-&gt;</operator><name>GetCScript</name></name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subscript</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ProcessSubScript</name><argument_list>(<argument><expr><name>subscript</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>UniValue</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessUnknown</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content> <return>return <expr><call><name>UniValue</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
</public>}</block>;</class>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>DescribeWalletAddress</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type> <name>pwallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>detail</name> <init>= <expr><call><name>DescribeAddress</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pwallet</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>provider</name> <operator>=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>apply_visitor</name></name><argument_list>(<argument><expr><call><name>DescribeWalletAddressVisitor</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Convert CAddressBookData to JSON record.  */</comment>
<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>AddressBookDataToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAddressBookData</name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"purpose"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>purpose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>getaddressinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getaddressinfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturn information about the given bitcoin address.\n"</literal>
                <literal type="string">"Some of the information will only be present if the address is in the active wallet.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address for which to get information."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"address\" : \"address\",              (string) The bitcoin address validated.\n"</literal>
            <literal type="string">"  \"scriptPubKey\" : \"hex\",             (string) The hex-encoded scriptPubKey generated by the address.\n"</literal>
            <literal type="string">"  \"ismine\" : true|false,              (boolean) If the address is yours.\n"</literal>
            <literal type="string">"  \"iswatchonly\" : true|false,         (boolean) If the address is watchonly.\n"</literal>
            <literal type="string">"  \"solvable\" : true|false,            (boolean) If we know how to spend coins sent to this address, ignoring the possible lack of private keys.\n"</literal>
            <literal type="string">"  \"desc\" : \"desc\",                    (string, optional) A descriptor for spending coins sent to this address (only when solvable).\n"</literal>
            <literal type="string">"  \"isscript\" : true|false,            (boolean) If the key is a script.\n"</literal>
            <literal type="string">"  \"ischange\" : true|false,            (boolean) If the address was used for change output.\n"</literal>
            <literal type="string">"  \"iswitness\" : true|false,           (boolean) If the address is a witness address.\n"</literal>
            <literal type="string">"  \"witness_version\" : version         (numeric, optional) The version number of the witness program.\n"</literal>
            <literal type="string">"  \"witness_program\" : \"hex\"           (string, optional) The hex value of the witness program.\n"</literal>
            <literal type="string">"  \"script\" : \"type\"                   (string, optional) The output script type. Only if isscript is true and the redeemscript is known. Possible\n"</literal>
            <literal type="string">"                                                         types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash,\n"</literal>
            <literal type="string">"                                                         witness_v0_scripthash, witness_unknown.\n"</literal>
            <literal type="string">"  \"hex\" : \"hex\",                      (string, optional) The redeemscript for the p2sh address.\n"</literal>
            <literal type="string">"  \"pubkeys\"                           (array, optional) Array of pubkeys associated with the known redeemscript (only if script is multisig).\n"</literal>
            <literal type="string">"    [\n"</literal>
            <literal type="string">"      \"pubkey\" (string)\n"</literal>
            <literal type="string">"      ,...\n"</literal>
            <literal type="string">"    ]\n"</literal>
            <literal type="string">"  \"sigsrequired\" : xxxxx              (numeric, optional) The number of signatures required to spend multisig output (only if script is multisig).\n"</literal>
            <literal type="string">"  \"pubkey\" : \"publickeyhex\",          (string, optional) The hex value of the raw public key for single-key addresses (possibly embedded in P2SH or P2WSH).\n"</literal>
            <literal type="string">"  \"embedded\" : {...},                 (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. Includes all\n"</literal>
            <literal type="string">"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\n"</literal>
            <literal type="string">"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\n"</literal>
            <literal type="string">"  \"iscompressed\" : true|false,        (boolean, optional) If the pubkey is compressed.\n"</literal>
            <literal type="string">"  \"label\" :  \"label\"                  (string) The label associated with the address. Defaults to \"\". Equivalent to the name field in the labels array.\n"</literal>
            <literal type="string">"  \"timestamp\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\n"</literal>
            <literal type="string">"  \"hdkeypath\" : \"keypath\"             (string, optional) The HD keypath, if the key is HD and available.\n"</literal>
            <literal type="string">"  \"hdseedid\" : \"&lt;hash160&gt;\"            (string, optional) The Hash160 of the HD seed.\n"</literal>
            <literal type="string">"  \"hdmasterfingerprint\" : \"&lt;hash160&gt;\" (string, optional) The fingerprint of the master key.\n"</literal>
            <literal type="string">"  \"labels\"                            (object) An array of labels associated with the address. Currently limited to one label but returned\n"</literal>
            <literal type="string">"                                               as an array to keep the API stable if multiple labels are enabled in the future.\n"</literal>
            <literal type="string">"    [\n"</literal>
            <literal type="string">"      { (json object of label data)\n"</literal>
            <literal type="string">"        \"name\": \"label name\" (string) The label name. Defaults to \"\". Equivalent to the label field above.\n"</literal>
            <literal type="string">"        \"purpose\": \"purpose\" (string) The purpose of the associated address (send or receive).\n"</literal>
            <literal type="string">"      },...\n"</literal>
            <literal type="string">"    ]\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getaddressinfo"</literal></expr></argument>, <argument><expr><literal type="string">"\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                    <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getaddressinfo"</literal></argument>, <argument><literal type="string">"\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Make sure the destination is valid</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>currentAddress</name> <init>= <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><name>currentAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>SigningProvider</name><modifier>*</modifier></type> <name>provider</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetSigningProvider</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>isminetype</name></type> <name>mine</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsMine</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ismine"</literal></expr></argument>, <argument><expr><call><name>bool</name><argument_list>(<argument><expr><name>mine</name> <operator>&amp;</operator> <name>ISMINE_SPENDABLE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>solvable</name> <init>= <expr><name>provider</name> <operator>&amp;&amp;</operator> <call><name>IsSolvable</name><argument_list>(<argument><expr><operator>*</operator><name>provider</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"solvable"</literal></expr></argument>, <argument><expr><name>solvable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>solvable</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"desc"</literal></expr></argument>, <argument><expr><call><name>InferDescriptor</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>*</operator><name>provider</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"iswatchonly"</literal></expr></argument>, <argument><expr><call><name>bool</name><argument_list>(<argument><expr><name>mine</name> <operator>&amp;</operator> <name>ISMINE_WATCH_ONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return DescribeWalletAddress fields.</comment>
    <comment type="line">// Always returned: isscript, ischange, iswitness.</comment>
    <comment type="line">// Optional: witness_version, witness_program, script, hex, pubkeys (array),</comment>
    <comment type="line">// sigsrequired, pubkey, embedded, iscompressed.</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>detail</name> <init>= <expr><call><name>DescribeWalletAddress</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return label field if existing. Currently only one label can be</comment>
    <comment type="line">// associated with an address, so the label should be equivalent to the</comment>
    <comment type="line">// value of the name key/value pair in the labels hash array below.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><index>[<expr><name>dest</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ischange"</literal></expr></argument>, <argument><expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsChange</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Fetch KeyMetadata, if present, for the timestamp, hdkeypath, hdseedid,</comment>
    <comment type="line">// and hdmasterfingerprint fields.</comment>
    <decl_stmt><decl><type><name>ScriptPubKeyMan</name><modifier>*</modifier></type> <name>spk_man</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>GetScriptPubKeyMan</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>spk_man</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>CKeyMetadata</name><modifier>*</modifier></type> <name>meta</name> <init>= <expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>GetMetadata</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>nCreateTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>has_key_origin</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hdkeypath"</literal></expr></argument>, <argument><expr><call><name>WriteHDKeypath</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>key_origin</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hdseedid"</literal></expr></argument>, <argument><expr><call><name><name>meta</name><operator>-&gt;</operator><name>hd_seed_id</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hdmasterfingerprint"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>key_origin</name><operator>.</operator><name>fingerprint</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Return a labels array containing a hash of key/value pairs for the label</comment>
    <comment type="line">// name and address purpose. The name value is equivalent to the label field</comment>
    <comment type="line">// above. Currently only one label can be associated with an address, but we</comment>
    <comment type="line">// return an array so the API remains stable if we allow multiple labels to</comment>
    <comment type="line">// be associated with an address in the future.</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>labels</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>, <argument><expr><name>CAddressBookData</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>mi</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mi</name> <operator>!=</operator> <call><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>labels</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>AddressBookDataToJSON</name><argument_list>(<argument><expr><name><name>mi</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"labels"</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getaddressesbylabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getaddressesbylabel"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the list of addresses assigned the specified label.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"label"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The label."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{ (json object with addresses as keys)\n"</literal>
            <literal type="string">"  \"address\": { (json object with information about address)\n"</literal>
            <literal type="string">"    \"purpose\": \"string\" (string)  Purpose of address (\"send\" for sending address, \"receive\" for receiving address)\n"</literal>
            <literal type="string">"  },...\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getaddressesbylabel"</literal></expr></argument>, <argument><expr><literal type="string">"\"tabby\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getaddressesbylabel"</literal></argument>, <argument><literal type="string">"\"tabby\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>label</name> <init>= <expr><call><name>LabelFromValue</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Find all addresses that have the given label</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>addresses</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CTxDestination</name></expr></argument>, <argument><expr><name>CAddressBookData</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>second</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>label</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>address</name> <init>= <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// CWallet::mapAddressBook is not expected to contain duplicate</comment>
            <comment type="line">// address strings, but build a separate set as a precaution just in</comment>
            <comment type="line">// case it does.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>unique</name> <init>= <expr><call><name><name>addresses</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// UniValue::pushKV checks if the key exists in O(N)</comment>
            <comment type="line">// and since duplicate addresses are unexpected (checked with</comment>
            <comment type="line">// std::set in O(log(N))), UniValue::__pushKV is used instead,</comment>
            <comment type="line">// which currently is O(1).</comment>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>__pushKV</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name>AddressBookDataToJSON</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>ret</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_INVALID_LABEL_NAME</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"No addresses with label "</literal> <operator>+</operator> <name>label</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>listlabels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"listlabels"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"purpose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[               (json array of string)\n"</literal>
            <literal type="string">"  \"label\",      (string) Label name\n"</literal>
            <literal type="string">"  ...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nList all labels\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listlabels"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nList labels that have receiving addresses\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listlabels"</literal></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nList labels that have sending addresses\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listlabels"</literal></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"listlabels"</literal></argument>, <argument><literal type="string">"receive"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>purpose</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>purpose</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add to a set to sort by label name, then insert into Univalue array</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>label_set</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CTxDestination</name></expr></argument>, <argument><expr><name>CAddressBookData</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name><name>pwallet</name><operator>-&gt;</operator><name>mapAddressBook</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>purpose</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>purpose</name></name> <operator>==</operator> <name>purpose</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>label_set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name> <range>: <expr><name>label_set</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>sethdseed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"sethdseed"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\n"</literal>
                <literal type="string">"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\n"</literal>
                <literal type="string">"\nNote that you will need to MAKE A NEW BACKUP of your wallet after setting the HD wallet seed."</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"newkeypool"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to flush old unused addresses, including change addresses, from the keypool and regenerate it.\n"</literal>
            <literal type="string">"                             If true, the next address from getnewaddress and change address from getrawchangeaddress will be from this new seed.\n"</literal>
            <literal type="string">"                             If false, addresses (including change addresses if the wallet already had HD Chain Split enabled) from the existing\n"</literal>
            <literal type="string">"                             keypool will be used until it has been depleted."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"seed"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"random seed"</literal></expr><operator>,</operator> <expr><literal type="string">"The WIF private key to use as the new HD seed.\n"</literal>
            <literal type="string">"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sethdseed"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sethdseed"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"sethdseed"</literal></expr></argument>, <argument><expr><literal type="string">"true \"wifkey\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"sethdseed"</literal></argument>, <argument><literal type="string">"true, \"wifkey\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LegacyScriptPubKeyMan</name><modifier>&amp;</modifier></type> <name>spk_man</name> <init>= <expr><call><name>EnsureLegacyScriptPubKeyMan</name><argument_list>(<argument><expr><operator>*</operator><name>pwallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isInitialBlockDownload</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_IN_INITIAL_DOWNLOAD</name></expr></argument>, <argument><expr><literal type="string">"Cannot set a new HD seed while still in Initial Block Download"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>IsWalletFlagSet</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot set a HD seed to a wallet with private keys disabled"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>pwallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pwallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Do not do anything to non-HD wallets</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pwallet</name><operator>-&gt;</operator><name>CanSupportFeature</name></name><argument_list>(<argument><expr><name>FEATURE_HD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_WALLET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot set a HD seed on a non-HD wallet. Start with -upgradewallet in order to upgrade a non-HD wallet to HD"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>EnsureWalletIsUnlocked</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>flush_key_pool</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flush_key_pool</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CPubKey</name></type> <name>master_pub_key</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>master_pub_key</name> <operator>=</operator> <call><name><name>spk_man</name><operator>.</operator><name>GenerateNewSeed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid private key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>HaveKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Already have this key (either as an HD seed or as a loose private key)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>master_pub_key</name> <operator>=</operator> <call><name><name>spk_man</name><operator>.</operator><name>DeriveNewSeed</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>spk_man</name><operator>.</operator><name>SetHDSeed</name></name><argument_list>(<argument><expr><name>master_pub_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>flush_key_pool</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>spk_man</name><operator>.</operator><name>NewKeyPool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>walletprocesspsbt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"walletprocesspsbt"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nUpdate a PSBT with input information from our wallet and then sign inputs\n"</literal>
                <literal type="string">"that we can sign for."</literal> <operator>+</operator>
                    <call><name>HelpRequiringPassphrase</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"psbt"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction base64 string"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"sign"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"Also sign the transaction when updating"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"sighashtype"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"ALL"</literal></expr><operator>,</operator> <expr><literal type="string">"The signature hash type to sign with if not specified by the PSBT. Must be one of\n"</literal>
            <literal type="string">"       \"ALL\"\n"</literal>
            <literal type="string">"       \"NONE\"\n"</literal>
            <literal type="string">"       \"SINGLE\"\n"</literal>
            <literal type="string">"       \"ALL|ANYONECANPAY\"\n"</literal>
            <literal type="string">"       \"NONE|ANYONECANPAY\"\n"</literal>
            <literal type="string">"       \"SINGLE|ANYONECANPAY\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"bip32derivs"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"If true, includes the BIP 32 derivation paths for public keys if we know them"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"psbt\" : \"value\",          (string) The base64-encoded partially signed transaction\n"</literal>
            <literal type="string">"  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n"</literal>
            <literal type="string">"  ]\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"walletprocesspsbt"</literal></argument>, <argument><literal type="string">"\"psbt\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>

    <comment type="line">// Unserialize the transaction</comment>
    <decl_stmt><decl><type><name>PartiallySignedTransaction</name></type> <name>psbtx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeBase64PSBT</name><argument_list>(<argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"TX decode failed %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Get the sighash type</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nHashType</name> <init>= <expr><call><name>ParseSighashString</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Fill transaction with our data and also sign</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>bip32derivs</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TransactionError</name></type> <name>err</name> <init>= <expr><call><name>FillPSBT</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>bip32derivs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name><name>TransactionError</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCTransactionError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>CDataStream</name></type> <name>ssTx</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>ssTx</name> <operator>&lt;&lt;</operator> <name>psbtx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"psbt"</literal></expr></argument>, <argument><expr><call><name>EncodeBase64</name><argument_list>(<argument><expr><call><name><name>ssTx</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"complete"</literal></expr></argument>, <argument><expr><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}

UniValue <macro><name>walletcreatefundedpsbt</name><argument_list>(<argument>const JSONRPCRequest&amp; request</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier></type> <name>wallet</name> <init>= <expr><call><name>GetWalletForJSONRPCRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pwallet</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EnsureWalletIsAvailable</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"walletcreatefundedpsbt"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\n"</literal>
                <literal type="string">"Implements the Creator and Updater roles.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"inputs"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of json objects"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">""</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"txid"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The transaction id"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"vout"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The output number"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"sequence"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"The sequence number"</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                        }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"outputs"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"a json array with outputs (key-value pairs), where none of the keys are duplicated.\n"</literal>
                            <literal type="string">"That is, each address can only appear once and there can only be one 'data' object.\n"</literal>
                            <literal type="string">"For compatibility reasons, a dictionary, which holds the key-value pairs directly, is also\n"</literal>
                            <literal type="string">"                             accepted as second parameter."</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">""</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"address"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr>,
                                }</block></expr>,
                                }</block></expr>,
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">""</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"data"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"A key-value pair. The key must be \"data\", the value is hex-encoded data"</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                        }</block></expr><operator>,</operator></expr_stmt>
                    }</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"locktime"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"Raw locktime. Non-0 value also locktime-activates inputs"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"options"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">""</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"changeAddress"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"pool address"</literal></expr>, <expr><literal type="string">"The bitcoin address to receive the change"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"changePosition"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"random"</literal></expr>, <expr><literal type="string">"The index of the change output"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"change_type"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"set by -changetype"</literal></expr>, <expr><literal type="string">"The output type to use. Only valid if changeAddress is not specified. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"includeWatching"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"true for watch-only wallets, otherwise false"</literal></expr>, <expr><literal type="string">"Also select inputs which are watch only"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"lockUnspents"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr>, <expr><literal type="string">"Lock selected unspent outputs"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"feeRate"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>AMOUNT</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"not set: makes wallet determine the fee"</literal></expr>, <expr><literal type="string">"Set a specific fee rate in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"subtractFeeFromOutputs"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"empty array"</literal></expr>, <expr><literal type="string">"A json array of integers.\n"</literal>
                            <literal type="string">"                              The fee will be equally deducted from the amount of each specified output.\n"</literal>
                            <literal type="string">"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\n"</literal>
                            <literal type="string">"                              If no outputs are specified here, the sender pays the fee."</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"vout_index"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"The zero-based output index, before a change output is added."</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                            <expr><block>{<expr><literal type="string">"replaceable"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"wallet default"</literal></expr>, <expr><literal type="string">"Marks this transaction as BIP125 replaceable.\n"</literal>
                            <literal type="string">"                              Allows this transaction to be replaced by a transaction with higher fees"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"conf_target"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"Fallback to wallet's confirmation target"</literal></expr>, <expr><literal type="string">"Confirmation target (in blocks)"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"estimate_mode"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"UNSET"</literal></expr>, <expr><literal type="string">"The fee estimate mode, must be one of:\n"</literal>
                            <literal type="string">"         \"UNSET\"\n"</literal>
                            <literal type="string">"         \"ECONOMICAL\"\n"</literal>
                            <literal type="string">"         \"CONSERVATIVE\""</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"options"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"bip32derivs"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"If true, includes the BIP 32 derivation paths for public keys if we know them"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
                            <argument><expr><literal type="string">"{\n"</literal>
                            <literal type="string">"  \"psbt\": \"value\",        (string)  The resulting raw transaction (base64-encoded string)\n"</literal>
                            <literal type="string">"  \"fee\":       n,         (numeric) Fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" the resulting transaction pays\n"</literal>
                            <literal type="string">"  \"changepos\": n          (numeric) The position of the added change output, or -1\n"</literal>
                            <literal type="string">"}\n"</literal></expr></argument>
                                }</argument_list></call></expr></argument>,
                                <argument><expr><call><name>RPCExamples</name><argument_list>{
                            <argument><expr><literal type="string">"\nCreate a transaction with no inputs\n"</literal>
                            <operator>+</operator> <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"walletcreatefundedpsbt"</literal></argument>, <argument><literal type="string">"\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"[{\\\"data\\\":\\\"00010203\\\"}]\""</literal></argument>)</argument_list></macro></expr></argument>
                                }</argument_list></call></expr></argument>,
                            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content>
        <expr_stmt><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr><operator>,</operator>
        <expr><call><name>UniValueType</name><argument_list>()</argument_list></call></expr><operator>,</operator> <comment type="line">// ARR or OBJ, checked later</comment>
        <expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr><operator>,</operator>
        <expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr><operator>,</operator>
        <expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr></expr_stmt>
        </block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><literal type="boolean">true</literal></expr></expr_stmt>
    )</block_content></block><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>fee</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>change_position</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>rbf</name> <init>= <expr><name><name>pwallet</name><operator>-&gt;</operator><name>m_signal_rbf</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>replaceable_arg</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="string">"replaceable"</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>replaceable_arg</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name>replaceable_arg</name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rbf</name> <operator>=</operator> <call><name><name>replaceable_arg</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>rawTx</name> <init>= <expr><call><name>ConstructTransaction</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rbf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>FundTransaction</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>rawTx</name></expr></argument>, <argument><expr><name>fee</name></expr></argument>, <argument><expr><name>change_position</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a blank psbt</comment>
    <function_decl><type><name>PartiallySignedTransaction</name></type> <name>psbtx</name><parameter_list>(<parameter><decl><type><name>rawTx</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Fill transaction with out data but don't sign</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>bip32derivs</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>TransactionError</name></type> <name>err</name> <init>= <expr><call><name>FillPSBT</name><argument_list>(<argument><expr><name>pwallet</name></expr></argument>, <argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>bip32derivs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name><name>TransactionError</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCTransactionError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Serialize the PSBT</comment>
    <function_decl><type><name>CDataStream</name></type> <name>ssTx</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>ssTx</name> <operator>&lt;&lt;</operator> <name>psbtx</name></expr>;</expr_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"psbt"</literal></expr></argument>, <argument><expr><call><name>EncodeBase64</name><argument_list>(<argument><expr><call><name><name>ssTx</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"changepos"</literal></expr></argument>, <argument><expr><name>change_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}

UniValue <expr_stmt><expr><call><name>abortrescan</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JSONRPCRequest</name><operator>&amp;</operator> <name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// in rpcdump.cpp</comment>
<function_decl><type><name>UniValue</name></type> <name>dumpprivkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// in rpcdump.cpp</comment>
<function_decl><type><name>UniValue</name></type> <name>importprivkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>importaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>importpubkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>dumpwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>importwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>importprunedfunds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>removeprunedfunds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>UniValue</name></type> <name>importmulti</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// clang-format off</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>commands</name><index>[]</index></name> <init>=
<expr><block>{ <comment type="line">//  category              name                                actor (function)                argNames</comment>
    <comment type="line">//  --------------------- ------------------------          -----------------------         ----------</comment>
    <expr><block>{ <expr><literal type="string">"rawtransactions"</literal></expr>,    <expr><literal type="string">"fundrawtransaction"</literal></expr>,               <expr><operator>&amp;</operator><name>fundrawtransaction</name></expr>,            <expr><block>{<expr><literal type="string">"hexstring"</literal></expr>,<expr><literal type="string">"options"</literal></expr>,<expr><literal type="string">"iswitness"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"abandontransaction"</literal></expr>,               <expr><operator>&amp;</operator><name>abandontransaction</name></expr>,            <expr><block>{<expr><literal type="string">"txid"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"abortrescan"</literal></expr>,                      <expr><operator>&amp;</operator><name>abortrescan</name></expr>,                   <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"addmultisigaddress"</literal></expr>,               <expr><operator>&amp;</operator><name>addmultisigaddress</name></expr>,            <expr><block>{<expr><literal type="string">"nrequired"</literal></expr>,<expr><literal type="string">"keys"</literal></expr>,<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"address_type"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"backupwallet"</literal></expr>,                     <expr><operator>&amp;</operator><name>backupwallet</name></expr>,                  <expr><block>{<expr><literal type="string">"destination"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"bumpfee"</literal></expr>,                          <expr><operator>&amp;</operator><name>bumpfee</name></expr>,                       <expr><block>{<expr><literal type="string">"txid"</literal></expr>, <expr><literal type="string">"options"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"createwallet"</literal></expr>,                     <expr><operator>&amp;</operator><name>createwallet</name></expr>,                  <expr><block>{<expr><literal type="string">"wallet_name"</literal></expr>, <expr><literal type="string">"disable_private_keys"</literal></expr>, <expr><literal type="string">"blank"</literal></expr>, <expr><literal type="string">"passphrase"</literal></expr>, <expr><literal type="string">"avoid_reuse"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"dumpprivkey"</literal></expr>,                      <expr><operator>&amp;</operator><name>dumpprivkey</name></expr>,                   <expr><block>{<expr><literal type="string">"address"</literal></expr>}</block></expr>  }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"dumpwallet"</literal></expr>,                       <expr><operator>&amp;</operator><name>dumpwallet</name></expr>,                    <expr><block>{<expr><literal type="string">"filename"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"encryptwallet"</literal></expr>,                    <expr><operator>&amp;</operator><name>encryptwallet</name></expr>,                 <expr><block>{<expr><literal type="string">"passphrase"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getaddressesbylabel"</literal></expr>,              <expr><operator>&amp;</operator><name>getaddressesbylabel</name></expr>,           <expr><block>{<expr><literal type="string">"label"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getaddressinfo"</literal></expr>,                   <expr><operator>&amp;</operator><name>getaddressinfo</name></expr>,                <expr><block>{<expr><literal type="string">"address"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getbalance"</literal></expr>,                       <expr><operator>&amp;</operator><name>getbalance</name></expr>,                    <expr><block>{<expr><literal type="string">"dummy"</literal></expr>,<expr><literal type="string">"minconf"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>,<expr><literal type="string">"avoid_reuse"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getnewaddress"</literal></expr>,                    <expr><operator>&amp;</operator><name>getnewaddress</name></expr>,                 <expr><block>{<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"address_type"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getrawchangeaddress"</literal></expr>,              <expr><operator>&amp;</operator><name>getrawchangeaddress</name></expr>,           <expr><block>{<expr><literal type="string">"address_type"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getreceivedbyaddress"</literal></expr>,             <expr><operator>&amp;</operator><name>getreceivedbyaddress</name></expr>,          <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"minconf"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getreceivedbylabel"</literal></expr>,               <expr><operator>&amp;</operator><name>getreceivedbylabel</name></expr>,            <expr><block>{<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"minconf"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"gettransaction"</literal></expr>,                   <expr><operator>&amp;</operator><name>gettransaction</name></expr>,                <expr><block>{<expr><literal type="string">"txid"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>,<expr><literal type="string">"verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getunconfirmedbalance"</literal></expr>,            <expr><operator>&amp;</operator><name>getunconfirmedbalance</name></expr>,         <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getbalances"</literal></expr>,                      <expr><operator>&amp;</operator><name>getbalances</name></expr>,                   <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"getwalletinfo"</literal></expr>,                    <expr><operator>&amp;</operator><name>getwalletinfo</name></expr>,                 <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importaddress"</literal></expr>,                    <expr><operator>&amp;</operator><name>importaddress</name></expr>,                 <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"rescan"</literal></expr>,<expr><literal type="string">"p2sh"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importmulti"</literal></expr>,                      <expr><operator>&amp;</operator><name>importmulti</name></expr>,                   <expr><block>{<expr><literal type="string">"requests"</literal></expr>,<expr><literal type="string">"options"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importprivkey"</literal></expr>,                    <expr><operator>&amp;</operator><name>importprivkey</name></expr>,                 <expr><block>{<expr><literal type="string">"privkey"</literal></expr>,<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"rescan"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importprunedfunds"</literal></expr>,                <expr><operator>&amp;</operator><name>importprunedfunds</name></expr>,             <expr><block>{<expr><literal type="string">"rawtransaction"</literal></expr>,<expr><literal type="string">"txoutproof"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importpubkey"</literal></expr>,                     <expr><operator>&amp;</operator><name>importpubkey</name></expr>,                  <expr><block>{<expr><literal type="string">"pubkey"</literal></expr>,<expr><literal type="string">"label"</literal></expr>,<expr><literal type="string">"rescan"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"importwallet"</literal></expr>,                     <expr><operator>&amp;</operator><name>importwallet</name></expr>,                  <expr><block>{<expr><literal type="string">"filename"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"keypoolrefill"</literal></expr>,                    <expr><operator>&amp;</operator><name>keypoolrefill</name></expr>,                 <expr><block>{<expr><literal type="string">"newsize"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listaddressgroupings"</literal></expr>,             <expr><operator>&amp;</operator><name>listaddressgroupings</name></expr>,          <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listlabels"</literal></expr>,                       <expr><operator>&amp;</operator><name>listlabels</name></expr>,                    <expr><block>{<expr><literal type="string">"purpose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listlockunspent"</literal></expr>,                  <expr><operator>&amp;</operator><name>listlockunspent</name></expr>,               <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listreceivedbyaddress"</literal></expr>,            <expr><operator>&amp;</operator><name>listreceivedbyaddress</name></expr>,         <expr><block>{<expr><literal type="string">"minconf"</literal></expr>,<expr><literal type="string">"include_empty"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>,<expr><literal type="string">"address_filter"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listreceivedbylabel"</literal></expr>,              <expr><operator>&amp;</operator><name>listreceivedbylabel</name></expr>,           <expr><block>{<expr><literal type="string">"minconf"</literal></expr>,<expr><literal type="string">"include_empty"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listsinceblock"</literal></expr>,                   <expr><operator>&amp;</operator><name>listsinceblock</name></expr>,                <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>,<expr><literal type="string">"target_confirmations"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>,<expr><literal type="string">"include_removed"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listtransactions"</literal></expr>,                 <expr><operator>&amp;</operator><name>listtransactions</name></expr>,              <expr><block>{<expr><literal type="string">"label|dummy"</literal></expr>,<expr><literal type="string">"count"</literal></expr>,<expr><literal type="string">"skip"</literal></expr>,<expr><literal type="string">"include_watchonly"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listunspent"</literal></expr>,                      <expr><operator>&amp;</operator><name>listunspent</name></expr>,                   <expr><block>{<expr><literal type="string">"minconf"</literal></expr>,<expr><literal type="string">"maxconf"</literal></expr>,<expr><literal type="string">"addresses"</literal></expr>,<expr><literal type="string">"include_unsafe"</literal></expr>,<expr><literal type="string">"query_options"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listwalletdir"</literal></expr>,                    <expr><operator>&amp;</operator><name>listwalletdir</name></expr>,                 <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"listwallets"</literal></expr>,                      <expr><operator>&amp;</operator><name>listwallets</name></expr>,                   <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"loadwallet"</literal></expr>,                       <expr><operator>&amp;</operator><name>loadwallet</name></expr>,                    <expr><block>{<expr><literal type="string">"filename"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"lockunspent"</literal></expr>,                      <expr><operator>&amp;</operator><name>lockunspent</name></expr>,                   <expr><block>{<expr><literal type="string">"unlock"</literal></expr>,<expr><literal type="string">"transactions"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"removeprunedfunds"</literal></expr>,                <expr><operator>&amp;</operator><name>removeprunedfunds</name></expr>,             <expr><block>{<expr><literal type="string">"txid"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"rescanblockchain"</literal></expr>,                 <expr><operator>&amp;</operator><name>rescanblockchain</name></expr>,              <expr><block>{<expr><literal type="string">"start_height"</literal></expr>, <expr><literal type="string">"stop_height"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"sendmany"</literal></expr>,                         <expr><operator>&amp;</operator><name>sendmany</name></expr>,                      <expr><block>{<expr><literal type="string">"dummy"</literal></expr>,<expr><literal type="string">"amounts"</literal></expr>,<expr><literal type="string">"minconf"</literal></expr>,<expr><literal type="string">"comment"</literal></expr>,<expr><literal type="string">"subtractfeefrom"</literal></expr>,<expr><literal type="string">"replaceable"</literal></expr>,<expr><literal type="string">"conf_target"</literal></expr>,<expr><literal type="string">"estimate_mode"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"sendtoaddress"</literal></expr>,                    <expr><operator>&amp;</operator><name>sendtoaddress</name></expr>,                 <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"amount"</literal></expr>,<expr><literal type="string">"comment"</literal></expr>,<expr><literal type="string">"comment_to"</literal></expr>,<expr><literal type="string">"subtractfeefromamount"</literal></expr>,<expr><literal type="string">"replaceable"</literal></expr>,<expr><literal type="string">"conf_target"</literal></expr>,<expr><literal type="string">"estimate_mode"</literal></expr>,<expr><literal type="string">"avoid_reuse"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"sethdseed"</literal></expr>,                        <expr><operator>&amp;</operator><name>sethdseed</name></expr>,                     <expr><block>{<expr><literal type="string">"newkeypool"</literal></expr>,<expr><literal type="string">"seed"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"setlabel"</literal></expr>,                         <expr><operator>&amp;</operator><name>setlabel</name></expr>,                      <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"label"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"settxfee"</literal></expr>,                         <expr><operator>&amp;</operator><name>settxfee</name></expr>,                      <expr><block>{<expr><literal type="string">"amount"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"setwalletflag"</literal></expr>,                    <expr><operator>&amp;</operator><name>setwalletflag</name></expr>,                 <expr><block>{<expr><literal type="string">"flag"</literal></expr>,<expr><literal type="string">"value"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"signmessage"</literal></expr>,                      <expr><operator>&amp;</operator><name>signmessage</name></expr>,                   <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"message"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"signrawtransactionwithwallet"</literal></expr>,     <expr><operator>&amp;</operator><name>signrawtransactionwithwallet</name></expr>,  <expr><block>{<expr><literal type="string">"hexstring"</literal></expr>,<expr><literal type="string">"prevtxs"</literal></expr>,<expr><literal type="string">"sighashtype"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"unloadwallet"</literal></expr>,                     <expr><operator>&amp;</operator><name>unloadwallet</name></expr>,                  <expr><block>{<expr><literal type="string">"wallet_name"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"walletcreatefundedpsbt"</literal></expr>,           <expr><operator>&amp;</operator><name>walletcreatefundedpsbt</name></expr>,        <expr><block>{<expr><literal type="string">"inputs"</literal></expr>,<expr><literal type="string">"outputs"</literal></expr>,<expr><literal type="string">"locktime"</literal></expr>,<expr><literal type="string">"options"</literal></expr>,<expr><literal type="string">"bip32derivs"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"walletlock"</literal></expr>,                       <expr><operator>&amp;</operator><name>walletlock</name></expr>,                    <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"walletpassphrase"</literal></expr>,                 <expr><operator>&amp;</operator><name>walletpassphrase</name></expr>,              <expr><block>{<expr><literal type="string">"passphrase"</literal></expr>,<expr><literal type="string">"timeout"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"walletpassphrasechange"</literal></expr>,           <expr><operator>&amp;</operator><name>walletpassphrasechange</name></expr>,        <expr><block>{<expr><literal type="string">"oldpassphrase"</literal></expr>,<expr><literal type="string">"newpassphrase"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"wallet"</literal></expr>,             <expr><literal type="string">"walletprocesspsbt"</literal></expr>,                <expr><operator>&amp;</operator><name>walletprocesspsbt</name></expr>,             <expr><block>{<expr><literal type="string">"psbt"</literal></expr>,<expr><literal type="string">"sign"</literal></expr>,<expr><literal type="string">"sighashtype"</literal></expr>,<expr><literal type="string">"bip32derivs"</literal></expr>}</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<function><type><name>void</name></type> <name>RegisterWalletRPCCommands</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Handler</name></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>handlers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>vcidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vcidx</name> <operator>&lt;</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>vcidx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>handlers</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>handleRpc</name></name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>*</modifier></type> <name>g_rpc_chain</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</unit>
