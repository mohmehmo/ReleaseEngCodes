<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/policy/policy.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_POLICY_POLICY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_POLICY_POLICY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/interpreter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CCoinsViewCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTxOut</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_BLOCK_MAX_WEIGHT</name> <init>= <expr><name>MAX_BLOCK_WEIGHT</name> <operator>-</operator> <literal type="number">4000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_BLOCK_MIN_TX_FEE</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum weight for transactions we're willing to relay/mine */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_STANDARD_TX_WEIGHT</name> <init>= <expr><literal type="number">400000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The minimum non-witness size for transactions we're willing to relay/mine (1 segwit input + 1 P2WPKH output = 82 bytes) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MIN_STANDARD_TX_NONWITNESS_SIZE</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Maximum number of signature check operations in an IsStandard() P2SH script */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_P2SH_SIGOPS</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum number of sigops we're willing to relay/mine in a single tx */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_STANDARD_TX_SIGOPS_COST</name> <init>= <expr><name>MAX_BLOCK_SIGOPS_COST</name><operator>/</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default for -maxmempool, maximum megabytes of mempool memory usage */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_MAX_MEMPOOL_SIZE</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default for -incrementalrelayfee, which sets the minimum feerate increase for mempool limiting or BIP 125 replacement **/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_INCREMENTAL_RELAY_FEE</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default for -bytespersigop */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_BYTES_PER_SIGOP</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default for -permitbaremultisig */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_PERMIT_BAREMULTISIG</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum number of witness stack items in a standard P2WSH script */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_STANDARD_P2WSH_STACK_ITEMS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum size of each witness stack item in a standard P2WSH script */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_STANDARD_P2WSH_STACK_ITEM_SIZE</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum size of a standard witnessScript */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_STANDARD_P2WSH_SCRIPT_SIZE</name> <init>= <expr><literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Min feerate for defining dust. Historically this has been based on the
 * minRelayTxFee, however changing the dust limit changes which transactions are
 * standard and should be done with care and ideally rarely. It makes sense to
 * only increase the dust limit after prior releases were already not creating
 * outputs below the new threshold */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DUST_RELAY_TX_FEE</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Standard script verification flags that standard transactions will comply
 * with. However scripts violating these flags may still be present in valid
 * blocks and we must accept those blocks.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>STANDARD_SCRIPT_VERIFY_FLAGS</name> <init>= <expr><name>MANDATORY_SCRIPT_VERIFY_FLAGS</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_DERSIG</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_STRICTENC</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_MINIMALDATA</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_NULLDUMMY</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_CLEANSTACK</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_MINIMALIF</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_NULLFAIL</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_CHECKSEQUENCEVERIFY</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_LOW_S</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name> <operator>|</operator>
                                                             <name>SCRIPT_VERIFY_CONST_SCRIPTCODE</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** For convenience, standard but not mandatory verify flags. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>STANDARD_NOT_MANDATORY_VERIFY_FLAGS</name> <init>= <expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name> <operator>&amp;</operator> <operator>~</operator><name>MANDATORY_SCRIPT_VERIFY_FLAGS</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>STANDARD_LOCKTIME_VERIFY_FLAGS</name> <init>= <expr><name>LOCKTIME_VERIFY_SEQUENCE</name> <operator>|</operator>
                                                               <name>LOCKTIME_MEDIAN_TIME_PAST</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>CAmount</name></type> <name>GetDustThreshold</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFeeRate</name><modifier>&amp;</modifier></type> <name>dustRelayFee</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsDust</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFeeRate</name><modifier>&amp;</modifier></type> <name>dustRelayFee</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>IsStandard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>txnouttype</name><modifier>&amp;</modifier></type> <name>whichType</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/**
     * Check for standard transaction types
     * @return True if all outputs (scriptPubKeys) use only standard transaction forms
     */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>IsStandardTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransaction</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><name>bool</name> <name>permit_bare_multisig</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CFeeRate</name><operator>&amp;</operator> <name>dust_relay_fee</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>reason</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Check for standard transaction types
     * @param[in] mapInputs    Map of previous transactions that have outputs we're spending
     * @return True if all inputs (scriptSigs) use only standard transaction forms
     */</comment>
<function_decl><type><name>bool</name></type> <name>AreInputsStandard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>mapInputs</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/**
     * Check if the transaction is over standard P2WSH resources limit:
     * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements
     * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,
     */</comment>
<function_decl><type><name>bool</name></type> <name>IsWitnessStandard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>mapInputs</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the virtual transaction size (weight reinterpreted as bytes). */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetVirtualTransactionSize</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nWeight</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nSigOpCost</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_sigop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>GetVirtualTransactionSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nSigOpCost</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_sigop</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>GetVirtualTransactionInputSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nSigOpCost</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bytes_per_sigop</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>GetVirtualTransactionSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>GetVirtualTransactionInputSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>GetVirtualTransactionInputSize</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_POLICY_POLICY_H</comment>
</unit>
