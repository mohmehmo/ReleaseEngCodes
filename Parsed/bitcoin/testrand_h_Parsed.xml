<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/testrand.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_TESTRAND_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_TESTRAND_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsecp256k1-config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* A non-cryptographic RNG used only for test infrastructure. */</comment>

<comment type="block" format="doxygen">/** Seed the pseudorandom number generator for testing. */</comment>
<function_decl><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand_seed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seed16</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a pseudorandom number in the range [0..2**32-1]. */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a pseudorandom number in the range [0..2**bits-1]. Bits must be 1 or
 *  more. */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a pseudorandom number in the range [0..range-1]. */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>secp256k1_rand_int</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>range</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a pseudorandom 32-byte array. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a pseudorandom 32-byte array with long sequences of zero and one bits. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand256_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate pseudorandom bytes with long sequences of zero and one bits. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rand_bytes_test</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_TESTRAND_H */</comment>
</unit>
