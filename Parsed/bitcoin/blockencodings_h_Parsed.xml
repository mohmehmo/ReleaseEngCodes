<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/blockencodings.h"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_BLOCKENCODINGS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_BLOCKENCODINGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>class</name></type> <name>CTxMemPool</name></decl>;</decl_stmt>

<comment type="line">// Dumb helper to handle CTransaction compression at serialize-time</comment>
<struct>struct <name>TransactionCompressor</name> <block>{
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>tx</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>TransactionCompressor</name><argument_list>(<argument><expr><name>CTransactionRef</name><operator>&amp;</operator> <name>txIn</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>tx</name><argument_list>(<argument>txIn</argument>)</argument_list></macro> <block>{}</block>

    <name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//TODO: Compress tx encoding</comment>
    </block_content>}</block></function>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>BlockTransactionsRequest</name> <block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line">// A BlockTransactionsRequest message</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>blockhash</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name> <name>indexes</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>blockhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>indexes_size</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>indexes_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>indexes_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>indexes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1000</literal> <operator>+</operator> <call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>indexes_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"index overflowed 16 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>

            <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>int32_t</name><argument_list>(<argument><expr><name><name>indexes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name> <operator>&gt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"indexes overflowed 16 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>indexes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>indexes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>int32_t</name><argument_list>(<argument><expr><name><name>indexes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name> <init>= <expr><name><name>indexes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>indexes</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BlockTransactions</name> <block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line">// A BlockTransactions message</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>blockhash</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>txn</name></expr>;</expr_stmt>

    <macro><name>BlockTransactions</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>BlockTransactions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>BlockTransactionsRequest</name><operator>&amp;</operator> <name>req</name></expr></argument>)</argument_list></call> <operator>:</operator>
        <call><name>blockhash</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>blockhash</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>txn</name><argument_list>(<argument>req.indexes.size()</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>blockhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>txn_size</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>txn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>txn_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>txn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>txn_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>txn</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1000</literal> <operator>+</operator> <call><name><name>txn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>txn_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>txn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>TransactionCompressor</name><argument_list>(<argument><expr><name><name>txn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>txn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>TransactionCompressor</name><argument_list>(<argument><expr><name><name>txn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Dumb serialization/storage-helper for CBlockHeaderAndShortTxIDs and PartiallyDownloadedBlock</comment>
<struct>struct <name>PrefilledTransaction</name> <block>{
    <comment type="line">// Used as an offset since last prefilled tx in CBlockHeaderAndShortTxIDs,</comment>
    <comment type="line">// as a proper transaction-in-block-index in PartiallyDownloadedBlock</comment>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"index overflowed 16-bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>TransactionCompressor</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block>;</struct>

<typedef>typedef <type><enum>enum <name>ReadStatus_t</name>
<block>{
    <decl><name>READ_STATUS_OK</name></decl>,
    <decl><name>READ_STATUS_INVALID</name></decl>, <comment type="line">// Invalid object, peer is sending bogus crap</comment>
    <decl><name>READ_STATUS_FAILED</name></decl>, <comment type="line">// Failed to process object</comment>
    <decl><name>READ_STATUS_CHECKBLOCK_FAILED</name></decl>, <comment type="line">// Used only by FillBlock to indicate a</comment>
                                   <comment type="line">// failure in CheckBlock.</comment>
}</block></enum></type> <name>ReadStatus</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockHeaderAndShortTxIDs</name> <block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>mutable</name> <name>uint64_t</name></type> <name>shorttxidk0</name></decl>, <decl><type ref="prev"/><name>shorttxidk1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nonce</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>void</name> <macro><name>FillShortTxIDSelector</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>PartiallyDownloadedBlock</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>SHORTTXIDS_LENGTH</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<label><name>protected</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>shorttxids</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PrefilledTransaction</name></expr></argument>&gt;</argument_list></name> <name>prefilledtxn</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
    <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>header</name></decl>;</decl_stmt>

    <comment type="line">// Dummy for deserialization</comment>
    <macro><name>CBlockHeaderAndShortTxIDs</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

    <macro><name>CBlockHeaderAndShortTxIDs</name><argument_list>(<argument>const CBlock&amp; block</argument>, <argument>bool fUseWTXID</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>GetShortID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>txhash</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <expr_stmt><expr><name>size_t</name> <macro><name>BlockTxCount</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>prefilledtxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>shorttxids_size</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>COMPACTSIZE</name><argument_list>(<argument><expr><name>shorttxids_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>shorttxids_size</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>shorttxids</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><literal type="number">1000</literal> <operator>+</operator> <call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>shorttxids_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>msb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>msb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>msb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>uint64_t</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>SHORTTXIDS_LENGTH</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"shorttxids serialization assumes 6-byte shorttxids"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>lsb</name> <init>= <expr><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uint16_t</name></type> <name>msb</name> <init>= <expr><operator>(</operator><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>msb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>prefilledtxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>BlockTxCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint16_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"indexes overflowed 16 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>FillShortTxIDSelector</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PartiallyDownloadedBlock</name> <block>{<block_content>
<label><name>protected</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>txn_available</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>prefilled_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mempool_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>extra_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxMemPool</name><modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>header</name></decl>;</decl_stmt>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>PartiallyDownloadedBlock</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>*</operator> <name>poolIn</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>pool</name><argument_list>(<argument>poolIn</argument>)</argument_list></macro> <block>{}</block>

    <comment type="line">// extra_txn is a list of extra transactions to look at, in &lt;witness hash, reference&gt; form</comment>
    <name>ReadStatus</name> <call><name>InitData</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlockHeaderAndShortTxIDs</name><operator>&amp;</operator> <name>cmpctblock</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>extra_txn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>IsTxAvailable</name><argument_list>(<argument><expr><name>size_t</name> <name>index</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ReadStatus</name></type> <name>FillBlock</name><argument_list>(<argument><expr><name>CBlock</name><operator>&amp;</operator> <name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vtx_missing</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_BLOCKENCODINGS_H</comment>
</unit>
