<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/addrdb.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_ADDRDB_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_ADDRDB_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_types.h&gt;</cpp:file></cpp:include> <comment type="line">// For banmap_t</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CSubNet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CAddrMan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CDataStream</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>BanReason</name>
<block>{
    <decl><name>BanReasonUnknown</name>          <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>BanReasonNodeMisbehaving</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>BanReasonManuallyAdded</name>    <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>BanReason</name>;</typedef>

<decl_stmt><decl><type><name>class</name></type> <name>CBanEntry</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CURRENT_VERSION</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nCreateTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nBanUntil</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>banReason</name></decl>;</decl_stmt>

    <macro><name>CBanEntry</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <function><type><name>explicit</name></type> <name>CBanEntry</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nCreateTimeIn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nCreateTime</name> <operator>=</operator> <name>nCreateTimeIn</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <macro><name>explicit</name></macro> <macro><name>CBanEntry</name><argument_list>(<argument>int64_t n_create_time_in</argument>, <argument>BanReason ban_reason_in</argument>)</argument_list></macro> : <macro><name>CBanEntry</name><argument_list>(<argument>n_create_time_in</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>banReason</name> <operator>=</operator> <name>ban_reason_in</name></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nCreateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nBanUntil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>banReason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>nVersion</name> <operator>=</operator> <name>CBanEntry</name><operator>::</operator><name>CURRENT_VERSION</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nCreateTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nBanUntil</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>banReason</name> <operator>=</operator> <name>BanReasonUnknown</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>banReasonToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <switch>switch <condition>(<expr><name>banReason</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>BanReasonNodeMisbehaving</name></expr>:</case>
            <return>return <expr><literal type="string">"node misbehaving"</literal></expr>;</return>
        <case>case <expr><name>BanReasonManuallyAdded</name></expr>:</case>
            <return>return <expr><literal type="string">"manually added"</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
        <expr_stmt/>}</block_content>
    }
}</block><empty_stmt>;</empty_stmt></switch>

<comment type="block" format="doxygen">/** Access to the (IP) address database (peers.dat) */</comment>
<expr><name>class</name> <name>CAddrDB</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>fs</name><operator>::</operator><name>path</name> <name>pathAddr</name></expr>;
<expr><name>public</name><operator>:</operator>
    <call><name>CAddrDB</name><argument_list>()</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAddrMan</name><operator>&amp;</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>Read</name><argument_list>(<argument><expr><name>CAddrMan</name><operator>&amp;</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;
    <expr><specifier>static</specifier> <name>bool</name> <call><name>Read</name><argument_list>(<argument><expr><name>CAddrMan</name><operator>&amp;</operator> <name>addr</name></expr></argument>, <argument><expr><name>CDataStream</name><operator>&amp;</operator> <name>ssPeers</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;

<comment type="block" format="doxygen">/** Access to the banlist database (banlist.dat) */</comment>
<expr><name>class</name> <name>CBanDB</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <name>m_ban_list_path</name></expr>;
<expr><name>public</name><operator>:</operator>
    <name>explicit</name> <macro><name>CBanDB</name><argument_list>(<argument>fs::path ban_list_path</argument>)</argument_list></macro></expr>;
    <expr><name>bool</name> <call><name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>banmap_t</name><operator>&amp;</operator> <name>banSet</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>Read</name><argument_list>(<argument><expr><name>banmap_t</name><operator>&amp;</operator> <name>banSet</name></expr></argument>)</argument_list></call></expr>;
}</block></expr>;</block></expr></expr_stmt></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_ADDRDB_H</comment>
</unit>
