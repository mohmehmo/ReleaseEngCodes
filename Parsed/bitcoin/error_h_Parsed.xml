<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/error.h"><comment type="line">// Copyright (c) 2010-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_ERROR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_ERROR_H</name></cpp:macro></cpp:define>

<comment type="block" format="doxygen">/**
 * util/error.h is a common place for definitions of simple error types and
 * string functions. Types and functions defined here should not require any
 * outside dependencies.
 *
 * Error types defined here can be used in different parts of the
 * codebase, to avoid the need to write boilerplate code catching and
 * translating errors passed across wallet/node/rpc/gui code boundaries.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>bilingual_str</name>;</struct_decl>

<decl_stmt><decl><type><name><name>enum</name> <name>class</name></name></type> <name>TransactionError</name> <block>{<block_content>
    <expr_stmt><expr><name>OK</name></expr><operator>,</operator> <comment type="line" format="doxygen">//!&lt; No error</comment>
    <expr><name>MISSING_INPUTS</name></expr><operator>,</operator>
    <expr><name>ALREADY_IN_CHAIN</name></expr><operator>,</operator>
    <expr><name>P2P_DISABLED</name></expr><operator>,</operator>
    <expr><name>MEMPOOL_REJECTED</name></expr><operator>,</operator>
    <expr><name>MEMPOOL_ERROR</name></expr><operator>,</operator>
    <expr><name>INVALID_PSBT</name></expr><operator>,</operator>
    <expr><name>PSBT_MISMATCH</name></expr><operator>,</operator>
    <expr><name>SIGHASH_MISMATCH</name></expr><operator>,</operator>
    <expr><name>MAX_FEE_EXCEEDED</name></expr><operator>,</operator></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>TransactionErrorString</name><argument_list>(<argument>const TransactionError error</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ResolveErrMsg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>optname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bilingual_str</name></type> <name>AmountHighWarn</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>optname</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bilingual_str</name></type> <name>AmountErrMsg</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>optname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strValue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_ERROR_H</comment>
</unit>
