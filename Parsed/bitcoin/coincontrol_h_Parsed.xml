<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/wallet/coincontrol.h"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_WALLET_COINCONTROL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_WALLET_COINCONTROL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;outputtype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>DEFAULT_MIN_DEPTH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>DEFAULT_MAX_DEPTH</name> <init>= <expr><literal type="number">9999999</literal></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Default for -avoidpartialspends</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>bool</name></type> <name>DEFAULT_AVOIDPARTIALSPENDS</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Coin Control Features. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CCoinControl</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line" format="doxygen">//! Custom change destination, if not set an address is generated</comment>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destChange</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Override the default change type if set, ignored if destChange is set</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>OutputType</name></expr></argument>&gt;</argument_list></name></type> <name>m_change_type</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! If false, allows unselected inputs, but requires all selected inputs be used</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fAllowOtherInputs</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Includes watch only addresses which are solvable</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fAllowWatchOnly</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Override automatic min/max checks on fee, m_feerate must be set if true</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fOverrideFeeRate</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Override the wallet's m_pay_tx_fee if set</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>CFeeRate</name></expr></argument>&gt;</argument_list></name></type> <name>m_feerate</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Override the default confirmation target if set</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m_confirm_target</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Override the wallet's m_signal_rbf if set</comment>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>m_signal_bip125_rbf</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Avoid partial use of funds sent to a given address</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_avoid_partial_spends</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Forbids inclusion of dirty (previously used) addresses</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_avoid_address_reuse</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Fee estimation mode to control arguments to estimateSmartFee</comment>
    <decl_stmt><decl><type><name>FeeEstimateMode</name></type> <name>m_fee_mode</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Minimum chain depth value for coin availability</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m_min_depth</name> <init>= <expr><name>DEFAULT_MIN_DEPTH</name></expr></init></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! Maximum chain depth value for coin availability</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m_max_depth</name> <init>= <expr><name>DEFAULT_MAX_DEPTH</name></expr></init></decl>;</decl_stmt>

    <macro><name>CCoinControl</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <function_decl><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list>;</function_decl>

    <expr_stmt><expr><name>bool</name> <macro><name>HasSelected</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>(</operator><call><name><name>setSelected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>IsSelected</name><argument_list>(<argument><expr><specifier>const</specifier> <name>COutPoint</name><operator>&amp;</operator> <name>output</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <return>return <expr><operator>(</operator><call><name><name>setSelected</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>Select</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>setSelected</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>UnSelect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>setSelected</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>UnSelectAll</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>setSelected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name>void</name></type> <name>ListSelected</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vOutpoints</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>vOutpoints</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>setSelected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>setSelected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>&gt;</argument_list></name> <name>setSelected</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_WALLET_COINCONTROL_H</comment>
</unit>
