<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/mempool_stress.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>AddTx</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransactionRef</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><name>CTxMemPool</name><operator>&amp;</operator> <name>pool</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>int64_t</name> <name>nTime</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
    <argument><expr><name>unsigned</name> <name>int</name> <name>nHeight</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
    <argument><expr><name>bool</name> <name>spendsCoinbase</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;
    <argument><expr><name>unsigned</name> <name>int</name> <name>sigOpCost</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>;
    <argument><expr><name>LockPoints</name> <name>lp</name></expr></argument>;
    <argument><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name>CTxMemPoolEntry</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>nHeight</name></expr></argument>, <argument><expr><name>spendsCoinbase</name></expr></argument>, <argument><expr><name>sigOpCost</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

struct <name>Available</name> <argument_list>{
    <argument><expr><name>CTransactionRef</name> <name>ref</name></expr></argument>;
    <argument><expr><name>size_t</name> <call><name>vin_left</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></call></expr></argument>;
    <argument><expr><name>size_t</name> <name>tx_count</name></expr></argument>;
    <argument><expr><macro><name>Available</name><argument_list>(<argument>CTransactionRef&amp; ref</argument>, <argument>size_t tx_count</argument>)</argument_list></macro> <operator>:</operator> <call><name>ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>tx_count</name><argument_list>(<argument>tx_count</argument>)</argument_list></macro><block>{}</block></expr></argument>
}</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ComplexMemPool</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>det_rand</name><argument_list>{<argument><expr><literal type="boolean">true</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Available</name></expr></argument>&gt;</argument_list></name></type> <name>available_coins</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_coins</name></decl>;</decl_stmt>
    <comment type="line">// Create some base transactions</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>tx_counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>CScriptNum</name><argument_list>(<argument><expr><name>tx_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getvch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>out</name> <operator>:</operator> <name><name>tx</name><operator>.</operator><name>vout</name></name></expr></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>out</name><operator>.</operator><name>scriptPubKey</name></name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>CScriptNum</name><argument_list>(<argument><expr><name>tx_counter</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>ordered_coins</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>available_coins</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>ordered_coins</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tx_counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">800</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>available_coins</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>n_ancestors</name> <init>= <expr><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>ancestor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ancestor</name> <operator>&lt;</operator> <name>n_ancestors</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>available_coins</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>ancestor</name></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><call><name><name>available_coins</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Available</name></type> <name>coin</name> <init>= <expr><name><name>available_coins</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>coin</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// biased towards taking just one ancestor, but maybe more</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>n_to_take</name> <init>= <expr><ternary><condition><expr><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal><operator>+</operator><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><call><name><name>coin</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>coin</name><operator>.</operator><name>vin_left</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_to_take</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>vin_left</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>coin</name><operator>.</operator><name>tx_count</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><name><name>coin</name><operator>.</operator><name>tx_count</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getvch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name><name>coin</name><operator>.</operator><name>vin_left</name></name> <operator>==</operator> <call><name><name>coin</name><operator>.</operator><name>ref</name><operator>-&gt;</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>coin</name> <operator>=</operator> <call><name><name>available_coins</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>available_coins</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>det_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>out</name> <operator>:</operator> <name><name>tx</name><operator>.</operator><name>vout</name></name></expr></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>out</name><operator>.</operator><name>scriptPubKey</name></name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>CScriptNum</name><argument_list>(<argument><expr><name>tx_counter</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>ordered_coins</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>available_coins</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>ordered_coins</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tx_counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>pool</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>tx</name> <operator>:</operator> <name>ordered_coins</name></expr></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>TrimToSize</name></name><argument_list>(<argument><expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>ordered_coins</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>ComplexMemPool</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
