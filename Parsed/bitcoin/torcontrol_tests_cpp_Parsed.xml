<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/torcontrol_tests.cpp"><comment type="line">// Copyright (c) 2017 The Zcash developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<comment type="line">//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>


<function_decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>SplitTorReplyLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>ParseTorReplyMapping</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>torcontrol_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckSplitTorReplyLine</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><name>SplitTorReplyLine</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>util_SplitTorReplyLine</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Data we should receive during normal usage</comment>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"PROTOCOLINFO PIVERSION"</literal></expr></argument>,
        <argument><expr><literal type="string">"PROTOCOLINFO"</literal></expr></argument>, <argument><expr><literal type="string">"PIVERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"AUTH METHODS=COOKIE,SAFECOOKIE COOKIEFILE=\"/home/x/.tor/control_auth_cookie\""</literal></expr></argument>,
        <argument><expr><literal type="string">"AUTH"</literal></expr></argument>, <argument><expr><literal type="string">"METHODS=COOKIE,SAFECOOKIE COOKIEFILE=\"/home/x/.tor/control_auth_cookie\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"AUTH METHODS=NULL"</literal></expr></argument>,
        <argument><expr><literal type="string">"AUTH"</literal></expr></argument>, <argument><expr><literal type="string">"METHODS=NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"AUTH METHODS=HASHEDPASSWORD"</literal></expr></argument>,
        <argument><expr><literal type="string">"AUTH"</literal></expr></argument>, <argument><expr><literal type="string">"METHODS=HASHEDPASSWORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"VERSION Tor=\"0.2.9.8 (git-a0df013ea241b026)\""</literal></expr></argument>,
        <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"Tor=\"0.2.9.8 (git-a0df013ea241b026)\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(
        <argument><expr><literal type="string">"AUTHCHALLENGE SERVERHASH=aaaa SERVERNONCE=bbbb"</literal></expr></argument>,
        <argument><expr><literal type="string">"AUTHCHALLENGE"</literal></expr></argument>, <argument><expr><literal type="string">"SERVERHASH=aaaa SERVERNONCE=bbbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Other valid inputs</comment>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(<argument><expr><literal type="string">"COMMAND"</literal></expr></argument>, <argument><expr><literal type="string">"COMMAND"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(<argument><expr><literal type="string">"COMMAND SOME  ARGS"</literal></expr></argument>, <argument><expr><literal type="string">"COMMAND"</literal></expr></argument>, <argument><expr><literal type="string">"SOME  ARGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// These inputs are valid because PROTOCOLINFO accepts an OtherLine that is</comment>
    <comment type="line">// just an OptArguments, which enables multiple spaces to be present</comment>
    <comment type="line">// between the command and arguments.</comment>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(<argument><expr><literal type="string">"COMMAND  ARGS"</literal></expr></argument>, <argument><expr><literal type="string">"COMMAND"</literal></expr></argument>, <argument><expr><literal type="string">" ARGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSplitTorReplyLine</name><argument_list>(<argument><expr><literal type="string">"COMMAND   EVEN+more  ARGS"</literal></expr></argument>, <argument><expr><literal type="string">"COMMAND"</literal></expr></argument>, <argument><expr><literal type="string">"  EVEN+more  ARGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckParseTorReplyMapping</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><name>ParseTorReplyMapping</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>r_it</name> <init>= <expr><call><name><name>ret</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>e_it</name> <init>= <expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r_it</name> <operator>!=</operator> <call><name><name>ret</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>e_it</name> <operator>!=</operator> <call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>r_it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>e_it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>r_it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>e_it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r_it</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>e_it</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>util_ParseTorReplyMapping</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Data we should receive during normal usage</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"METHODS=COOKIE,SAFECOOKIE COOKIEFILE=\"/home/x/.tor/control_auth_cookie\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"METHODS"</literal></expr><operator>,</operator> <expr><literal type="string">"COOKIE,SAFECOOKIE"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"COOKIEFILE"</literal></expr><operator>,</operator> <expr><literal type="string">"/home/x/.tor/control_auth_cookie"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"METHODS=NULL"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"METHODS"</literal></expr><operator>,</operator> <expr><literal type="string">"NULL"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"METHODS=HASHEDPASSWORD"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"METHODS"</literal></expr><operator>,</operator> <expr><literal type="string">"HASHEDPASSWORD"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Tor=\"0.2.9.8 (git-a0df013ea241b026)\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Tor"</literal></expr><operator>,</operator> <expr><literal type="string">"0.2.9.8 (git-a0df013ea241b026)"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"SERVERHASH=aaaa SERVERNONCE=bbbb"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"SERVERHASH"</literal></expr><operator>,</operator> <expr><literal type="string">"aaaa"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"SERVERNONCE"</literal></expr><operator>,</operator> <expr><literal type="string">"bbbb"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"ServiceID=exampleonion1234"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"ServiceID"</literal></expr><operator>,</operator> <expr><literal type="string">"exampleonion1234"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"PrivateKey=RSA1024:BLOB"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"PrivateKey"</literal></expr><operator>,</operator> <expr><literal type="string">"RSA1024:BLOB"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"ClientAuth=bob:BLOB"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"ClientAuth"</literal></expr><operator>,</operator> <expr><literal type="string">"bob:BLOB"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// Other valid inputs</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=Bar=Baz Spam=Eggs"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar=Baz"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Spam"</literal></expr><operator>,</operator> <expr><literal type="string">"Eggs"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar=Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar=Baz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar Baz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// Escapes</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\ Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar Baz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"BarBaz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\@Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar@Baz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\\"Baz\" Spam=\"\\\"Eggs\\\"\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar\"Baz"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Spam"</literal></expr><operator>,</operator> <expr><literal type="string">"\"Eggs\""</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\\\Baz\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar\\Baz"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// C escapes</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Foo=\"Bar\\nBaz\\t\" Spam=\"\\rEggs\" Octals=\"\\1a\\11\\17\\18\\81\\377\\378\\400\\2222\" Final=Check"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Foo"</literal></expr><operator>,</operator> <expr><literal type="string">"Bar\nBaz\t"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Spam"</literal></expr><operator>,</operator> <expr><literal type="string">"\rEggs"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Octals"</literal></expr><operator>,</operator> <expr><literal type="string">"\1a\11\17\1"</literal> <literal type="string">"881\377\37"</literal> <literal type="string">"8\40"</literal> <literal type="string">"0\222"</literal> <literal type="string">"2"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Final"</literal></expr><operator>,</operator> <expr><literal type="string">"Check"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Valid=Mapping Escaped=\"Escape\\\\\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"Valid"</literal></expr><operator>,</operator> <expr><literal type="string">"Mapping"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"Escaped"</literal></expr><operator>,</operator> <expr><literal type="string">"Escape\\"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"Valid=Mapping Bare=\"Escape\\\""</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"OneOctal=\"OneEnd\\1\" TwoOctal=\"TwoEnd\\11\""</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"OneOctal"</literal></expr><operator>,</operator> <expr><literal type="string">"OneEnd\1"</literal></expr></block_content>}</block><operator>,</operator>
            <block>{<block_content><expr><literal type="string">"TwoOctal"</literal></expr><operator>,</operator> <expr><literal type="string">"TwoEnd\11"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// Special handling for null case</comment>
    <comment type="line">// (needed because string comparison reads the null as end-of-string)</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>ret</name> <init>= <expr><call><name>ParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"Null=\"\\0\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>r_it</name> <init>= <expr><call><name><name>ret</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>r_it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="string">"Null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>r_it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>r_it</name><operator>-&gt;</operator><name>second</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// A more complex valid grammar. PROTOCOLINFO accepts a VersionLine that</comment>
    <comment type="line">// takes a key=value pair followed by an OptArguments, making this valid.</comment>
    <comment type="line">// Because an OptArguments contains no semantic data, there is no point in</comment>
    <comment type="line">// parsing it.</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(
        <argument><expr><literal type="string">"SOME=args,here MORE optional=arguments  here"</literal></expr></argument>, <block>{<block_content>
            <block>{<block_content><expr><literal type="string">"SOME"</literal></expr><operator>,</operator> <expr><literal type="string">"args,here"</literal></expr></block_content>}</block><operator>,</operator>
        </block_content>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>

    <comment type="line">// Inputs that are effectively invalid under the target grammar.</comment>
    <comment type="line">// PROTOCOLINFO accepts an OtherLine that is just an OptArguments, which</comment>
    <comment type="line">// would make these inputs valid. However,</comment>
    <comment type="line">// - This parser is never used in that situation, because the</comment>
    <comment type="line">//   SplitTorReplyLine parser enables OtherLine to be skipped.</comment>
    <comment type="line">// - Even if these were valid, an OptArguments contains no semantic data,</comment>
    <comment type="line">//   so there is no point in parsing it.</comment>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"ARGS"</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"MORE ARGS"</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"MORE  ARGS"</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"EVEN more=ARGS"</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>CheckParseTorReplyMapping</name><argument_list>(<argument><expr><literal type="string">"EVEN+more ARGS"</literal></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
