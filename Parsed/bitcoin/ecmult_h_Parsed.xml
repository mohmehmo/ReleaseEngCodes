<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/ecmult.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra      *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_ECMULT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_ECMULT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scratch.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* For accelerating the computation of a*P + b*G: */</comment>
    <expr_stmt><expr><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator><name>pre_g</name></expr></argument>)</argument_list></call><index>[]</index></expr>;</expr_stmt>    <comment type="block">/* odd multiples of the generator */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ENDOMORPHISM</name></cpp:ifdef>
    <expr_stmt><expr><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator><name>pre_g_128</name></expr></argument>)</argument_list></call><index>[]</index></expr>;</expr_stmt> <comment type="block">/* odd multiples of 2^128*generator */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>secp256k1_ecmult_context</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_context_init</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_context_build</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_context_clone</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                                           <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_context_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ecmult_context_is_built</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Double multiply: R = na*A + ng*G */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>na</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>ng</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<name>secp256k1_ecmult_multi_callback</name>)<parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen">/**
 * Multi-multiply: R = inp_g_sc * G + sum_i ni * Ai.
 * Chooses the right algorithm for a given number of points and scratch space
 * size. Resets and overwrites the given scratch space. If the points do not
 * fit in the scratch space the algorithm is repeatedly run with batches of
 * points. If no scratch space is given then a simple algorithm is used that
 * simply multiplies the points with the corresponding scalars and adds them up.
 * Returns: 1 on success (including when inp_g_sc is NULL and n is 0)
 *          0 if there is not enough scratch space for a single point or
 *          callback returns 0
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ecmult_multi_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_scratch</name> <modifier>*</modifier></type><name>scratch</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>inp_g_sc</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ecmult_multi_callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_ECMULT_H */</comment>
</unit>
