<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/guiutil.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_GUIUTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_GUIUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QHeaderView&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QItemDelegate&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QProgressBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTableView&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLabel&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>QValidatedLineEdit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QAbstractItemView</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QDateTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QFont</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QLineEdit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QProgressDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QUrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QWidget</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block" format="doxygen">/** Utility functions used by the Bitcoin Qt UI.
 */</comment>
<name>namespace</name></type> <name>GUIUtil</name>
<block>{<block_content>
    <comment type="line">// Create human-readable string from date</comment>
    <function_decl><type><name>QString</name></type> <name>dateTimeStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QDateTime</name> <modifier>&amp;</modifier></type><name>datetime</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>dateTimeStr</name><parameter_list>(<parameter><decl><type><name>qint64</name></type> <name>nTime</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Return a monospace font</comment>
    <function_decl><type><name>QFont</name></type> <name>fixedPitchFont</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Set up widget for address</comment>
    <function_decl><type><name>void</name></type> <name>setupAddressWidget</name><parameter_list>(<parameter><decl><type><name>QValidatedLineEdit</name> <modifier>*</modifier></type><name>widget</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Parse "bitcoin:" URI into recipient object, return true on successful parsing</comment>
    <function_decl><type><name>bool</name></type> <name>parseBitcoinURI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QUrl</name> <modifier>&amp;</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>SendCoinsRecipient</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>parseBitcoinURI</name><parameter_list>(<parameter><decl><type><name>QString</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>SendCoinsRecipient</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>formatBitcoinURI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Returns true if given address+amount meets "dust" definition</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>isDust</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>address</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>amount</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// HTML escaping for rich text controls</comment>
    <function_decl><type><name>QString</name></type> <name>HtmlEscape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fMultiLine</name><init>=<expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>QString</name></type> <name>HtmlEscape</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>bool</name> <name>fMultiLine</name><operator>=</operator><name>false</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Copy a field of the currently selected entry of a view to the clipboard. Does nothing if nothing
        is selected.
       @param[in] column  Data column to extract from the model
       @param[in] role    Data role to extract from the model
       @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress
     */</comment>
    <function_decl><type><name>void</name></type> <name>copyEntryData</name><parameter_list>(<parameter><decl><type><name>QAbstractItemView</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name><init>=<expr><name>Qt</name><operator>::</operator><name>EditRole</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** Return a field of the currently selected entry as a QString. Does nothing if nothing
        is selected.
       @param[in] column  Data column to extract from the model
       @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress
     */</comment>
    <function_decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name></type> <name>getEntryData</name><parameter_list>(<parameter><decl><type><name>QAbstractItemView</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setClipboard</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/**
     * Determine default data directory for operating system.
     */</comment>
    <function_decl><type><name>QString</name></type> <name>getDefaultDataDirectory</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** Get save filename, mimics QFileDialog::getSaveFileName, except that it appends a default suffix
        when no suffix is provided by the user.

      @param[in] parent  Parent window (or 0)
      @param[in] caption Window caption (or empty, for default)
      @param[in] dir     Starting directory (or empty, to default to documents directory)
      @param[in] filter  Filter specification such as "Comma Separated Files (*.csv)"
      @param[out] selectedSuffixOut  Pointer to return the suffix (file type) that was selected (or 0).
                  Can be useful when choosing the save file format based on suffix.
     */</comment>
    <function_decl><type><name>QString</name></type> <name>getSaveFileName</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>caption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>dir</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>filter</name></decl></parameter>,
        <parameter><decl><type><name>QString</name> <modifier>*</modifier></type><name>selectedSuffixOut</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** Get open filename, convenience wrapper for QFileDialog::getOpenFileName.

      @param[in] parent  Parent window (or 0)
      @param[in] caption Window caption (or empty, for default)
      @param[in] dir     Starting directory (or empty, to default to documents directory)
      @param[in] filter  Filter specification such as "Comma Separated Files (*.csv)"
      @param[out] selectedSuffixOut  Pointer to return the suffix (file type) that was selected (or 0).
                  Can be useful when choosing the save file format based on suffix.
     */</comment>
    <function_decl><type><name>QString</name></type> <name>getOpenFileName</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>caption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>dir</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>filter</name></decl></parameter>,
        <parameter><decl><type><name>QString</name> <modifier>*</modifier></type><name>selectedSuffixOut</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** Get connection type to call object slot in GUI thread with invokeMethod. The call will be blocking.

       @returns If called from the GUI thread, return a Qt::DirectConnection.
                If called from another thread, return a Qt::BlockingQueuedConnection.
    */</comment>
    <expr_stmt><expr><name>Qt</name><operator>::</operator><name>ConnectionType</name> <call><name>blockingGUIThreadConnection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Determine whether a widget is hidden behind other windows</comment>
    <function_decl><type><name>bool</name></type> <name>isObscured</name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Activate, show and raise the widget</comment>
    <function_decl><type><name>void</name></type> <name>bringToFront</name><parameter_list>(<parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>w</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Open debug.log</comment>
    <function_decl><type><name>void</name></type> <name>openDebugLogfile</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// Open the config file</comment>
    <function_decl><type><name>bool</name></type> <name>openBitcoinConf</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/** Qt event filter that intercepts ToolTipChange events, and replaces the tooltip with a rich text
      representation if needed. This assures that Qt can word-wrap long tooltip messages.
      Tooltips longer than the provided size threshold (in characters) are wrapped.
     */</comment>
    <decl_stmt><decl><type><name>class</name></type> <name>ToolTipToRichTextFilter</name> <range>: <expr><name>public</name> <name>QObject</name>
    <block>{
        <expr><name>Q_OBJECT</name>

    <name>public</name><operator>:</operator>
        <name>explicit</name> <macro><name>ToolTipToRichTextFilter</name><argument_list>(<argument>int size_threshold</argument>, <argument>QObject *parent = nullptr</argument>)</argument_list></macro></expr>;

    <expr><name>protected</name><operator>:</operator>
        <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>evt</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>private</name><operator>:</operator>
        <name>int</name> <name>size_threshold</name></expr>;
    }</block></expr></range></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Makes a QTableView last column feel as if it was being resized from its left border.
     * Also makes sure the column widths are never larger than the table's viewport.
     * In Qt, all columns are resizable from the right, but it's not intuitive resizing the last column from the right.
     * Usually our second to last columns behave as if stretched, and when on stretch mode, columns aren't resizable
     * interactively or programmatically.
     *
     * This helper object takes care of this issue.
     *
     */</comment>
    <decl_stmt><decl><type><name>class</name></type> <name>TableViewLastColumnResizingFixer</name><range>: <expr><name>public</name> <name>QObject</name>
    <block>{
        <expr><name>Q_OBJECT</name>

        <name>public</name><operator>:</operator>
            <macro><name>TableViewLastColumnResizingFixer</name><argument_list>(<argument>QTableView* table</argument>, <argument>int lastColMinimumWidth</argument>, <argument>int allColsMinimumWidth</argument>, <argument>QObject *parent</argument>)</argument_list></macro></expr>;
            <expr><name>void</name> <macro><name>stretchColumnWidth</name><argument_list>(<argument>int column</argument>)</argument_list></macro></expr>;

        <expr><name>private</name><operator>:</operator>
            <name>QTableView</name><operator>*</operator> <name>tableView</name></expr>;
            <expr><name>int</name> <name>lastColumnMinimumWidth</name></expr>;
            <expr><name>int</name> <name>allColumnsMinimumWidth</name></expr>;
            <expr><name>int</name> <name>lastColumnIndex</name></expr>;
            <expr><name>int</name> <name>columnCount</name></expr>;
            <expr><name>int</name> <name>secondToLastColumnIndex</name></expr>;

            <expr><name>void</name> <call><name>adjustTableColumnsWidth</name><argument_list>()</argument_list></call></expr>;
            <expr><name>int</name> <macro><name>getAvailableWidthForColumn</name><argument_list>(<argument>int column</argument>)</argument_list></macro></expr>;
            <expr><name>int</name> <call><name>getColumnsWidth</name><argument_list>()</argument_list></call></expr>;
            <expr><name>void</name> <call><name>connectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;
            <expr><name>void</name> <call><name>disconnectViewHeadersSignals</name><argument_list>()</argument_list></call></expr>;
            <expr><name>void</name> <macro><name>setViewHeaderResizeMode</name><argument_list>(<argument>int logicalIndex</argument>, <argument>QHeaderView::ResizeMode resizeMode</argument>)</argument_list></macro></expr>;
            <expr><name>void</name> <macro><name>resizeColumn</name><argument_list>(<argument>int nColumnIndex</argument>, <argument>int width</argument>)</argument_list></macro></expr>;

        <expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
            <name>void</name> <macro><name>on_sectionResized</name><argument_list>(<argument>int logicalIndex</argument>, <argument>int oldSize</argument>, <argument>int newSize</argument>)</argument_list></macro></expr>;
            <expr><name>void</name> <call><name>on_geometriesChanged</name><argument_list>()</argument_list></call></expr>;
    }</block></expr></range></decl>;</decl_stmt>

    <function_decl><type><name>bool</name></type> <name>GetStartOnSystemStartup</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>SetStartOnSystemStartup</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fAutoStart</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block">/* Convert QString to OS specific boost path through UTF-8 */</comment>
    <expr_stmt><expr><name>fs</name><operator>::</operator><name>path</name> <call><name>qstringToBoostPath</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Convert OS specific boost path to QString through UTF-8 */</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>boostPathToQString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>fs</name><operator>::</operator><name>path</name> <operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block">/* Convert seconds into a QString with days, hours, mins, secs */</comment>
    <function_decl><type><name>QString</name></type> <name>formatDurationStr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>secs</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block">/* Format CNodeStats.nServices bitmask into a user-readable string */</comment>
    <function_decl><type><name>QString</name></type> <name>formatServicesStr</name><parameter_list>(<parameter><decl><type><name>quint64</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block">/* Format a CNodeCombinedStats.dPingTime into a user-readable string or display N/A, if 0*/</comment>
    <function_decl><type><name>QString</name></type> <name>formatPingTime</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dPingTime</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block">/* Format a CNodeCombinedStats.nTimeOffset into a user-readable string. */</comment>
    <function_decl><type><name>QString</name></type> <name>formatTimeOffset</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nTimeOffset</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>formatNiceTimeOffset</name><parameter_list>(<parameter><decl><type><name>qint64</name></type> <name>secs</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>QString</name></type> <name>formatBytes</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>qreal</name></type> <name>calculateIdealFontSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>QFont</name></type> <name>font</name></decl></parameter>, <parameter><decl><type><name>qreal</name></type> <name>minPointSize</name> <init>= <expr><literal type="number">4</literal></expr></init></decl></parameter>, <parameter><decl><type><name>qreal</name></type> <name>startPointSize</name> <init>= <expr><literal type="number">14</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>class</name></type> <name>ClickableLabel</name> <range>: <expr><name>public</name> <name>QLabel</name>
    <block>{
        <expr><name>Q_OBJECT</name>

    <name>Q_SIGNALS</name><operator>:</operator>
        <comment type="block" format="doxygen">/** Emitted when the label is clicked. The relative mouse coordinates of the click are
         * passed to the signal.
         */</comment>
        <name>void</name> <call><name>clicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QPoint</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>protected</name><operator>:</operator>
        <name>void</name> <call><name>mouseReleaseEvent</name><argument_list>(<argument><expr><name>QMouseEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></range></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>class</name></type> <name>ClickableProgressBar</name> <range>: <expr><name>public</name> <name>QProgressBar</name>
    <block>{
        <expr><name>Q_OBJECT</name>

    <name>Q_SIGNALS</name><operator>:</operator>
        <comment type="block" format="doxygen">/** Emitted when the progressbar is clicked. The relative mouse coordinates of the click are
         * passed to the signal.
         */</comment>
        <name>void</name> <call><name>clicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QPoint</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>protected</name><operator>:</operator>
        <name>void</name> <call><name>mouseReleaseEvent</name><argument_list>(<argument><expr><name>QMouseEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></range></decl>;</decl_stmt>

    <typedef>typedef <type><name>ClickableProgressBar</name></type> <name>ProgressBar</name>;</typedef>

    <decl_stmt><decl><type><name>class</name></type> <name>ItemDelegate</name> <range>: <expr><name>public</name> <name>QItemDelegate</name>
    <block>{
        <expr><name>Q_OBJECT</name>
    <name>public</name><operator>:</operator>
        <call><name>ItemDelegate</name><argument_list>(<argument><expr><name>QObject</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>QItemDelegate</name><argument_list>(<argument>parent</argument>)</argument_list></macro> <block>{}</block>

    <name>Q_SIGNALS</name><operator>:</operator>
        <name>void</name> <call><name>keyEscapePressed</name><argument_list>()</argument_list></call></expr>;

    <expr><name>private</name><operator>:</operator>
        <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>object</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    }</block></expr></range></decl>;</decl_stmt>

    <comment type="line">// Fix known bugs in QProgressDialog class.</comment>
    <function_decl><type><name>void</name></type> <name>PolishProgressDialog</name><parameter_list>(<parameter><decl><type><name>QProgressDialog</name><modifier>*</modifier></type> <name>dialog</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/**
     * Returns the distance in pixels appropriate for drawing a subsequent character after text.
     *
     * In Qt 5.12 and before the QFontMetrics::width() is used and it is deprecated since Qt 13.0.
     * In Qt 5.11 the QFontMetrics::horizontalAdvance() was introduced.
     */</comment>
    <function_decl><type><name>int</name></type> <name>TextWidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QFontMetrics</name><modifier>&amp;</modifier></type> <name>fm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace GUIUtil</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_GUIUTIL_H</comment>
</unit>
