<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/ecmult_gen.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_ECMULT_GEN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_ECMULT_GEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* For accelerating the computation of a*G:
     * To harden against timing attacks, use the following mechanism:
     * * Break up the multiplicand into groups of 4 bits, called n_0, n_1, n_2, ..., n_63.
     * * Compute sum(n_i * 16^i * G + U_i, i=0..63), where:
     *   * U_i = U * 2^i (for i=0..62)
     *   * U_i = U * (1-2^63) (for i=63)
     *   where U is a point with no known corresponding scalar. Note that sum(U_i, i=0..63) = 0.
     * For each i, and each of the 16 possible values of n_i, (n_i * 16^i * G + U_i) is
     * precomputed (call it prec(i, n_i)). The formula now becomes sum(prec(i, n_i), i=0..63).
     * None of the resulting prec group elements have a known scalar, and neither do any of
     * the intermediate sums while computing a*G.
     */</comment>
    <expr_stmt><expr><call><name>secp256k1_ge_storage</name> <argument_list>(<argument><expr><operator>*</operator><name>prec</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr>;</expr_stmt> <comment type="block">/* prec[j][i] = 16^j * i * G + U_i */</comment>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>blind</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>initial</name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_ecmult_gen_context</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_init</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_build</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_clone</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                                               <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_context_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ecmult_gen_context_is_built</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Multiply with the generator: R = a*G */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_gen_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ecmult_gen_blind</name><parameter_list>(<parameter><decl><type><name>secp256k1_ecmult_gen_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>seed32</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_ECMULT_GEN_H */</comment>
</unit>
