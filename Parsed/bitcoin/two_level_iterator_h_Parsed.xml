<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/table/two_level_iterator.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/iterator.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<struct_decl>struct <name>ReadOptions</name>;</struct_decl>

<comment type="line">// Return a new two level iterator.  A two-level iterator contains an</comment>
<comment type="line">// index iterator whose values point to a sequence of blocks where</comment>
<comment type="line">// each block is itself a sequence of key,value pairs.  The returned</comment>
<comment type="line">// two-level iterator yields the concatenation of all key/value pairs</comment>
<comment type="line">// in the sequence of blocks.  Takes ownership of "index_iter" and</comment>
<comment type="line">// will delete it when no longer needed.</comment>
<comment type="line">//</comment>
<comment type="line">// Uses a supplied function to convert an index_iter value into</comment>
<comment type="line">// an iterator over the contents of the corresponding block.</comment>
<function_decl><type><specifier>extern</specifier> <name>Iterator</name><modifier>*</modifier></type> <name>NewTwoLevelIterator</name><parameter_list>(
    <parameter><decl><type><name>Iterator</name><modifier>*</modifier></type> <name>index_iter</name></decl></parameter>,
    <parameter><function_decl><type><name>Iterator</name><modifier>*</modifier></type> (<modifier>*</modifier><name>block_function</name>)<parameter_list>(
        <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>index_value</name></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_TABLE_TWO_LEVEL_ITERATOR_H_</comment>
</unit>
