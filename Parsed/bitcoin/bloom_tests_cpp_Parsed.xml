<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/bloom_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bloom.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;merkleblock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>bloom_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bloom_create_insert_serialize</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>( <argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// One bit different in first byte</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"19108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter contains something it shouldn't!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b5a2c786d9ef4658287ced5914b37a1b4aa32eee"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b5a2c786d9ef4658287ced5914b37a1b4aa32eee"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object (2)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b9300670b4c5366e95b2699e8b18bc75e5f729c5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b9300670b4c5366e95b2699e8b18bc75e5f729c5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object (3)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>filter</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"03614e9b050000000000000001"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL_COLLECTIONS</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>( <argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>( <argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter should be empty!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bloom_create_insert_serialize_with_tweak</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Same test as bloom_create_insert_serialize, but we add a nTweak of 100</comment>
    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>, <argument><expr><literal type="number">2147483649UL</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>( <argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"99108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// One bit different in first byte</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"19108ad8ed9bb6274d3980bab5a85c048f0950c8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter contains something it shouldn't!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b5a2c786d9ef4658287ced5914b37a1b4aa32eee"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b5a2c786d9ef4658287ced5914b37a1b4aa32eee"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object (2)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b9300670b4c5366e95b2699e8b18bc75e5f729c5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b9300670b4c5366e95b2699e8b18bc75e5f729c5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Bloom filter doesn't contain just-inserted object (3)!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>filter</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"03ce4299050000000100008001"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL_COLLECTIONS</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bloom_create_insert_key</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSecret</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchPubKey</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name> <init>= <expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>filter</name></macro><expr_stmt><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(hash.begin(), hash.end())</argument>)</argument_list></macro></expr>;</expr_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>filter</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"038fc16b080000000000000001"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL_COLLECTIONS</name><argument_list>(<argument><expr><call><name><name>stream</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bloom_match</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>CTransaction</name></type> <name>tx</name><parameter_list>(<parameter><decl><type><name>deserialize</name></type></decl></parameter>, <parameter><decl><type><name>stream</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ch</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ch</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>CDataStream</name></type> <name>spendStream</name><parameter_list>(<parameter><decl><type><name>vch</name></type></decl></parameter>, <parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>CTransaction</name></type> <name>spendingTx</name><parameter_list>(<parameter><decl><type><name>deserialize</name></type></decl></parameter>, <parameter><decl><type><name>spendStream</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match tx hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// byte-reversed tx hash</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match manually serialized tx hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match input signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match input pub key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04943fdd508053c75000106d3bc6e2754dbcff19"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match output address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>spendingTx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't add output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"a266436d2965547608b9e15d9032a7b9d64fa431"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match output address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match COutPoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>COutPoint</name></type> <name>prevOutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>data</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>prevOutPoint</name><operator>.</operator><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prevOutPoint</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter didn't match manually serialized COutPoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter matched random tx hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0000006d2965547608b9e15d9032a7b9d64fa431"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter matched random address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter matched COutPoint for an output we didn't care about"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>CBloomFilter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple Bloom filter matched COutPoint for an output we didn't care about"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_1</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name> <init>= <expr><call><name>getBlock13b8a</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the last transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Also match the 8th transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>merkleBlock</name> <operator>=</operator> <call><name>CMerkleBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xdd1fd2a6fc16404faf339881a90adbde7f4f728691ac62e8f168809cdfae1053"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_2</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)</comment>
    <comment type="line">// With 4 txes</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the first transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Match an output from the second transaction (the pubkey for address 1DZTzaBHUDM7T3QvUKBz4qXMRpkg8jsfB5)</comment>
    <comment type="line">// This should match the third transaction because it spends the output matched</comment>
    <comment type="line">// It also matches the fourth transaction, which spends to the pubkey again</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>merkleBlock</name> <operator>=</operator> <call><name>CMerkleBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pair</name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x6b0f8a73a56c04b519f1883e8aafda643ba61a30bd1439969df21bea5f4e27e2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_2_with_update_none</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000005a4ded781e667e06ceefafb71410b511fe0d5adc3e5a27ecbec34ae6)</comment>
    <comment type="line">// With 4 txes</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000075616236cc2126035fadb38deb65b9102cc2c41c09cdf29fc051906800000000fe7d5e12ef0ff901f6050211249919b1c0653771832b3a80c66cea42847f0ae1d4d26e49ffff001d00f0a4410401000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0804ffff001d029105ffffffff0100f2052a010000004341046d8709a041d34357697dfcb30a9d05900a6294078012bf3bb09c6f9b525f1d16d5503d7905db1ada9501446ea00728668fc5719aa80be2fdfc8a858a4dbdd4fbac00000000010000000255605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d28350000000049483045022100aa46504baa86df8a33b1192b1b9367b4d729dc41e389f2c04f3e5c7f0559aae702205e82253a54bf5c4f65b7428551554b2045167d6d206dfe6a2e198127d3f7df1501ffffffff55605dc6f5c3dc148b6da58442b0b2cd422be385eab2ebea4119ee9c268d2835010000004847304402202329484c35fa9d6bb32a55a70c0982f606ce0e3634b69006138683bcd12cbb6602200c28feb1e2555c3210f1dddb299738b4ff8bbe9667b68cb8764b5ac17b7adf0001ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac0000000001000000025f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028000000004847304402205d6058484157235b06028c30736c15613a28bdb768ee628094ca8b0030d4d6eb0220328789c9a2ec27ddaec0ad5ef58efded42e6ea17c2e1ce838f3d6913f5e95db601ffffffff5f9a06d3acdceb56be1bfeaa3e8a25e62d182fa24fefe899d1c17f1dad4c2028010000004a493046022100c45af050d3cea806cedd0ab22520c53ebe63b987b8954146cdca42487b84bdd6022100b9b027716a6b59e640da50a864d6dd8a0ef24c76ce62391fa3eabaf4d2886d2d01ffffffff0200e1f505000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac000000000100000002e2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b0000000048473044022016e7a727a061ea2254a6c358376aaa617ac537eb836c77d646ebda4c748aac8b0220192ce28bf9f2c06a6467e6531e27648d2b3e2e2bae85159c9242939840295ba501ffffffffe2274e5fea1bf29d963914bd301aa63b64daaf8a3e88f119b5046ca5738a0f6b010000004a493046022100b7a1a755588d4190118936e15cd217d133b0e4a53c3c15924010d5648d8925c9022100aaef031874db2114f2d869ac2de4ae53908fbfea5b2b1862e181626bb9005c9f01ffffffff0200e1f505000000004341044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45afac00180d8f000000004341046a0765b5865641ce08dd39690aade26dfbf5511430ca428a3089261361cef170e3929a68aee3d8d4848b0c5111b0a37b82b86ad559fd2a745b44d8e8d9dfdc0cac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the first transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xe980fe9f792d014e73b95203dc1335c5f9ce19ac537a419e6df5b47aecb93b70"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Match an output from the second transaction (the pubkey for address 1DZTzaBHUDM7T3QvUKBz4qXMRpkg8jsfB5)</comment>
    <comment type="line">// This should not match the third transaction though it spends the output matched</comment>
    <comment type="line">// It will match the fourth transaction, which has another pay-to-pubkey output to the same address</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"044a656f065871a353f216ca26cef8dde2f03e8c16202d2e8ad769f02032cb86a5eb5e56842e92e19141d60a01928f8dd2c875a390f67c1f6c94cfc617c0ea45af"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>merkleBlock</name> <operator>=</operator> <call><name>CMerkleBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pair</name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x28204cad1d7fc1d199e8ef4fa22f182de6258a3eaafe1bbe56ebdcacd3069a5f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x3c1d7e82342158e4109df2e0b6348b6e84e403d8b4046d7007663ace63cddb23"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_3_and_serialize</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000000000dab0130bbcc991d3d7ae6b81aa6f50a798888dfe62337458dc45)</comment>
    <comment type="line">// With one tx</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff08044c86041b020a02ffffffff0100f2052a01000000434104ecd3229b0571c3be876feaac0442a9f13c5a572742927af1dc623353ecf8c202225f64868137a18cdd85cbbb4c74fbccfd4f49639cf1bdc94a5672bb15ad5d4cac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the only transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x63194f18be0af63f2c6bc9dc0f777cbefed3d9415c4af83f3ee3a3d669c00cb5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <function_decl><type><name>CDataStream</name></type> <name>merkleStream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>merkleStream</name> <operator>&lt;&lt;</operator> <name>merkleBlock</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000079cda856b143d9db2c1caff01d1aecc8630d30625d10e8b4b8b0000000000000b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f196367291b4d4c86041b8fa45d630100000001b50cc069d6a3e33e3ff84a5c41d9d3febe7c770fdcc96b2c3ff60abe184f19630101"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>expected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL_COLLECTIONS</name><argument_list>(<argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>merkleStream</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>merkleStream</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_4</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)</comment>
    <comment type="line">// With 7 txes</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_ALL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the last transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>, <argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x0a2a92f0bda4727d0a13eaddf4dd9ac6b5c61a1429e6b2b818f19b15df0ac154"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Also match the 4th transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>merkleBlock</name> <operator>=</operator> <call><name>CMerkleBlock</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_4_test_p2pubkey_only</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)</comment>
    <comment type="line">// With 7 txes</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_P2PUBKEY_ONLY</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the generation pubkey</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ...and the output address of the 4th transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b6efd80d99179f4f4ff6f4dd0a007d018c385d21"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We should match the generation outpoint</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ... but not the 4th transaction's output (its not pay-2-pubkey)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_block_4_test_update_none</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real block (000000000000b731f2eef9e8c63173adfb07e41bd53eb0ef0a6b720d6cb6dea4)</comment>
    <comment type="line">// With 7 txes</comment>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0100000082bb869cf3a793432a66e826e05a6fc37469f8efb7421dc880670100000000007f16c5962e8bd963659c793ce370d95f093bc7e367117b3c30c1f8fdd0d9728776381b4d4c86041b554b85290701000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0136ffffffff0100f2052a01000000434104eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91ac000000000100000001bcad20a6a29827d1424f08989255120bf7f3e9e3cdaaa6bb31b0737fe048724300000000494830450220356e834b046cadc0f8ebb5a8a017b02de59c86305403dad52cd77b55af062ea10221009253cd6c119d4729b77c978e1e2aa19f5ea6e0e52b3f16e32fa608cd5bab753901ffffffff02008d380c010000001976a9142b4b8072ecbba129b6453c63e129e643207249ca88ac0065cd1d000000001976a9141b8dd13b994bcfc787b32aeadf58ccb3615cbd5488ac000000000100000003fdacf9b3eb077412e7a968d2e4f11b9a9dee312d666187ed77ee7d26af16cb0b000000008c493046022100ea1608e70911ca0de5af51ba57ad23b9a51db8d28f82c53563c56a05c20f5a87022100a8bdc8b4a8acc8634c6b420410150775eb7f2474f5615f7fccd65af30f310fbf01410465fdf49e29b06b9a1582287b6279014f834edc317695d125ef623c1cc3aaece245bd69fcad7508666e9c74a49dc9056d5fc14338ef38118dc4afae5fe2c585caffffffff309e1913634ecb50f3c4f83e96e70b2df071b497b8973a3e75429df397b5af83000000004948304502202bdb79c596a9ffc24e96f4386199aba386e9bc7b6071516e2b51dda942b3a1ed022100c53a857e76b724fc14d45311eac5019650d415c3abb5428f3aae16d8e69bec2301ffffffff2089e33491695080c9edc18a428f7d834db5b6d372df13ce2b1b0e0cbcb1e6c10000000049483045022100d4ce67c5896ee251c810ac1ff9ceccd328b497c8f553ab6e08431e7d40bad6b5022033119c0c2b7d792d31f1187779c7bd95aefd93d90a715586d73801d9b47471c601ffffffff0100714460030000001976a914c7b55141d097ea5df7a0ed330cf794376e53ec8d88ac0000000001000000045bf0e214aa4069a3e792ecee1e1bf0c1d397cde8dd08138f4b72a00681743447000000008b48304502200c45de8c4f3e2c1821f2fc878cba97b1e6f8807d94930713aa1c86a67b9bf1e40221008581abfef2e30f957815fc89978423746b2086375ca8ecf359c85c2a5b7c88ad01410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffffd669f7d7958d40fc59d2253d88e0f248e29b599c80bbcec344a83dda5f9aa72c000000008a473044022078124c8beeaa825f9e0b30bff96e564dd859432f2d0cb3b72d3d5d93d38d7e930220691d233b6c0f995be5acb03d70a7f7a65b6bc9bdd426260f38a1346669507a3601410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95fffffffff878af0d93f5229a68166cf051fd372bb7a537232946e0a46f53636b4dafdaa4000000008c493046022100c717d1714551663f69c3c5759bdbb3a0fcd3fab023abc0e522fe6440de35d8290221008d9cbe25bffc44af2b18e81c58eb37293fd7fe1c2e7b46fc37ee8c96c50ab1e201410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff27f2b668859cd7f2f894aa0fd2d9e60963bcd07c88973f425f999b8cbfd7a1e2000000008c493046022100e00847147cbf517bcc2f502f3ddc6d284358d102ed20d47a8aa788a62f0db780022100d17b2d6fa84dcaf1c95d88d7e7c30385aecf415588d749afd3ec81f6022cecd701410462bb73f76ca0994fcb8b4271e6fb7561f5c0f9ca0cf6485261c4a0dc894f4ab844c6cdfb97cd0b60ffb5018ffd6238f4d87270efb1d3ae37079b794a92d7ec95ffffffff0100c817a8040000001976a914b6efd80d99179f4f4ff6f4dd0a007d018c385d2188ac000000000100000001834537b2f1ce8ef9373a258e10545ce5a50b758df616cd4356e0032554ebd3c4000000008b483045022100e68f422dd7c34fdce11eeb4509ddae38201773dd62f284e8aa9d96f85099d0b002202243bd399ff96b649a0fad05fa759d6a882f0af8c90cf7632c2840c29070aec20141045e58067e815c2f464c6a2a15f987758374203895710c2d452442e28496ff38ba8f5fd901dc20e29e88477167fe4fc299bf818fd0d9e1632d467b2a3d9503b1aaffffffff0280d7e636030000001976a914f34c3e10eb387efe872acb614c89e78bfca7815d88ac404b4c00000000001976a914a84e272933aaf87e1715d7786c51dfaeb5b65a6f88ac00000000010000000143ac81c8e6f6ef307dfe17f3d906d999e23e0189fda838c5510d850927e03ae7000000008c4930460221009c87c344760a64cb8ae6685a3eec2c1ac1bed5b88c87de51acd0e124f266c16602210082d07c037359c3a257b5c63ebd90f5a5edf97b2ac1c434b08ca998839f346dd40141040ba7e521fa7946d12edbb1d1e95a15c34bd4398195e86433c92b431cd315f455fe30032ede69cad9d1e1ed6c3c4ec0dbfced53438c625462afb792dcb098544bffffffff0240420f00000000001976a9144676d1b820d63ec272f1900d59d43bc6463d96f888ac40420f00000000001976a914648d04341d00d7968b3405c034adc38d4d8fb9bd88ac00000000010000000248cc917501ea5c55f4a8d2009c0567c40cfe037c2e71af017d0a452ff705e3f1000000008b483045022100bf5fdc86dc5f08a5d5c8e43a8c9d5b1ed8c65562e280007b52b133021acd9acc02205e325d613e555f772802bf413d36ba807892ed1a690a77811d3033b3de226e0a01410429fa713b124484cb2bd7b5557b2c0b9df7b2b1fee61825eadc5ae6c37a9920d38bfccdc7dc3cb0c47d7b173dbc9db8d37db0a33ae487982c59c6f8606e9d1791ffffffff41ed70551dd7e841883ab8f0b16bf04176b7d1480e4f0af9f3d4c3595768d068000000008b4830450221008513ad65187b903aed1102d1d0c47688127658c51106753fed0151ce9c16b80902201432b9ebcb87bd04ceb2de66035fbbaf4bf8b00d1cfe41f1a1f7338f9ad79d210141049d4cf80125bf50be1709f718c07ad15d0fc612b7da1f5570dddc35f2a352f0f27c978b06820edca9ef982c35fda2d255afba340068c5035552368bc7200c1488ffffffff0100093d00000000001976a9148edb68822f1ad580b043c7b3df2e400f8699eb4888ac00000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>filter</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BLOOM_UPDATE_NONE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Match the generation pubkey</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04eaafc2314def4ca98ac970241bcab022b9c1e1f4ea423a20f134c876f2c01ec0f0dd5b2e86e7168cefe0d81113c3807420ce13ad1357231a2252247d97a46a91"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ...and the output address of the 4th transaction</comment>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b6efd80d99179f4f4ff6f4dd0a007d018c385d21"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>filter</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// We shouldn't match any outpoints (UPDATE_NONE)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x147caa76786596590baa4e98f5d9f48b86c7765e489f7a6ff3360fe5c674360b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x02981fa052f0481dbc5868f4fc2166035a10f27a03cfd2de67326471df5bc041"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>RandomData</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>r</name> <init>= <expr><call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rolling_bloom</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>SeedInsecureRand</name><argument_list>(<argument><expr><name><name>SeedRand</name><operator>::</operator><name>ZEROS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <comment type="line">// last-100-entry, 1% false positive:</comment>
    <decl_stmt><decl><type><name>CRollingBloomFilter</name></type> <name>rb1</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Overfill:</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DATASIZE</name><init>=<expr><literal type="number">399</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name><name>data</name><index>[<expr><name>DATASIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>RandomData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rb1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Last 100 guaranteed to be remembered:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">299</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// false positive rate is 1%, so we should get about 100 hits if</comment>
    <comment type="line">// testing 10,000 random keys. We get worst-case false positive</comment>
    <comment type="line">// behavior when the filter is as full as possible, which is</comment>
    <comment type="line">// when we've inserted one minus an integer multiple of nElement*2.</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nHits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name>RandomData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>nHits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// Expect about 100 hits</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nHits</name></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>DATASIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rb1</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>DATASIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now roll through data, make sure last 100 entries</comment>
    <comment type="line">// are always remembered:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">100</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>rb1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Insert 999 more random entries:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">999</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>d</name> <init>= <expr><call><name>RandomData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rb1</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Sanity check to make sure the filter isn't just filling up:</comment>
    <expr_stmt><expr><name>nHits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>rb1</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><operator>++</operator><name>nHits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="line">// Expect about 5 false positives</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nHits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// last-1000-entry, 0.01% false positive:</comment>
    <decl_stmt><decl><type><name>CRollingBloomFilter</name></type> <name>rb2</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0.001</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rb2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// ... room for all of them:</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DATASIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rb2</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
