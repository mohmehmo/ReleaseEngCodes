<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/arith_uint256.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_ARITH_UINT256_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_ARITH_UINT256_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>uint256</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>uint_error</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>runtime_error</name> <block>{
<expr><name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>uint_error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>std</name><operator>::</operator><macro><name>runtime_error</name><argument_list>(<argument>str</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Template base class for unsigned big integers. */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>BITS</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>base_uint</name>
<block>{<block_content>
<label><name>protected</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>WIDTH</name> <init>= <expr><name>BITS</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pn</name><index>[<expr><name>WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<label><name>public</name>:</label>

    <macro><name>base_uint</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>BITS</name><operator>/</operator><literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>BITS</name><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Template parameter BITS must be a positive multiple of 32."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block>

    <macro><name>base_uint</name><argument_list>(<argument>const base_uint&amp; b</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>BITS</name><operator>/</operator><literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>BITS</name><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Template parameter BITS must be a positive multiple of 32."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block>

    <decl_stmt><decl><type><name>base_uint</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></init></decl></decl_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <macro><name>base_uint</name><argument_list>(<argument>uint64_t b</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>BITS</name><operator>/</operator><literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>BITS</name><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Template parameter BITS must be a positive multiple of 32."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block>

    <decl_stmt><decl><type><name>explicit</name></type> <name>base_uint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>~</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier>
    <block>{
        <expr><name>base_uint</name> <name>ret</name></expr>;
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }

    const <expr_stmt><expr><name>base_uint</name> <name>operator</name><operator>-</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier>
    <block>{
        <expr><name>base_uint</name> <name>ret</name></expr>;
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <operator>++</operator><name>ret</name></block></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }

    double <macro><name>getdouble</name><argument_list>()</argument_list></macro> <decl_stmt><decl><type><specifier>const</specifier></type></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>base_uint</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>uint64_t</name> <name>b</name><operator>)</operator>
    <block>{
        <expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>b</name></expr>;
        <expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block></expr></init></decl></decl_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    base_uint<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>^=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    base_uint<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>&amp;=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;=</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    base_uint<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>|=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    base_uint<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>^=</operator><operator>(</operator><name>uint64_t</name> <name>b</name><operator>)</operator>
    <block>{
        <expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>b</name></expr>;
        <expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>|=</operator><operator>(</operator><name>uint64_t</name> <name>b</name><operator>)</operator>
    <block>{
        <expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>b</name></expr>;
        <expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;=</operator><operator>(</operator><name>unsigned</name> <name>int</name> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;=</operator><operator>(</operator><name>unsigned</name> <name>int</name> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <expr><name>uint64_t</name> <name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><name>carry</name> <operator>+</operator> <name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    base_uint<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <expr><operator>*</operator><name>this</name> <operator>+=</operator> <operator>-</operator><name>b</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>uint64_t</name> <name>b64</name><operator>)</operator>
    <block>{
        <expr><name>base_uint</name> <name>b</name></expr>;
        <expr><name>b</name> <operator>=</operator> <name>b64</name></expr>;
        <expr><operator>*</operator><name>this</name> <operator>+=</operator> <name>b</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>uint64_t</name> <name>b64</name><operator>)</operator>
    <block>{
        <expr><name>base_uint</name> <name>b</name></expr>;
        <expr><name>b</name> <operator>=</operator> <name>b64</name></expr>;
        <expr><operator>*</operator><name>this</name> <operator>+=</operator> <operator>-</operator><name>b</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>*=</operator><operator>(</operator><name>uint32_t</name> <name>b32</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>*=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>/=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator>
    <block>{
        <comment type="line">// prefix operator</comment>
        <expr><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name> <operator>&amp;&amp;</operator> <operator>++</operator><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    const <expr_stmt><expr><name>base_uint</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator>
    <block>{
        <comment type="line">// postfix operator</comment>
        <expr><specifier>const</specifier> <name>base_uint</name> <name>ret</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
        <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>base_uint</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator>
    <block>{
        <comment type="line">// prefix operator</comment>
        <expr><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name> <operator>&amp;&amp;</operator> <operator>--</operator><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block></expr></expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    const <expr_stmt><expr><name>base_uint</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator>
    <block>{
        <comment type="line">// postfix operator</comment>
        <expr><specifier>const</specifier> <name>base_uint</name> <name>ret</name> <operator>=</operator> <operator>*</operator><name>this</name></expr>;
        <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>CompareTo</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>EqualTo</name><argument_list>(<argument><expr><name>uint64_t</name> <name>b</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>+</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>b</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>-</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>b</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name></type> <name>operator</name><modifier>*</modifier><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>b</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>/</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>b</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>|</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>b</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name></type>&amp;(const <name>base_uint</name>&amp; a<operator>,</operator> const base_uint&amp; b</function>) <block>{<block_content> <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <name>b</name></expr>;</return> </block_content>}</block>
    <function><type><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name></type> <name>operator</name><modifier>^</modifier><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>^=</operator> <name>b</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <name>int</name> <name>shift</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <name>int</name> <name>shift</name><operator>)</operator> <block>{ <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>friend</name> <specifier>inline</specifier> <specifier>const</specifier> <name>base_uint</name></type> <name>operator</name><modifier>*</modifier><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>base_uint</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>b</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pn</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>pn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pn</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>pn</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>pn</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>CompareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>CompareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>CompareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>CompareTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <name>uint64_t</name> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>EqualTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>base_uint</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <name>uint64_t</name> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><call><name><name>a</name><operator>.</operator><name>EqualTo</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetHex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>SetHex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>SetHex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <expr_stmt><expr><name>unsigned</name> <name>int</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pn</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    }</block></expr></expr_stmt>

    <comment type="block" format="doxygen">/**
     * Returns the position of the highest bit set plus one, or zero if the
     * value is zero.
     */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <macro><name>bits</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <expr_stmt><expr><name>uint64_t</name> <macro><name>GetLow64</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <expr><call><name>static_assert</name><argument_list>(<argument><expr><name>WIDTH</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Assertion WIDTH &gt;= 2 failed (WIDTH = BITS / 32). BITS is a template parameter."</literal></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</return>
    }</block></expr></expr_stmt>
};

<comment type="block" format="doxygen">/** 256-bit unsigned big integer. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>arith_uint256</name> <range>: <expr><name>public</name> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>arith_uint256</name><argument_list>()</argument_list></macro> <block>{}</block>
    <call><name>arith_uint256</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>base_uint</name></macro><operator>&lt;</operator><literal type="number">256</literal><operator>&gt;</operator><operator>(</operator><name>b</name><operator>)</operator> <block>{}</block>
    <macro><name>arith_uint256</name><argument_list>(<argument>uint64_t b</argument>)</argument_list></macro> <operator>:</operator> <macro><name>base_uint</name></macro><operator>&lt;</operator><literal type="number">256</literal><operator>&gt;</operator><operator>(</operator><name>b</name><operator>)</operator> <block>{}</block>
    <name>explicit</name> <call><name>arith_uint256</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>base_uint</name></macro><operator>&lt;</operator><literal type="number">256</literal><operator>&gt;</operator><operator>(</operator><name>str</name><operator>)</operator> <block>{}</block>

    <comment type="block" format="doxygen">/**
     * The "compact" format is a representation of a whole
     * number N using an unsigned 32bit number similar to a
     * floating point format.
     * The most significant 8 bits are the unsigned exponent of base 256.
     * This exponent can be thought of as "number of bytes of N".
     * The lower 23 bits are the mantissa.
     * Bit number 24 (0x800000) represents the sign of N.
     * N = (-1^sign) * mantissa * 256^(exponent-3)
     *
     * Satoshi's original implementation used BN_bn2mpi() and BN_mpi2bn().
     * MPI uses the most significant bit of the first byte as sign.
     * Thus 0x1234560000 is compact (0x05123456)
     * and  0xc0de000000 is compact (0x0600c0de)
     *
     * Bitcoin only uses this "compact" format for encoding difficulty
     * targets, which are unsigned 256bit quantities.  Thus, all the
     * complexities of the sign bit and using base 256 are probably an
     * implementation accident.
     */</comment>
    <name>arith_uint256</name><operator>&amp;</operator> <macro><name>SetCompact</name><argument_list>(<argument>uint32_t nCompact</argument>, <argument>bool *pfNegative = nullptr</argument>, <argument>bool *pfOverflow = nullptr</argument>)</argument_list></macro></expr>;
    <expr><name>uint32_t</name> <macro><name>GetCompact</name><argument_list>(<argument>bool fNegative = false</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>friend</name> <name>uint256</name> <call><name>ArithToUint256</name><argument_list>(<argument><expr><specifier>const</specifier> <name>arith_uint256</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
    <expr><name>friend</name> <name>arith_uint256</name> <call><name>UintToArith256</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>uint256</name></type> <name>ArithToUint256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arith_uint256</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>arith_uint256</name></type> <name>UintToArith256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_ARITH_UINT256_H</comment>
</unit>
