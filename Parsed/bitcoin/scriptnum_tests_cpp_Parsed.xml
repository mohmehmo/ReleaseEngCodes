<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/scriptnum_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/scriptnum10.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>scriptnum_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="block" format="doxygen">/** A selection of numbers that do not trigger int64_t overflow
 *  when added/subtracted. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><operator>-</operator><literal type="number">255</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>-</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>, <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>, <expr><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>, <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>offsets</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7FFF</literal></expr>, <expr><literal type="number">0x8000</literal></expr>, <expr><literal type="number">0xFFFF</literal></expr>, <expr><literal type="number">0x10000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScriptNum10</name><modifier>&amp;</modifier></type> <name>bignum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScriptNum</name><modifier>&amp;</modifier></type> <name>scriptnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>bignum</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>scriptnum</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>bignum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>scriptnum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckCreateVch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>, <argument><expr><name>scriptnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum2</name><argument_list>(<argument><expr><call><name><name>bignum</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum2</name><argument_list>(<argument><expr><call><name><name>scriptnum</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum3</name><argument_list>(<argument><expr><call><name><name>scriptnum2</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum3</name><argument_list>(<argument><expr><call><name><name>bignum2</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum3</name></expr></argument>, <argument><expr><name>scriptnum3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckCreateInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>, <argument><expr><name>scriptnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><call><name><name>bignum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><call><name><name>scriptnum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><call><name><name>scriptnum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><call><name><name>bignum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><call><name><name>scriptnum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><call><name><name>bignum</name><operator>.</operator><name>getint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckAdd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum3</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum10</name></type> <name>bignum4</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum3</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum4</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// int64_t overflow is undefined.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>invalid</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>num2</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num1</name> <operator>&gt;</operator> <operator>(</operator><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>num2</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><operator>(</operator><name>num2</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>num1</name> <operator>&lt;</operator> <operator>(</operator><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>num2</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum1</name> <operator>+</operator> <name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum1</name> <operator>+</operator> <name>scriptnum2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum1</name> <operator>+</operator> <name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum1</name> <operator>+</operator> <name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum1</name> <operator>+</operator> <name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum2</name> <operator>+</operator> <name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckNegate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// -INT64_MIN is undefined</comment>
    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><operator>-</operator><name>bignum</name></expr></argument>, <argument><expr><operator>-</operator><name>scriptnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckSubtract</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// int64_t overflow is undefined.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>invalid</name> <init>= <expr><operator>(</operator><operator>(</operator><name>num2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num1</name> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>num2</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><name><name>num2</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num1</name></expr></argument> &gt;</argument_list></name> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>num2</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum1</name> <operator>-</operator> <name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum1</name> <operator>-</operator> <name>scriptnum2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum1</name> <operator>-</operator> <name>bignum2</name></expr></argument>, <argument><expr><name>scriptnum1</name> <operator>-</operator> <name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>invalid</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>num1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num2</name> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>num1</name><operator>)</operator> <operator>||</operator>
               <operator>(</operator><name><name>num1</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num2</name></expr></argument> &gt;</argument_list></name> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>num1</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>invalid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum2</name> <operator>-</operator> <name>bignum1</name></expr></argument>, <argument><expr><name>scriptnum2</name> <operator>-</operator> <name>scriptnum1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>verify</name><argument_list>(<argument><expr><name>bignum2</name> <operator>-</operator> <name>bignum1</name></expr></argument>, <argument><expr><name>scriptnum2</name> <operator>-</operator> <name>num1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum10</name></type> <name>bignum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum1</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptNum</name></type> <name>scriptnum2</name><argument_list>(<argument><expr><name>num2</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>==</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>scriptnum1</name> <operator>==</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>!=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>!=</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;=</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;=</operator> <name>scriptnum1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>==</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>scriptnum1</name> <operator>==</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>!=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>!=</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;=</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;=</operator> <name>bignum1</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;=</operator> <name>num1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>==</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>==</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>!=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>!=</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;=</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;=</operator> <name>scriptnum2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>==</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>==</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>!=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>!=</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&gt;=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&gt;=</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>bignum1</name> <operator>&lt;=</operator> <name>bignum2</name><operator>)</operator> <operator>==</operator>  <operator>(</operator><name>scriptnum1</name> <operator>&lt;=</operator> <name>num2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RunCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CheckCreateInt</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScriptNum</name></type> <name>scriptnum</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>scriptnum</name><operator>.</operator><name>getvch</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name><name>CScriptNum</name><operator>::</operator><name>nDefaultMaxNumSize</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CheckCreateVch</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name> <argument_list>(<argument><expr><call><name>CheckCreateVch</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>scriptnum10_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RunOperators</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>num2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CheckAdd</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckSubtract</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNegate</name><argument_list>(<argument><expr><name>num1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCompare</name><argument_list>(<argument><expr><name>num1</name></expr></argument>, <argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>creation</argument>)</argument_list></macro>
<block>{<block_content>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RunCreate</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunCreate</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>offsets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunCreate</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>offsets</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>operators</argument>)</argument_list></macro>
<block>{<block_content>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>offsets</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>RunOperators</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
