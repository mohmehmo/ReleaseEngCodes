<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoinamountfield.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_BITCOINAMOUNTFIELD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_BITCOINAMOUNTFIELD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QWidget&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>AmountSpinBox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QValueComboBox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block" format="doxygen">/** Widget for entering bitcoin amounts.
  */</comment>
<name>class</name></type> <name>BitcoinAmountField</name><range>: <expr><name>public</name> <name>QWidget</name>
<block>{
    <expr><name>Q_OBJECT</name>

    <comment type="line">// ugly hack: for some unknown reason CAmount (instead of qint64) does not work here as expected</comment>
    <comment type="line">// discussion: https://github.com/bitcoin/bitcoin/pull/5117</comment>
    <macro><name>Q_PROPERTY</name><argument_list>(<argument>qint64 value READ value WRITE setValue NOTIFY valueChanged USER true</argument>)</argument_list></macro>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>BitcoinAmountField</name><argument_list>(<argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>CAmount</name> <macro><name>value</name><argument_list>(<argument>bool *value=nullptr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>void</name> <call><name>setValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** If allow empty is set to false the field will be set to the minimum allowed value if left empty. **/</comment>
    <expr><name>void</name> <macro><name>SetAllowEmpty</name><argument_list>(<argument>bool allow</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Set the minimum value in satoshis **/</comment>
    <expr><name>void</name> <call><name>SetMinValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Set the maximum value in satoshis **/</comment>
    <expr><name>void</name> <call><name>SetMaxValue</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Set single step in satoshis **/</comment>
    <expr><name>void</name> <call><name>setSingleStep</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Make read-only **/</comment>
    <expr><name>void</name> <macro><name>setReadOnly</name><argument_list>(<argument>bool fReadOnly</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Mark current value as invalid in UI. */</comment>
    <expr><name>void</name> <macro><name>setValid</name><argument_list>(<argument>bool valid</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Perform input validation, mark field as invalid if entered value is not valid. */</comment>
    <expr><name>bool</name> <call><name>validate</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Change unit used to display amount. */</comment>
    <expr><name>void</name> <macro><name>setDisplayUnit</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Make field empty and ready for new input. */</comment>
    <expr><name>void</name> <call><name>clear</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Enable/Disable. */</comment>
    <expr><name>void</name> <macro><name>setEnabled</name><argument_list>(<argument>bool fEnabled</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Qt messes up the tab chain by default in some cases (issue https://bugreports.qt-project.org/browse/QTBUG-10907),
        in these cases we have to set it up manually.
    */</comment>
    <expr><name>QWidget</name> <operator>*</operator><call><name>setupTabChain</name><argument_list>(<argument><expr><name>QWidget</name> <operator>*</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>valueChanged</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Intercept focus-in event and ',' key presses */</comment>
    <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>object</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>AmountSpinBox</name> <operator>*</operator><name>amount</name></expr>;
    <expr><name>QValueComboBox</name> <operator>*</operator><name>unit</name></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>unitChanged</name><argument_list>(<argument>int idx</argument>)</argument_list></macro></expr>;

}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_BITCOINAMOUNTFIELD_H</comment>
</unit>
