<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/modules/ecdh/tests_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2015 Andrew Poelstra                                 *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_MODULE_ECDH_TESTS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_MODULE_ECDH_TESTS_H</name></cpp:macro></cpp:define>

<function><type><name>int</name></type> <name>ecdh_hash_function_test_fail</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>output</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecdh_hash_function_custom</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
    <comment type="block">/* Save x and y as uncompressed public key */</comment>
    <expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name> <operator>+</operator> <literal type="number">33</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_ecdh_api</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Setup context that just counts errors */</comment>
    <decl_stmt><decl><type><name>secp256k1_context</name> <modifier>*</modifier></type><name>tctx</name> <init>= <expr><call><name>secp256k1_context_create</name><argument_list>(<argument><expr><name>SECP256K1_CONTEXT_SIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_pubkey</name></type> <name>point</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>res</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_one</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ecount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>s_one</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secp256k1_context_set_error_callback</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>counting_illegal_callback_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_context_set_illegal_callback</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>counting_illegal_callback_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check all NULLs are detected */</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ecount</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ecount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ecount</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ecount</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ecount</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Cleanup */</comment>
    <expr_stmt><expr><call><name>secp256k1_context_destroy</name><argument_list>(<argument><expr><name>tctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_ecdh_generator_basepoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_one</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_pubkey</name></type> <name><name>point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>s_one</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="block">/* Check against pubkey creation when the basepoint is the generator */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_sha256</name></type> <name>sha</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_b32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output_ecdh</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output_ser</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>point_ser</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>point_ser_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>point_ser</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>s</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>random_scalar_order</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_scalar_get_b32</name><argument_list>(<argument><expr><name>s_b32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_one</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_b32</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* compute using ECDH function with custom hash function */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output_ecdh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_b32</name></expr></argument>, <argument><expr><name>ecdh_hash_function_custom</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* compute "explicitly" */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_serialize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>point_ser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_ser_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECP256K1_EC_UNCOMPRESSED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* compare */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>output_ecdh</name></expr></argument>, <argument><expr><name>point_ser</name></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* compute using ECDH function with default hash function */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output_ecdh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s_b32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* compute "explicitly" */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_serialize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>point_ser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_ser_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SECP256K1_EC_COMPRESSED</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>point_ser</name></expr></argument>, <argument><expr><name>point_ser_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>output_ser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* compare */</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>output_ecdh</name></expr></argument>, <argument><expr><name>output_ser</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_bad_scalar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_zero</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_overflow</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
        <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
        <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x3b</literal></expr>,
        <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s_rand</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>rand</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_pubkey</name></type> <name>point</name></decl>;</decl_stmt>

    <comment type="block">/* Create random point */</comment>
    <expr_stmt><expr><call><name>random_scalar_order</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_get_b32</name><argument_list>(<argument><expr><name>s_rand</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ec_pubkey_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_rand</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Try to multiply it by bad values */</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_overflow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* ...and a good one */</comment>
    <expr_stmt><expr><name><name>s_overflow</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_overflow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Hash function failure results in ecdh failure */</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_ecdh</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>, <argument><expr><name>s_overflow</name></expr></argument>, <argument><expr><name>ecdh_hash_function_test_fail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>run_ecdh_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>test_ecdh_api</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_ecdh_generator_basepoint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_bad_scalar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_MODULE_ECDH_TESTS_H */</comment>
</unit>
