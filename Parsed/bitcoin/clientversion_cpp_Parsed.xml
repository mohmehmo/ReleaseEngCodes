<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/clientversion.cpp"><comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>


<comment type="block" format="doxygen">/**
 * Name of client reported in the 'version' message. Report the same name
 * for both bitcoind and bitcoin-qt, to make it harder for attackers to
 * target servers or GUI users specifically.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>CLIENT_NAME</name><argument_list>(<argument><expr><literal type="string">"Satoshi"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Client version number
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIENT_VERSION_SUFFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>


<comment type="block" format="doxygen">/**
 * The following part of the code determines the CLIENT_BUILD variable.
 * Several mechanisms are used for this:
 * * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is
 *   generated by the build environment, possibly containing the output
 *   of git-describe in a macro called BUILD_DESC
 * * secondly, if this is an exported version of the code, GIT_ARCHIVE will
 *   be defined (automatically using the export-subst git attribute), and
 *   GIT_COMMIT will contain the commit id.
 * * then, three options exist for determining CLIENT_BUILD:
 *   * if BUILD_DESC is defined, use that literally (output of git-describe)
 *   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]
 *   * otherwise, use v[maj].[min].[rev].[build]-unk
 * finally CLIENT_VERSION_SUFFIX is added
 */</comment>

<comment type="line" format="doxygen">//! First, include build.h if requested</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BUILD_INFO</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;obj/build.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line" format="doxygen">//! git will put "#define GIT_ARCHIVE 1" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIT_ARCHIVE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_COMMIT_ID</name></cpp:macro> <cpp:value>"$Format:%H$"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_COMMIT_DATE</name></cpp:macro> <cpp:value>"$Format:%cD$"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC_WITH_SUFFIX</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>rev</name></type></parameter>, <parameter><type><name>build</name></type></parameter>, <parameter><type><name>suffix</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>"v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-" DO_STRINGIZE(suffix)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC_FROM_COMMIT</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>rev</name></type></parameter>, <parameter><type><name>build</name></type></parameter>, <parameter><type><name>commit</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>"v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-g" commit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC_FROM_UNKNOWN</name><parameter_list>(<parameter><type><name>maj</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>rev</name></type></parameter>, <parameter><type><name>build</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>"v" DO_STRINGIZE(maj) "." DO_STRINGIZE(min) "." DO_STRINGIZE(rev) "." DO_STRINGIZE(build) "-unk"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BUILD_DESC</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUILD_SUFFIX</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC</name></cpp:macro> <cpp:value>BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GIT_COMMIT_ID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC</name></cpp:macro> <cpp:value>BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD_DESC</name></cpp:macro> <cpp:value>BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>CLIENT_BUILD</name><parameter_list>(<parameter><decl><type><name>BUILD_DESC</name></type> <name>CLIENT_VERSION_SUFFIX</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nVersion</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d.%d.%d"</literal></expr></argument>, <argument><expr><name>nVersion</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>nVersion</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name>nVersion</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>nVersion</name> <operator>/</operator> <literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>(</operator><name>nVersion</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name>nVersion</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>nVersion</name> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatFullVersion</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>CLIENT_BUILD</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki)
 */</comment>
<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatSubVersion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nClientVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>comments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostringstream</name></name></type> <name>ss</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">":"</literal> <operator>&lt;&lt;</operator> <call><name>FormatVersion</name><argument_list>(<argument><expr><name>nClientVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>comments</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name><argument_list>(<argument><expr><call><name><name>comments</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><operator>++</operator><name>it</name></expr>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>comments</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="string">"; "</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
    <return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
