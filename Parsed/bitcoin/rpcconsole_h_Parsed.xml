<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/rpcconsole.h"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_RPCCONSOLE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_RPCCONSOLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/peertablemodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QWidget&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCompleter&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RPCTimerInterface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>Ui</name> <block>{<block_content>
    <decl_stmt><decl><type><name>class</name></type> <name>RPCConsole</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QMenu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QItemSelection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<comment type="block" format="doxygen">/** Local Bitcoin RPC console. */</comment>
<name>class</name></type> <name>RPCConsole</name><range>: <expr><name>public</name> <name>QWidget</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>RPCConsole</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>RPCConsole</name><argument_list>()</argument_list></call></expr>;

    <expr><specifier>static</specifier> <name>bool</name> <macro><name>RPCParseCommandLine</name><argument_list>(<argument>interfaces::Node* node</argument>, <argument>std::string &amp;strResult</argument>, <argument>const std::string &amp;strCommand</argument>, <argument>bool fExecute</argument>, <argument>std::string * const pstrFilteredOut = nullptr</argument>, <argument>const WalletModel* wallet_model = nullptr</argument>)</argument_list></macro></expr>;
    <expr><specifier>static</specifier> <name>bool</name> <macro><name>RPCExecuteCommandLine</name><argument_list>(<argument>interfaces::Node&amp; node</argument>, <argument>std::string &amp;strResult</argument>, <argument>const std::string &amp;strCommand</argument>, <argument>std::string * const pstrFilteredOut = nullptr</argument>, <argument>const WalletModel* wallet_model = nullptr</argument>)</argument_list></macro> <block>{
        <return>return <expr><call><name>RPCParseCommandLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>node</name></expr></argument>, <argument><expr><name>strResult</name></expr></argument>, <argument><expr><name>strCommand</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pstrFilteredOut</name></expr></argument>, <argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

    <name>void</name> <call><name>setClientModel</name><argument_list>(<argument><expr><name>ClientModel</name> <operator>*</operator><name>model</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>addWallet</name><argument_list>(<argument><expr><name>WalletModel</name> <operator>*</operator> <specifier>const</specifier> <name>walletModel</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>removeWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <specifier>const</specifier> <name>walletModel</name></expr></argument>)</argument_list></call></expr>;

    enum <expr><name>MessageClass</name> <block>{
        <expr><name>MC_ERROR</name></expr>,
        <expr><name>MC_DEBUG</name></expr>,
        <expr><name>CMD_REQUEST</name></expr>,
        <expr><name>CMD_REPLY</name></expr>,
        <expr><name>CMD_ERROR</name></expr>
    }</block></expr>;

    enum <expr><name>class</name> <name>TabTypes</name> <block>{
        <expr><name>INFO</name></expr>,
        <expr><name>CONSOLE</name></expr>,
        <expr><name>GRAPH</name></expr>,
        <expr><name>PEERS</name></expr>
    }</block></expr>;

    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TabTypes</name></expr></argument>&gt;</argument_list></name> <macro><name>tabs</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><block>{<expr><name>TabTypes</name><operator>::</operator><name>INFO</name></expr>, <expr><name>TabTypes</name><operator>::</operator><name>CONSOLE</name></expr>, <expr><name>TabTypes</name><operator>::</operator><name>GRAPH</name></expr>, <expr><name>TabTypes</name><operator>::</operator><name>PEERS</name></expr>}</block></expr>;</return> }</block>

    <name>QString</name> <macro><name>tabTitle</name><argument_list>(<argument>TabTypes tab_type</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QKeySequence</name> <macro><name>tabShortcut</name><argument_list>(<argument>TabTypes tab_type</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>virtual</name> <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name><operator>*</operator> <name>obj</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>keyPressEvent</name><argument_list>(<argument><expr><name>QKeyEvent</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>on_lineEdit_returnPressed</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>on_tabWidget_currentChanged</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** open the debug.log from the current datadir */</comment>
    <expr><name>void</name> <call><name>on_openDebugLogfileButton_clicked</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** change the time range of the network traffic graph */</comment>
    <expr><name>void</name> <macro><name>on_sldGraphRange_valueChanged</name><argument_list>(<argument>int value</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** update traffic statistics */</comment>
    <expr><name>void</name> <macro><name>updateTrafficStats</name><argument_list>(<argument>quint64 totalBytesIn</argument>, <argument>quint64 totalBytesOut</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>resizeEvent</name><argument_list>(<argument><expr><name>QResizeEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>showEvent</name><argument_list>(<argument><expr><name>QShowEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>hideEvent</name><argument_list>(<argument><expr><name>QHideEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show custom context menu on Peers tab */</comment>
    <expr><name>void</name> <call><name>showPeersTableContextMenu</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QPoint</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show custom context menu on Bans tab */</comment>
    <expr><name>void</name> <call><name>showBanTableContextMenu</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QPoint</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Hides ban table if no bans are present */</comment>
    <expr><name>void</name> <call><name>showOrHideBanTableIfRequired</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** clear the selected node */</comment>
    <expr><name>void</name> <call><name>clearSelectedNode</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>clear</name><argument_list>(<argument>bool clearHistory = true</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>fontBigger</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>fontSmaller</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>setFontSize</name><argument_list>(<argument>int newSize</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Append the message to the message widget */</comment>
    <expr><name>void</name> <macro><name>message</name><argument_list>(<argument>int category</argument>, <argument>const QString &amp;msg</argument>)</argument_list></macro> <block>{ <expr><call><name>message</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>; }</block>
    <name>void</name> <macro><name>message</name><argument_list>(<argument>int category</argument>, <argument>const QString &amp;message</argument>, <argument>bool html</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set number of connections shown in the UI */</comment>
    <expr><name>void</name> <macro><name>setNumConnections</name><argument_list>(<argument>int count</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set network state shown in the UI */</comment>
    <expr><name>void</name> <macro><name>setNetworkActive</name><argument_list>(<argument>bool networkActive</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set number of blocks and last block date shown in the UI */</comment>
    <expr><name>void</name> <macro><name>setNumBlocks</name><argument_list>(<argument>int count</argument>, <argument>const QDateTime&amp; blockDate</argument>, <argument>double nVerificationProgress</argument>, <argument>bool headers</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set size (number of transactions and memory usage) of the mempool in the UI */</comment>
    <expr><name>void</name> <macro><name>setMempoolSize</name><argument_list>(<argument>long numberOfTxs</argument>, <argument>size_t dynUsage</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Go forward or back in history */</comment>
    <expr><name>void</name> <macro><name>browseHistory</name><argument_list>(<argument>int offset</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Scroll console view to end */</comment>
    <expr><name>void</name> <call><name>scrollToEnd</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Handle selection of peer in peers list */</comment>
    <expr><name>void</name> <call><name>peerSelected</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QItemSelection</name> <operator>&amp;</operator><name>selected</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QItemSelection</name> <operator>&amp;</operator><name>deselected</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Handle selection caching before update */</comment>
    <expr><name>void</name> <call><name>peerLayoutAboutToChange</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Handle updated peer information */</comment>
    <expr><name>void</name> <call><name>peerLayoutChanged</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Disconnect a selected node on the Peers tab */</comment>
    <expr><name>void</name> <call><name>disconnectSelectedNode</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Ban a selected node on the Peers tab */</comment>
    <expr><name>void</name> <macro><name>banSelectedNode</name><argument_list>(<argument>int bantime</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Unban a selected node on the Bans tab */</comment>
    <expr><name>void</name> <call><name>unbanSelectedNode</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** set which tab has the focus (is visible) */</comment>
    <expr><name>void</name> <macro><name>setTabFocus</name><argument_list>(<argument>enum TabTypes tabType</argument>)</argument_list></macro></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="line">// For RPC command executor</comment>
    <name>void</name> <call><name>cmdRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>startExecutor</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>setTrafficGraphRange</name><argument_list>(<argument>int mins</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** show detailed information on ui about selected node */</comment>
    <expr><name>void</name> <call><name>updateNodeDetail</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CNodeCombinedStats</name> <operator>*</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;

    enum <expr><name>ColumnWidths</name>
    <block>{
        <expr><name>ADDRESS_COLUMN_WIDTH</name> <operator>=</operator> <literal type="number">200</literal></expr>,
        <expr><name>SUBVERSION_COLUMN_WIDTH</name> <operator>=</operator> <literal type="number">150</literal></expr>,
        <expr><name>PING_COLUMN_WIDTH</name> <operator>=</operator> <literal type="number">80</literal></expr>,
        <expr><name>BANSUBNET_COLUMN_WIDTH</name> <operator>=</operator> <literal type="number">200</literal></expr>,
        <expr><name>BANTIME_COLUMN_WIDTH</name> <operator>=</operator> <literal type="number">250</literal></expr>

    }</block></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>Ui</name><operator>::</operator><name>RPCConsole</name><operator>*</operator> <specifier>const</specifier> <name>ui</name></expr>;
    <expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QStringList</name> <name>history</name></expr>;
    <expr><name>int</name> <name>historyPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>QString</name> <name>cmdBeforeBrowsing</name></expr>;
    <expr><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>NodeId</name></expr></argument>&gt;</argument_list></name> <name>cachedNodeids</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name><operator>*</operator> <specifier>const</specifier> <name>platformStyle</name></expr>;
    <expr><name>RPCTimerInterface</name> <operator>*</operator><name>rpcTimerInterface</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QMenu</name> <operator>*</operator><name>peersTableContextMenu</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QMenu</name> <operator>*</operator><name>banTableContextMenu</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>int</name> <name>consoleFontSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>QCompleter</name> <operator>*</operator><name>autoCompleter</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QThread</name> <name>thread</name></expr>;
    <expr><name>WalletModel</name><operator>*</operator> <name>m_last_wallet_model</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;

    <comment type="block" format="doxygen">/** Update UI with latest network info from model. */</comment>
    <expr><name>void</name> <call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>updateAlerts</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>warnings</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_RPCCONSOLE_H</comment>
</unit>
