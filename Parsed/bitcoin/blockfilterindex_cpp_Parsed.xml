<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/index/blockfilterindex.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbwrapper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/blockfilterindex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<comment type="block">/* The index database stores three items for each block: the disk location of the encoded filter,
 * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by
 * height, and those belonging to blocks that have been reorganized out of the active chain are
 * indexed by block hash. This ensures that filter data for any block that becomes part of the
 * active chain can always be retrieved, alleviating timing concerns.
 *
 * The filters themselves are stored in flat files and referenced by the LevelDB entries. This
 * minimizes the amount of data written to LevelDB and keeps the database values constant size. The
 * disk location of the next block filter to be written (represented as a FlatFilePos) is stored
 * under the DB_FILTER_POS key.
 *
 * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented
 * as big-endian so that sequential reads of filters by height are fast.
 * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].
 */</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>char</name></type> <name>DB_BLOCK_HASH</name> <init>= <expr><literal type="char">'s'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>char</name></type> <name>DB_BLOCK_HEIGHT</name> <init>= <expr><literal type="char">'t'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>char</name></type> <name>DB_FILTER_POS</name> <init>= <expr><literal type="char">'P'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>constexpr</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_FLTR_FILE_SIZE</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 16 MiB</comment>
<comment type="block" format="doxygen">/** The pre-allocation chunk size for fltr?????.dat files */</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>unsigned</name> <name>int</name></type> <name>FLTR_FILE_CHUNK_SIZE</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 1 MiB</comment>

<namespace>namespace <block>{

<struct>struct <name>DBVal</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FlatFilePos</name></type> <name>pos</name></decl>;</decl_stmt>

    <macro><name>ADD_SERIALIZE_METHODS</name></macro><empty_stmt>;</empty_stmt>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>, <parameter><type><name>typename</name></type> <name>Operation</name></parameter>&gt;</parameter_list></template>
    <type><specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</struct>

<struct>struct <name>DBHeightKey</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

    <constructor><name>DBHeightKey</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>height</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <constructor><specifier>explicit</specifier> <name>DBHeightKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height_in</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>height</name><argument_list>(<argument><expr><name>height_in</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>Serialize</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ser_writedata8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>DB_BLOCK_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ser_writedata32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>Unserialize</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><call><name>ser_readdata8</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>DB_BLOCK_HEIGHT</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><argument_list>(<argument><expr><literal type="string">"Invalid format for block filter index DB height key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>ser_readdata32be</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</struct>

<struct>struct <name>DBHashKey</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>DBHashKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash_in</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>hash</name><argument_list>(<argument><expr><name>hash_in</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <macro><name>ADD_SERIALIZE_METHODS</name></macro><empty_stmt>;</empty_stmt>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>, <parameter><type><name>typename</name></type> <name>Operation</name></parameter>&gt;</parameter_list></template>
    <type><specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>prefix</name> <init>= <expr><name>DB_BLOCK_HASH</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>DB_BLOCK_HASH</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><argument_list>(<argument><expr><literal type="string">"Invalid format for block filter index DB hash key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</struct>

}</block></namespace><empty_stmt>;</empty_stmt> <comment type="line">// namespace</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilterType</name></expr></argument>, <argument><expr><name>BlockFilterIndex</name></expr></argument>&gt;</argument_list></name></type> <name>g_filter_indexes</name></decl>;</decl_stmt>

<constructor><name><name>BlockFilterIndex</name><operator>::</operator><name>BlockFilterIndex</name></name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>n_cache_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_memory</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_wipe</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>m_filter_type</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>filter_name</name> <init>= <expr><call><name>BlockFilterTypeName</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>filter_name</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>invalid_argument</name></name><argument_list>(<argument><expr><literal type="string">"unknown filter_type"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>path</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"indexes"</literal> <operator>/</operator> <literal type="string">"blockfilter"</literal> <operator>/</operator> <name>filter_name</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>create_directories</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>m_name</name> <operator>=</operator> <name>filter_name</name> <operator>+</operator> <literal type="string">" block filter index"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_db</name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name><name>BaseIndex</name><operator>::</operator><name>DB</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>path</name> <operator>/</operator> <literal type="string">"db"</literal></expr></argument>, <argument><expr><name>n_cache_size</name></expr></argument>, <argument><expr><name>f_memory</name></expr></argument>, <argument><expr><name>f_wipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_filter_fileseq</name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>FlatFileSeq</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fltr"</literal></expr></argument>, <argument><expr><name>FLTR_FILE_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>Init</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_db</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><name>DB_FILTER_POS</name></expr></argument>, <argument><expr><name>m_next_filter_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Check that the cause of the read failure is that the key does not exist. Any other errors</comment>
        <comment type="line">// indicate database corruption or a disk failure, and starting the index would cause</comment>
        <comment type="line">// further corruption.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>m_db</name><operator>-&gt;</operator><name>Exists</name></name><argument_list>(<argument><expr><name>DB_FILTER_POS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: Cannot read current %s state; index may be corrupted"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>GetName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If the DB_FILTER_POS is not set, then initialize to the first location.</comment>
        <expr_stmt><expr><name><name>m_next_filter_pos</name><operator>.</operator><name>nFile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m_next_filter_pos</name><operator>.</operator><name>nPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>BaseIndex</name><operator>::</operator><name>Init</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>CommitInternal</name></name><parameter_list>(<parameter><decl><type><name>CDBBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name> <init>= <expr><name>m_next_filter_pos</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Flush current filter file to disk.</comment>
    <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>m_filter_fileseq</name><operator>-&gt;</operator><name>Open</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to open filter file %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileCommit</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>Get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to commit filter file %d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>DB_FILTER_POS</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>BaseIndex</name><operator>::</operator><name>CommitInternal</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>ReadFilterFromDisk</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>BlockFilter</name><modifier>&amp;</modifier></type> <name>filter</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAutoFile</name></type> <name>filein</name><argument_list>(<argument><expr><call><name><name>m_filter_fileseq</name><operator>-&gt;</operator><name>Open</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>filein</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>block_hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>encoded_filter</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><name>filein</name> <operator>&gt;&gt;</operator> <name>block_hash</name> <operator>&gt;&gt;</operator> <name>encoded_filter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>BlockFilter</name><argument_list>(<argument><expr><call><name>GetFilterType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block_hash</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>encoded_filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to deserialize block filter from disk: %s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></catch></try>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>WriteFilterToDisk</name></name><parameter_list>(<parameter><decl><type><name>FlatFilePos</name><modifier>&amp;</modifier></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockFilter</name><modifier>&amp;</modifier></type> <name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>GetFilterType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name> <init>=
        <expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></call> <operator>+</operator>
        <call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// If writing the filter would overflow the file, flush and move to the next one.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pos</name><operator>.</operator><name>nPos</name></name> <operator>+</operator> <name>data_size</name> <operator>&gt;</operator> <name>MAX_FLTR_FILE_SIZE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>last_file</name><argument_list>(<argument><expr><call><name><name>m_filter_fileseq</name><operator>-&gt;</operator><name>Open</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>last_file</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to open filter file %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TruncateFile</name><argument_list>(<argument><expr><call><name><name>last_file</name><operator>.</operator><name>Get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to truncate filter file %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FileCommit</name><argument_list>(<argument><expr><call><name><name>last_file</name><operator>.</operator><name>Get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to commit filter file %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pos</name><operator>.</operator><name>nPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Pre-allocate sufficient space for filter data.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>out_of_space</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_filter_fileseq</name><operator>-&gt;</operator><name>Allocate</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>, <argument><expr><name>out_of_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>out_of_space</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: out of disk space\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAutoFile</name></type> <name>fileout</name><argument_list>(<argument><expr><call><name><name>m_filter_fileseq</name><operator>-&gt;</operator><name>Open</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>fileout</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to open filter file %d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>nFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fileout</name> <operator>&lt;&lt;</operator> <call><name><name>filter</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>filter</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>WriteBlock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockUndo</name></type> <name>block_undo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>prev_header</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UndoReadFromDisk</name><argument_list>(<argument><expr><name>block_undo</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>read_out</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_db</name><operator>-&gt;</operator><name>Read</name></name><argument_list>(<argument><expr><call><name>DBHeightKey</name><argument_list>(<argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>read_out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>uint256</name></type> <name>expected_block_hash</name> <init>= <expr><call><name><name>pindex</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>read_out</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <name>expected_block_hash</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: previous block header belongs to unexpected block %s; expected %s"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>read_out</name><operator>.</operator><name>first</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected_block_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>prev_header</name> <operator>=</operator> <name><name>read_out</name><operator>.</operator><name>second</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>filter</name><argument_list>(<argument><expr><name>m_filter_type</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>block_undo</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes_written</name> <init>= <expr><call><name>WriteFilterToDisk</name><argument_list>(<argument><expr><name>m_next_filter_pos</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes_written</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>value</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>.</operator><name>second</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>.</operator><name>second</name><operator>.</operator><name>header</name></name> <operator>=</operator> <call><name><name>filter</name><operator>.</operator><name>ComputeHeader</name></name><argument_list>(<argument><expr><name>prev_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>.</operator><name>second</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>m_next_filter_pos</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_db</name><operator>-&gt;</operator><name>Write</name></name><argument_list>(<argument><expr><call><name>DBHeightKey</name><argument_list>(<argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>m_next_filter_pos</name><operator>.</operator><name>nPos</name></name> <operator>+=</operator> <name>bytes_written</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CopyHeightIndexToHashIndex</name><parameter_list>(<parameter><decl><type><name>CDBIterator</name><modifier>&amp;</modifier></type> <name>db_it</name></decl></parameter>, <parameter><decl><type><name>CDBBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>,
                                       <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>index_name</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>start_height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop_height</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DBHeightKey</name></type> <name>key</name><argument_list>(<argument><expr><name>start_height</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db_it</name><operator>.</operator><name>Seek</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>start_height</name></expr></init></decl>;</init> <condition><expr><name>height</name> <operator>&lt;=</operator> <name>stop_height</name></expr>;</condition> <incr><expr><operator>++</operator><name>height</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db_it</name><operator>.</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>key</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>height</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: unexpected key in %s: expected (%c, %d)"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>DB_BLOCK_HEIGHT</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>value</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db_it</name><operator>.</operator><name>GetValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: unable to read value in %s at key (%c, %d)"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>DB_BLOCK_HEIGHT</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><call><name>DBHashKey</name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>value</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>db_it</name><operator>.</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>Rewind</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>current_tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>new_tip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>current_tip</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>new_tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>new_tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CDBBatch</name></type> <name>batch</name><argument_list>(<argument><expr><operator>*</operator><name>m_db</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CDBIterator</name></expr></argument>&gt;</argument_list></name></type> <name>db_it</name><argument_list>(<argument><expr><call><name><name>m_db</name><operator>-&gt;</operator><name>NewIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// During a reorg, we need to copy all filters for blocks that are getting disconnected from the</comment>
    <comment type="line">// height index to the hash index so we can still find them when the height index entries are</comment>
    <comment type="line">// overwritten.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CopyHeightIndexToHashIndex</name><argument_list>(<argument><expr><operator>*</operator><name>db_it</name></expr></argument>, <argument><expr><name>batch</name></expr></argument>, <argument><expr><name>m_name</name></expr></argument>, <argument><expr><name><name>new_tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><name><name>current_tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.</comment>
    <comment type="line">// But since this creates new references to the filter, the position should get updated here</comment>
    <comment type="line">// atomically as well in case Commit fails.</comment>
    <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>DB_FILTER_POS</name></expr></argument>, <argument><expr><name>m_next_filter_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>m_db</name><operator>-&gt;</operator><name>WriteBatch</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>BaseIndex</name><operator>::</operator><name>Rewind</name></name><argument_list>(<argument><expr><name>current_tip</name></expr></argument>, <argument><expr><name>new_tip</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>LookupOne</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CDBWrapper</name><modifier>&amp;</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl></parameter>, <parameter><decl><type><name>DBVal</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// First check if the result is stored under the height index and the value there matches the</comment>
    <comment type="line">// block hash. This should be the case if the block is on the active chain.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>read_out</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><call><name>DBHeightKey</name><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>read_out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>read_out</name><operator>.</operator><name>first</name></name> <operator>==</operator> <call><name><name>block_index</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>read_out</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If value at the height index corresponds to an different block, the result will be stored in</comment>
    <comment type="line">// the hash index.</comment>
    <return>return <expr><call><name><name>db</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><call><name>DBHashKey</name><argument_list>(<argument><expr><call><name><name>block_index</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>LookupRange</name><parameter_list>(<parameter><decl><type><name>CDBWrapper</name><modifier>&amp;</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>index_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_height</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>stop_index</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>results</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>start_height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: start height (%d) is negative"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>start_height</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>start_height</name> <operator>&gt;</operator> <name><name>stop_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: start height (%d) is greater than stop height (%d)"</literal></expr></argument>,
                     <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>start_height</name></expr></argument>, <argument><expr><name><name>stop_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>results_size</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>stop_index</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name>start_height</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>values</name><argument_list>(<argument><expr><name>results_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DBHeightKey</name></type> <name>key</name><argument_list>(<argument><expr><name>start_height</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CDBIterator</name></expr></argument>&gt;</argument_list></name></type> <name>db_it</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>NewIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db_it</name><operator>-&gt;</operator><name>Seek</name></name><argument_list>(<argument><expr><call><name>DBHeightKey</name><argument_list>(<argument><expr><name>start_height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>start_height</name></expr></init></decl>;</init> <condition><expr><name>height</name> <operator>&lt;=</operator> <name><name>stop_index</name><operator>-&gt;</operator><name>nHeight</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>height</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db_it</name><operator>-&gt;</operator><name>Valid</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>db_it</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>key</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name>height</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>height</name> <operator>-</operator> <name>start_height</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db_it</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: unable to read value in %s at key (%c, %d)"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>DB_BLOCK_HEIGHT</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>db_it</name><operator>-&gt;</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>results_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Iterate backwards through block indexes collecting results in order to access the block hash</comment>
    <comment type="line">// of each entry in case we need to look it up in the hash index.</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name> <init>= <expr><name>stop_index</name></expr></init></decl>;</init>
         <condition><expr><name>block_index</name> <operator>&amp;&amp;</operator> <name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&gt;=</operator> <name>start_height</name></expr>;</condition>
         <incr><expr><name>block_index</name> <operator>=</operator> <name><name>block_index</name><operator>-&gt;</operator><name>pprev</name></name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>block_hash</name> <init>= <expr><call><name><name>block_index</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>block_index</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name>start_height</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>block_hash</name> <operator>==</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><call><name>DBHashKey</name><argument_list>(<argument><expr><name>block_hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: unable to read value in %s at key (%c, %s)"</literal></expr></argument>,
                         <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>index_name</name></expr></argument>, <argument><expr><name>DB_BLOCK_HASH</name></expr></argument>, <argument><expr><call><name><name>block_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>LookupFilter</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl></parameter>, <parameter><decl><type><name>BlockFilter</name><modifier>&amp;</modifier></type> <name>filter_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>DBVal</name></type> <name>entry</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupOne</name><argument_list>(<argument><expr><operator>*</operator><name>m_db</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>ReadFilterFromDisk</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>filter_out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>LookupFilterHeader</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl></parameter>, <parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>header_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>DBVal</name></type> <name>entry</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupOne</name><argument_list>(<argument><expr><operator>*</operator><name>m_db</name></expr></argument>, <argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>header_out</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>LookupFilterRange</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start_height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>stop_index</name></decl></parameter>,
                                         <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilter</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>filters_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupRange</name><argument_list>(<argument><expr><operator>*</operator><name>m_db</name></expr></argument>, <argument><expr><name>m_name</name></expr></argument>, <argument><expr><name>start_height</name></expr></argument>, <argument><expr><name>stop_index</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>filters_out</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>filter_pos_it</name> <init>= <expr><call><name><name>filters_out</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFilterFromDisk</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><operator>*</operator><name>filter_pos_it</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>filter_pos_it</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BlockFilterIndex</name><operator>::</operator><name>LookupFilterHashRange</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start_height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>stop_index</name></decl></parameter>,
                                             <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>hashes_out</name></decl></parameter>)</parameter_list> <specifier>const</specifier>

<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>DBVal</name></expr></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupRange</name><argument_list>(<argument><expr><operator>*</operator><name>m_db</name></expr></argument>, <argument><expr><name>m_name</name></expr></argument>, <argument><expr><name>start_height</name></expr></argument>, <argument><expr><name>stop_index</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>hashes_out</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hashes_out</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>hashes_out</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>BlockFilterIndex</name><modifier>*</modifier></type> <name>GetBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>g_filter_indexes</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>it</name> <operator>!=</operator> <call><name><name>g_filter_indexes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ForEachBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><name>BlockFilterIndex</name><modifier>&amp;</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>entry</name> <operator>:</operator> <name>g_filter_indexes</name></expr></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>InitBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>,
                          <parameter><decl><type><name>size_t</name></type> <name>n_cache_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_memory</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_wipe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name><name>g_filter_indexes</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>piecewise_construct</name></name></expr></argument>,
                                           <argument><expr><call><name><name>std</name><operator>::</operator><name>forward_as_tuple</name></name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name><name>std</name><operator>::</operator><name>forward_as_tuple</name></name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>,
                                                                 <argument><expr><name>n_cache_size</name></expr></argument>, <argument><expr><name>f_memory</name></expr></argument>, <argument><expr><name>f_wipe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>result</name><operator>.</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DestroyBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>g_filter_indexes</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DestroyAllBlockFilterIndexes</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>g_filter_indexes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
