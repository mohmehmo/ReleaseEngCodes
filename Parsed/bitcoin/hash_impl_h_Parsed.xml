<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/hash_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2014 Pieter Wuille                                   *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_HASH_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_HASH_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((z) ^ ((x) &amp; ((y) ^ (z))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y)) | ((z) &amp; ((x) | (y))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 2 | (x) &lt;&lt; 30) ^ ((x) &gt;&gt; 13 | (x) &lt;&lt; 19) ^ ((x) &gt;&gt; 22 | (x) &lt;&lt; 10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 6 | (x) &lt;&lt; 26) ^ ((x) &gt;&gt; 11 | (x) &lt;&lt; 21) ^ ((x) &gt;&gt; 25 | (x) &lt;&lt; 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 7 | (x) &lt;&lt; 25) ^ ((x) &gt;&gt; 18 | (x) &lt;&lt; 14) ^ ((x) &gt;&gt; 3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; 17 | (x) &lt;&lt; 15) ^ ((x) &gt;&gt; 19 | (x) &lt;&lt; 13) ^ ((x) &gt;&gt; 10))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Round</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { \
    uint32_t t1 = (h) + Sigma1(e) + Ch((e), (f), (g)) + (k) + (w); \
    uint32_t t2 = Sigma0(a) + Maj((a), (b), (c)); \
    (d) += t1; \
    (h) = t1 + t2; \
} while(0)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((p) &amp; 0xFF) &lt;&lt; 24) | (((p) &amp; 0xFF00) &lt;&lt; 8) | (((p) &amp; 0xFF0000) &gt;&gt; 8) | (((p) &amp; 0xFF000000) &gt;&gt; 24))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x6a09e667ul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xbb67ae85ul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3c6ef372ul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xa54ff53aul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x510e527ful</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x9b05688cul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x1f83d9abul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x5be0cd19ul</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Perform one SHA-256 transformation, processing 16 big endian 32-bit words. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>*</modifier></type> <name>chunk</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>g</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>w0</name></decl>, <decl><type ref="prev"/><name>w1</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>w3</name></decl>, <decl><type ref="prev"/><name>w4</name></decl>, <decl><type ref="prev"/><name>w5</name></decl>, <decl><type ref="prev"/><name>w6</name></decl>, <decl><type ref="prev"/><name>w7</name></decl>, <decl><type ref="prev"/><name>w8</name></decl>, <decl><type ref="prev"/><name>w9</name></decl>, <decl><type ref="prev"/><name>w10</name></decl>, <decl><type ref="prev"/><name>w11</name></decl>, <decl><type ref="prev"/><name>w12</name></decl>, <decl><type ref="prev"/><name>w13</name></decl>, <decl><type ref="prev"/><name>w14</name></decl>, <decl><type ref="prev"/><name>w15</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0x428a2f98</literal></expr></argument>, <argument><expr><name>w0</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0x71374491</literal></expr></argument>, <argument><expr><name>w1</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0xb5c0fbcf</literal></expr></argument>, <argument><expr><name>w2</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xe9b5dba5</literal></expr></argument>, <argument><expr><name>w3</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x3956c25b</literal></expr></argument>, <argument><expr><name>w4</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x59f111f1</literal></expr></argument>, <argument><expr><name>w5</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x923f82a4</literal></expr></argument>, <argument><expr><name>w6</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0xab1c5ed5</literal></expr></argument>, <argument><expr><name>w7</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0xd807aa98</literal></expr></argument>, <argument><expr><name>w8</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0x12835b01</literal></expr></argument>, <argument><expr><name>w9</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x243185be</literal></expr></argument>, <argument><expr><name>w10</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0x550c7dc3</literal></expr></argument>, <argument><expr><name>w11</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x72be5d74</literal></expr></argument>, <argument><expr><name>w12</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x80deb1fe</literal></expr></argument>, <argument><expr><name>w13</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x9bdc06a7</literal></expr></argument>, <argument><expr><name>w14</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0xc19bf174</literal></expr></argument>, <argument><expr><name>w15</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>chunk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0xe49b69c1</literal></expr></argument>, <argument><expr><name>w0</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w9</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0xefbe4786</literal></expr></argument>, <argument><expr><name>w1</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w10</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x0fc19dc6</literal></expr></argument>, <argument><expr><name>w2</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w11</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0x240ca1cc</literal></expr></argument>, <argument><expr><name>w3</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w12</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x2de92c6f</literal></expr></argument>, <argument><expr><name>w4</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w13</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x4a7484aa</literal></expr></argument>, <argument><expr><name>w5</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w14</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x5cb0a9dc</literal></expr></argument>, <argument><expr><name>w6</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w15</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0x76f988da</literal></expr></argument>, <argument><expr><name>w7</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w0</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0x983e5152</literal></expr></argument>, <argument><expr><name>w8</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w1</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0xa831c66d</literal></expr></argument>, <argument><expr><name>w9</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w2</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0xb00327c8</literal></expr></argument>, <argument><expr><name>w10</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w3</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xbf597fc7</literal></expr></argument>, <argument><expr><name>w11</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w4</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0xc6e00bf3</literal></expr></argument>, <argument><expr><name>w12</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w5</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0xd5a79147</literal></expr></argument>, <argument><expr><name>w13</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w6</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x06ca6351</literal></expr></argument>, <argument><expr><name>w14</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w7</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0x14292967</literal></expr></argument>, <argument><expr><name>w15</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w8</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0x27b70a85</literal></expr></argument>, <argument><expr><name>w0</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w9</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0x2e1b2138</literal></expr></argument>, <argument><expr><name>w1</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w10</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x4d2c6dfc</literal></expr></argument>, <argument><expr><name>w2</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w11</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0x53380d13</literal></expr></argument>, <argument><expr><name>w3</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w12</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x650a7354</literal></expr></argument>, <argument><expr><name>w4</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w13</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x766a0abb</literal></expr></argument>, <argument><expr><name>w5</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w14</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x81c2c92e</literal></expr></argument>, <argument><expr><name>w6</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w15</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0x92722c85</literal></expr></argument>, <argument><expr><name>w7</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w0</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0xa2bfe8a1</literal></expr></argument>, <argument><expr><name>w8</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w1</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0xa81a664b</literal></expr></argument>, <argument><expr><name>w9</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w2</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0xc24b8b70</literal></expr></argument>, <argument><expr><name>w10</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w3</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0xc76c51a3</literal></expr></argument>, <argument><expr><name>w11</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w4</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0xd192e819</literal></expr></argument>, <argument><expr><name>w12</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w5</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0xd6990624</literal></expr></argument>, <argument><expr><name>w13</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w6</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0xf40e3585</literal></expr></argument>, <argument><expr><name>w14</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w7</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0x106aa070</literal></expr></argument>, <argument><expr><name>w15</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w8</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0x19a4c116</literal></expr></argument>, <argument><expr><name>w0</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w9</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0x1e376c08</literal></expr></argument>, <argument><expr><name>w1</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w10</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x2748774c</literal></expr></argument>, <argument><expr><name>w2</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w11</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0x34b0bcb5</literal></expr></argument>, <argument><expr><name>w3</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w12</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x391c0cb3</literal></expr></argument>, <argument><expr><name>w4</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w2</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w13</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x4ed8aa4a</literal></expr></argument>, <argument><expr><name>w5</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w3</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w14</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0x5b9cca4f</literal></expr></argument>, <argument><expr><name>w6</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w4</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w15</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0x682e6ff3</literal></expr></argument>, <argument><expr><name>w7</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w5</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w0</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0x748f82ee</literal></expr></argument>, <argument><expr><name>w8</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w6</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w1</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">0x78a5636f</literal></expr></argument>, <argument><expr><name>w9</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w7</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w2</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0x84c87814</literal></expr></argument>, <argument><expr><name>w10</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w8</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w3</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0x8cc70208</literal></expr></argument>, <argument><expr><name>w11</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w9</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w4</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0x90befffa</literal></expr></argument>, <argument><expr><name>w12</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w10</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w5</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0xa4506ceb</literal></expr></argument>, <argument><expr><name>w13</name> <operator>+=</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w11</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w6</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w14</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0xbef9a3f7</literal></expr></argument>, <argument><expr><name>w14</name> <operator>+</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w12</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w7</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w15</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Round</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0xc67178f2</literal></expr></argument>, <argument><expr><name>w15</name> <operator>+</operator> <call><name>sigma1</name><argument_list>(<argument><expr><name>w13</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w8</name> <operator>+</operator> <call><name>sigma0</name><argument_list>(<argument><expr><name>w0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_write</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>bufsize</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Fill the buffer, and process it. */</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>chunk_len</name> <init>= <expr><literal type="number">64</literal> <operator>-</operator> <name>bufsize</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>hash</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>+</operator> <name>bufsize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>chunk_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>chunk_len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_transform</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>hash</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Fill the buffer with what remains. */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>hash</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator> <operator>+</operator> <name>bufsize</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>sizedesc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sizedesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sizedesc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">119</literal> <operator>-</operator> <operator>(</operator><name><name>hash</name><operator>-&gt;</operator><name>bytes</name></name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">64</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>sizedesc</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hash</name><operator>-&gt;</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out32</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rkey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rkey</name> <operator>+</operator> <name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_sha256</name></type> <name>sha256</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256</name></expr></argument>, <argument><expr><name>rkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rkey</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>outer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>rkey</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <literal type="number">0x5c</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>outer</name></name></expr></argument>, <argument><expr><name>rkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secp256k1_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>rkey</name><index>[<expr><name>n</name></expr>]</index></name> <operator>^=</operator> <literal type="number">0x5c</literal> <operator>^</operator> <literal type="number">0x36</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>rkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rkey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_write</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_hmac_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_hmac_sha256</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out32</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>inner</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>outer</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hash</name><operator>-&gt;</operator><name>outer</name></name></expr></argument>, <argument><expr><name>out32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_initialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_hmac_sha256</name></type> <name>hmac</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zero</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>one</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* RFC6979 3.2.b. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* RFC6979 3.2.c. */</comment>

    <comment type="block">/* RFC6979 3.2.d. */</comment>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* RFC6979 3.2.f. */</comment>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_generate</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* RFC6979 3.2.h. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zero</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rng</name><operator>-&gt;</operator><name>retry</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_hmac_sha256</name></type> <name>hmac</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>outlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_hmac_sha256</name></type> <name>hmac</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name>outlen</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_hmac_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>outlen</name> <operator>-=</operator> <name>now</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_rfc6979_hmac_sha256_finalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_rfc6979_hmac_sha256</name> <modifier>*</modifier></type><name>rng</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>rng</name><operator>-&gt;</operator><name>v</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rng</name><operator>-&gt;</operator><name>retry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BE32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Round</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sigma1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sigma0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sigma1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sigma0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Maj</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Ch</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_HASH_IMPL_H */</comment>
</unit>
