<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/translation.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_TRANSLATION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_TRANSLATION_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Bilingual messages:
 *   - in GUI: user's native language + untranslated (i.e. English)
 *   - in log and stderr: untranslated only
 */</comment>
<struct>struct <name>bilingual_str</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>original</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>translated</name></expr>;</expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>namespace</name></type> <name>tinyformat</name> <block>{<block_content>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
<name>bilingual_str</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bilingual_str</name><modifier>&amp;</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>bilingual_str</name><block>{<expr><call><name>format</name><argument_list>(<argument><expr><name><name>fmt</name><operator>.</operator><name>original</name></name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>, <macro><name>format</name><argument_list>(<argument>fmt.translated</argument>, <argument>args...</argument>)</argument_list></macro>}</block></expr>;</return>
</block_content>}</block></function>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace tinyformat</comment>

<comment type="block" format="doxygen">/** Translate a message to the native language of the user. */</comment>
<expr_stmt><expr><specifier>const</specifier> <specifier>extern</specifier> <name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>G_TRANSLATION_FUN</name></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Translation function.
 * If no translation function is set, simply return the input.
 */</comment>
<function><type><specifier>inline</specifier> <name>bilingual_str</name></type> <name>_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>bilingual_str</name><block>{<expr><name>psz</name></expr>, <expr><name>G_TRANSLATION_FUN</name> <operator>?</operator> <operator>(</operator><name>G_TRANSLATION_FUN</name><operator>)</operator><operator>(</operator><name>psz</name><operator>)</operator> <operator>:</operator> <name>psz</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_TRANSLATION_H</comment>
</unit>
