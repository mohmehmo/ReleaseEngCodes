<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/crypter.cpp"><comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/crypter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/aes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/sha512.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name><name>CCrypter</name><operator>::</operator><name>BytesToKeySHA512AES</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>chSalt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>strKeyData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <comment type="line">// This mimics the behavior of openssl's EVP_BytesToKey with an aes256cbc</comment>
    <comment type="line">// cipher and sha512 message digest. Because sha512's output size (64b) is</comment>
    <comment type="line">// greater than the aes256 block size (16b) + aes256 key size (32b),</comment>
    <comment type="line">// there's no need to process more than once (D_0).</comment>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>count</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name><name>CSHA512</name><operator>::</operator><name>OUTPUT_SIZE</name></name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CSHA512</name></type> <name>di</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>strKeyData</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strKeyData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><call><name><name>chSalt</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chSalt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>Finalize</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>di</name><operator>.</operator><name>Reset</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>WALLET_CRYPTO_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>WALLET_CRYPTO_KEY_SIZE</name></expr></argument>, <argument><expr><name>WALLET_CRYPTO_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memory_cleanse</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>WALLET_CRYPTO_KEY_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCrypter</name><operator>::</operator><name>SetKeyFromPassphrase</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>strKeyData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>chSalt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>nRounds</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>nDerivationMethod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nRounds</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>chSalt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WALLET_CRYPTO_SALT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nDerivationMethod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>BytesToKeySHA512AES</name><argument_list>(<argument><expr><name>chSalt</name></expr></argument>, <argument><expr><name>strKeyData</name></expr></argument>, <argument><expr><name>nRounds</name></expr></argument>, <argument><expr><call><name><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>WALLET_CRYPTO_KEY_SIZE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memory_cleanse</name><argument_list>(<argument><expr><call><name><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memory_cleanse</name><argument_list>(<argument><expr><call><name><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchIV</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fKeySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCrypter</name><operator>::</operator><name>SetKey</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>chNewKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>chNewIV</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>chNewKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WALLET_CRYPTO_KEY_SIZE</name> <operator>||</operator> <call><name><name>chNewIV</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WALLET_CRYPTO_IV_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chNewKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chNewKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chNewIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chNewIV</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fKeySet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCrypter</name><operator>::</operator><name>Encrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vchPlaintext</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCiphertext</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fKeySet</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// max ciphertext len for a n bytes of plaintext is</comment>
    <comment type="line">// n + AES_BLOCKSIZE bytes</comment>
    <expr_stmt><expr><call><name><name>vchCiphertext</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>AES_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AES256CBCEncrypt</name></type> <name>enc</name><argument_list>(<argument><expr><call><name><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nLen</name> <init>= <expr><call><name><name>enc</name><operator>.</operator><name>Encrypt</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vchPlaintext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchCiphertext</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>nLen</name> <operator>&lt;</operator> <call><name><name>vchPlaintext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vchCiphertext</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CCrypter</name><operator>::</operator><name>Decrypt</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCiphertext</name></decl></parameter>, <parameter><decl><type><name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vchPlaintext</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fKeySet</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// plaintext will always be equal to or lesser than length of ciphertext</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nLen</name> <init>= <expr><call><name><name>vchCiphertext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>AES256CBCDecrypt</name></type> <name>dec</name><argument_list>(<argument><expr><call><name><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>nLen</name> <operator>=</operator> <call><name><name>dec</name><operator>.</operator><name>Decrypt</name></name><argument_list>(<argument><expr><call><name><name>vchCiphertext</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchCiphertext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vchPlaintext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>nLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>EncryptSecret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vMasterKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name> <modifier>&amp;</modifier></type><name>vchPlaintext</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>nIV</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vchCiphertext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CCrypter</name></type> <name>cKeyCrypter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>chIV</name><argument_list>(<argument><expr><name>WALLET_CRYPTO_IV_SIZE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>chIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIV</name></expr></argument>, <argument><expr><name>WALLET_CRYPTO_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>cKeyCrypter</name><operator>.</operator><name>SetKey</name></name><argument_list>(<argument><expr><name>vMasterKey</name></expr></argument>, <argument><expr><name>chIV</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>cKeyCrypter</name><operator>.</operator><name>Encrypt</name></name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>CKeyingMaterial</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vchPlaintext</name><operator>)</operator></expr></argument>, <argument><expr><name>vchCiphertext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecryptSecret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vMasterKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCiphertext</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>nIV</name></decl></parameter>, <parameter><decl><type><name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vchPlaintext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CCrypter</name></type> <name>cKeyCrypter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>chIV</name><argument_list>(<argument><expr><name>WALLET_CRYPTO_IV_SIZE</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>chIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nIV</name></expr></argument>, <argument><expr><name>WALLET_CRYPTO_IV_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>cKeyCrypter</name><operator>.</operator><name>SetKey</name></name><argument_list>(<argument><expr><name>vMasterKey</name></expr></argument>, <argument><expr><name>chIV</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>cKeyCrypter</name><operator>.</operator><name>Decrypt</name></name><argument_list>(<argument><expr><name>vchCiphertext</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>CKeyingMaterial</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vchPlaintext</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecryptKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vMasterKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCryptedSecret</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>vchPubKey</name></decl></parameter>, <parameter><decl><type><name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKeyingMaterial</name></type> <name>vchSecret</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>DecryptSecret</name><argument_list>(<argument><expr><name>vMasterKey</name></expr></argument>, <argument><expr><name>vchCryptedSecret</name></expr></argument>, <argument><expr><call><name><name>vchPubKey</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchSecret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>vchSecret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><call><name><name>vchSecret</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchSecret</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchPubKey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>key</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>vchPubKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
