<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoin.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoingui.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/clientmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/intro.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/networkstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/splashscreen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/utilitydialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/winshutdownmonitor.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/paymentserver.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletcontroller.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;noui.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threadnames.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLibraryInfo&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLocale&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTranslator&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_STATICPLUGIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtPlugin&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_XCB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QXcbIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QWindowsIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QT_QPA_PLATFORM_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><call><name>Q_IMPORT_PLUGIN</name><argument_list>(<argument><expr><name>QCocoaIntegrationPlugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Declare meta types used for QMetaObject::invokeMethod</comment>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>bool*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>CAmount</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>uint256</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>QString</name></type> <name>GetLangTerritory</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <comment type="line">// Get desired locale (e.g. "de_DE")</comment>
    <comment type="line">// 1) System default language</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>lang_territory</name> <init>= <expr><call><name><name>QLocale</name><operator>::</operator><name>system</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// 2) Language from QSettings</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>lang_territory_qsettings</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>lang_territory_qsettings</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lang_territory</name> <operator>=</operator> <name>lang_territory_qsettings</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line">// 3) -lang command line argument</comment>
    <expr_stmt><expr><name>lang_territory</name> <operator>=</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-lang"</literal></expr></argument>, <argument><expr><call><name><name>lang_territory</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>lang_territory</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Set up translations */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initTranslations</name><parameter_list>(<parameter><decl><type><name>QTranslator</name> <modifier>&amp;</modifier></type><name>qtTranslatorBase</name></decl></parameter>, <parameter><decl><type><name>QTranslator</name> <modifier>&amp;</modifier></type><name>qtTranslator</name></decl></parameter>, <parameter><decl><type><name>QTranslator</name> <modifier>&amp;</modifier></type><name>translatorBase</name></decl></parameter>, <parameter><decl><type><name>QTranslator</name> <modifier>&amp;</modifier></type><name>translator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Remove old translators</comment>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>removeTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>qtTranslatorBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>removeTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>qtTranslator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>removeTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>translatorBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>removeTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>translator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get desired locale (e.g. "de_DE")</comment>
    <comment type="line">// 1) System default language</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>lang_territory</name> <init>= <expr><call><name>GetLangTerritory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Convert to "de" only by truncating "_DE"</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>lang</name> <init>= <expr><name>lang_territory</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>lang</name><operator>.</operator><name>truncate</name></name><argument_list>(<argument><expr><call><name><name>lang_territory</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Load language files for configured locale:</comment>
    <comment type="line">// - First load the translator for the base language, without territory</comment>
    <comment type="line">// - Then load the more specific locale translator</comment>

    <comment type="line">// Load e.g. qt_de.qm</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>qtTranslatorBase</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="string">"qt_"</literal> <operator>+</operator> <name>lang</name></expr></argument>, <argument><expr><call><name><name>QLibraryInfo</name><operator>::</operator><name>location</name></name><argument_list>(<argument><expr><name><name>QLibraryInfo</name><operator>::</operator><name>TranslationsPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>installTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>qtTranslatorBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Load e.g. qt_de_DE.qm</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>qtTranslator</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="string">"qt_"</literal> <operator>+</operator> <name>lang_territory</name></expr></argument>, <argument><expr><call><name><name>QLibraryInfo</name><operator>::</operator><name>location</name></name><argument_list>(<argument><expr><name><name>QLibraryInfo</name><operator>::</operator><name>TranslationsPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>installTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>qtTranslator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Load e.g. bitcoin_de.qm (shortcut "de" needs to be defined in bitcoin.qrc)</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>translatorBase</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><literal type="string">":/translations/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>installTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>translatorBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Load e.g. bitcoin_de_DE.qm (shortcut "de_DE" needs to be defined in bitcoin.qrc)</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>translator</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>lang_territory</name></expr></argument>, <argument><expr><literal type="string">":/translations/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>installTranslator</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>translator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* qDebug() message handler --&gt; debug.log */</comment>
<function><type><name>void</name></type> <name>DebugMessageHandler</name><parameter_list>(<parameter><decl><type><name>QtMsgType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QMessageLogContext</name><modifier>&amp;</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>QtDebugMsg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>QT</name></name></expr></argument>, <argument><expr><literal type="string">"GUI: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"GUI: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<constructor><name><name>BitcoinCore</name><operator>::</operator><name>BitcoinCore</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QObject</name><argument_list>()</argument_list></call>, <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>BitcoinCore</name><operator>::</operator><name>handleRunawayException</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Runaway exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>runawayException</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>m_node</name><operator>.</operator><name>getWarnings</name></name><argument_list>(<argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinCore</name><operator>::</operator><name>initialize</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <try>try
    <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Running initialization in thread"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>util</name><operator>::</operator><name>ThreadRename</name></name><argument_list>(<argument><expr><literal type="string">"qt-init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>rv</name> <init>= <expr><call><name><name>m_node</name><operator>.</operator><name>appInitMain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>initializeResult</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleRunawayException</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleRunawayException</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinCore</name><operator>::</operator><name>shutdown</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <try>try
    <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Running Shutdown in thread"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>appShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Shutdown finished"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>shutdownResult</name><argument_list>()</argument_list></decl>;</decl_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleRunawayException</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>handleRunawayException</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>qt_argc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>qt_argv</name> <init>= <expr><literal type="string">"bitcoin-qt"</literal></expr></init></decl>;</decl_stmt>

<constructor><name><name>BitcoinApplication</name><operator>::</operator><name>BitcoinApplication</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>QApplication</name><argument_list>(<argument><expr><name>qt_argc</name></expr></argument>, <argument><expr><cast type="const">const_cast<argument_list type="generic">&lt;<argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>qt_argv</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call>,
    <call><name>coreThread</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>,
    <call><name>optionsModel</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>clientModel</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>window</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>pollShutdownTimer</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>returnValue</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>,
    <call><name>platformStyle</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>setQuitOnLastWindowClosed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>setupPlatformStyle</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// UI per-platform customization</comment>
    <comment type="line">// This must be done inside the BitcoinApplication constructor, or after it, because</comment>
    <comment type="line">// PlatformStyle::instantiate requires a QApplication</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>platformName</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>platformName</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-uiplatform"</literal></expr></argument>, <argument><expr><name><name>BitcoinGUI</name><operator>::</operator><name>DEFAULT_UIPLATFORM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>platformStyle</name> <operator>=</operator> <call><name><name>PlatformStyle</name><operator>::</operator><name>instantiate</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>platformName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>platformStyle</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// Fall back to "other" if specified name not found</comment>
        <expr_stmt><expr><name>platformStyle</name> <operator>=</operator> <call><name><name>PlatformStyle</name><operator>::</operator><name>instantiate</name></name><argument_list>(<argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>platformStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<destructor><name><name>BitcoinApplication</name><operator>::</operator><name>~BitcoinApplication</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>coreThread</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Stopping thread"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coreThread</name><operator>-&gt;</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coreThread</name><operator>-&gt;</operator><name>wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Stopped thread"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>delete</operator> <name>window</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>window</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>optionsModel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>optionsModel</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>platformStyle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>platformStyle</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
</block_content>}</block></destructor>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>createPaymentServer</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>paymentServer</name> <operator>=</operator> <operator>new</operator> <call><name>PaymentServer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>createOptionsModel</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>resetSettings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>optionsModel</name> <operator>=</operator> <operator>new</operator> <call><name>OptionsModel</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>resetSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>createWindow</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NetworkStyle</name> <modifier>*</modifier></type><name>networkStyle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>window</name> <operator>=</operator> <operator>new</operator> <call><name>BitcoinGUI</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>platformStyle</name></expr></argument>, <argument><expr><name>networkStyle</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pollShutdownTimer</name> <operator>=</operator> <operator>new</operator> <call><name>QTimer</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>pollShutdownTimer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTimer</name><operator>::</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>detectShutdown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>createSplashScreen</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NetworkStyle</name> <modifier>*</modifier></type><name>networkStyle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SplashScreen</name> <modifier>*</modifier></type><name>splash</name> <init>= <expr><operator>new</operator> <call><name>SplashScreen</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>networkStyle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// We don't hold a direct pointer to the splash screen after creation, but the splash</comment>
    <comment type="line">// screen will take care of deleting itself when finish() happens.</comment>
    <expr_stmt><expr><call><name><name>splash</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>splashFinished</name></name></expr></argument>, <argument><expr><name>splash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SplashScreen</name><operator>::</operator><name>finish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>requestedShutdown</name></name></expr></argument>, <argument><expr><name>splash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QWidget</name><operator>::</operator><name>close</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>baseInitialize</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>m_node</name><operator>.</operator><name>baseInitialize</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>startThread</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>coreThread</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>coreThread</name> <operator>=</operator> <operator>new</operator> <call><name>QThread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BitcoinCore</name> <modifier>*</modifier></type><name>executor</name> <init>= <expr><operator>new</operator> <call><name>BitcoinCore</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>-&gt;</operator><name>moveToThread</name></name><argument_list>(<argument><expr><name>coreThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*  communication to and from thread */</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinCore</name><operator>::</operator><name>initializeResult</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>initializeResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinCore</name><operator>::</operator><name>shutdownResult</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>shutdownResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinCore</name><operator>::</operator><name>runawayException</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>handleRunawayException</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>requestedInitialize</name></name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinCore</name><operator>::</operator><name>initialize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinApplication</name><operator>::</operator><name>requestedShutdown</name></name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinCore</name><operator>::</operator><name>shutdown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*  make sure executor object is deleted in its own thread */</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>coreThread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QThread</name><operator>::</operator><name>finished</name></name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QObject</name><operator>::</operator><name>deleteLater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>coreThread</name><operator>-&gt;</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>parameterSetup</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Default printtoconsole to false for the GUI. GUI programs should not</comment>
    <comment type="line">// print to the console unnecessarily.</comment>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-printtoconsole"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>initLogging</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>initParameterInteraction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>SetPrune</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>prune</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name><name>optionsModel</name><operator>-&gt;</operator><name>SetPrune</name></name><argument_list>(<argument><expr><name>prune</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>requestInitialize</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Requesting initialize"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>requestedInitialize</name><argument_list>()</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>requestShutdown</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Show a simple window indicating shutdown status</comment>
    <comment type="line">// Do this first as some of the steps may take some time below,</comment>
    <comment type="line">// for example the RPC console may still be executing a command.</comment>
    <expr_stmt><expr><call><name><name>shutdownWindow</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><call><name><name>ShutdownWindow</name><operator>::</operator><name>showShutdownWindow</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Requesting shutdown"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Must disconnect node signals otherwise current thread can deadlock since</comment>
    <comment type="line">// no event loop is running.</comment>
    <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>unsubscribeFromCoreSignals</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Request node shutdown, which can interrupt long operations, like</comment>
    <comment type="line">// rescanning a wallet.</comment>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>startShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Unsetting the client model can cause the current thread to wait for node</comment>
    <comment type="line">// to complete an operation, like wait for a RPC execution to complete.</comment>
    <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pollShutdownTimer</name><operator>-&gt;</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>delete</operator> <name>clientModel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>clientModel</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>

    <comment type="line">// Request shutdown from core thread</comment>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>requestedShutdown</name><argument_list>()</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>initializeResult</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>__func__</name> <operator>&lt;&lt;</operator> <literal type="string">": Initialization result: "</literal> <operator>&lt;&lt;</operator> <name>success</name></expr>;</expr_stmt>
    <comment type="line">// Set exit result.</comment>
    <expr_stmt><expr><name>returnValue</name> <operator>=</operator> <ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>EXIT_SUCCESS</name></expr> </then><else>: <expr><name>EXIT_FAILURE</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>success</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Log this only after AppInitMain finishes, as then logging setup is guaranteed complete</comment>
        <expr_stmt><expr><call><name>qInfo</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Platform customization:"</literal> <operator>&lt;&lt;</operator> <call><name><name>platformStyle</name><operator>-&gt;</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>clientModel</name> <operator>=</operator> <operator>new</operator> <call><name>ClientModel</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>optionsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><name>clientModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><call><name><name>WalletModel</name><operator>::</operator><name>isWalletEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>m_wallet_controller</name> <operator>=</operator> <operator>new</operator> <call><name>WalletController</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>platformStyle</name></expr></argument>, <argument><expr><name>optionsModel</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>setWalletController</name></name><argument_list>(<argument><expr><name>m_wallet_controller</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>paymentServer</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>paymentServer</name><operator>-&gt;</operator><name>setOptionsModel</name></name><argument_list>(<argument><expr><name>optionsModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

        <comment type="line">// If -min option passed, start window minimized (iconified) or minimized to tray</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-min"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getMinimizeToTray</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>window</name><operator>-&gt;</operator><name>hasTrayIcon</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// do nothing as the window is managed by the tray icon</comment>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>showMinimized</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>splashFinished</name><argument_list>()</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>windowShown</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <comment type="line">// Now that initialization/startup is done, process any command-line</comment>
        <comment type="line">// bitcoin: URIs or payment requests:</comment>
        <if_stmt><if>if <condition>(<expr><name>paymentServer</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>paymentServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PaymentServer</name><operator>::</operator><name>receivedPaymentRequest</name></name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>handlePaymentRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinGUI</name><operator>::</operator><name>receivedURI</name></name></expr></argument>, <argument><expr><name>paymentServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PaymentServer</name><operator>::</operator><name>handleURIOrFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>paymentServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PaymentServer</name><operator>::</operator><name>message</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>window</name><operator>-&gt;</operator><name>message</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>paymentServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PaymentServer</name><operator>::</operator><name>uiReady</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name><name>pollShutdownTimer</name><operator>-&gt;</operator><name>start</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>splashFinished</name><argument_list>()</argument_list></decl>;</decl_stmt> <comment type="line">// Make sure splash screen doesn't stick around during shutdown</comment>
        <expr_stmt><expr><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Exit first main loop invocation</comment>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>shutdownResult</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>quit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Exit second main loop invocation after shutdown finished</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>handleRunawayException</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"Runaway exception"</literal></expr></argument>, <argument><expr><call><name><name>BitcoinGUI</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"A fatal error occurred. Bitcoin can no longer continue safely and will quit."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>::</operator><name>exit</name></name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>WId</name></type> <name><name>BitcoinApplication</name><operator>::</operator><name>getMainWinId</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>window</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name><name>window</name><operator>-&gt;</operator><name>winId</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupUIArgs</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-choosedatadir"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Choose data directory on startup (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHOOSE_DATADIR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-lang=&lt;lang&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Set language, for example \"de_DE\" (default: system locale)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-min"</literal></expr></argument>, <argument><expr><literal type="string">"Start minimized"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-resetguisettings"</literal></expr></argument>, <argument><expr><literal type="string">"Reset all settings changed in the GUI"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-splash"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Show splash screen on startup (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_SPLASHSCREEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-uiplatform"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Select platform to customize UI for (one of windows, macosx, other; default: %s)"</literal></expr></argument>, <argument><expr><name><name>BitcoinGUI</name><operator>::</operator><name>DEFAULT_UIPLATFORM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>GUI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>GuiMain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>WinCmdLineArgs</name></name></type> <name>winArgs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>winArgs</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>SetupEnvironment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>util</name><operator>::</operator><name>ThreadSetInternalName</name></name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Node</name></name></expr></argument>&gt;</argument_list></name></type> <name>node</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Subscribe to global signals from core</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Handler</name></name></expr></argument>&gt;</argument_list></name></type> <name>handler_message_box</name> <init>= <expr><call><name><name>node</name><operator>-&gt;</operator><name>handleMessageBox</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeMessageBox</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Handler</name></name></expr></argument>&gt;</argument_list></name></type> <name>handler_question</name> <init>= <expr><call><name><name>node</name><operator>-&gt;</operator><name>handleQuestion</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeQuestion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Handler</name></name></expr></argument>&gt;</argument_list></name></type> <name>handler_init_message</name> <init>= <expr><call><name><name>node</name><operator>-&gt;</operator><name>handleInitMessage</name></name><argument_list>(<argument><expr><name>noui_InitMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory</comment>

    <comment type="line" format="doxygen">/// 1. Basic Qt initialization (not dependent on parameters or configuration)</comment>
    <expr_stmt><expr><call><name>Q_INIT_RESOURCE</name><argument_list>(<argument><expr><name>bitcoin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Q_INIT_RESOURCE</name><argument_list>(<argument><expr><name>bitcoin_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Generate high-dpi pixmaps</comment>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setAttribute</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AA_UseHighDpiPixmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QT_VERSION</name> <operator>&gt;=</operator> <literal type="number">0x050600</literal></expr></cpp:if>
    <expr_stmt><expr><call><name><name>QCoreApplication</name><operator>::</operator><name>setAttribute</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>AA_EnableHighDpiScaling</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>BitcoinApplication</name></type> <name>app</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Register meta types used for QMetaObject::invokeMethod and Qt::QueuedConnection</comment>
    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Register typedefs (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)</comment>
    <comment type="line">// IMPORTANT: if CAmount is no longer a typedef use the normal variant above (see https://doc.qt.io/qt-5/qmetatype.html#qRegisterMetaType-1)</comment>
    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"CAmount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"size_t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"std::function&lt;void()&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qRegisterMetaType</name><argument_list type="generic">&lt;<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Icon</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"QMessageBox::Icon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" format="doxygen">/// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these</comment>
    <comment type="line">// Command-line options take precedence:</comment>
    <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>setupServerArgs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetupUIArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>-&gt;</operator><name>parseParameters</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>initError</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Error parsing command line arguments: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Create a message box, because the gui has neither been created nor has subscribed to core signals</comment>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>,
            <comment type="line">// message can not be translated because translations have not been initialized</comment>
            <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><literal type="string">"Error parsing command line arguments: %1."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Now that the QApplication is setup and we have parsed our parameters, we can set the platform style</comment>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>setupPlatformStyle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line" format="doxygen">/// 3. Application identification</comment>
    <comment type="line">// must be set before OptionsModel is initialized or translations are loaded,</comment>
    <comment type="line">// as it is used to locate QSettings</comment>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setOrganizationName</name></name><argument_list>(<argument><expr><name>QAPP_ORG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setOrganizationDomain</name></name><argument_list>(<argument><expr><name>QAPP_ORG_DOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setApplicationName</name></name><argument_list>(<argument><expr><name>QAPP_APP_NAME_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" format="doxygen">/// 4. Initialization of translations, so that intro dialog is in user's language</comment>
    <comment type="line">// Now that QSettings are accessible, initialize translations</comment>
    <decl_stmt><decl><type><name>QTranslator</name></type> <name>qtTranslatorBase</name></decl>, <decl><type ref="prev"/><name>qtTranslator</name></decl>, <decl><type ref="prev"/><name>translatorBase</name></decl>, <decl><type ref="prev"/><name>translator</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initTranslations</name><argument_list>(<argument><expr><name>qtTranslatorBase</name></expr></argument>, <argument><expr><name>qtTranslator</name></expr></argument>, <argument><expr><name>translatorBase</name></expr></argument>, <argument><expr><name>translator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Show help message immediately after parsing command-line options (for "-lang") and setting locale,</comment>
    <comment type="line">// but before showing splash screen.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>HelpRequested</name><argument_list>(<argument><expr><name>gArgs</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>HelpMessageDialog</name></type> <name>help</name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>help</name><operator>.</operator><name>showOrPrint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" format="doxygen">/// 5. Now that settings and translations are available, ask user for data directory</comment>
    <comment type="line">// User language is set up: pick a data directory</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>did_show_intro</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>prune</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Intro dialog prune check box</comment>
    <comment type="line">// Gracefully exit if the user cancels</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Intro</name><operator>::</operator><name>showIfNeeded</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>did_show_intro</name></expr></argument>, <argument><expr><name>prune</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line" format="doxygen">/// 6. Determine availability of data directory and parse bitcoin.conf</comment>
    <comment type="line" format="doxygen">/// - Do not call GetDataDir(true) before this step finishes</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckDataDirOption</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>initError</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specified data directory \"%s\" does not exist.\n"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>,
            <argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"Error: Specified data directory \"%1\" does not exist."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>-&gt;</operator><name>readConfigFiles</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>initError</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Error reading configuration file: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>,
            <argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"Error: Cannot parse configuration file: %1."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line" format="doxygen">/// 7. Determine network (and switch to network specific options)</comment>
    <comment type="line">// - Do not call Params() before this step</comment>
    <comment type="line">// - Do this after parsing the configuration file, as the network can be switched there</comment>
    <comment type="line">// - QSettings() will use the new application name after this, resulting in network-specific settings</comment>
    <comment type="line">// - Needs to be done before createOptionsModel</comment>

    <comment type="line">// Check for -chain, -testnet or -regtest parameter (Params() calls are only valid after this clause)</comment>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>selectParams</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>exception</name></name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>initError</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>, <argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"Error: %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></catch></try>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="line">// Parse URIs on command line -- this can affect Params()</comment>
    <expr_stmt><expr><call><name><name>PaymentServer</name><operator>::</operator><name>ipcParseCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name><name>QScopedPointer</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>NetworkStyle</name></expr></argument>&gt;</argument_list></name></type> <name>networkStyle</name><argument_list>(<argument><expr><call><name><name>NetworkStyle</name><operator>::</operator><name>instantiate</name></name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>networkStyle</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Allow for separate UI settings for testnets</comment>
    <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>setApplicationName</name></name><argument_list>(<argument><expr><call><name><name>networkStyle</name><operator>-&gt;</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Re-initialize translations after changing application name (language in network-specific settings can be different)</comment>
    <expr_stmt><expr><call><name>initTranslations</name><argument_list>(<argument><expr><name>qtTranslatorBase</name></expr></argument>, <argument><expr><name>qtTranslator</name></expr></argument>, <argument><expr><name>translatorBase</name></expr></argument>, <argument><expr><name>translator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="line" format="doxygen">/// 8. URI IPC sending</comment>
    <comment type="line">// - Do this early as we don't want to bother initializing if we are just calling IPC</comment>
    <comment type="line">// - Do this *after* setting up the data directory, as the data directory hash is used in the name</comment>
    <comment type="line">// of the server.</comment>
    <comment type="line">// - Do this after creating app and setting up translations, so errors are</comment>
    <comment type="line">// translated properly.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>PaymentServer</name><operator>::</operator><name>ipcSendCommandLine</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Start up the payment server early, too, so impatient users that click on</comment>
    <comment type="line">// bitcoin: links repeatedly have their payment requests routed to this process:</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>WalletModel</name><operator>::</operator><name>isWalletEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>createPaymentServer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

    <comment type="line" format="doxygen">/// 9. Main GUI initialization</comment>
    <comment type="line">// Install global event filter that makes sure that long tooltips can be word-wrapped</comment>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>ToolTipToRichTextFilter</name></name><argument_list>(<argument><expr><name>TOOLTIP_WRAP_THRESHOLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>app</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="line">// Install global event filter for processing Windows session related Windows messages (WM_QUERYENDSESSION and WM_ENDSESSION)</comment>
    <expr_stmt><expr><call><name><name>qApp</name><operator>-&gt;</operator><name>installNativeEventFilter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>WinShutdownMonitor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Install qDebug() message handler to route to debug.log</comment>
    <expr_stmt><expr><call><name>qInstallMessageHandler</name><argument_list>(<argument><expr><name>DebugMessageHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Allow parameter interaction before we create the options model</comment>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>parameterSetup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Load GUI settings from QSettings</comment>
    <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>createOptionsModel</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-resetguisettings"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>did_show_intro</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Store intro dialog settings other than datadir (network specific)</comment>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>SetPrune</name></name><argument_list>(<argument><expr><name>prune</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-splash"</literal></expr></argument>, <argument><expr><name>DEFAULT_SPLASHSCREEN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-min"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>createSplashScreen</name></name><argument_list>(<argument><expr><call><name><name>networkStyle</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>EXIT_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <try>try
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>createWindow</name></name><argument_list>(<argument><expr><call><name><name>networkStyle</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Perform base initialization before spinning up initialization/shutdown thread</comment>
        <comment type="line">// This is acceptable because this function only contains steps that are quick to execute,</comment>
        <comment type="line">// so the GUI thread won't be held up.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>app</name><operator>.</operator><name>baseInitialize</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>requestInitialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Q_OS_WIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name><name>WinShutdownMonitor</name><operator>::</operator><name>registerShutdownBlockReason</name></name><argument_list>(<argument><expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"%1 didn't yet exit safely..."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HWND</name><operator>)</operator><call><name><name>app</name><operator>.</operator><name>getMainWinId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>requestShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name><name>app</name><operator>.</operator><name>getReturnValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// A dialog with detailed error will have been shown by InitError()</comment>
            <expr_stmt><expr><name>rv</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="string">"Runaway exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>handleRunawayException</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>-&gt;</operator><name>getWarnings</name></name><argument_list>(<argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"Runaway exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>app</name><operator>.</operator><name>handleRunawayException</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>-&gt;</operator><name>getWarnings</name></name><argument_list>(<argument><expr><literal type="string">"gui"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
</unit>
