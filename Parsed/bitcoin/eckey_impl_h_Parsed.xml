<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/eckey_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_ECKEY_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_ECKEY_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eckey.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecmult_gen.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_pubkey_parse</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">33</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_EVEN</name> <operator>||</operator> <name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_ODD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x</name></decl>;</decl_stmt>
        <return>return <expr><call><name>secp256k1_fe_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>pub</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>secp256k1_ge_set_xo_var</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_ODD</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">65</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_UNCOMPRESSED</name> <operator>||</operator> <name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_HYBRID_EVEN</name> <operator>||</operator> <name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_HYBRID_ODD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secp256k1_fe_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>pub</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>secp256k1_fe_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>pub</name><operator>+</operator><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>secp256k1_ge_set_xy</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_HYBRID_EVEN</name> <operator>||</operator> <name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_HYBRID_ODD</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <call><name>secp256k1_fe_is_odd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SECP256K1_TAG_PUBKEY_HYBRID_ODD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>secp256k1_ge_is_valid_var</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_pubkey_serialize</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pub</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressed</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_ge_is_infinity</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_get_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>compressed</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>secp256k1_fe_is_odd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SECP256K1_TAG_PUBKEY_ODD</name></expr> </then><else>: <expr><name>SECP256K1_TAG_PUBKEY_EVEN</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SECP256K1_TAG_PUBKEY_UNCOMPRESSED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_get_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pub</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>elem</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_privkey_tweak_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_scalar_add</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>tweak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_pubkey_tweak_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>pt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>one</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ecmult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><name>tweak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_gej_is_infinity</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_ge_set_gej</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_privkey_tweak_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_scalar_mul</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>tweak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_eckey_pubkey_tweak_mul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ecmult_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>zero</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>pt</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><name>tweak</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_scalar_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ecmult</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>tweak</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_ge_set_gej</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_ECKEY_IMPL_H */</comment>
</unit>
