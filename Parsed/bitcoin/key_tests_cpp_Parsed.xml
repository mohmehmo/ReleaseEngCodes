<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/key_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSecret1</name> <init>= <expr><literal type="string">"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSecret2</name> <init>= <expr><literal type="string">"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSecret1C</name> <init>= <expr><literal type="string">"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSecret2C</name> <init>= <expr><literal type="string">"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>addr1</name> <init>= <expr><literal type="string">"1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>addr2</name> <init>= <expr><literal type="string">"1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>addr1C</name> <init>= <expr><literal type="string">"1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>addr2C</name> <init>= <expr><literal type="string">"1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddressBad</name> <init>= <expr><literal type="string">"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF"</literal></expr></init></decl>;</decl_stmt>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>key_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_test1</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1</name>  <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>key1</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key2</name>  <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>key2</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1C</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret1C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>key1C</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key2C</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret2C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>key2C</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>bad_key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strAddressBad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>bad_key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey1</name>  <init>= <expr><call><name><name>key1</name><operator>.</operator> <name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey2</name>  <init>= <expr><call><name><name>key2</name><operator>.</operator> <name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey1C</name> <init>= <expr><call><name><name>key1C</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey2C</name> <init>= <expr><call><name><name>key2C</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key1C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>key2C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubkey2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>addr1</name></expr></argument>)</argument_list></call>  <operator>==</operator> <call><name>CTxDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>addr2</name></expr></argument>)</argument_list></call>  <operator>==</operator> <call><name>CTxDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>addr1C</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CTxDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>addr2C</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>CTxDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMsg</name> <init>= <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Very secret message %i: 11"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hashMsg</name> <init>= <expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>strMsg</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strMsg</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// normal signatures</comment>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sign1</name></decl>, <decl><type ref="prev"/><name>sign2</name></decl>, <decl><type ref="prev"/><name>sign1C</name></decl>, <decl><type ref="prev"/><name>sign2C</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>Sign</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>Sign</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey1</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey1</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey1</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey1</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey2</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey2</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey2</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey2</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey1C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey1C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey1C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey1C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey2C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey2C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey2C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>pubkey2C</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>sign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// compact signatures (with key recovery)</comment>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>csign1</name></decl>, <decl><type ref="prev"/><name>csign2</name></decl>, <decl><type ref="prev"/><name>csign1C</name></decl>, <decl><type ref="prev"/><name>csign2C</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>SignCompact</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>SignCompact</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CPubKey</name></type> <name>rkey1</name></decl>, <decl><type ref="prev"/><name>rkey2</name></decl>, <decl><type ref="prev"/><name>rkey1C</name></decl>, <decl><type ref="prev"/><name>rkey2C</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rkey1</name><operator>.</operator><name>RecoverCompact</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rkey2</name><operator>.</operator><name>RecoverCompact</name></name> <argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rkey1C</name><operator>.</operator><name>RecoverCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign1C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>rkey2C</name><operator>.</operator><name>RecoverCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>csign2C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>rkey1</name>  <operator>==</operator> <name>pubkey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>rkey2</name>  <operator>==</operator> <name>pubkey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>rkey1C</name> <operator>==</operator> <name>pubkey1C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>rkey2C</name> <operator>==</operator> <name>pubkey2C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// test deterministic signing</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>detsig</name></decl>, <decl><type ref="prev"/><name>detsigc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMsg</name> <init>= <expr><literal type="string">"Very deterministic message"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashMsg</name> <init>= <expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>strMsg</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strMsg</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsigc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <name>detsigc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"304402205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d022014ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsigc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <name>detsigc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"3044022052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd5022061d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key1C</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsigc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"1c5dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d14ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsigc</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"205dbbddda71772d95ce91cd2d14b592cfbc1dd0aabd6a394b6c2d377bbe59d31d14ddda21494a4e221f0824f0b8b924c43fa43c0ad57dccdaa11f81a6bd4582f6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key2C</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><name>hashMsg</name></expr></argument>, <argument><expr><name>detsigc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsig</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"1c52d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>detsigc</name> <operator>==</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"2052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_signature_tests</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// When entropy is specified, we should see at least one high R signature within 20 signatures</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>msg</name> <init>= <expr><literal type="string">"A message to be signed"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>msg_hash</name> <init>= <expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sig</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>msg_hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x21</literal> <operator>&amp;&amp;</operator> <name><name>sig</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// When entropy is not specified, we should always see low R signatures that are less than 70 bytes in 256 tries</comment>
    <comment type="line">// We should see at least one signature that is less than 70 bytes.</comment>
    <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_small</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>sig</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>msg</name> <init>= <expr><literal type="string">"A message to be signed"</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>msg_hash</name> <operator>=</operator> <call><name>Hash</name><argument_list>(<argument><expr><call><name><name>msg</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>msg</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>msg_hash</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>sig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>found_small</name> <operator>|=</operator> <call><name><name>sig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">70</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found_small</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_key_negation</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// create a dummy hash for signature comparison</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rnd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name> <init>= <expr><literal type="string">"Bitcoin key verification\n"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHash256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>str</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// import the static test key</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strSecret1C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create a signature</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch_sig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch_sig_cmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vch_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// negate the key twice</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// after the first negation, the signature must be different</comment>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vch_sig_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>vch_sig_cmp</name> <operator>!=</operator> <name>vch_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Negate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// after the second negation, we should have the original key and thus the</comment>
    <comment type="line">// same signature</comment>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vch_sig_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>vch_sig_cmp</name> <operator>==</operator> <name>vch_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
