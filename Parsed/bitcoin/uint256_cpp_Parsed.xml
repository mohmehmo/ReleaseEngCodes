<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/uint256.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<constructor><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>base_blob</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>GetHex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>reverse_iterator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// skip leading spaces</comment>
    <while>while <condition>(<expr><call><name>IsSpace</name><argument_list>(<argument><expr><operator>*</operator><name>psz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <comment type="line">// skip 0x</comment>
    <if_stmt><if>if <condition>(<expr><name><name>psz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name>ToLower</name><argument_list>(<argument><expr><name><name>psz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>psz</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// hex string to uint</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><operator>::</operator><name>HexDigit</name></name><argument_list>(<argument><expr><name><name>psz</name><index>[<expr><name>digits</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>digits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pend</name> <init>= <expr><name>p1</name> <operator>+</operator> <name>WIDTH</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>digits</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&lt;</operator> <name>pend</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <call><name><operator>::</operator><name>HexDigit</name></name><argument_list>(<argument><expr><name><name>psz</name><index>[<expr><operator>--</operator><name>digits</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>digits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><call><name><operator>::</operator><name>HexDigit</name></name><argument_list>(<argument><expr><name><name>psz</name><index>[<expr><operator>--</operator><name>digits</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SetHex</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GetHex</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Explicit instantiations for base_blob&lt;160&gt;</comment>
<constructor_decl><specifier>template</specifier> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>base_blob</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</constructor_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>GetHex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Explicit instantiations for base_blob&lt;256&gt;</comment>
<constructor_decl><specifier>template</specifier> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>base_blob</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</constructor_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>GetHex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
</unit>
