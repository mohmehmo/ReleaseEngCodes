<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/sendcoinsdialog.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_sendcoinsdialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/addresstablemodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/clientmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/coincontroldialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsentry.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/psbtwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFontMetrics&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScrollBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextDocument&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>&gt;</argument_list></name></type> <name>confTargets</name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">504</literal></expr>, <expr><literal type="number">1008</literal></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>getConfTargetForIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>index</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>confTargets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>confTargets</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>confTargets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>confTargets</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>getIndexForConfTarget</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>confTargets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>confTargets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>confTargets</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>SendCoinsDialog</name><operator>::</operator><name>SendCoinsDialog</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name>_platformStyle</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QDialog</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>SendCoinsDialog</name></name></expr></argument>)</argument_list></call>,
    <call><name>clientModel</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>model</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>fNewRecipientAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>,
    <call><name>fFeeMinimized</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>,
    <call><name>platformStyle</name><argument_list>(<argument><expr><name>_platformStyle</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>_platformStyle</name><operator>-&gt;</operator><name>getImagesOnButtons</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>addButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name>QIcon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name>QIcon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name>QIcon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>addButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>_platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>_platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>_platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/send"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setupAddressWidget</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>addEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>addButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>addEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>clear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Coin Control</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>pushButtonCoinControl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlButtonClicked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>checkBoxCoinControlChange</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>stateChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlChangeChecked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QValidatedLineEdit</name><operator>::</operator><name>textEdited</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlChangeEdited</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Coin Control: clipboard actions</comment>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardQuantityAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy quantity"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardAmountAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy amount"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardFeeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy fee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardAfterFeeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy after fee"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardBytesAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy bytes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardLowOutputAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy dust"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QAction</name> <modifier>*</modifier></type><name>clipboardChangeAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy change"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardQuantityAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardQuantity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardAmountAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardAmount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardFeeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardFee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardAfterFeeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardAfterFee</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardBytesAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardLowOutputAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardLowOutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>clipboardChangeAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardChange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlQuantity</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardQuantityAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardAmountAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardFeeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardAfterFeeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlBytes</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardBytesAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlLowOutput</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardLowOutputAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>clipboardChangeAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// init transaction fee section</comment>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"fFeeSectionMinimized"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"fFeeSectionMinimized"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// compatibility</comment>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// custom</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// recommended</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nSmartFeeSliderPosition"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nSmartFeeSliderPosition"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>, <argument><expr><operator>(</operator><name>qint64</name><operator>)</operator><name>DEFAULT_PAY_TX_FEE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>groupFee</name><operator>-&gt;</operator><name>setId</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>groupFee</name><operator>-&gt;</operator><name>setId</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>radioCustomFee</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>groupFee</name><operator>-&gt;</operator><name>button</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>SetAllowEmpty</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>minimizeFeeSection</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"fFeeSectionMinimized"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBool</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>setClientModel</name></name><parameter_list>(<parameter><decl><type><name>ClientModel</name> <modifier>*</modifier></type><name>_clientModel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>clientModel</name></name> <operator>=</operator> <name>_clientModel</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>_clientModel</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_clientModel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>numBlocksChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>updateSmartFeeLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>setModel</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier></type><name>_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>_model</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>_model</name> <operator>&amp;&amp;</operator> <call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>entry</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><name>_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>WalletBalances</name></name></type> <name>balances</name> <init>= <expr><call><name><name>_model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalances</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBalance</name><argument_list>(<argument><expr><name>balances</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>_model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>WalletModel</name><operator>::</operator><name>balanceChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>setBalance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsModel</name><operator>::</operator><name>displayUnitChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>updateDisplayUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateDisplayUnit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Coin Control</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsModel</name><operator>::</operator><name>displayUnitChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>OptionsModel</name><operator>::</operator><name>coinControlFeaturesChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlFeatureChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>frameCoinControl</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>_model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getCoinControlFeatures</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// fee section</comment>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <range>: <expr><name>confTargets</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 (%2 blocks)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatNiceTimeOffset</name></name><argument_list>(<argument><expr><name>n</name><operator>*</operator><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <macro><name>connect</name><argument_list>(<argument>ui-&gt;confTargetSelector</argument>, <argument>static_cast&lt;void (QComboBox::*)(int)&gt;(&amp;QComboBox::currentIndexChanged)</argument>, <argument>this</argument>, <argument>&amp;SendCoinsDialog::updateSmartFeeLabel</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>connect</name><argument_list>(<argument>ui-&gt;confTargetSelector</argument>, <argument>static_cast&lt;void (QComboBox::*)(int)&gt;(&amp;QComboBox::currentIndexChanged)</argument>, <argument>this</argument>, <argument>&amp;SendCoinsDialog::coinControlUpdateLabels</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>connect</name><argument_list>(<argument>ui-&gt;groupFee</argument>, <argument>static_cast&lt;void (QButtonGroup::*)(int)&gt;(&amp;QButtonGroup::buttonClicked)</argument>, <argument>this</argument>, <argument>&amp;SendCoinsDialog::updateFeeSectionControls</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>connect</name><argument_list>(<argument>ui-&gt;groupFee</argument>, <argument>static_cast&lt;void (QButtonGroup::*)(int)&gt;(&amp;QButtonGroup::buttonClicked)</argument>, <argument>this</argument>, <argument>&amp;SendCoinsDialog::coinControlUpdateLabels</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>customFee</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BitcoinAmountField</name><operator>::</operator><name>valueChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>optInRBF</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>stateChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>updateSmartFeeLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>optInRBF</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QCheckBox</name><operator>::</operator><name>stateChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>requiredFee</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRequiredFee</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>SetMinValue</name></name><argument_list>(<argument><expr><name>requiredFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>requiredFee</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>requiredFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>setSingleStep</name></name><argument_list>(<argument><expr><name>requiredFee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateFeeSectionControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateSmartFeeLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set default rbf checkbox state</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>optInRBF</name><operator>-&gt;</operator><name>setCheckState</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Cr&amp;eate Unsigned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Creates a Partially Signed Bitcoin Transaction (PSBT) for use with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// set the smartfee-sliders default value (wallets default conf.target or last stored value)</comment>
        <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nSmartFeeSliderPosition"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// migrate nSmartFeeSliderPosition to nConfTarget</comment>
            <comment type="line">// nConfTarget is available since 0.15 (replaced nSmartFeeSliderPosition)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>nConfirmTarget</name> <init>= <expr><literal type="number">25</literal> <operator>-</operator> <call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nSmartFeeSliderPosition"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// 25 == old slider range</comment>
            <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nConfTarget"</literal></expr></argument>, <argument><expr><name>nConfirmTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"nSmartFeeSliderPosition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nConfTarget"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><call><name>getIndexForConfTarget</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfirmTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><call><name>getIndexForConfTarget</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"nConfTarget"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<destructor><name><name>SendCoinsDialog</name><operator>::</operator><name>~SendCoinsDialog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"fFeeSectionMinimized"</literal></expr></argument>, <argument><expr><name>fFeeMinimized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nFeeRadio"</literal></expr></argument>, <argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>groupFee</name><operator>-&gt;</operator><name>checkedId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nConfTarget"</literal></expr></argument>, <argument><expr><call><name>getConfTargetForIndex</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name><operator>-&gt;</operator><name>currentIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"nTransactionFee"</literal></expr></argument>, <argument><expr><operator>(</operator><name>qint64</name><operator>)</operator><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>on_sendButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>model</name> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsRecipient</name></expr></argument>&gt;</argument_list></name></type> <name>recipients</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>entry</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>entry</name><operator>-&gt;</operator><name>validate</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>recipients</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>valid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollArea</name><operator>-&gt;</operator><name>ensureWidgetVisible</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>valid</name> <operator>||</operator> <call><name><name>recipients</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fNewRecipientAllowed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>WalletModel</name><operator>::</operator><name>UnlockContext</name></name></type> <name>ctx</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>requestUnlock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Unlock wallet was cancelled</comment>
        <expr_stmt><expr><name>fNewRecipientAllowed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// prepare transaction for getting txFee earlier</comment>
    <decl_stmt><decl><type><name>WalletModelTransaction</name></type> <name>currentTransaction</name><argument_list>(<argument><expr><name>recipients</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>WalletModel</name><operator>::</operator><name>SendCoinsReturn</name></name></type> <name>prepareStatus</name></decl>;</decl_stmt>

    <comment type="line">// Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled</comment>
    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>ctrl</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getCoinControlFeatures</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ctrl</name> <operator>=</operator> <operator>*</operator><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>updateCoinControlState</name><argument_list>(<argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>prepareStatus</name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>prepareTransaction</name></name><argument_list>(<argument><expr><name>currentTransaction</name></expr></argument>, <argument><expr><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// process prepareStatus and on error generate message shown to user</comment>
    <expr_stmt><expr><call><name>processSendCoinsReturn</name><argument_list>(<argument><expr><name>prepareStatus</name></expr></argument>,
        <argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentTransaction</name><operator>.</operator><name>getTransactionFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>prepareStatus</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name><name>WalletModel</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fNewRecipientAllowed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>txFee</name> <init>= <expr><call><name><name>currentTransaction</name><operator>.</operator><name>getTransactionFee</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Format confirmation message</comment>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>formatted</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>rcp</name> <range>: <expr><call><name><name>currentTransaction</name><operator>.</operator><name>getRecipients</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <comment type="line">// generate amount string with wallet name in case of multiwallet</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>amount</name> <init>= <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rcp</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>isMultiwallet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>amount</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">" from wallet '%1'"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getWalletName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// generate address string</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>address</name> <init>= <expr><name><name>rcp</name><operator>.</operator><name>address</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>QString</name></type> <name>recipientElement</name></decl>;</decl_stmt>

        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>rcp</name><operator>.</operator><name>label</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <comment type="line">// label with address</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>recipientElement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 to '%2'"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name><name>rcp</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>recipientElement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">" (%1)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <comment type="line">// just address</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>recipientElement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"%1 to %2"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>amount</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>formatted</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>recipientElement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>QString</name></type> <name>questionString</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Do you want to draft this transaction?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Are you sure you want to send?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;br /&gt;&lt;span style='font-size:10pt;'&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please, review your transaction proposal. This will produce a Partially Signed Bitcoin Transaction (PSBT) which you can copy and then sign with e.g. an offline %1 wallet, or a PSBT-compatible hardware wallet."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Please, review your transaction."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/span&gt;%1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>txFee</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// append fee string if a fee is required</comment>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;hr /&gt;&lt;b&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction fee"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// append transaction size</comment>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" ("</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name><name>currentTransaction</name><operator>.</operator><name>getTransactionSize</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" kB): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// append transaction fee value</comment>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;span style='color:#aa0000; font-weight:bold;'&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/span&gt;&lt;br /&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// append RBF message according to transaction's signalling</comment>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;span style='font-size:10pt; font-weight:normal;'&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>optInRBF</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"You can increase the fee later (signals Replace-By-Fee, BIP-125)."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Not signalling Replace-By-Fee, BIP-125."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;/span&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add total amount in all subdivision units</comment>
    <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;hr /&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>totalAmount</name> <init>= <expr><call><name><name>currentTransaction</name><operator>.</operator><name>getTotalTransactionAmount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>txFee</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>alternativeUnits</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></type> <name>u</name> <range>: <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>availableUnits</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>u</name> <operator>!=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>alternativeUnits</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>totalAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;%1&lt;/b&gt;: &lt;b&gt;%2&lt;/b&gt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Total Amount"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>totalAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>questionString</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;br /&gt;&lt;span style='font-size:10pt; font-weight:normal;'&gt;(=%1)&lt;/span&gt;"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>alternativeUnits</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>informative_text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>detailed_text</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>formatted</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>questionString</name> <operator>=</operator> <call><name><name>questionString</name><operator>.</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>informative_text</name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"To review recipient list click \"Show Details...\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>detailed_text</name> <operator>=</operator> <call><name><name>formatted</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>questionString</name> <operator>=</operator> <call><name><name>questionString</name><operator>.</operator><name>arg</name></name><argument_list>(<argument><expr><literal type="string">"&lt;br /&gt;&lt;br /&gt;"</literal> <operator>+</operator> <call><name><name>formatted</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name>confirmation</name> <init>= <expr><ternary><condition><expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Confirm transaction proposal"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Confirm send coins"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>QString</name></type> <name>confirmButtonText</name> <init>= <expr><ternary><condition><expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Copy PSBT to clipboard"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Send"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SendConfirmationDialog</name></type> <name>confirmationDialog</name><argument_list>(<argument><expr><name>confirmation</name></expr></argument>, <argument><expr><name>questionString</name></expr></argument>, <argument><expr><name>informative_text</name></expr></argument>, <argument><expr><name>detailed_text</name></expr></argument>, <argument><expr><name>SEND_CONFIRM_DELAY</name></expr></argument>, <argument><expr><name>confirmButtonText</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>confirmationDialog</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></type> <name>retval</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>confirmationDialog</name><operator>.</operator><name>result</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>retval</name> <operator>!=</operator> <name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>fNewRecipientAllowed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>send_failure</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name> <init>= <expr><call><name>CMutableTransaction</name><argument_list>{<argument><expr><operator>*</operator><operator>(</operator><call><name><name>currentTransaction</name><operator>.</operator><name>getWtx</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>}</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PartiallySignedTransaction</name></type> <name>psbtx</name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TransactionError</name></type> <name>err</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fillPSBT</name><argument_list>(<argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* sign */</comment>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* bip32derivs */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name><name>TransactionError</name><operator>::</operator><name>OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Serialize the PSBT</comment>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssTx</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ssTx</name> <operator>&lt;&lt;</operator> <name>psbtx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name>EncodeBase64</name><argument_list>(<argument><expr><call><name><name>ssTx</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"PSBT copied"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Copied to clipboard"</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_INFORMATION</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// now send the prepared transaction</comment>
        <decl_stmt><decl><type><name><name>WalletModel</name><operator>::</operator><name>SendCoinsReturn</name></name></type> <name>sendStatus</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>sendCoins</name></name><argument_list>(<argument><expr><name>currentTransaction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// process sendStatus and on error generate message shown to user</comment>
        <expr_stmt><expr><call><name>processSendCoinsReturn</name><argument_list>(<argument><expr><name>sendStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>sendStatus</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name><name>WalletModel</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>coinsSent</name><argument_list>(<argument><expr><call><name><name>currentTransaction</name><operator>.</operator><name>getWtx</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>send_failure</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>send_failure</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>accept</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelectAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fNewRecipientAllowed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>clear</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Clear coin control settings</comment>
    <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>UnSelectAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>checkBoxCoinControlChange</name><operator>-&gt;</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove entries until only one left</comment>
    <while>while<condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>takeAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>deleteLater</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>addEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateTabsAndLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>reject</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>accept</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name><name>SendCoinsDialog</name><operator>::</operator><name>addEntry</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>new</operator> <call><name>SendCoinsEntry</name><argument_list>(<argument><expr><name>platformStyle</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>addWidget</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsEntry</name><operator>::</operator><name>removeEntry</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>removeEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsEntry</name><operator>::</operator><name>useAvailableBalance</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>useAvailableBalance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsEntry</name><operator>::</operator><name>payAmountChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsEntry</name><operator>::</operator><name>subtractFeeFromAmountChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Focus the field, so that entry can start immediately</comment>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollAreaWidgetContents</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollAreaWidgetContents</name><operator>-&gt;</operator><name>sizeHint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>qApp</name><operator>-&gt;</operator><name>processEvents</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QScrollBar</name><modifier>*</modifier></type> <name>bar</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>scrollArea</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>bar</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>bar</name><operator>-&gt;</operator><name>setSliderPosition</name></name><argument_list>(<argument><expr><call><name><name>bar</name><operator>-&gt;</operator><name>maximum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>updateTabsAndLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateTabsAndLabels</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setupTabChain</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>removeEntry</name></name><parameter_list>(<parameter><decl><type><name>SendCoinsEntry</name><modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the last entry is about to be removed add an empty one</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>addEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>deleteLater</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateTabsAndLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QWidget</name> <modifier>*</modifier></type><name><name>SendCoinsDialog</name><operator>::</operator><name>setupTabChain</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>entry</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name><name>entry</name><operator>-&gt;</operator><name>setupTabChain</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>setTabOrder</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>setTabOrder</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>sendButton</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>setTabOrder</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>addButton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ui</name><operator>-&gt;</operator><name>addButton</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>setAddress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Replace the first entry if it is still unused</comment>
    <if_stmt><if>if<condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>first</name><operator>-&gt;</operator><name>isClear</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>addEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>pasteEntry</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>rv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>fNewRecipientAllowed</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// Replace the first entry if it is still unused</comment>
    <if_stmt><if>if<condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>first</name><operator>-&gt;</operator><name>isClear</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>addEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateTabsAndLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>handlePaymentRequest</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>rv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Just paste the entry, all pre-checks</comment>
    <comment type="line">// are done in paymentserver.cpp.</comment>
    <expr_stmt><expr><call><name>pasteEntry</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>setBalance</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>interfaces</name><operator>::</operator><name>WalletBalances</name></name><modifier>&amp;</modifier></type> <name>balances</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>balance</name> <init>= <expr><name><name>balances</name><operator>.</operator><name>balance</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>balance</name> <operator>=</operator> <name><name>balances</name><operator>.</operator><name>watch_only_balance</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelBalanceName</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Watch-only balance:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelBalance</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>balance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateDisplayUnit</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setBalance</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalances</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>setDisplayUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateSmartFeeLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>processSendCoinsReturn</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>WalletModel</name><operator>::</operator><name>SendCoinsReturn</name></name> <modifier>&amp;</modifier></type><name>sendCoinsReturn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>msgArg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>QPair</name><argument_list type="generic">&lt;<argument><expr><name>QString</name></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MessageBoxFlags</name></name></expr></argument>&gt;</argument_list></name></type> <name>msgParams</name></decl>;</decl_stmt>
    <comment type="line">// Default to a warning message, override if error message is needed</comment>
    <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MSG_WARNING</name></name></expr>;</expr_stmt>

    <comment type="line">// This comment is specific to SendCoinsDialog usage of WalletModel::SendCoinsReturn.</comment>
    <comment type="line">// All status values are used only in WalletModel::prepareTransaction()</comment>
    <switch>switch<condition>(<expr><name><name>sendCoinsReturn</name><operator>.</operator><name>status</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>InvalidAddress</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The recipient address is not valid. Please recheck."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>InvalidAmount</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The amount to pay must be larger than 0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>AmountExceedsBalance</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The amount exceeds your balance."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>AmountWithFeeExceedsBalance</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The total exceeds your balance when the %1 transaction fee is included."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>msgArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>DuplicateAddress</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Duplicate address found: addresses should only be used once each."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>TransactionCreationFailed</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Transaction creation failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>AbsurdFee</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"A fee higher than %1 is considered an absurdly high fee."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultMaxTxFee</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>PaymentRequestExpired</name></name></expr>:</case>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Payment request expired."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msgParams</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <comment type="line">// included to prevent a compiler warning.</comment>
    <case>case <expr><name><name>WalletModel</name><operator>::</operator><name>OK</name></name></expr>:</case>
    <default>default:</default>
        <return>return;</return>
    </block_content>}</block></switch>

    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>message</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Send Coins"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>msgParams</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>msgParams</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>minimizeFeeSection</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fMinimize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeMinimized</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>fMinimize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>buttonChooseFee</name>  <operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>fMinimize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>buttonMinimizeFee</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><name>fMinimize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>frameFeeSelection</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><name>fMinimize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>horizontalLayoutSmartFee</name><operator>-&gt;</operator><name>setContentsMargins</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>fMinimize</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fFeeMinimized</name> <operator>=</operator> <name>fMinimize</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>on_buttonChooseFee_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>minimizeFeeSection</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>on_buttonMinimizeFee_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>updateFeeMinimizedLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>minimizeFeeSection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>useAvailableBalance</name></name><parameter_list>(<parameter><decl><type><name>SendCoinsEntry</name><modifier>*</modifier></type> <name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Get CCoinControl instance if CoinControl is enabled or create a new one.</comment>
    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getCoinControlFeatures</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>coin_control</name> <operator>=</operator> <operator>*</operator><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Include watch-only for wallets without private key</comment>
    <expr_stmt><expr><name><name>coin_control</name><operator>.</operator><name>fAllowWatchOnly</name></name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Calculate available amount to send.</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>amount</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvailableBalance</name><argument_list>(<argument><expr><name>coin_control</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name><modifier>*</modifier></type> <name>e</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>e</name><operator>-&gt;</operator><name>isHidden</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>e</name> <operator>!=</operator> <name>entry</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>amount</name> <operator>-=</operator> <call><name><name>e</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><name>amount</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>checkSubtractFeeFromAmount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setAmount</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>setAmount</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateFeeSectionControls</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name>      <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee</name>           <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee2</name>          <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee3</name>          <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeEstimation</name>      <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCustomFeeWarning</name>   <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioCustomFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCustomPerKilobyte</name>  <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioCustomFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name>               <operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioCustomFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateFeeMinimizedLabel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>model</name> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioSmartFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeMinimized</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeMinimized</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/kB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateCoinControlState</name></name><parameter_list>(<parameter><decl><type><name>CCoinControl</name><modifier>&amp;</modifier></type> <name>ctrl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>radioCustomFee</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>m_feerate</name></name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>customFee</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>ctrl</name><operator>.</operator><name>m_feerate</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// Avoid using global defaults when sending money from the GUI</comment>
    <comment type="line">// Either custom fee will be used or if not selected, the confirmation target from dropdown box</comment>
    <expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>m_confirm_target</name></name> <operator>=</operator> <call><name>getConfTargetForIndex</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>confTargetSelector</name><operator>-&gt;</operator><name>currentIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>m_signal_bip125_rbf</name></name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>optInRBF</name><operator>-&gt;</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Include watch-only for wallets without private key</comment>
    <expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>fAllowWatchOnly</name></name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>privateKeysDisabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>updateSmartFeeLabel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>model</name> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>coin_control</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateCoinControlState</name><argument_list>(<argument><expr><name>coin_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>coin_control</name><operator>.</operator><name>m_feerate</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Explicitly use only fee estimation rate for smart fee labels</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>returned_target</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FeeReason</name></type> <name>reason</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feeRate</name> <init>= <expr><call><name>CFeeRate</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMinimumFee</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>returned_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"/kB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>reason</name> <operator>==</operator> <name><name>FeeReason</name><operator>::</operator><name>FALLBACK</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee2</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// (Smart fee not initialized yet. This usually takes a few blocks...)</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeEstimation</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lightness</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>palette</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>QPalette</name><operator>::</operator><name>WindowText</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>lightness</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QColor</name></type> <name>warning_colour</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><name>lightness</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">176</literal> <operator>-</operator> <operator>(</operator><name>lightness</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">48</literal> <operator>-</operator> <operator>(</operator><name>lightness</name> <operator>/</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel { color: "</literal> <operator>+</operator> <call><name><name>warning_colour</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"; }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>setIndent</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><call><name>QFontMetrics</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>font</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelSmartFee2</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelFeeEstimation</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Estimated to begin confirmation within %n block(s)."</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>returned_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fallbackFeeWarningLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>updateFeeMinimizedLabel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Quantity" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardQuantity</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlQuantity</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Amount" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardAmount</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAmount</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Fee" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardFee</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "After fee" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardAfterFee</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAfterFee</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Bytes" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardBytes</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlBytes</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Dust" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardLowOutput</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlLowOutput</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: copy label "Change" to clipboard</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlClipboardChange</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>setClipboard</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>left</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChange</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name>ASYMP_UTF8</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: settings menu - coin control enabled/disabled by user</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlFeatureChanged</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>checked</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>frameCoinControl</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>checked</name> <operator>&amp;&amp;</operator> <name>model</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// coin control features disabled</comment>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: button inputs -&gt; show actual coin control dialog</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlButtonClicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CoinControlDialog</name></type> <name>dlg</name><argument_list>(<argument><expr><name>platformStyle</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dlg</name><operator>.</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>coinControlUpdateLabels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: checkbox custom change address</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlChangeChecked</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>destChange</name> <operator>=</operator> <call><name>CNoDestination</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="line">// use this to re-validate an already entered address</comment>
        <expr_stmt><expr><call><name>coinControlChangeEdited</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>(</operator><name>state</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Checked</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: custom change address changed</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlChangeEdited</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <call><name><name>model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Default to no change address until verified</comment>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>destChange</name> <operator>=</operator> <call><name>CNoDestination</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel{color:red;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><call><name><name>text</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>text</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <comment type="line">// Nothing entered</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// Invalid address</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: Invalid Bitcoin address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// Valid address</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSpendable</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: Unknown change address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// confirmation dialog</comment>
                <decl_stmt><decl><type><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></type> <name>btnRetVal</name> <init>= <expr><call><name><name>QMessageBox</name><operator>::</operator><name>question</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Confirm custom change address"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name> <operator>|</operator> <name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>, <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if<condition>(<expr><name>btnRetVal</name> <operator>==</operator> <name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>destChange</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEditCoinControlChange</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel{color:black;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else <comment type="line">// Known change address</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setStyleSheet</name></name><argument_list>(<argument><expr><literal type="string">"QLabel{color:black;}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Query label</comment>
                <decl_stmt><decl><type><name>QString</name></type> <name>associatedLabel</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>getAddressTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>labelForAddress</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>associatedLabel</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>associatedLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlChangeLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(no label)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>destChange</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Coin Control: update labels</comment>
<function><type><name>void</name></type> <name><name>SendCoinsDialog</name><operator>::</operator><name>coinControlUpdateLabels</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name> <operator>||</operator> <operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>updateCoinControlState</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set pay amounts</comment>
    <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>entry</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entry</name><operator>-&gt;</operator><name>isHidden</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SendCoinsRecipient</name></type> <name>rcp</name> <init>= <expr><call><name><name>entry</name><operator>-&gt;</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>payAmounts</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>rcp</name><operator>.</operator><name>amount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>rcp</name><operator>.</operator><name>fSubtractFeeFromAmount</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>CoinControlDialog</name><operator>::</operator><name>fSubtractFeeFromAmount</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>coinControl</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>HasSelected</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// actual coin control calculation</comment>
        <expr_stmt><expr><call><name><name>CoinControlDialog</name><operator>::</operator><name>updateLabels</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// show coin control stats</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAutomaticallySelected</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>widgetCoinControl</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// hide coin control stats</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlAutomaticallySelected</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>widgetCoinControl</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>labelCoinControlInsuffFunds</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<constructor><name><name>SendConfirmationDialog</name><operator>::</operator><name>SendConfirmationDialog</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>informative_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>detailed_text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_secDelay</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>_confirmButtonText</name></decl></parameter>, <parameter><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>QMessageBox</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>, <call><name>secDelay</name><argument_list>(<argument><expr><name>_secDelay</name></expr></argument>)</argument_list></call>, <call><name>confirmButtonText</name><argument_list>(<argument><expr><name>_confirmButtonText</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>setIcon</name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Question</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// On macOS, the window title is ignored (as required by the macOS Guidelines).</comment>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setInformativeText</name><argument_list>(<argument><expr><name>informative_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDetailedText</name><argument_list>(<argument><expr><name>detailed_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setStandardButtons</name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name> <operator>|</operator> <name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDefaultButton</name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>yesButton</name> <operator>=</operator> <call><name>button</name><argument_list>(<argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateYesButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>countDownTimer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTimer</name><operator>::</operator><name>timeout</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>SendConfirmationDialog</name><operator>::</operator><name>countDown</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>int</name></type> <name><name>SendConfirmationDialog</name><operator>::</operator><name>exec</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>updateYesButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>countDownTimer</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>QMessageBox</name><operator>::</operator><name>exec</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendConfirmationDialog</name><operator>::</operator><name>countDown</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>secDelay</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateYesButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>secDelay</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>countDownTimer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SendConfirmationDialog</name><operator>::</operator><name>updateYesButton</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>secDelay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>yesButton</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>yesButton</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>confirmButtonText</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>secDelay</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>yesButton</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>yesButton</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>confirmButtonText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
