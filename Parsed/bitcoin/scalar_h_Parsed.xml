<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/scalar.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2014 Pieter Wuille                                   *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_SCALAR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_SCALAR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsecp256k1-config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXHAUSTIVE_TEST_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar_low.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCALAR_4X64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar_4x64.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SCALAR_8X32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar_8x32.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please select scalar implementation"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Clear a scalar to prevent the leak of sensitive data. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Access bits from a scalar. All requested bits must belong to the same 32-bit limb. */</comment>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Access bits from a scalar. Not constant time. */</comment>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a scalar from a big endian byte array. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a scalar to an unsigned integer. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a scalar to a byte array. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Add two scalars together (modulo the group order). Returns whether it overflowed. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Conditionally add a power of two to a scalar. The result is not allowed to overflow. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_cadd_bit</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Multiply two scalars (modulo the group order). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Shift a scalar right by some amount strictly between 0 and 16, returning
 *  the low bits that were shifted off */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_shr_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the square of a scalar (modulo the group order). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the inverse of a scalar (modulo the group order). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_inverse</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the inverse of a scalar (modulo the group order), without constant-time guarantee. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_inverse_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compute the complement of a scalar (modulo the group order). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a scalar equals zero. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a scalar equals one. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a scalar, considered as an nonnegative integer, is even. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_even</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check whether a scalar is higher than the group order divided by 2. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_high</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Conditionally negate a number, in constant time.
 * Returns -1 if the number was negated, 1 otherwise */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_cond_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_NUM_NONE</name></cpp:ifndef>
<comment type="block" format="doxygen">/** Convert a scalar to a number. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_get_num</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Get the order of the group as a number. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_order_get_num</name><parameter_list>(<parameter><decl><type><name>secp256k1_num</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Compare two scalars. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ENDOMORPHISM</name></cpp:ifdef>
<comment type="block" format="doxygen">/** Find r1 and r2 such that r1+r2*2^128 = a. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_split_128</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r1</name></decl></parameter>, <parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Find r1 and r2 such that r1+r2*lambda = a, and r1 and r2 are maximum 128 bits long (see secp256k1_gej_mul_lambda). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_split_lambda</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r1</name></decl></parameter>, <parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul_shift_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_SCALAR_H */</comment>
</unit>
