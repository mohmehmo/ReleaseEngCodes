<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/compressor.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compressor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * These check for scripts for which a special case with a shorter encoding is defined.
 * They are implemented separately from the CScript test, as these test for exact byte
 * sequence correspondences, and are more strict. For example, IsToPubKey also verifies
 * whether the public key is valid (as invalid ones cannot be represented in compressed
 * form).
 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsToKeyID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>CKeyID</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OP_DUP</name> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_HASH160</name>
                            <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>==</operator> <name>OP_EQUALVERIFY</name>
                            <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>==</operator> <name>OP_CHECKSIG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsToScriptID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>CScriptID</name> <modifier>&amp;</modifier></type><name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">23</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OP_HASH160</name> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal>
                            <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>==</operator> <name>OP_EQUAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsToPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>CPubKey</name> <modifier>&amp;</modifier></type><name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">35</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">33</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">34</literal></expr>]</index></name> <operator>==</operator> <name>OP_CHECKSIG</name>
                            <operator>&amp;&amp;</operator> <operator>(</operator><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator> <name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pubkey</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">67</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">65</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">66</literal></expr>]</index></name> <operator>==</operator> <name>OP_CHECKSIG</name>
                            <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pubkey</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>pubkey</name><operator>.</operator><name>IsFullyValid</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">// if not fully valid, a case that would not be compressible</comment>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CompressScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>keyID</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsToKeyID</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>keyID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyID</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CScriptID</name></type> <name>scriptID</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsToScriptID</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>scriptID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptID</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsToPubKey</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pubkey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pubkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x02</literal> <operator>||</operator> <name><name>pubkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pubkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pubkey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x04</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal> <operator>|</operator> <operator>(</operator><name><name>pubkey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>GetSpecialScriptSize</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nSize</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">20</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nSize</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>nSize</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>nSize</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecompressScript</name><parameter_list>(<parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>nSize</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0x00</literal></expr>:</case>
        <expr_stmt><expr><call><name><name>script</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>OP_DUP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>OP_HASH160</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name>OP_EQUALVERIFY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <case>case <expr><literal type="number">0x01</literal></expr>:</case>
        <expr_stmt><expr><call><name><name>script</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>OP_HASH160</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <case>case <expr><literal type="number">0x02</literal></expr>:</case>
    <case>case <expr><literal type="number">0x03</literal></expr>:</case>
        <expr_stmt><expr><call><name><name>script</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">34</literal></expr>]</index></name> <operator>=</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <case>case <expr><literal type="number">0x04</literal></expr>:</case>
    <case>case <expr><literal type="number">0x05</literal></expr>:</case>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>vch</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>vch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nSize</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>Decompress</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">65</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>script</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">67</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">65</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>script</name><index>[<expr><literal type="number">66</literal></expr>]</index></name> <operator>=</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Amount compression:</comment>
<comment type="line">// * If the amount is 0, output 0</comment>
<comment type="line">// * first, divide the amount (in base units) by the largest power of 10 possible; call the exponent e (e is max 9)</comment>
<comment type="line">// * if e&lt;9, the last digit of the resulting number cannot be 0; store it as d, and drop it (divide by 10)</comment>
<comment type="line">//   * call the result n</comment>
<comment type="line">//   * output 1 + 10*(9*n + d - 1) + e</comment>
<comment type="line">// * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9</comment>
<comment type="line">// (this is decodable, as d is in [1-9] and e is in [0-9])</comment>

<function><type><name>uint64_t</name></type> <name>CompressAmount</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name><operator>*</operator><literal type="number">9</literal> <operator>+</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>e</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>DecompressAmount</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9</comment>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
    <comment type="line">// x = 10*(9*n + d - 1) + e</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>x</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// x = 9*n + d - 1</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>x</name> <operator>%</operator> <literal type="number">9</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
        <comment type="line">// x = n</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>x</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
