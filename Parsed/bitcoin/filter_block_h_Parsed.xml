<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/table/filter_block.h"><comment type="line">// Copyright (c) 2012 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// A filter block is stored near the end of a Table file.  It contains</comment>
<comment type="line">// filters (e.g., bloom filters) for all data blocks in the table combined</comment>
<comment type="line">// into a single filter block.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/hash.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>FilterPolicy</name></decl>;</decl_stmt>

<comment type="line">// A FilterBlockBuilder is used to construct all of the filters for a</comment>
<comment type="line">// particular Table.  It generates a single string which is stored as</comment>
<comment type="line">// a special block in the Table.</comment>
<comment type="line">//</comment>
<comment type="line">// The sequence of calls to FilterBlockBuilder must match the regexp:</comment>
<comment type="line">//      (StartBlock AddKey*)* Finish</comment>
<decl_stmt><decl><type><name>class</name></type> <name>FilterBlockBuilder</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>FilterBlockBuilder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FilterPolicy</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><type><name>void</name></type> <name>StartBlock</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>block_offset</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AddKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>Slice</name></type> <name>Finish</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>GenerateFilter</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><type><specifier>const</specifier> <name>FilterPolicy</name><modifier>*</modifier></type> <name>policy_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>keys_</name></expr>;</expr_stmt>              <comment type="line">// Flattened key contents</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name> <name>start_</name></expr>;</expr_stmt>     <comment type="line">// Starting index in keys_ of each key</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>result_</name></expr>;</expr_stmt>            <comment type="line">// Filter data computed so far</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Slice</name></expr></argument>&gt;</argument_list></name> <name>tmp_keys_</name></expr>;</expr_stmt>   <comment type="line">// policy_-&gt;CreateFilter() argument</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name> <name>filter_offsets_</name></expr>;</expr_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>FilterBlockBuilder</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FilterBlockBuilder</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>FilterBlockBuilder</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>FilterBlockReader</name> <block>{<block_content>
 <label><name>public</name>:</label>
 <comment type="line">// REQUIRES: "contents" and *policy must stay live while *this is live.</comment>
  <expr_stmt><expr><call><name>FilterBlockReader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FilterPolicy</name><operator>*</operator> <name>policy</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>bool</name></type> <name>KeyMayMatch</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>block_offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>const</specifier> <name>FilterPolicy</name><modifier>*</modifier></type> <name>policy_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data_</name></decl>;</decl_stmt>    <comment type="line">// Pointer to filter data (at block-start)</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>offset_</name></decl>;</decl_stmt>  <comment type="line">// Pointer to beginning of offset array (at block-end)</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num_</name></decl>;</decl_stmt>          <comment type="line">// Number of entries in offset array</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>base_lg_</name></decl>;</decl_stmt>      <comment type="line">// Encoding parameter (see kFilterBaseLg in .cc file)</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_TABLE_FILTER_BLOCK_H_</comment>
</unit>
