<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/core_write.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<function><type><name>UniValue</name></type> <name>ValueFromAmount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>sign</name> <init>= <expr><name>amount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n_abs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><name>amount</name></expr> </then><else>: <expr><name>amount</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>quotient</name> <init>= <expr><name>n_abs</name> <operator>/</operator> <name>COIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>remainder</name> <init>= <expr><name>n_abs</name> <operator>%</operator> <name>COIN</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>UniValue</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></argument>,
            <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s%d.%08d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>quotient</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CScript</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opcodetype</name></type> <name>op</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>CScript</name><operator>::</operator><name>const_iterator</name></name></type> <name>it2</name> <init>= <expr><name>it</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>GetOp</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>OP_0</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">"0 "</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>OP_1</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>OP_16</name><operator>)</operator> <operator>||</operator> <name>op</name> <operator>==</operator> <name>OP_1NEGATE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%i "</literal></expr></argument>, <argument><expr><name>op</name> <operator>-</operator> <name>OP_1NEGATE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>OP_NOP10</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name><argument_list>(<argument><expr><call><name>GetOpName</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"OP_"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"0x%x 0x%x "</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><name>it</name> <operator>-</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>it</name> <operator>-</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"0x%x "</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"0x%x "</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></while>
    <return>return <expr><call><name><name>ret</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>mapSigHashTypes</name> <init>= <expr><block>{
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"ALL"</literal><operator>)</operator></expr>}</block></expr>,
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_ALL</name><operator>|</operator><name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"ALL|ANYONECANPAY"</literal><operator>)</operator></expr>}</block></expr>,
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_NONE</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"NONE"</literal><operator>)</operator></expr>}</block></expr>,
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_NONE</name><operator>|</operator><name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"NONE|ANYONECANPAY"</literal><operator>)</operator></expr>}</block></expr>,
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_SINGLE</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"SINGLE"</literal><operator>)</operator></expr>}</block></expr>,
    <expr><block>{<expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>SIGHASH_SINGLE</name><operator>|</operator><name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></cast></expr>, <macro><name>std</name></macro><expr><name><operator>::</operator><name>string</name></name><operator>(</operator><literal type="string">"SINGLE|ANYONECANPAY"</literal><operator>)</operator></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>SighashToStr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>sighash_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <init>= <expr><call><name><name>mapSigHashTypes</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>sighash_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mapSigHashTypes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Create the assembly string representation of a CScript object.
 * @param[in] script    CScript object to convert into the asm string representation.
 * @param[in] fAttemptSighashDecode    Whether to attempt to decode sighash types on data within the script that matches the format
 *                                     of a signature. Only pass true for scripts you believe could contain signatures. For example,
 *                                     pass false, or omit the this argument (defaults to false), for scriptPubKeys.
 */</comment>
<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ScriptToAsmStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fAttemptSighashDecode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CScript</name><operator>::</operator><name>const_iterator</name></name></type> <name>pc</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pc</name> <operator>&lt;</operator> <call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>str</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>script</name><operator>.</operator><name>GetOp</name></name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">"[error]"</literal></expr>;</expr_stmt>
            <return>return <expr><name>str</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>opcode</name> <operator>&amp;&amp;</operator> <name>opcode</name> <operator>&lt;=</operator> <name>OP_PUSHDATA4</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><operator>::</operator><name>size_type</name></name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></cast></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>CScriptNum</name><argument_list>(<argument><expr><name>vch</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// the IsUnspendable check makes sure not to try to decode OP_RETURN data that may match the format of a signature</comment>
                <if_stmt><if>if <condition>(<expr><name>fAttemptSighashDecode</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>script</name><operator>.</operator><name>IsUnspendable</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSigHashDecode</name></decl>;</decl_stmt>
                    <comment type="line">// goal: only attempt to decode a defined sighash type from data that looks like a signature within a scriptSig.</comment>
                    <comment type="line">// this won't decode correctly formatted public keys in Pubkey or Multisig scripts due to</comment>
                    <comment type="line">// the restrictions on the pubkey formats (see IsCompressedOrUncompressedPubKey) being incongruous with the</comment>
                    <comment type="line">// checks in CheckSignatureEncoding.</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>CheckSignatureEncoding</name><argument_list>(<argument><expr><name>vch</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>chSigHashType</name> <init>= <expr><call><name><name>vch</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>mapSigHashTypes</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>chSigHashType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>strSigHashDecode</name> <operator>=</operator> <literal type="string">"["</literal> <operator>+</operator> <call><name><name>mapSigHashTypes</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>chSigHashType</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>+</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// remove the sighash type byte. it will be replaced by the decode.</comment>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>HexStr</name><argument_list>(<argument><expr><name>vch</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>strSigHashDecode</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>HexStr</name><argument_list>(<argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>GetOpName</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>EncodeHexTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>serializeFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssTx</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name> <operator>|</operator> <name>serializeFlags</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ssTx</name> <operator>&lt;&lt;</operator> <name>tx</name></expr>;</expr_stmt>
    <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>ssTx</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssTx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ScriptToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"asm"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>solns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>type</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>solns</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>GetTxnOutputType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>include_address</name> <operator>&amp;&amp;</operator> <call><name>ExtractDestination</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>TX_PUBKEY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ScriptPubKeyToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>,
                        <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fIncludeHex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>addresses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nRequired</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"asm"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fIncludeHex</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TX_PUBKEY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>GetTxnOutputType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"reqSigs"</literal></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name>GetTxnOutputType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>a</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>addr</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"addresses"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>TxToUniv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hashBlock</name></decl></parameter>, <parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>include_hex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>serialize_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>GetWitnessHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vsize"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name>GetTransactionWeight</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>WITNESS_SCALE_FACTOR</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>WITNESS_SCALE_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><call><name>GetTransactionWeight</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"locktime"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>tx</name><operator>.</operator><name>nLockTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>vin</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CTxIn</name><modifier>&amp;</modifier></type> <name>txin</name> <init>= <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>in</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"coinbase"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>txin</name><operator>.</operator><name>scriptSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txin</name><operator>.</operator><name>scriptSig</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"asm"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><name><name>txin</name><operator>.</operator><name>scriptSig</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>txin</name><operator>.</operator><name>scriptSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txin</name><operator>.</operator><name>scriptSig</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptSig"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>scriptWitness</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>UniValue</name></type> <name>txinwitness</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>scriptWitness</name><operator>.</operator><name>stack</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>txinwitness</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>item</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txinwitness"</literal></expr></argument>, <argument><expr><name>txinwitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"sequence"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>txin</name><operator>.</operator><name>nSequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vin</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vin"</literal></expr></argument>, <argument><expr><name>vin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>vout</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name> <init>= <expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>out</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ScriptPubKeyToUniv</name><argument_list>(<argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vout</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><name>vout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hashBlock</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blockhash"</literal></expr></argument>, <argument><expr><call><name><name>hashBlock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>include_hex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><call><name>EncodeHexTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>serialize_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// The hex-encoded transaction. Used the name "hex" to be consistent with the verbose output of "getrawtransaction".</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
