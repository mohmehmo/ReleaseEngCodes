<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/group_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_GROUP_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_GROUP_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"num.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"group.h"</cpp:file></cpp:include>

<comment type="block">/* These points can be generated in sage as follows:
 *
 * 0. Setup a worksheet with the following parameters.
 *   b = 4  # whatever CURVE_B will be set to
 *   F = FiniteField (0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F)
 *   C = EllipticCurve ([F (0), F (b)])
 *
 * 1. Determine all the small orders available to you. (If there are
 *    no satisfactory ones, go back and change b.)
 *   print C.order().factor(limit=1000)
 *
 * 2. Choose an order as one of the prime factors listed in the above step.
 *    (You can also multiply some to get a composite order, though the
 *    tests will crash trying to invert scalars during signing.) We take a
 *    random point and scale it to drop its order to the desired value.
 *    There is some probability this won't work; just try again.
 *   order = 199
 *   P = C.random_point()
 *   P = (int(P.order()) / int(order)) * P
 *   assert(P.order() == order)
 *
 * 3. Print the values. You'll need to use a vim macro or something to
 *    split the hex output into 4-byte chunks.
 *   print "%x %x" % P.xy()
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXHAUSTIVE_TEST_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>EXHAUSTIVE_TEST_ORDER</name> <operator>==</operator> <literal type="number">199</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>secp256k1_ge</name></type> <name>secp256k1_ge_const_g</name> <init>= <expr><call><name>SECP256K1_GE_CONST</name><argument_list>(
    <argument><expr><literal type="number">0xFA7CC9A7</literal></expr></argument>, <argument><expr><literal type="number">0x0737F2DB</literal></expr></argument>, <argument><expr><literal type="number">0xA749DD39</literal></expr></argument>, <argument><expr><literal type="number">0x2B4FB069</literal></expr></argument>,
    <argument><expr><literal type="number">0x3B017A7D</literal></expr></argument>, <argument><expr><literal type="number">0xA808C2F1</literal></expr></argument>, <argument><expr><literal type="number">0xFB12940C</literal></expr></argument>, <argument><expr><literal type="number">0x9EA66C18</literal></expr></argument>,
    <argument><expr><literal type="number">0x78AC123A</literal></expr></argument>, <argument><expr><literal type="number">0x5ED8AEF3</literal></expr></argument>, <argument><expr><literal type="number">0x8732BC91</literal></expr></argument>, <argument><expr><literal type="number">0x1F3A2868</literal></expr></argument>,
    <argument><expr><literal type="number">0x48DF246C</literal></expr></argument>, <argument><expr><literal type="number">0x808DAE72</literal></expr></argument>, <argument><expr><literal type="number">0xCFE52572</literal></expr></argument>, <argument><expr><literal type="number">0x7F0501ED</literal></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CURVE_B</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><name>EXHAUSTIVE_TEST_ORDER</name> <operator>==</operator> <literal type="number">13</literal></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>secp256k1_ge</name></type> <name>secp256k1_ge_const_g</name> <init>= <expr><call><name>SECP256K1_GE_CONST</name><argument_list>(
    <argument><expr><literal type="number">0xedc60018</literal></expr></argument>, <argument><expr><literal type="number">0xa51a786b</literal></expr></argument>, <argument><expr><literal type="number">0x2ea91f4d</literal></expr></argument>, <argument><expr><literal type="number">0x4c9416c0</literal></expr></argument>,
    <argument><expr><literal type="number">0x9de54c3b</literal></expr></argument>, <argument><expr><literal type="number">0xa1316554</literal></expr></argument>, <argument><expr><literal type="number">0x6cf4345c</literal></expr></argument>, <argument><expr><literal type="number">0x7277ef15</literal></expr></argument>,
    <argument><expr><literal type="number">0x54cb1b6b</literal></expr></argument>, <argument><expr><literal type="number">0xdc8c1273</literal></expr></argument>, <argument><expr><literal type="number">0x087844ea</literal></expr></argument>, <argument><expr><literal type="number">0x43f4603e</literal></expr></argument>,
    <argument><expr><literal type="number">0x0eaf9a43</literal></expr></argument>, <argument><expr><literal type="number">0xf6effe55</literal></expr></argument>, <argument><expr><literal type="number">0x939f806d</literal></expr></argument>, <argument><expr><literal type="number">0x37adf8ac</literal></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CURVE_B</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#    <cpp:directive>error</cpp:directive> No known generator for the specified exhaustive test group order.</cpp:error>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block" format="doxygen">/** Generator for secp256k1, value 'g' defined in
 *  "Standards for Efficient Cryptography" (SEC2) 2.7.1.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>secp256k1_ge</name></type> <name>secp256k1_ge_const_g</name> <init>= <expr><call><name>SECP256K1_GE_CONST</name><argument_list>(
    <argument><expr><literal type="number">0x79BE667EUL</literal></expr></argument>, <argument><expr><literal type="number">0xF9DCBBACUL</literal></expr></argument>, <argument><expr><literal type="number">0x55A06295UL</literal></expr></argument>, <argument><expr><literal type="number">0xCE870B07UL</literal></expr></argument>,
    <argument><expr><literal type="number">0x029BFCDBUL</literal></expr></argument>, <argument><expr><literal type="number">0x2DCE28D9UL</literal></expr></argument>, <argument><expr><literal type="number">0x59F2815BUL</literal></expr></argument>, <argument><expr><literal type="number">0x16F81798UL</literal></expr></argument>,
    <argument><expr><literal type="number">0x483ADA77UL</literal></expr></argument>, <argument><expr><literal type="number">0x26A3C465UL</literal></expr></argument>, <argument><expr><literal type="number">0x5DA4FBFCUL</literal></expr></argument>, <argument><expr><literal type="number">0x0E1108A8UL</literal></expr></argument>,
    <argument><expr><literal type="number">0xFD17B448UL</literal></expr></argument>, <argument><expr><literal type="number">0xA6855419UL</literal></expr></argument>, <argument><expr><literal type="number">0x9C47D08FUL</literal></expr></argument>, <argument><expr><literal type="number">0xFB10D4B8UL</literal></expr></argument>
)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CURVE_B</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_gej_zinv</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>zi</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>zi2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>zi3</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zi2</name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zi3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi2</name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zi3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_xy</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_is_infinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_neg</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_gej</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_gej_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>z2</name></decl>, <decl><type ref="prev"/><name>z3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_inv_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_all_gej_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>last_i</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Use destination's x coordinates as scratch space */</comment>
            <if_stmt><if>if <condition>(<expr><name>last_i</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>last_i</name> <operator>==</operator> <name>SIZE_MAX</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_inv_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>last_i</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_i</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>a</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>infinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>last_i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_ge_set_gej_zinv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_globalz_set_table_gej</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>globalz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>zr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>zs</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* The z of the final point gives us the "global Z" for the table. */</comment>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
        <comment type="block">/* Ensure all y values are in weak normal form for fast negation of points */</comment>
        <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>globalz</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>infinity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>zs</name> <operator>=</operator> <name><name>zr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block">/* Work our way backwards, using the z-ratios to scale the x/y values. */</comment>
        <while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>secp256k1_ge_set_gej_zinv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_set_infinity</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_set_infinity</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_set_xquad</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>CURVE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_fe_sqrt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_set_xo_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>odd</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>secp256k1_ge_set_xquad</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_is_odd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>odd</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_set_ge</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
   <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_eq_x_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_fe_equal_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_neg</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_is_infinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_is_valid_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>y2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>z2</name></decl>, <decl><type ref="prev"/><name>z6</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block" format="doxygen">/** y^2 = x^3 + 7
     *  (Y/Z^3)^2 = (X/Z^2)^3 + 7
     *  Y^2 / Z^6 = X^3 / Z^6 + 7
     *  Y^2 = X^3 + 7*Z^6
     */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z6</name></expr></argument>, <argument><expr><name>CURVE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_fe_equal_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_ge_is_valid_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>y2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* y^2 = x^3 + 7 */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>CURVE_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_fe_equal_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x3</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_double_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Operations: 3 mul, 4 sqr, 0 normalize, 12 mul_int/add/negate.
     *
     * Note that there is an implementation described at
     *     https://hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l
     * which trades a multiply for a square, but in practice this is actually slower,
     * mainly because it requires more normalizations.
     */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>,<decl><type ref="prev"/><name>t3</name></decl>,<decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity,
     *  Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have
     *  y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.
     *
     *  Having said this, if this function receives a point on a sextic twist, e.g. by
     *  a fault attack, it is possible for y to be 0. This happens for y^2 = x^3 + 6,
     *  since -6 does have a cube root mod p. For this point, this function will not set
     *  the infinity flag even though the point doubles to infinity, and the result
     *  point will be gibberish (z = 0 but infinity = 0).
     */</comment>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rzr</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* Z' = 2*Y*Z (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* T1 = 3*X^2 (3) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="block">/* T2 = 9*X^4 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* T3 = 2*Y^2 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* T4 = 8*Y^4 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* T3 = 2*X*Y^2 (1) */</comment>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* X' = 8*X*Y^2 (4) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* X' = -8*X*Y^2 (5) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* X' = 9*X^4 - 8*X*Y^2 (6) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* T2 = -9*X^4 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* T3 = 12*X*Y^2 (6) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="block">/* T3 = 12*X*Y^2 - 9*X^4 (8) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* Y' = 36*X^3*Y^2 - 27*X^6 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* T2 = -8*Y^4 (3) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* Y' = 36*X^3*Y^2 - 27*X^6 - 8*Y^4 (4) */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_gej_double_nonzero</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>secp256k1_gej_is_infinity</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rzr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Operations: 12 mul, 4 sqr, 2 normalize, 12 mul_int/add/negate */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>z22</name></decl>, <decl><type ref="prev"/><name>z12</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>rzr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z22</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z22</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z22</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rzr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rzr</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_ge_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>rzr</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* 8 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>z12</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>rzr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_gej_set_ge</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rzr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><name>rzr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rzr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>rzr</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_zinv_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>bzinv</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* 9 mul, 3 sqr, 4 normalize, 12 mul_int/add/negate */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>az</name></decl>, <decl><type ref="prev"/><name>z12</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>h3</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>bzinv2</name></decl>, <decl><type ref="prev"/><name>bzinv3</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>infinity</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzinv2</name></expr></argument>, <argument><expr><name>bzinv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bzinv3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bzinv2</name></expr></argument>, <argument><expr><name>bzinv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bzinv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bzinv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** We need to calculate (rx,ry,rz) = (ax,ay,az) + (bx,by,1/bzinv). Due to
     *  secp256k1's isomorphism we can multiply the Z coordinates on both sides
     *  by bzinv, and get: (rx,ry,rz*bzinv) = (ax,ay,az*bzinv) + (bx,by,1).
     *  This means that (rx,ry,rz) can be calculated as
     *  (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz.
     *  The variable az below holds the modified Z coordinate for a, which is used
     *  for the computation of rx and ry, but not for rz.
     */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>az</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>bzinv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>az</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>az</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>secp256k1_fe_normalizes_to_zero_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>secp256k1_gej_double_var</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_add_ge</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Operations: 7 mul, 5 sqr, 4 normalize, 21 mul_int/add/negate/cmov */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>secp256k1_fe</name></type> <name>fe_1</name> <init>= <expr><call><name>SECP256K1_FE_CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>zz</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>tt</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>rr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>m_alt</name></decl>, <decl><type ref="prev"/><name>rr_alt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>infinity</name></decl>, <decl><type ref="prev"/><name>degenerate</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** In:
     *    Eric Brier and Marc Joye, Weierstrass Elliptic Curves and Side-Channel Attacks.
     *    In D. Naccache and P. Paillier, Eds., Public Key Cryptography, vol. 2274 of Lecture Notes in Computer Science, pages 335-345. Springer-Verlag, 2002.
     *  we find as solution for a unified addition/doubling formula:
     *    lambda = ((x1 + x2)^2 - x1 * x2 + a) / (y1 + y2), with a = 0 for secp256k1's curve equation.
     *    x3 = lambda^2 - (x1 + x2)
     *    2*y3 = lambda * (x1 + x2 - 2 * x3) - (y1 + y2).
     *
     *  Substituting x_i = Xi / Zi^2 and yi = Yi / Zi^3, for i=1,2,3, gives:
     *    U1 = X1*Z2^2, U2 = X2*Z1^2
     *    S1 = Y1*Z2^3, S2 = Y2*Z1^3
     *    Z = Z1*Z2
     *    T = U1+U2
     *    M = S1+S2
     *    Q = T*M^2
     *    R = T^2-U1*U2
     *    X3 = 4*(R^2-Q)
     *    Y3 = 4*(R*(3*Q-2*R^2)-M^4)
     *    Z3 = 2*M*Z
     *  (Note that the paper uses xi = Xi / Zi and yi = Yi / Zi instead.)
     *
     *  This formula has the benefit of being the same for both addition
     *  of distinct points and doubling. However, it breaks down in the
     *  case that either point is infinity, or that y1 = -y2. We handle
     *  these cases in the following ways:
     *
     *    - If b is infinity we simply bail by means of a VERIFY_CHECK.
     *
     *    - If a is infinity, we detect this, and at the end of the
     *      computation replace the result (which will be meaningless,
     *      but we compute to be constant-time) with b.x : b.y : 1.
     *
     *    - If a = -b, we have y1 = -y2, which is a degenerate case.
     *      But here the answer is infinity, so we simply set the
     *      infinity flag of the result, overriding the computed values
     *      without even needing to cmov.
     *
     *    - If y1 = -y2 but x1 != x2, which does occur thanks to certain
     *      properties of our curve (specifically, 1 has nontrivial cube
     *      roots in our field, and the curve equation has no x coefficient)
     *      then the answer is not infinity but also not given by the above
     *      equation. In this case, we cmov in place an alternate expression
     *      for lambda. Specifically (y1 - y2)/(x1 - x2). Where both these
     *      expressions for lambda are defined, they are equal, and can be
     *      obtained from each other by multiplication by (y1 + y2)/(y1 + y2)
     *      then substitution of x^3 + 7 for y^2 (using the curve equation).
     *      For all pairs of nonzero points (a, b) at least one is defined,
     *      so this covers everything.
     */</comment>

    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <comment type="block">/* z = Z1^2 */</comment>
    <expr_stmt><expr><name>u1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* u1 = U1 = X1*Z2^2 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* u2 = U2 = X2*Z1^2 (1) */</comment>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* s1 = S1 = Y1*Z2^3 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* s2 = Y2*Z1^2 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* s2 = S2 = Y2*Z1^3 (1) */</comment>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>u1</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* t = T = U1+U2 (2) */</comment>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* m = M = S1+S2 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                          <comment type="block">/* rr = T^2 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="block">/* Malt = -X2*Z1^2 */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="block">/* tt = -U1*U2 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="block">/* rr = R = T^2-U1*U2 (3) */</comment>
    <comment type="block" format="doxygen">/** If lambda = R/M = 0/0 we have a problem (except in the "trivial"
     *  case that Z = z1z2 = 0, and this is special-cased later on). */</comment>
    <expr_stmt><expr><name>degenerate</name> <operator>=</operator> <call><name>secp256k1_fe_normalizes_to_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call> <operator>&amp;</operator>
                 <call><name>secp256k1_fe_normalizes_to_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* This only occurs when y1 == -y2 and x1^3 == x2^3, but x1 != x2.
     * This means either x1 == beta*x2 or beta*x1 == x2, where beta is
     * a nontrivial cube root of one. In either case, an alternate
     * non-indeterminate expression for lambda is (y1 - y2)/(x1 - x2),
     * so we set R/M equal to this. */</comment>
    <expr_stmt><expr><name>rr_alt</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr_alt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block">/* rr = Y1*Z2^3 - Y2*Z1^3 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* Malt = X1*Z2^2 - X2*Z1^2 */</comment>

    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr_alt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><operator>!</operator><name>degenerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>!</operator><name>degenerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Now Ralt / Malt = lambda and is guaranteed not to be 0/0.
     * From here on out Ralt and Malt represent the numerator
     * and denominator of lambda; R and M represent the explicit
     * expressions x1^2 + x2^2 + x1x2 and y1 + y2. */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <comment type="block">/* n = Malt^2 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <comment type="block">/* q = Q = T*Malt^2 (1) */</comment>
    <comment type="block">/* These two lines use the observation that either M == Malt or M == 0,
     * so M^3 * Malt is either Malt^4 (which is computed by squaring), or
     * zero (which is "computed" by cmov). So the cost is one squaring
     * versus two multiplications. */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>degenerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="block">/* n = M^3 * Malt (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                      <comment type="block">/* t = Ralt^2 (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block">/* r-&gt;z = Malt*Z (1) */</comment>
    <expr_stmt><expr><name>infinity</name> <operator>=</operator> <call><name>secp256k1_fe_normalizes_to_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>infinity</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block">/* r-&gt;z = Z3 = 2*Malt*Z (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block">/* q = -Q (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="block">/* t = Ralt^2-Q (3) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>                                           <comment type="block">/* r-&gt;x = Ralt^2-Q (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                        <comment type="block">/* t = 2*x3 (2) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="block">/* t = 2*x3 - Q: (4) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* t = Ralt*(2*x3 - Q) (1) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="block">/* t = Ralt*(2*x3 - Q) + M^3*Malt (3) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_negate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* r-&gt;y = Ralt*(Q - 2x3) - M^3*Malt (4) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize_weak</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block">/* r-&gt;x = X3 = 4*(Ralt^2-Q) */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                     <comment type="block">/* r-&gt;y = Y3 = 4*Ralt*(Q - 2x3) - 4*M^3*Malt (4) */</comment>

    <comment type="block" format="doxygen">/** In case a-&gt;infinity == 1, replace r with (b-&gt;x, b-&gt;y, 1). */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fe_1</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <name>infinity</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_gej_rescale</name><parameter_list>(<parameter><decl><type><name>secp256k1_gej</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Operations: 4 mul, 1 sqr */</comment>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>zz</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>secp256k1_fe_is_zero</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="block">/* r-&gt;x *= s^2 */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* r-&gt;y *= s^3 */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="block">/* r-&gt;z *= s   */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_to_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_to_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_to_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_from_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_fe_from_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_from_storage</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>infinity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_ge_storage_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>secp256k1_fe_storage_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_storage_cmov</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ENDOMORPHISM</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_ge_mul_lambda</name><parameter_list>(<parameter><decl><type><name>secp256k1_ge</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_ge</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>secp256k1_fe</name></type> <name>beta</name> <init>= <expr><call><name>SECP256K1_FE_CONST</name><argument_list>(
        <argument><expr><literal type="number">0x7ae96a2bul</literal></expr></argument>, <argument><expr><literal type="number">0x657c0710ul</literal></expr></argument>, <argument><expr><literal type="number">0x6e64479eul</literal></expr></argument>, <argument><expr><literal type="number">0xac3434e9ul</literal></expr></argument>,
        <argument><expr><literal type="number">0x9cf04975ul</literal></expr></argument>, <argument><expr><literal type="number">0x12f58995ul</literal></expr></argument>, <argument><expr><literal type="number">0xc1396c28ul</literal></expr></argument>, <argument><expr><literal type="number">0x719501eeul</literal></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_gej_has_quad_y_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_gej</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>secp256k1_fe</name></type> <name>yz</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>infinity</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* We rely on the fact that the Jacobi symbol of 1 / a-&gt;z^3 is the same as
     * that of a-&gt;z. Thus a-&gt;y / a-&gt;z^3 is a quadratic residue iff a-&gt;y * a-&gt;z
       is */</comment>
    <expr_stmt><expr><call><name>secp256k1_fe_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>secp256k1_fe_is_quad_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_GROUP_IMPL_H */</comment>
</unit>
