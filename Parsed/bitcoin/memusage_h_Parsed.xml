<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/memusage.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_MEMUSAGE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_MEMUSAGE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;indirectmap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>memusage</name>
<block>{<block_content>

<comment type="block" format="doxygen">/** Compute the total memory used by allocating alloc bytes. */</comment>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>MallocUsage</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>alloc</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Dynamic memory usage for built-in types is zero. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int8_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><name>X</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name> <specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>X</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/** Compute the memory used for dynamically allocated but owned data structures.
 *  For generic data types, this is *not* recursive. DynamicUsage(vector&lt;vector&lt;int&gt; &gt;)
 *  will compute the memory used for the vector&lt;int&gt;'s, but not for the ints inside.
 *  This is for efficiency reasons, as these functions are intended to be fast. If
 *  application data structures require more accurate inner accounting, they should
 *  iterate themselves, or use more efficient caching + updating on modification.
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>MallocUsage</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>alloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Measured on libc6 2.19 on Linux.</comment>
    <if_stmt><if>if <condition>(<expr><name>alloc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>alloc</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>alloc</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// STL data structures</comment>

<macro><name>template</name></macro><expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>X</name><operator>&gt;</operator>
struct <name>stl_tree_node</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>int</name> <name>color</name></expr>;
    <expr><name>void</name><operator>*</operator> <name>parent</name></expr>;
    <expr><name>void</name><operator>*</operator> <name>left</name></expr>;
    <expr><name>void</name><operator>*</operator> <name>right</name></expr>;
    <expr><name>X</name> <name>x</name></expr>;
}</block></expr>;</expr_stmt>

<struct>struct <name>stl_shared_counter</name>
<block>{
    <comment type="block">/* Various platforms use different sized counters here.
     * Conservatively assume that they won't be larger than size_t. */</comment>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>class_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>use_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>weak_count</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>v</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>N</name></expr></argument>, <argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>S</name></expr></argument>, <argument><expr><name>typename</name> <name>D</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>S</name></expr></argument>, <argument><expr><name>D</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>allocated_memory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>IncrementalDynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>, <argument><expr><name>typename</name> <name>Z</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>m</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>, <argument><expr><name>typename</name> <name>Z</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>IncrementalDynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>m</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// indirectmap has underlying map with pointer as key</comment>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>indirectmap</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>X</name><operator>*</operator></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>IncrementalDynamicUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>indirectmap</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stl_tree_node</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>X</name><operator>*</operator></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>p</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>p</name></expr></argument>)</argument_list>
<block>{<block_content>
    <comment type="line">// A shared_ptr can either use a single continuous memory block for both</comment>
    <comment type="line">// the counter and the storage (when using std::make_shared), or separate.</comment>
    <comment type="line">// We can't observe the difference, however, so assume the worst.</comment>
    <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stl_shared_counter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>unordered_node</name> <range>: <expr><name>private</name> <name>X</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>void</name><operator>*</operator> <name>ptr</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>unordered_node</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name><name>s</name><operator>.</operator><name>bucket_count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>X</name></expr></argument>, <argument><expr><name>typename</name> <name>Y</name></expr></argument>, <argument><expr><name>typename</name> <name>Z</name></expr></argument>&gt;</argument_list></name>
<specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>DynamicUsage</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>m</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>unordered_node</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>MallocUsage</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name><name>m</name><operator>.</operator><name>bucket_count</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_MEMUSAGE_H</comment>
</unit>
