<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/uint256.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UINT256_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UINT256_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Template base class for fixed-sized opaque blobs. */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>BITS</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>base_blob</name>
<block>{<block_content>
<label><name>protected</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>int</name></type> <name>WIDTH</name> <init>= <expr><name>BITS</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<label><name>public</name>:</label>
    <macro><name>base_blob</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>explicit</name></type> <name>base_blob</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vch</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>IsNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block></expr></expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>inline</specifier> <name>int</name></type> <name>Compare</name><argument_list>(<argument><expr><specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>Compare</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>Compare</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>base_blob</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>Compare</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetHex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>SetHex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>void</name></type> <name>SetHex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <function><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>begin</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>end</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>WIDTH</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>WIDTH</name></expr>]</index></name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>unsigned</name> <name>int</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>GetUint64</name><argument_list>(<argument><expr><name>int</name> <name>pos</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>data</name> <operator>+</operator> <name>pos</name> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal> <operator>|</operator> \
               <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Serialize</name><argument_list>(<argument><expr><name>Stream</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Unserialize</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
};

<comment type="block" format="doxygen">/** 160-bit opaque blob.
 * @note This type is called uint160 for historical reasons only. It is an opaque
 * blob of 160 bits and has no integer operations.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>uint160</name> <range>: <expr><name>public</name> <name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">160</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>uint160</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <macro><name>uint160</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vch</argument>)</argument_list></macro> <operator>:</operator> <macro><name>base_blob</name></macro><operator>&lt;</operator><literal type="number">160</literal><operator>&gt;</operator><operator>(</operator><name>vch</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** 256-bit opaque blob.
 * @note This type is called uint256 for historical reasons only. It is an
 * opaque blob of 256 bits and has no integer operations. Use arith_uint256 if
 * those are required.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>uint256</name> <range>: <expr><name>public</name> <name><name>base_blob</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name> <block>{
<expr><name>public</name><operator>:</operator>
    <macro><name>uint256</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <macro><name>uint256</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vch</argument>)</argument_list></macro> <operator>:</operator> <macro><name>base_blob</name></macro><operator>&lt;</operator><literal type="number">256</literal><operator>&gt;</operator><operator>(</operator><name>vch</name><operator>)</operator> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<comment type="block">/* uint256 from const char *.
 * This is a separate function because the constructor uint256(const char*) can result
 * in dangerously catching uint256(0).
 */</comment>
<function><type><specifier>inline</specifier> <name>uint256</name></type> <name>uint256S</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* uint256 from std::string.
 * This is a separate function because the constructor uint256(const std::string &amp;str) can result
 * in dangerously catching uint256(0) via std::string(const char*).
 */</comment>
<decl_stmt><decl><type><specifier>inline</specifier> <name>uint256</name></type> <name>uint256S</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UINT256_H</comment>
</unit>
