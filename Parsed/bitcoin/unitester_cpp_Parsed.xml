<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/test/unitester.cpp"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Distributed under the MIT/X11 software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JSON_TEST_SRC</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> JSON_TEST_SRC must point to test source directory</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ARRAY_SIZE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAY_SIZE</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(arr) / sizeof((arr)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>srcdir</name><parameter_list>(<parameter><decl><type><name>JSON_TEST_SRC</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>test_failed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(expr)) { test_failed = true; fprintf(stderr, "%s failed\n", filename.c_str()); } }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f_assert</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if (!(expr)) { test_failed = true; fprintf(stderr, "%s failed\n", __func__); } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rtrim</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>find_last_not_of</name></name><argument_list>(<argument><expr><literal type="string">" \n\r\t"</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>runtest</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>jdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>prefix</name> <init>= <expr><call><name><name>filename</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>wantPass</name> <init>= <expr><operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="string">"pass"</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="string">"roun"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>wantFail</name> <init>= <expr><operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="string">"fail"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>wantRoundTrip</name> <init>= <expr><operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="string">"roun"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>wantPass</name> <operator>||</operator> <name>wantFail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>testResult</name> <init>= <expr><call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>wantPass</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>d_assert</name><argument_list>(<argument><expr><name>testResult</name> <operator>==</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>d_assert</name><argument_list>(<argument><expr><name>testResult</name> <operator>==</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>wantRoundTrip</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>odata</name> <init>= <expr><call><name><name>val</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>odata</name> <operator>==</operator> <call><name>rtrim</name><argument_list>(<argument><expr><name>jdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>runtest_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>basename</name><argument_list>(<argument><expr><name>filename_</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filename</name> <init>= <expr><name>srcdir</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>basename</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><call><name><name>filename</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>jdata</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>bread</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bread</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name>jdata</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>runtest</name><argument_list>(<argument><expr><name>basename</name></expr></argument>, <argument><expr><name>jdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>filenames</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"fail10.json"</literal></expr>,
        <expr><literal type="string">"fail11.json"</literal></expr>,
        <expr><literal type="string">"fail12.json"</literal></expr>,
        <expr><literal type="string">"fail13.json"</literal></expr>,
        <expr><literal type="string">"fail14.json"</literal></expr>,
        <expr><literal type="string">"fail15.json"</literal></expr>,
        <expr><literal type="string">"fail16.json"</literal></expr>,
        <expr><literal type="string">"fail17.json"</literal></expr>,
        <comment type="line">//"fail18.json",             // investigate</comment>
        <expr><literal type="string">"fail19.json"</literal></expr>,
        <expr><literal type="string">"fail1.json"</literal></expr>,
        <expr><literal type="string">"fail20.json"</literal></expr>,
        <expr><literal type="string">"fail21.json"</literal></expr>,
        <expr><literal type="string">"fail22.json"</literal></expr>,
        <expr><literal type="string">"fail23.json"</literal></expr>,
        <expr><literal type="string">"fail24.json"</literal></expr>,
        <expr><literal type="string">"fail25.json"</literal></expr>,
        <expr><literal type="string">"fail26.json"</literal></expr>,
        <expr><literal type="string">"fail27.json"</literal></expr>,
        <expr><literal type="string">"fail28.json"</literal></expr>,
        <expr><literal type="string">"fail29.json"</literal></expr>,
        <expr><literal type="string">"fail2.json"</literal></expr>,
        <expr><literal type="string">"fail30.json"</literal></expr>,
        <expr><literal type="string">"fail31.json"</literal></expr>,
        <expr><literal type="string">"fail32.json"</literal></expr>,
        <expr><literal type="string">"fail33.json"</literal></expr>,
        <expr><literal type="string">"fail34.json"</literal></expr>,
        <expr><literal type="string">"fail35.json"</literal></expr>,
        <expr><literal type="string">"fail36.json"</literal></expr>,
        <expr><literal type="string">"fail37.json"</literal></expr>,
        <expr><literal type="string">"fail38.json"</literal></expr>,               <comment type="line">// invalid unicode: only first half of surrogate pair</comment>
        <expr><literal type="string">"fail39.json"</literal></expr>,               <comment type="line">// invalid unicode: only second half of surrogate pair</comment>
        <expr><literal type="string">"fail40.json"</literal></expr>,               <comment type="line">// invalid unicode: broken UTF-8</comment>
        <expr><literal type="string">"fail41.json"</literal></expr>,               <comment type="line">// invalid unicode: unfinished UTF-8</comment>
        <expr><literal type="string">"fail42.json"</literal></expr>,               <comment type="line">// valid json with garbage following a nul byte</comment>
        <expr><literal type="string">"fail44.json"</literal></expr>,               <comment type="line">// unterminated string</comment>
        <expr><literal type="string">"fail3.json"</literal></expr>,
        <expr><literal type="string">"fail4.json"</literal></expr>,                <comment type="line">// extra comma</comment>
        <expr><literal type="string">"fail5.json"</literal></expr>,
        <expr><literal type="string">"fail6.json"</literal></expr>,
        <expr><literal type="string">"fail7.json"</literal></expr>,
        <expr><literal type="string">"fail8.json"</literal></expr>,
        <expr><literal type="string">"fail9.json"</literal></expr>,               <comment type="line">// extra comma</comment>
        <expr><literal type="string">"pass1.json"</literal></expr>,
        <expr><literal type="string">"pass2.json"</literal></expr>,
        <expr><literal type="string">"pass3.json"</literal></expr>,
        <expr><literal type="string">"round1.json"</literal></expr>,              <comment type="line">// round-trip test</comment>
        <expr><literal type="string">"round2.json"</literal></expr>,              <comment type="line">// unicode</comment>
        <expr><literal type="string">"round3.json"</literal></expr>,              <comment type="line">// bare string</comment>
        <expr><literal type="string">"round4.json"</literal></expr>,              <comment type="line">// bare number</comment>
        <expr><literal type="string">"round5.json"</literal></expr>,              <comment type="line">// bare true</comment>
        <expr><literal type="string">"round6.json"</literal></expr>,              <comment type="line">// bare false</comment>
        <expr><literal type="string">"round7.json"</literal></expr>,              <comment type="line">// bare null</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// Test \u handling</comment>
<function><type><name>void</name></type> <name>unescape_unicode_test</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>testResult</name></decl>;</decl_stmt>
    <comment type="line">// Escaped ASCII (quote)</comment>
    <expr_stmt><expr><name>testResult</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[\"\\u0022\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name>testResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Escaped Basic Plane character, two-byte UTF-8</comment>
    <expr_stmt><expr><name>testResult</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[\"\\u0191\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name>testResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"\xc6\x91"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Escaped Basic Plane character, three-byte UTF-8</comment>
    <expr_stmt><expr><name>testResult</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[\"\\u2191\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name>testResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"\xe2\x86\x91"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Escaped Supplementary Plane character U+1d161</comment>
    <expr_stmt><expr><name>testResult</name> <operator>=</operator> <call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[\"\\ud834\\udd61\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name>testResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>f_assert</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"\xf0\x9d\x85\xa1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fidx</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>filenames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fidx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>runtest_file</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>fidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>unescape_unicode_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>test_failed</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

</unit>
