<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/rpc/blockchain.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/blockfilterindex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/coinstats.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/utxo_snapshot.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/rbf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;undo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;warnings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;condition_variable&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mutex&gt;</cpp:file></cpp:include>

<struct>struct <name>CUpdatedBlock</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>Mutex</name></type> <name>cs_blockchange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>condition_variable</name></name></type> <name>cond_blockchange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CUpdatedBlock</name></type> <name>latestblock</name></decl>;</decl_stmt>

<function><type><name>CTxMemPool</name><modifier>&amp;</modifier></type> <name>EnsureMemPool</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>g_rpc_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g_rpc_node</name><operator>-&gt;</operator><name>mempool</name></name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_MEMPOOL_DISABLED</name></expr></argument>, <argument><expr><literal type="string">"Mempool disabled or instance not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>*</operator><name><name>g_rpc_node</name><operator>-&gt;</operator><name>mempool</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Calculate the difficulty for a given block index.
 */</comment>
<function><type><name>double</name></type> <name>GetDifficulty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>blockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nShift</name> <init>= <expr><operator>(</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nBits</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>dDiff</name> <init>=
        <expr><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0x0000ffff</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nBits</name></name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>nShift</name> <operator>&lt;</operator> <literal type="number">29</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>dDiff</name> <operator>*=</operator> <literal type="number">256.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nShift</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while>while <condition>(<expr><name>nShift</name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>dDiff</name> <operator>/=</operator> <literal type="number">256.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nShift</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>dDiff</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ComputeNextBlockAndDepth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier><modifier>&amp;</modifier></type> <name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>tip</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>==</operator> <name>blockindex</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name><name>blockindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>blockindex</name> <operator>==</operator> <name>tip</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>blockheaderToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Serialize passed information without accessing chain state of the active chain!</comment>
    <expr_stmt><expr><call><name>AssertLockNotHeld</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// For performance reasons</comment>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pnext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>confirmations</name> <init>= <expr><call><name>ComputeNextBlockAndDepth</name><argument_list>(<argument><expr><name>tip</name></expr></argument>, <argument><expr><name>blockindex</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><name>confirmations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"versionHex"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"merkleroot"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>hashMerkleRoot</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mediantime"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>blockindex</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nonce"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nNonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nBits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"difficulty"</literal></expr></argument>, <argument><expr><call><name>GetDifficulty</name><argument_list>(<argument><expr><name>blockindex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chainwork"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>nChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nTx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nTx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>blockindex</name><operator>-&gt;</operator><name>pprev</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"previousblockhash"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pnext</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nextblockhash"</literal></expr></argument>, <argument><expr><call><name><name>pnext</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>blockToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>blockindex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>txDetails</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Serialize passed information without accessing chain state of the active chain!</comment>
    <expr_stmt><expr><call><name>AssertLockNotHeld</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// For performance reasons</comment>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pnext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>confirmations</name> <init>= <expr><call><name>ComputeNextBlockAndDepth</name><argument_list>(<argument><expr><name>tip</name></expr></argument>, <argument><expr><name>blockindex</name></expr></argument>, <argument><expr><name>pnext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><name>confirmations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"strippedsize"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name> <operator>|</operator> <name>SERIALIZE_TRANSACTION_NO_WITNESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>GetBlockWeight</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>blockindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"versionHex"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"merkleroot"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>txs</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx</name> <range>: <expr><name><name>block</name><operator>.</operator><name>vtx</name></name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>txDetails</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>objTx</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TxToUniv</name><argument_list>(<argument><expr><operator>*</operator><name>tx</name></expr></argument>, <argument><expr><call><name>uint256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>objTx</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>RPCSerializationFlags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>txs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>objTx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>txs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"tx"</literal></expr></argument>, <argument><expr><name>txs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mediantime"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>blockindex</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nonce"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>block</name><operator>.</operator><name>nNonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nBits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"difficulty"</literal></expr></argument>, <argument><expr><call><name>GetDifficulty</name><argument_list>(<argument><expr><name>blockindex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chainwork"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>nChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nTx"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>blockindex</name><operator>-&gt;</operator><name>nTx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>blockindex</name><operator>-&gt;</operator><name>pprev</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"previousblockhash"</literal></expr></argument>, <argument><expr><call><name><name>blockindex</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pnext</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"nextblockhash"</literal></expr></argument>, <argument><expr><call><name><name>pnext</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblockcount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockcount"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the height of the most-work fully-validated chain.\n"</literal>
                <literal type="string">"The genesis block has height 0.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"n    (numeric) The current block count\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblockcount"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblockcount"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getbestblockhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getbestblockhash"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the hash of the best (tip) block in the most-work fully-validated chain.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"hex\"      (string) the block hash, hex-encoded\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getbestblockhash"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getbestblockhash"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>RPCNotifyBlockChange</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>ibd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type> <name>pindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>pindex</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>cs_blockchange</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>latestblock</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>latestblock</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>notify_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>waitfornewblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"waitfornewblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nWaits for a specific new block and returns useful info about it.\n"</literal>
                <literal type="string">"\nReturns the current block on timeout or exit.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"timeout"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"Time in milliseconds to wait for a response. 0 indicates no timeout."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"hash\" : {       (string) The blockhash\n"</literal>
            <literal type="string">"  \"height\" : {     (int) Block height\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"waitfornewblock"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"waitfornewblock"</literal></argument>, <argument><literal type="string">"1000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CUpdatedBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>cs_blockchange</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name>latestblock</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait_for</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>block</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>block</name><operator>.</operator><name>height</name></name> <operator>||</operator> <name><name>latestblock</name><operator>.</operator><name>hash</name></name> <operator>!=</operator> <name><name>block</name><operator>.</operator><name>hash</name></name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>block</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>height</name></name> <operator>!=</operator> <name><name>block</name><operator>.</operator><name>height</name></name> <operator>||</operator> <name><name>latestblock</name><operator>.</operator><name>hash</name></name> <operator>!=</operator> <name><name>block</name><operator>.</operator><name>hash</name></name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name>latestblock</name></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>waitforblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"waitforblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nWaits for a specific new block and returns useful info about it.\n"</literal>
                <literal type="string">"\nReturns the current block on timeout or exit.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Block hash to wait for."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"timeout"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"Time in milliseconds to wait for a response. 0 indicates no timeout."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"hash\" : {       (string) The blockhash\n"</literal>
            <literal type="string">"  \"height\" : {     (int) Block height\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"waitforblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\", 1000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"waitforblock"</literal></argument>, <argument><literal type="string">"\"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862\", 1000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CUpdatedBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>cs_blockchange</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait_for</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>hash</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>hash</name></name> <operator>==</operator> <name>hash</name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return></block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>hash</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>hash</name></name> <operator>==</operator> <name>hash</name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name>latestblock</name></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>waitforblockheight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"waitforblockheight"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nWaits for (at least) block height and returns the height and hash\n"</literal>
                <literal type="string">"of the current tip.\n"</literal>
                <literal type="string">"\nReturns the current block on timeout or exit.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Block height to wait for."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"timeout"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0"</literal></expr><operator>,</operator> <expr><literal type="string">"Time in milliseconds to wait for a response. 0 indicates no timeout."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"hash\" : {       (string) The blockhash\n"</literal>
            <literal type="string">"  \"height\" : {     (int) Block height\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"waitforblockheight"</literal></expr></argument>, <argument><expr><literal type="string">"\"100\", 1000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"waitforblockheight"</literal></argument>, <argument><literal type="string">"\"100\", 1000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CUpdatedBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>cs_blockchange</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>timeout</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait_for</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>height</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name>height</name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return></block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>cond_blockchange</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>height</name></argument>]</capture><block>{<block_content><return>return <expr><name><name>latestblock</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name>height</name> <operator>||</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name>latestblock</name></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>syncwithvalidationinterfacequeue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"syncwithvalidationinterfacequeue"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"syncwithvalidationinterfacequeue"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"syncwithvalidationinterfacequeue"</literal></argument>,<argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SyncWithValidationInterfaceQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getdifficulty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getdifficulty"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getdifficulty"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getdifficulty"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetDifficulty</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>EntryDescriptionString</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><literal type="string">"    \"vsize\" : n,            (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\n"</literal>
           <literal type="string">"    \"size\" : n,             (numeric) (DEPRECATED) same as vsize. Only returned if bitcoind is started with -deprecatedrpc=size\n"</literal>
           <literal type="string">"                              size will be completely removed in v0.20.\n"</literal>
           <literal type="string">"    \"weight\" : n,           (numeric) transaction weight as defined in BIP 141.\n"</literal>
           <literal type="string">"    \"fee\" : n,              (numeric) transaction fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" (DEPRECATED)\n"</literal>
           <literal type="string">"    \"modifiedfee\" : n,      (numeric) transaction fee with fee deltas used for mining priority (DEPRECATED)\n"</literal>
           <literal type="string">"    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n"</literal>
           <literal type="string">"    \"height\" : n,           (numeric) block height when transaction entered pool\n"</literal>
           <literal type="string">"    \"descendantcount\" : n,  (numeric) number of in-mempool descendant transactions (including this one)\n"</literal>
           <literal type="string">"    \"descendantsize\" : n,   (numeric) virtual transaction size of in-mempool descendants (including this one)\n"</literal>
           <literal type="string">"    \"descendantfees\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) (DEPRECATED)\n"</literal>
           <literal type="string">"    \"ancestorcount\" : n,    (numeric) number of in-mempool ancestor transactions (including this one)\n"</literal>
           <literal type="string">"    \"ancestorsize\" : n,     (numeric) virtual transaction size of in-mempool ancestors (including this one)\n"</literal>
           <literal type="string">"    \"ancestorfees\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) (DEPRECATED)\n"</literal>
           <literal type="string">"    \"wtxid\" : hash,         (string) hash of serialized transaction, including witness data\n"</literal>
           <literal type="string">"    \"fees\" : {\n"</literal>
           <literal type="string">"        \"base\" : n,         (numeric) transaction fee in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
           <literal type="string">"        \"modified\" : n,     (numeric) transaction fee with fee deltas used for mining priority in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
           <literal type="string">"        \"ancestor\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
           <literal type="string">"        \"descendant\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
           <literal type="string">"    }\n"</literal>
           <literal type="string">"    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n"</literal>
           <literal type="string">"        \"transactionid\",    (string) parent transaction id\n"</literal>
           <literal type="string">"       ... ]\n"</literal>
           <literal type="string">"    \"spentby\" : [           (array) unconfirmed transactions spending outputs from this transaction\n"</literal>
           <literal type="string">"        \"transactionid\",    (string) child transaction id\n"</literal>
           <literal type="string">"       ... ]\n"</literal>
           <literal type="string">"    \"bip125-replaceable\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\n"</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>entryToJSON</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxMemPool</name><operator>&amp;</operator> <name>pool</name></expr></argument>, <argument><expr><name>UniValue</name><operator>&amp;</operator> <name>info</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CTxMemPoolEntry</name><operator>&amp;</operator> <name>e</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>UniValue</name> <call><name>fees</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>fees</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"base"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>fees</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"modified"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetModifiedFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>fees</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ancestor"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetModFeesWithAncestors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>fees</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"descendant"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetModFeesWithDescendants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fees"</literal></expr></argument>, <argument><expr><name>fees</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vsize"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>GetTxSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    if <argument><expr><operator>(</operator><call><name>IsDeprecatedRPCEnabled</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call><operator>)</operator> <call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>GetTxSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>GetTxWeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"modifiedfee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetModifiedFee</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name>count_seconds</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>GetTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>e</name><operator>.</operator><name>GetHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"descendantcount"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetCountWithDescendants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"descendantsize"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetSizeWithDescendants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"descendantfees"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetModFeesWithDescendants</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ancestorcount"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetCountWithAncestors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ancestorsize"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetSizeWithAncestors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ancestorfees"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>GetModFeesWithAncestors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"wtxid"</literal></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>vTxHashes</name><index>[<expr><name><name>e</name><operator>.</operator><name>vTxHashesIdx</name></name></expr>]</index></name><operator>.</operator><call><name><name>first</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CTransaction</name><operator>&amp;</operator> <name>tx</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>GetTx</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <name>setDepends</name></expr></argument>;
    for <argument><expr><operator>(</operator><specifier>const</specifier> <name>CTxIn</name><operator>&amp;</operator> <name>txin</name> <operator>:</operator> <name><name>tx</name><operator>.</operator><name>vin</name></name><operator>)</operator>
    <block>{
        <if_stmt><if>if <condition>(<expr><call><name><name>pool</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>setDepends</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>txin</name><operator>.</operator><name>prevout</name><operator>.</operator><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    }</block>

    <name>UniValue</name> <call><name>depends</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr></argument>;
    for <argument><expr><operator>(</operator><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>dep</name> <operator>:</operator> <name>setDepends</name><operator>)</operator>
    <block>{
        <expr><call><name><name>depends</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>dep</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    <call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"depends"</literal></expr></argument>, <argument><expr><name>depends</name></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name>UniValue</name> <call><name>spent</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name><operator>&amp;</operator> <name>it</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name><name>CTxMemPool</name><operator>::</operator><name>setEntries</name></name><operator>&amp;</operator> <name>setChildren</name> <operator>=</operator> <call><name><name>pool</name><operator>.</operator><name>GetMemPoolChildren</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr></argument>;
    for <argument><expr><operator>(</operator><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name> <name>childiter</name> <operator>:</operator> <name>setChildren</name><operator>)</operator> <block>{
        <expr><call><name><name>spent</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>childiter</name><operator>-&gt;</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"spentby"</literal></expr></argument>, <argument><expr><name>spent</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Add opt-in RBF status</comment>
    <argument><expr><name>bool</name> <name>rbfStatus</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;
    <argument><expr><name>RBFTransactionState</name> <name>rbfState</name> <operator>=</operator> <call><name>IsRBFOptIn</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>;
    if <argument><expr><operator>(</operator><name>rbfState</name> <operator>==</operator> <name><name>RBFTransactionState</name><operator>::</operator><name>UNKNOWN</name></name><operator>)</operator> <block>{
        <throw>throw <argument_list>JSONRPCError<argument><expr><operator>(</operator><name>RPC_MISC_ERROR</name><operator>,</operator> <literal type="string">"Transaction is not in mempool"</literal><operator>)</operator></expr></argument></argument_list></throw>;
    }</block></expr></argument> <if_stmt><if type="elseif">else if <condition>(<expr><name>rbfState</name> <operator>==</operator> <name><name>RBFTransactionState</name><operator>::</operator><name>REPLACEABLE_BIP125</name></name></expr>)</condition> <expr_stmt><expr><block>{
        <expr><name>rbfStatus</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;
    }</block>

    <call><name><name>info</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bip125-replaceable"</literal></expr></argument>, <argument><expr><name>rbfStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></if></if_stmt></argument_list></decl></decl_stmt>
}

UniValue <macro><name>MempoolToJSON</name><argument_list>(<argument>const CTxMemPool&amp; pool</argument>, <argument>bool verbose</argument>)</argument_list></macro>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>verbose</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>UniValue</name></type> <name>o</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxMemPoolEntry</name><modifier>&amp;</modifier></type> <name>e</name> <range>: <expr><name><name>pool</name><operator>.</operator><name>mapTx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <function_decl><type><name>UniValue</name></type> <name>info</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name>entryToJSON</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Mempool has unique entries so there is no advantage in using</comment>
            <comment type="line">// UniValue::pushKV, which checks if the key already exists in O(N).</comment>
            <comment type="line">// UniValue::__pushKV is used instead which currently is O(1).</comment>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>__pushKV</name></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vtxid</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>queryHashes</name></name><argument_list>(<argument><expr><name>vtxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <function_decl><type><name>UniValue</name></type> <name>a</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name> <range>: <expr><name>vtxid</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <return>return <expr><name>a</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getrawmempool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getrawmempool"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n"</literal>
                <literal type="string">"\nHint: use getmempoolentry to fetch a specific transaction from the mempool.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"True for a json object, false for array of transaction ids"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = false"</literal></expr></argument>,
            <argument><expr><literal type="string">"[                     (json array of string)\n"</literal>
            <literal type="string">"  \"transactionid\"     (string) The transaction id\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal>
            <literal type="string">"\nResult: (for verbose = true):\n"</literal>
            <literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"transactionid\" : {       (json object)\n"</literal>
            <operator>+</operator> <call><name>EntryDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"  }, ...\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getrawmempool"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getrawmempool"</literal></argument>, <argument><literal type="string">"true"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fVerbose</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fVerbose</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>MempoolToJSON</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>fVerbose</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmempoolancestors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmempoolancestors"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf txid is in the mempool, returns all in-mempool ancestors.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id (must be in mempool)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"True for a json object, false for array of transaction ids"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <block>{<block_content>
                    <expr_stmt><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = false"</literal></expr></argument>,
            <argument><expr><literal type="string">"[                       (json array of strings)\n"</literal>
            <literal type="string">"  \"transactionid\"           (string) The transaction id of an in-mempool ancestor transaction\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = true"</literal></expr></argument>,
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"transactionid\" : {       (json object)\n"</literal>
            <operator>+</operator> <call><name>EntryDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"  }, ...\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator></expr_stmt>
                }</block_content></block>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmempoolancestors"</literal></expr></argument>, <argument><expr><literal type="string">"\"mytxid\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmempoolancestors"</literal></argument>, <argument><literal type="string">"\"mytxid\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fVerbose</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fVerbose</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"parameter 1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>it</name> <init>= <expr><call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Transaction not in mempool"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>setEntries</name></name></type> <name>setAncestors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>noLimit</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dummy</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mempool</name><operator>.</operator><name>CalculateMemPoolAncestors</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>setAncestors</name></expr></argument>, <argument><expr><name>noLimit</name></expr></argument>, <argument><expr><name>noLimit</name></expr></argument>, <argument><expr><name>noLimit</name></expr></argument>, <argument><expr><name>noLimit</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fVerbose</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>ancestorIt</name> <range>: <expr><name>setAncestors</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>ancestorIt</name><operator>-&gt;</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>ancestorIt</name> <range>: <expr><name>setAncestors</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CTxMemPoolEntry</name> <modifier>&amp;</modifier></type><name>e</name> <init>= <expr><operator>*</operator><name>ancestorIt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>_hash</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>info</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>entryToJSON</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><call><name><name>_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmempooldescendants</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmempooldescendants"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf txid is in the mempool, returns all in-mempool descendants.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id (must be in mempool)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"false"</literal></expr><operator>,</operator> <expr><literal type="string">"True for a json object, false for array of transaction ids"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <block>{<block_content>
                    <expr_stmt><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = false"</literal></expr></argument>,
            <argument><expr><literal type="string">"[                       (json array of strings)\n"</literal>
            <literal type="string">"  \"transactionid\"           (string) The transaction id of an in-mempool descendant transaction\n"</literal>
            <literal type="string">"  ,...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = true"</literal></expr></argument>,
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"transactionid\" : {       (json object)\n"</literal>
            <operator>+</operator> <call><name>EntryDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"  }, ...\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator></expr_stmt>
                }</block_content></block>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmempooldescendants"</literal></expr></argument>, <argument><expr><literal type="string">"\"mytxid\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmempooldescendants"</literal></argument>, <argument><literal type="string">"\"mytxid\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fVerbose</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fVerbose</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"parameter 1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>it</name> <init>= <expr><call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Transaction not in mempool"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>setEntries</name></name></type> <name>setDescendants</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>mempool</name><operator>.</operator><name>CalculateDescendants</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>setDescendants</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// CTxMemPool::CalculateDescendants will include the given tx</comment>
    <expr_stmt><expr><call><name><name>setDescendants</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fVerbose</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>descendantIt</name> <range>: <expr><name>setDescendants</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>descendantIt</name><operator>-&gt;</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>descendantIt</name> <range>: <expr><name>setDescendants</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CTxMemPoolEntry</name> <modifier>&amp;</modifier></type><name>e</name> <init>= <expr><operator>*</operator><name>descendantIt</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>_hash</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>GetTx</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>info</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>entryToJSON</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>o</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><call><name><name>_hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>o</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmempoolentry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmempoolentry"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns mempool data for given transaction\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id (must be in mempool)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <operator>+</operator> <call><name>EntryDescriptionString</name><argument_list>()</argument_list></call>
            <operator>+</operator> <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmempoolentry"</literal></expr></argument>, <argument><expr><literal type="string">"\"mytxid\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmempoolentry"</literal></argument>, <argument><literal type="string">"\"mytxid\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"parameter 1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>CTxMemPool</name><operator>::</operator><name>txiter</name></name></type> <name>it</name> <init>= <expr><call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mempool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Transaction not in mempool"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CTxMemPoolEntry</name> <modifier>&amp;</modifier></type><name>e</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>info</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>entryToJSON</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblockhash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockhash"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns hash of block in best-block-chain at height provided.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The height index"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"hash\"         (string) The block hash\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblockhash"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblockhash"</literal></argument>, <argument><literal type="string">"1000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name><name>nHeight</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nHeight</name></expr></argument> &gt;</argument_list></name> <operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Block height out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><index>[<expr><name>nHeight</name></expr>]</index></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>pblockindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblockheader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockheader"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\n"</literal>
                <literal type="string">"If verbose is true, returns an Object with information about blockheader &lt;hash&gt;.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The block hash"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbose"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"true for a json object, false for the hex-encoded data"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <block>{<block_content>
                    <expr_stmt><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose = true"</literal></expr></argument>,
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"hash\" : \"hash\",     (string) the block hash (same as provided)\n"</literal>
            <literal type="string">"  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n"</literal>
            <literal type="string">"  \"height\" : n,          (numeric) The block height or index\n"</literal>
            <literal type="string">"  \"version\" : n,         (numeric) The block version\n"</literal>
            <literal type="string">"  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal\n"</literal>
            <literal type="string">"  \"merkleroot\" : \"xxxx\", (string) The merkle root\n"</literal>
            <literal type="string">"  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"nonce\" : n,           (numeric) The nonce\n"</literal>
            <literal type="string">"  \"bits\" : \"1d00ffff\", (string) The bits\n"</literal>
            <literal type="string">"  \"difficulty\" : x.xxx,  (numeric) The difficulty\n"</literal>
            <literal type="string">"  \"chainwork\" : \"0000...1f3\"     (string) Expected number of hashes required to produce the current chain (in hex)\n"</literal>
            <literal type="string">"  \"nTx\" : n,             (numeric) The number of transactions in the block.\n"</literal>
            <literal type="string">"  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n"</literal>
            <literal type="string">"  \"nextblockhash\" : \"hash\",      (string) The hash of the next block\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbose=false"</literal></expr></argument>,
            <argument><expr><literal type="string">"\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator></expr_stmt>
                }</block_content></block>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblockheader"</literal></expr></argument>, <argument><expr><literal type="string">"\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblockheader"</literal></argument>, <argument><literal type="string">"\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fVerbose</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fVerbose</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pblockindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblockindex</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fVerbose</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssBlock</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ssBlock</name> <operator>&lt;&lt;</operator> <call><name><name>pblockindex</name><operator>-&gt;</operator><name>GetBlockHeader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHex</name> <init>= <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>ssBlock</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssBlock</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>strHex</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>blockheaderToJSON</name><argument_list>(<argument><expr><name>tip</name></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CBlock</name></type> <name>GetBlockChecked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsBlockPruned</name><argument_list>(<argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block not available (pruned data)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadBlockFromDisk</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Block not found on disk. This could be because we have the block</comment>
        <comment type="line">// header in our index but don't have the block (for example if a</comment>
        <comment type="line">// non-whitelisted node sends us an unrequested long chain of valid</comment>
        <comment type="line">// blocks, we add the headers to our index, but don't accept the</comment>
        <comment type="line">// block).</comment>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block not found on disk"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CBlockUndo</name></type> <name>GetUndoChecked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlockUndo</name></type> <name>blockUndo</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsBlockPruned</name><argument_list>(<argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Undo data not available (pruned data)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UndoReadFromDisk</name><argument_list>(<argument><expr><name>blockUndo</name></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't read undo data from disk"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>blockUndo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for block 'hash'.\n"</literal>
                <literal type="string">"If verbosity is 1, returns an Object with information about block &lt;hash&gt;.\n"</literal>
                <literal type="string">"If verbosity is 2, returns an Object with information about block &lt;hash&gt; and information about each transaction. \n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The block hash"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"verbosity"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"0 for hex-encoded data, 1 for a json object, and 2 for json object with transaction data"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <block>{<block_content>
                    <expr_stmt><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbosity = 0"</literal></expr></argument>,
            <argument><expr><literal type="string">"\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbosity = 1"</literal></expr></argument>,
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"hash\" : \"hash\",     (string) the block hash (same as provided)\n"</literal>
            <literal type="string">"  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n"</literal>
            <literal type="string">"  \"size\" : n,            (numeric) The block size\n"</literal>
            <literal type="string">"  \"strippedsize\" : n,    (numeric) The block size excluding witness data\n"</literal>
            <literal type="string">"  \"weight\" : n           (numeric) The block weight as defined in BIP 141\n"</literal>
            <literal type="string">"  \"height\" : n,          (numeric) The block height or index\n"</literal>
            <literal type="string">"  \"version\" : n,         (numeric) The block version\n"</literal>
            <literal type="string">"  \"versionHex\" : \"00000000\", (string) The block version formatted in hexadecimal\n"</literal>
            <literal type="string">"  \"merkleroot\" : \"xxxx\", (string) The merkle root\n"</literal>
            <literal type="string">"  \"tx\" : [               (array of string) The transaction ids\n"</literal>
            <literal type="string">"     \"transactionid\"     (string) The transaction id\n"</literal>
            <literal type="string">"     ,...\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"mediantime\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"nonce\" : n,           (numeric) The nonce\n"</literal>
            <literal type="string">"  \"bits\" : \"1d00ffff\", (string) The bits\n"</literal>
            <literal type="string">"  \"difficulty\" : x.xxx,  (numeric) The difficulty\n"</literal>
            <literal type="string">"  \"chainwork\" : \"xxxx\",  (string) Expected number of hashes required to produce the chain up to this block (in hex)\n"</literal>
            <literal type="string">"  \"nTx\" : n,             (numeric) The number of transactions in the block.\n"</literal>
            <literal type="string">"  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n"</literal>
            <literal type="string">"  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"for verbosity = 2"</literal></expr></argument>,
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  ...,                     Same output as verbosity = 1.\n"</literal>
            <literal type="string">"  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n"</literal>
            <literal type="string">"         ,...\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  ,...                     Same output as verbosity = 1.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator></expr_stmt>
                }</block_content></block>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblock"</literal></argument>, <argument><literal type="string">"\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>verbosity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNum</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>verbosity</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>verbosity</name> <operator>=</operator> <ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pblockindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblockindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>GetBlockChecked</name><argument_list>(<argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssBlock</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name> <operator>|</operator> <call><name>RPCSerializationFlags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ssBlock</name> <operator>&lt;&lt;</operator> <name>block</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHex</name> <init>= <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>ssBlock</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssBlock</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>strHex</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>blockToJSON</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>, <argument><expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>pruneblockchain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"pruneblockchain"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The block height to prune up to. May be set to a discrete height, or a unix timestamp\n"</literal>
            <literal type="string">"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"n    (numeric) Height of the last block pruned.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"pruneblockchain"</literal></expr></argument>, <argument><expr><literal type="string">"1000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"pruneblockchain"</literal></argument>, <argument><literal type="string">"1000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fPruneMode</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot prune blocks because node is not in prune mode."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>heightParam</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>heightParam</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Negative block height."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <comment type="line">// Height value more than a billion is too high to be a block height, and</comment>
    <comment type="line">// too low to be a block time (corresponds to timestamp from Sep 2001).</comment>
    <if_stmt><if>if <condition>(<expr><name>heightParam</name> <operator>&gt;</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Add a 2 hour buffer to include blocks which might have had old timestamps</comment>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>FindEarliestAtLeast</name><argument_list>(<argument><expr><name>heightParam</name> <operator>-</operator> <name>TIMESTAMP_WINDOW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Could not find block with at least the specified timestamp."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>heightParam</name> <operator>=</operator> <name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>heightParam</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>chainHeight</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>chainHeight</name> <operator>&lt;</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PruneAfterHeight</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Blockchain is too short for pruning."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>chainHeight</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Blockchain is shorter than the attempted prune height."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>chainHeight</name> <operator>-</operator> <name>MIN_BLOCKS_TO_KEEP</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>RPC</name></name></expr></argument>, <argument><expr><literal type="string">"Attempt to prune blocks close to the tip.  Retaining the minimum number of blocks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>height</name> <operator>=</operator> <name>chainHeight</name> <operator>-</operator> <name>MIN_BLOCKS_TO_KEEP</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>PruneBlockFilesManual</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>pprev</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>nStatus</name></name> <operator>&amp;</operator> <name>BLOCK_HAVE_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pprev</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>gettxoutsetinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"gettxoutsetinfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns statistics about the unspent transaction output set.\n"</literal>
                <literal type="string">"Note this call may take some time.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"height\":n,     (numeric) The current block height (index)\n"</literal>
            <literal type="string">"  \"bestblock\": \"hex\",   (string) The hash of the block at the tip of the chain\n"</literal>
            <literal type="string">"  \"transactions\": n,      (numeric) The number of transactions with unspent outputs\n"</literal>
            <literal type="string">"  \"txouts\": n,            (numeric) The number of unspent transaction outputs\n"</literal>
            <literal type="string">"  \"bogosize\": n,          (numeric) A meaningless metric for UTXO set size\n"</literal>
            <literal type="string">"  \"hash_serialized_2\": \"hash\", (string) The serialized hash\n"</literal>
            <literal type="string">"  \"disk_size\": n,         (numeric) The estimated size of the chainstate on disk\n"</literal>
            <literal type="string">"  \"total_amount\": x.xxx          (numeric) The total amount\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"gettxoutsetinfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"gettxoutsetinfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CCoinsStats</name></type> <name>stats</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ForceFlushStateToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CCoinsView</name><modifier>*</modifier></type> <name>coins_view</name> <init>= <macro><name>WITH_LOCK</name><argument_list>(<argument>cs_main</argument>, <argument>return &amp;ChainstateActive().CoinsDB()</argument>)</argument_list></macro></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GetUTXOStats</name><argument_list>(<argument><expr><name>coins_view</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bestblock"</literal></expr></argument>, <argument><expr><call><name><name>stats</name><operator>.</operator><name>hashBlock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"transactions"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>nTransactions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txouts"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>nTransactionOutputs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bogosize"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>nBogoSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash_serialized_2"</literal></expr></argument>, <argument><expr><call><name><name>stats</name><operator>.</operator><name>hashSerialized</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"disk_size"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>nDiskSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total_amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>nTotalAmount</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to read UTXO set"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>gettxout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"gettxout"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns details about an unspent transaction output.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"n"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"vout number"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include_mempool"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>BOOL</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"true"</literal></expr><operator>,</operator> <expr><literal type="string">"Whether to include the mempool. Note that an unspent output that is spent in the mempool won't appear."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"bestblock\":  \"hash\",    (string) The hash of the block at the tip of the chain\n"</literal>
            <literal type="string">"  \"confirmations\" : n,       (numeric) The number of confirmations\n"</literal>
            <literal type="string">"  \"value\" : x.xxx,           (numeric) The transaction value in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"  \"scriptPubKey\" : {         (json object)\n"</literal>
            <literal type="string">"     \"asm\" : \"code\",       (string) \n"</literal>
            <literal type="string">"     \"hex\" : \"hex\",        (string) \n"</literal>
            <literal type="string">"     \"reqSigs\" : n,          (numeric) Number of required signatures\n"</literal>
            <literal type="string">"     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash\n"</literal>
            <literal type="string">"     \"addresses\" : [          (array of string) array of bitcoin addresses\n"</literal>
            <literal type="string">"        \"address\"     (string) bitcoin address\n"</literal>
            <literal type="string">"        ,...\n"</literal>
            <literal type="string">"     ]\n"</literal>
            <literal type="string">"  },\n"</literal>
            <literal type="string">"  \"coinbase\" : true|false   (boolean) Coinbase or not\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nGet unspent transactions\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"listunspent"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nView the details\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"gettxout"</literal></expr></argument>, <argument><expr><literal type="string">"\"txid\" 1"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"gettxout"</literal></argument>, <argument><literal type="string">"\"txid\", 1"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>COutPoint</name></type> <name>out</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fMempool</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fMempool</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name><modifier>*</modifier></type> <name>coins_view</name> <init>= <expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fMempool</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CCoinsViewMemPool</name></type> <name>view</name><argument_list>(<argument><expr><name>coins_view</name></expr></argument>, <argument><expr><name>mempool</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>view</name><operator>.</operator><name>GetCoin</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>mempool</name><operator>.</operator><name>isSpent</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NullUniValue</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coins_view</name><operator>-&gt;</operator><name>GetCoin</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>NullUniValue</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><call><name><name>coins_view</name><operator>-&gt;</operator><name>GetBestBlock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bestblock"</literal></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>coin</name><operator>.</operator><name>nHeight</name></name> <operator>==</operator> <name>MEMPOOL_HEIGHT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"confirmations"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name><name>coin</name><operator>.</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>o</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ScriptPubKeyToUniv</name><argument_list>(<argument><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"coinbase"</literal></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator><name><name>coin</name><operator>.</operator><name>fCoinBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>verifychain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nCheckLevel</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checklevel"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKLEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCheckDepth</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblocks"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKBLOCKS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"verifychain"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nVerifies blockchain database.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"checklevel"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d, range=0-4"</literal></expr></argument>, <argument><expr><name>nCheckLevel</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="string">"How thorough the block verification is."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nblocks"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d, 0=all"</literal></expr></argument>, <argument><expr><name>nCheckDepth</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="string">"The number of blocks to check."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"true|false       (boolean) Verified or not\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"verifychain"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"verifychain"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nCheckLevel</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nCheckDepth</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>CVerifyDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>VerifyDB</name><argument_list>(
        <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nCheckLevel</name></expr></argument>, <argument><expr><name>nCheckDepth</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>UniValue</name><operator>&amp;</operator> <name>softforks</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>int</name> <name>height</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list>
<argument_list>{
    <comment type="line">// For buried deployments.</comment>
    <comment type="line">// A buried deployment is one where the height of the activation has been hardcoded into</comment>
    <comment type="line">// the client implementation long after the consensus change has activated. See BIP 90.</comment>
    <comment type="line">// Buried deployments with activation height value of</comment>
    <comment type="line">// std::numeric_limits&lt;int&gt;::max() are disabled and thus hidden.</comment>
    if <argument><expr><operator>(</operator><name>height</name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument> <return>return;</return></argument_list></decl></decl_stmt>

    <function_decl><type><name>UniValue</name></type> <name>rv</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">"buried"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// getblockchaininfo reports the softfork as active from when the chain height is</comment>
    <comment type="line">// one below the activation height</comment>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"active"</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>softforks</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

static <decl_stmt><decl><type><name>void</name></type> <name>BIP9SoftForkDescPushBack</name><argument_list>(<argument><expr><name>UniValue</name><operator>&amp;</operator> <name>softforks</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><operator>&amp;</operator> <name>consensusParams</name></expr></argument>, <argument><expr><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name> <name>id</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list>
<argument_list>{
    <comment type="line">// For BIP9 deployments.</comment>
    <comment type="line">// Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.</comment>
    <comment type="line">// A timeout value of 0 guarantees a softfork will never be activated.</comment>
    <comment type="line">// This is used when merging logic to implement a proposed softfork without a specified deployment schedule.</comment>
    if <argument><expr><operator>(</operator><name><name>consensusParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>&lt;=</operator> <literal type="number">1230768000</literal><operator>)</operator></expr></argument> <return>return;</return></argument_list></decl></decl_stmt>

    <function_decl><type><name>UniValue</name></type> <name>bip9</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ThresholdState</name></type> <name>thresholdState</name> <init>= <expr><call><name>VersionBitsTipState</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>thresholdState</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>DEFINED</name></name></expr>:</case> <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><literal type="string">"defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>STARTED</name></name></expr>:</case> <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><literal type="string">"started"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>LOCKED_IN</name></name></expr>:</case> <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><literal type="string">"locked_in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr>:</case> <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><literal type="string">"active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>FAILED</name></name></expr>:</case> <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block></switch>
    <if_stmt><if>if <condition>(<expr><name><name>ThresholdState</name><operator>::</operator><name>STARTED</name></name> <operator>==</operator> <name>thresholdState</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bit"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"start_time"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>nStartTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timeout"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>nTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>since_height</name> <init>= <expr><call><name>VersionBitsTipStateSinceHeight</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"since"</literal></expr></argument>, <argument><expr><name>since_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ThresholdState</name><operator>::</operator><name>STARTED</name></name> <operator>==</operator> <name>thresholdState</name></expr>)</condition>
    <block>{<block_content>
        <function_decl><type><name>UniValue</name></type> <name>statsUV</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>BIP9Stats</name></type> <name>statsStruct</name> <init>= <expr><call><name>VersionBitsTipStatistics</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>statsUV</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"period"</literal></expr></argument>, <argument><expr><name><name>statsStruct</name><operator>.</operator><name>period</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>statsUV</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"threshold"</literal></expr></argument>, <argument><expr><name><name>statsStruct</name><operator>.</operator><name>threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>statsUV</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"elapsed"</literal></expr></argument>, <argument><expr><name><name>statsStruct</name><operator>.</operator><name>elapsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>statsUV</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><name><name>statsStruct</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>statsUV</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"possible"</literal></expr></argument>, <argument><expr><name><name>statsStruct</name><operator>.</operator><name>possible</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bip9</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"statistics"</literal></expr></argument>, <argument><expr><name>statsUV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>rv</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><literal type="string">"bip9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bip9"</literal></expr></argument>, <argument><expr><name>bip9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name> <operator>==</operator> <name>thresholdState</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name>since_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"active"</literal></expr></argument>, <argument><expr><name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name> <operator>==</operator> <name>thresholdState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>softforks</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

UniValue <macro><name>getblockchaininfo</name><argument_list>(<argument>const JSONRPCRequest&amp; request</argument>)</argument_list></macro>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockchaininfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"Returns an object containing various state info regarding blockchain processing.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"chain\": \"xxxx\",              (string) current network name (main, test, regtest)\n"</literal>
            <literal type="string">"  \"blocks\": xxxxxx,             (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\n"</literal>
            <literal type="string">"  \"headers\": xxxxxx,            (numeric) the current number of headers we have validated\n"</literal>
            <literal type="string">"  \"bestblockhash\": \"...\",       (string) the hash of the currently best block\n"</literal>
            <literal type="string">"  \"difficulty\": xxxxxx,         (numeric) the current difficulty\n"</literal>
            <literal type="string">"  \"mediantime\": xxxxxx,         (numeric) median time for the current best block\n"</literal>
            <literal type="string">"  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]\n"</literal>
            <literal type="string">"  \"initialblockdownload\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.\n"</literal>
            <literal type="string">"  \"chainwork\": \"xxxx\"           (string) total amount of work in active chain, in hexadecimal\n"</literal>
            <literal type="string">"  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\n"</literal>
            <literal type="string">"  \"pruned\": xx,                 (boolean) if the blocks are subject to pruning\n"</literal>
            <literal type="string">"  \"pruneheight\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\n"</literal>
            <literal type="string">"  \"automatic_pruning\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\n"</literal>
            <literal type="string">"  \"prune_target_size\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\n"</literal>
            <literal type="string">"  \"softforks\": {                (object) status of softforks\n"</literal>
            <literal type="string">"     \"xxxx\" : {                 (string) name of the softfork\n"</literal>
            <literal type="string">"        \"type\": \"xxxx\",         (string) one of \"buried\", \"bip9\"\n"</literal>
            <literal type="string">"        \"bip9\": {               (object) status of bip9 softforks (only for \"bip9\" type)\n"</literal>
            <literal type="string">"           \"status\": \"xxxx\",    (string) one of \"defined\", \"started\", \"locked_in\", \"active\", \"failed\"\n"</literal>
            <literal type="string">"           \"bit\": xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \"started\" status)\n"</literal>
            <literal type="string">"           \"start_time\": xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\n"</literal>
            <literal type="string">"           \"timeout\": xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\n"</literal>
            <literal type="string">"           \"since\": xx,         (numeric) height of the first block to which the status applies\n"</literal>
            <literal type="string">"           \"statistics\": {      (object) numeric statistics about BIP9 signalling for a softfork\n"</literal>
            <literal type="string">"              \"period\": xx,     (numeric) the length in blocks of the BIP9 signalling period \n"</literal>
            <literal type="string">"              \"threshold\": xx,  (numeric) the number of blocks with the version bit set required to activate the feature \n"</literal>
            <literal type="string">"              \"elapsed\": xx,    (numeric) the number of blocks elapsed since the beginning of the current period \n"</literal>
            <literal type="string">"              \"count\": xx,      (numeric) the number of blocks with the version bit set in the current period \n"</literal>
            <literal type="string">"              \"possible\": xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \n"</literal>
            <literal type="string">"           }\n"</literal>
            <literal type="string">"        },\n"</literal>
            <literal type="string">"        \"height\": \"xxxxxx\",     (numeric) height of the first block which the rules are or will be enforced (only for \"buried\" type, or \"bip9\" type with \"active\" status)\n"</literal>
            <literal type="string">"        \"active\": xx,           (boolean) true if the rules are enforced for the mempool and the next block\n"</literal>
            <literal type="string">"     }\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"  \"warnings\" : \"...\",           (string) any network and blockchain warnings.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblockchaininfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblockchaininfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>obj</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chain"</literal></expr></argument>,                 <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blocks"</literal></expr></argument>,                <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"headers"</literal></expr></argument>,               <argument><expr><ternary><condition><expr><name>pindexBestHeader</name></expr> ?</condition><then> <expr><name><name>pindexBestHeader</name><operator>-&gt;</operator><name>nHeight</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bestblockhash"</literal></expr></argument>,         <argument><expr><call><name><name>tip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"difficulty"</literal></expr></argument>,            <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>GetDifficulty</name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mediantime"</literal></expr></argument>,            <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>tip</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"verificationprogress"</literal></expr></argument>,  <argument><expr><call><name>GuessVerificationProgress</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>TxData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"initialblockdownload"</literal></expr></argument>,  <argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsInitialBlockDownload</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chainwork"</literal></expr></argument>,             <argument><expr><call><name><name>tip</name><operator>-&gt;</operator><name>nChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"size_on_disk"</literal></expr></argument>,          <argument><expr><call><name>CalculateCurrentUsage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pruned"</literal></expr></argument>,                <argument><expr><name>fPruneMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fPruneMode</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><name>tip</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>pprev</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>nStatus</name></name> <operator>&amp;</operator> <name>BLOCK_HAVE_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>pprev</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pruneheight"</literal></expr></argument>,        <argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if 0, execution bypasses the whole if block.</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>automatic_pruning</name> <init>= <expr><operator>(</operator><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-prune"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"automatic_pruning"</literal></expr></argument>,  <argument><expr><name>automatic_pruning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>automatic_pruning</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"prune_target_size"</literal></expr></argument>,  <argument><expr><name>nPruneTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>consensusParams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>softforks</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"bip34"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>BIP34Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"bip66"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>BIP66Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"bip65"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>BIP65Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"csv"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>CSVHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BuriedForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"segwit"</literal></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>SegwitHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BIP9SoftForkDescPushBack</name><argument_list>(<argument><expr><name>softforks</name></expr></argument>, <argument><expr><literal type="string">"testdummy"</literal></expr></argument>, <argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"softforks"</literal></expr></argument>,             <argument><expr><name>softforks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warnings"</literal></expr></argument>, <argument><expr><call><name>GetWarnings</name><argument_list>(<argument><expr><literal type="string">"statusbar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block>

<comment type="block" format="doxygen">/** Comparison function for sorting the getchaintips heads.  */</comment>
<struct>struct <name>CompareBlocksByHeight</name>
<block>{<public type="default">
    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <comment type="block">/* Make sure that unequal blocks with the same height do not compare
           equal. Use the pointers themselves to make a distinction. */</comment>

        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>nHeight</name></name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>nHeight</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getchaintips</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getchaintips"</literal></expr></argument>,
                <argument><expr><literal type="string">"Return information about all known tips in the block tree,"</literal>
                <literal type="string">" including the main chain as well as orphaned branches.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"height\": xxxx,         (numeric) height of the chain tip\n"</literal>
            <literal type="string">"    \"hash\": \"xxxx\",         (string) block hash of the tip\n"</literal>
            <literal type="string">"    \"branchlen\": 0          (numeric) zero for main chain\n"</literal>
            <literal type="string">"    \"status\": \"active\"      (string) \"active\" for the main chain\n"</literal>
            <literal type="string">"  },\n"</literal>
            <literal type="string">"  {\n"</literal>
            <literal type="string">"    \"height\": xxxx,\n"</literal>
            <literal type="string">"    \"hash\": \"xxxx\",\n"</literal>
            <literal type="string">"    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain\n"</literal>
            <literal type="string">"    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"]\n"</literal>
            <literal type="string">"Possible values for status:\n"</literal>
            <literal type="string">"1.  \"invalid\"               This branch contains at least one invalid block\n"</literal>
            <literal type="string">"2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid\n"</literal>
            <literal type="string">"3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated\n"</literal>
            <literal type="string">"4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated\n"</literal>
            <literal type="string">"5.  \"active\"                This is the tip of the active main chain, which is certainly valid\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getchaintips"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getchaintips"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Idea:  the set of chain tips is ::ChainActive().tip, plus orphan blocks which do not have another orphan building off of them.
     * Algorithm:
     *  - Make one pass through g_blockman.m_block_index, picking out the orphan blocks, and also storing a set of the orphan block's pprev pointers.
     *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.
     *  - add ::ChainActive().Tip()
     */</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></expr></argument>, <argument><expr><name>CompareBlocksByHeight</name></expr></argument>&gt;</argument_list></name></type> <name>setTips</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>setOrphans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>setPrevs</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>uint256</name></expr></argument>, <argument><expr><name>CBlockIndex</name><operator>*</operator></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><call><name><operator>::</operator><name>BlockIndex</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Contains</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>setOrphans</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>setPrevs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>second</name><operator>-&gt;</operator><name>pprev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>setOrphans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>setOrphans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>setPrevs</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>setTips</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Always report the currently active tip.</comment>
    <expr_stmt><expr><call><name><name>setTips</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Construct the output array.  */</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>res</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name> <range>: <expr><name>setTips</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>phashBlock</name><operator>-&gt;</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>branchLen</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>FindFork</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"branchlen"</literal></expr></argument>, <argument><expr><name>branchLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>status</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Contains</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// This block is part of the currently active chain.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"active"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>nStatus</name></name> <operator>&amp;</operator> <name>BLOCK_FAILED_MASK</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// This block or one of its ancestors is invalid.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"invalid"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>block</name><operator>-&gt;</operator><name>HaveTxsDownloaded</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// This block cannot be connected because full block data for it or one of its parents is missing.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"headers-only"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>block</name><operator>-&gt;</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>BLOCK_VALID_SCRIPTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// This block is fully validated, but no longer part of the active chain. It was probably the active block once, but was reorganized.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"valid-fork"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>block</name><operator>-&gt;</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>BLOCK_VALID_TREE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// The headers for this block are valid, but it has not been validated. It was probably never part of the most-work chain.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"valid-headers"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// No clue.</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>MempoolInfoToJSON</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxMemPool</name><modifier>&amp;</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Make sure this call is atomic in the pool.</comment>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"loaded"</literal></expr></argument>, <argument><expr><call><name><name>pool</name><operator>.</operator><name>IsLoaded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>pool</name><operator>.</operator><name>GetTotalTxSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"usage"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>pool</name><operator>.</operator><name>DynamicMemoryUsage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>maxmempool</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxmempool"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_MEMPOOL_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"maxmempool"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>maxmempool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mempoolminfee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>GetMinFee</name></name><argument_list>(<argument><expr><name>maxmempool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>::</operator><name>minRelayTxFee</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetFeePerK</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"minrelaytxfee"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>minRelayTxFee</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmempoolinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmempoolinfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns details on the active state of the TX memory pool.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"loaded\": true|false         (boolean) True if the mempool is fully loaded\n"</literal>
            <literal type="string">"  \"size\": xxxxx,               (numeric) Current tx count\n"</literal>
            <literal type="string">"  \"bytes\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\n"</literal>
            <literal type="string">"  \"usage\": xxxxx,              (numeric) Total memory usage for the mempool\n"</literal>
            <literal type="string">"  \"maxmempool\": xxxxx,         (numeric) Maximum memory usage for the mempool\n"</literal>
            <literal type="string">"  \"mempoolminfee\": xxxxx       (numeric) Minimum fee rate in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\n"</literal>
            <literal type="string">"  \"minrelaytxfee\": xxxxx       (numeric) Current minimum relay fee for transactions\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmempoolinfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmempoolinfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>MempoolInfoToJSON</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>preciousblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"preciousblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nTreats a block as if it were received before others with the same work.\n"</literal>
                <literal type="string">"\nA later preciousblock call can override the effect of an earlier one.\n"</literal>
                <literal type="string">"\nThe effects of preciousblock are not retained across restarts.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"the hash of the block to mark as precious"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"preciousblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"blockhash\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"preciousblock"</literal></argument>, <argument><literal type="string">"\"blockhash\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl>;</decl_stmt>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pblockindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblockindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>PreciousBlock</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DATABASE_ERROR</name></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>invalidateblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"invalidateblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nPermanently marks a block as invalid, as if it violated a consensus rule.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"the hash of the block to mark as invalid"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"invalidateblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"blockhash\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"invalidateblock"</literal></argument>, <argument><literal type="string">"\"blockhash\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pblockindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblockindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>InvalidateBlock</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ActivateBestChain</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DATABASE_ERROR</name></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>reconsiderblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"reconsiderblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\n"</literal>
                <literal type="string">"This can be used to undo the effects of invalidateblock.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"the hash of the block to reconsider"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"reconsiderblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"blockhash\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"reconsiderblock"</literal></argument>, <argument><literal type="string">"\"blockhash\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pblockindex</name> <init>= <expr><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblockindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ResetBlockFailureFlags</name><argument_list>(<argument><expr><name>pblockindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ActivateBestChain</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DATABASE_ERROR</name></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getchaintxstats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getchaintxstats"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nCompute statistics about the total number and rate of transactions in the chain.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nblocks"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"one month"</literal></expr><operator>,</operator> <expr><literal type="string">"Size of the window in number of blocks"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"chain tip"</literal></expr><operator>,</operator> <expr><literal type="string">"The hash of the block that ends the window."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\n"</literal>
            <literal type="string">"  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\n"</literal>
            <literal type="string">"  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.\n"</literal>
            <literal type="string">"  \"window_final_block_height\": xxxxx,    (numeric) The height of the final block in the window.\n"</literal>
            <literal type="string">"  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.\n"</literal>
            <literal type="string">"  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is &gt; 0.\n"</literal>
            <literal type="string">"  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is &gt; 0.\n"</literal>
            <literal type="string">"  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is &gt; 0.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getchaintxstats"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getchaintxstats"</literal></argument>, <argument><literal type="string">"2016"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>blockcount</name> <init>= <expr><literal type="number">30</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>/</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr></init></decl>;</decl_stmt> <comment type="line">// By default: 1 month</comment>

    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pindex</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Contains</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Block is not in main chain"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>pindex</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blockcount</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>blockcount</name></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>blockcount</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>blockcount</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>blockcount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>blockcount</name> <operator>&gt;=</operator> <name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid block count: should be between 0 and the block's height - 1"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPast</name> <init>= <expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetAncestor</name></name><argument_list>(<argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>-</operator> <name>blockcount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTimeDiff</name> <init>= <expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>pindexPast</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTxDiff</name> <init>= <expr><name><name>pindex</name><operator>-&gt;</operator><name>nChainTx</name></name> <operator>-</operator> <name><name>pindexPast</name><operator>-&gt;</operator><name>nChainTx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pindex</name><operator>-&gt;</operator><name>nTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txcount"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pindex</name><operator>-&gt;</operator><name>nChainTx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"window_final_block_hash"</literal></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"window_final_block_height"</literal></expr></argument>, <argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"window_block_count"</literal></expr></argument>, <argument><expr><name>blockcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>blockcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"window_tx_count"</literal></expr></argument>, <argument><expr><name>nTxDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"window_interval"</literal></expr></argument>, <argument><expr><name>nTimeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nTimeDiff</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txrate"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>nTxDiff</name><operator>)</operator> <operator>/</operator> <name>nTimeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>T</name></type> <name>CalculateTruncatedMedian</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scores</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name><name>scores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>scores</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scores</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>scores</name><index>[<expr><name>size</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>scores</name><index>[<expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name><name>scores</name><index>[<expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CalculatePercentilesByWeight</name><parameter_list>(<parameter><decl><type><name>CAmount</name></type> <name><name>result</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scores</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>total_weight</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>scores</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>scores</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scores</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 10th, 25th, 50th, 75th, and 90th percentile weight units.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>weights</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <init>= <expr><block>{
        <expr><name>total_weight</name> <operator>/</operator> <literal type="number">10.0</literal></expr>, <expr><name>total_weight</name> <operator>/</operator> <literal type="number">4.0</literal></expr>, <expr><name>total_weight</name> <operator>/</operator> <literal type="number">2.0</literal></expr>, <expr><operator>(</operator><name>total_weight</name> <operator>*</operator> <literal type="number">3.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">4.0</literal></expr>, <expr><operator>(</operator><name>total_weight</name> <operator>*</operator> <literal type="number">9.0</literal><operator>)</operator> <operator>/</operator> <literal type="number">10.0</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>next_percentile_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cumulative_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>element</name> <range>: <expr><name>scores</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>cumulative_weight</name> <operator>+=</operator> <name><name>element</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>next_percentile_index</name> <operator>&lt;</operator> <name>NUM_GETBLOCKSTATS_PERCENTILES</name> <operator>&amp;&amp;</operator> <name>cumulative_weight</name> <operator>&gt;=</operator> <name><name>weights</name><index>[<expr><name>next_percentile_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>next_percentile_index</name></expr>]</index></name> <operator>=</operator> <name><name>element</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>next_percentile_index</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <comment type="line">// Fill any remaining percentiles with the last value.</comment>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>next_percentile_index</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>scores</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>SetHasKeys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>set</name></decl></parameter>)</parameter_list> <block>{<block_content><return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>Tk</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>SetHasKeys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Tk</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name><name>set</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>SetHasKeys</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// outpoint (needed for the utxo index) + nHeight + fCoinBase</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>size_t</name></type> <name>PER_UTXO_OVERHEAD</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>COutPoint</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblockstats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockstats"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nCompute per block statistics for a given window. All amounts are in satoshis.\n"</literal>
                <literal type="string">"It won't work for some heights with pruning.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"hash_or_height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The block hash or height of the target block"</literal></expr><operator>,</operator> <expr><literal type="string">""</literal></expr><operator>,</operator> <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"string or numeric"</literal></expr>}</block></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"stats"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"all values"</literal></expr><operator>,</operator> <expr><literal type="string">"Values to plot (see result below)"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"height"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"Selected statistic"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"time"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"Selected statistic"</literal></expr>}</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"stats"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                           (json object)\n"</literal>
            <literal type="string">"  \"avgfee\": xxxxx,          (numeric) Average fee in the block\n"</literal>
            <literal type="string">"  \"avgfeerate\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\n"</literal>
            <literal type="string">"  \"avgtxsize\": xxxxx,       (numeric) Average transaction size\n"</literal>
            <literal type="string">"  \"blockhash\": xxxxx,       (string) The block hash (to check for potential reorgs)\n"</literal>
            <literal type="string">"  \"feerate_percentiles\": [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\n"</literal>
            <literal type="string">"      \"10th_percentile_feerate\",      (numeric) The 10th percentile feerate\n"</literal>
            <literal type="string">"      \"25th_percentile_feerate\",      (numeric) The 25th percentile feerate\n"</literal>
            <literal type="string">"      \"50th_percentile_feerate\",      (numeric) The 50th percentile feerate\n"</literal>
            <literal type="string">"      \"75th_percentile_feerate\",      (numeric) The 75th percentile feerate\n"</literal>
            <literal type="string">"      \"90th_percentile_feerate\",      (numeric) The 90th percentile feerate\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"height\": xxxxx,          (numeric) The height of the block\n"</literal>
            <literal type="string">"  \"ins\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\n"</literal>
            <literal type="string">"  \"maxfee\": xxxxx,          (numeric) Maximum fee in the block\n"</literal>
            <literal type="string">"  \"maxfeerate\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\n"</literal>
            <literal type="string">"  \"maxtxsize\": xxxxx,       (numeric) Maximum transaction size\n"</literal>
            <literal type="string">"  \"medianfee\": xxxxx,       (numeric) Truncated median fee in the block\n"</literal>
            <literal type="string">"  \"mediantime\": xxxxx,      (numeric) The block median time past\n"</literal>
            <literal type="string">"  \"mediantxsize\": xxxxx,    (numeric) Truncated median transaction size\n"</literal>
            <literal type="string">"  \"minfee\": xxxxx,          (numeric) Minimum fee in the block\n"</literal>
            <literal type="string">"  \"minfeerate\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\n"</literal>
            <literal type="string">"  \"mintxsize\": xxxxx,       (numeric) Minimum transaction size\n"</literal>
            <literal type="string">"  \"outs\": xxxxx,            (numeric) The number of outputs\n"</literal>
            <literal type="string">"  \"subsidy\": xxxxx,         (numeric) The block subsidy\n"</literal>
            <literal type="string">"  \"swtotal_size\": xxxxx,    (numeric) Total size of all segwit transactions\n"</literal>
            <literal type="string">"  \"swtotal_weight\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\n"</literal>
            <literal type="string">"  \"swtxs\": xxxxx,           (numeric) The number of segwit transactions\n"</literal>
            <literal type="string">"  \"time\": xxxxx,            (numeric) The block time\n"</literal>
            <literal type="string">"  \"total_out\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\n"</literal>
            <literal type="string">"  \"total_size\": xxxxx,      (numeric) Total size of all non-coinbase transactions\n"</literal>
            <literal type="string">"  \"total_weight\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\n"</literal>
            <literal type="string">"  \"totalfee\": xxxxx,        (numeric) The fee total\n"</literal>
            <literal type="string">"  \"txs\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\n"</literal>
            <literal type="string">"  \"utxo_increase\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\n"</literal>
            <literal type="string">"  \"utxo_size_inc\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblockstats"</literal></expr></argument>, <argument><expr><literal type="string">"1000 '[\"minfeerate\",\"avgfeerate\"]'"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblockstats"</literal></argument>, <argument><literal type="string">"1000 '[\"minfeerate\",\"avgfeerate\"]'"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNum</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>current_tip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Target block height %d is negative"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>current_tip</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Target block height %d after current tip %d"</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>current_tip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>pindex</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><index>[<expr><name>height</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hash_or_height"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>pindex</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pindex</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Contains</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Block is not in chain %s"</literal></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>pindex</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>stats</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name></type> <name>stats_univalue</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>stats_univalue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>stat</name> <init>= <expr><name><name>stats_univalue</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>stats</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlock</name></type> <name>block</name> <init>= <expr><call><name>GetBlockChecked</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockUndo</name></type> <name>blockUndo</name> <init>= <expr><call><name>GetUndoChecked</name><argument_list>(<argument><expr><name>pindex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_all</name> <init>= <expr><call><name><name>stats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Calculate everything if nothing selected (default)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_mediantxsize</name> <init>= <expr><name>do_all</name> <operator>||</operator> <call><name><name>stats</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"mediantxsize"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_medianfee</name> <init>= <expr><name>do_all</name> <operator>||</operator> <call><name><name>stats</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"medianfee"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_feerate_percentiles</name> <init>= <expr><name>do_all</name> <operator>||</operator> <call><name><name>stats</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"feerate_percentiles"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>loop_inputs</name> <init>= <expr><name>do_all</name> <operator>||</operator> <name>do_medianfee</name> <operator>||</operator> <name>do_feerate_percentiles</name> <operator>||</operator>
        <call><name>SetHasKeys</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="string">"utxo_size_inc"</literal></expr></argument>, <argument><expr><literal type="string">"totalfee"</literal></expr></argument>, <argument><expr><literal type="string">"avgfee"</literal></expr></argument>, <argument><expr><literal type="string">"avgfeerate"</literal></expr></argument>, <argument><expr><literal type="string">"minfee"</literal></expr></argument>, <argument><expr><literal type="string">"maxfee"</literal></expr></argument>, <argument><expr><literal type="string">"minfeerate"</literal></expr></argument>, <argument><expr><literal type="string">"maxfeerate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>loop_outputs</name> <init>= <expr><name>do_all</name> <operator>||</operator> <name>loop_inputs</name> <operator>||</operator> <call><name><name>stats</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"total_out"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_calculate_size</name> <init>= <expr><name>do_mediantxsize</name> <operator>||</operator>
        <call><name>SetHasKeys</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="string">"total_size"</literal></expr></argument>, <argument><expr><literal type="string">"avgtxsize"</literal></expr></argument>, <argument><expr><literal type="string">"mintxsize"</literal></expr></argument>, <argument><expr><literal type="string">"maxtxsize"</literal></expr></argument>, <argument><expr><literal type="string">"swtotal_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_calculate_weight</name> <init>= <expr><name>do_all</name> <operator>||</operator> <call><name>SetHasKeys</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="string">"total_weight"</literal></expr></argument>, <argument><expr><literal type="string">"avgfeerate"</literal></expr></argument>, <argument><expr><literal type="string">"swtotal_weight"</literal></expr></argument>, <argument><expr><literal type="string">"avgfeerate"</literal></expr></argument>, <argument><expr><literal type="string">"feerate_percentiles"</literal></expr></argument>, <argument><expr><literal type="string">"minfeerate"</literal></expr></argument>, <argument><expr><literal type="string">"maxfeerate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>do_calculate_sw</name> <init>= <expr><name>do_all</name> <operator>||</operator> <call><name>SetHasKeys</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="string">"swtxs"</literal></expr></argument>, <argument><expr><literal type="string">"swtotal_size"</literal></expr></argument>, <argument><expr><literal type="string">"swtotal_weight"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>maxfee</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>maxfeerate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>minfee</name> <init>= <expr><name>MAX_MONEY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>minfeerate</name> <init>= <expr><name>MAX_MONEY</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>total_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>totalfee</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>inputs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>maxtxsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mintxsize</name> <init>= <expr><name>MAX_BLOCK_SERIALIZED_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>outputs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>swtotal_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>swtotal_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>swtxs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>utxo_size_inc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name></type> <name>fee_array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>feerate_array</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>txsize_array</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>outputs</name> <operator>+=</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CAmount</name></type> <name>tx_total_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>loop_outputs</name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>out</name> <range>: <expr><name><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>tx_total_out</name> <operator>+=</operator> <name><name>out</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>utxo_size_inc</name> <operator>+=</operator> <call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PER_UTXO_OVERHEAD</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tx</name><operator>-&gt;</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>inputs</name> <operator>+=</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Don't count coinbase's fake input</comment>
        <expr_stmt><expr><name>total_out</name> <operator>+=</operator> <name>tx_total_out</name></expr>;</expr_stmt> <comment type="line">// Don't count coinbase reward</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>tx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>do_calculate_size</name></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><name>tx_size</name> <operator>=</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>GetTotalSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>do_mediantxsize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>txsize_array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tx_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>maxtxsize</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>maxtxsize</name></expr></argument>, <argument><expr><name>tx_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mintxsize</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>mintxsize</name></expr></argument>, <argument><expr><name>tx_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name>tx_size</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>do_calculate_weight</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>weight</name> <operator>=</operator> <call><name>GetTransactionWeight</name><argument_list>(<argument><expr><operator>*</operator><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_weight</name> <operator>+=</operator> <name>weight</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>do_calculate_sw</name> <operator>&amp;&amp;</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>HasWitness</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>swtxs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>swtotal_size</name> <operator>+=</operator> <name>tx_size</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>swtotal_weight</name> <operator>+=</operator> <name>weight</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>loop_inputs</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CAmount</name></type> <name>tx_total_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>txundo</name> <init>= <expr><call><name><name>blockUndo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name><range>: <expr><name><name>txundo</name><operator>.</operator><name>vprevout</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>prevoutput</name> <init>= <expr><name><name>coin</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>tx_total_in</name> <operator>+=</operator> <name><name>prevoutput</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>utxo_size_inc</name> <operator>-=</operator> <call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>prevoutput</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PER_UTXO_OVERHEAD</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>CAmount</name></type> <name>txfee</name> <init>= <expr><name>tx_total_in</name> <operator>-</operator> <name>tx_total_out</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><name>txfee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>do_medianfee</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>fee_array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>txfee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>maxfee</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>maxfee</name></expr></argument>, <argument><expr><name>txfee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minfee</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>minfee</name></expr></argument>, <argument><expr><name>txfee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalfee</name> <operator>+=</operator> <name>txfee</name></expr>;</expr_stmt>

            <comment type="line">// New feerate uses satoshis per virtual byte instead of per serialized byte</comment>
            <decl_stmt><decl><type><name>CAmount</name></type> <name>feerate</name> <init>= <expr><ternary><condition><expr><name>weight</name></expr> ?</condition><then> <expr><operator>(</operator><name>txfee</name> <operator>*</operator> <name>WITNESS_SCALE_FACTOR</name><operator>)</operator> <operator>/</operator> <name>weight</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>do_feerate_percentiles</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>feerate_array</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>feerate</name></expr></argument>, <argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>maxfeerate</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>maxfeerate</name></expr></argument>, <argument><expr><name>feerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>minfeerate</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>minfeerate</name></expr></argument>, <argument><expr><name>feerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CAmount</name></type> <name><name>feerate_percentiles</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>feerate_percentiles</name></expr></argument>, <argument><expr><name>feerate_array</name></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>feerates_res</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>feerates_res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>feerate_percentiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret_all</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"avgfee"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>totalfee</name> <operator>/</operator> <operator>(</operator><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"avgfeerate"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>total_weight</name></expr> ?</condition><then> <expr><operator>(</operator><name>totalfee</name> <operator>*</operator> <name>WITNESS_SCALE_FACTOR</name><operator>)</operator> <operator>/</operator> <name>total_weight</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Unit: sat/vbyte</comment>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"avgtxsize"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>total_size</name> <operator>/</operator> <operator>(</operator><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blockhash"</literal></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"feerate_percentiles"</literal></expr></argument>, <argument><expr><name>feerates_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"ins"</literal></expr></argument>, <argument><expr><name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"maxfee"</literal></expr></argument>, <argument><expr><name>maxfee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"maxfeerate"</literal></expr></argument>, <argument><expr><name>maxfeerate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"maxtxsize"</literal></expr></argument>, <argument><expr><name>maxtxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"medianfee"</literal></expr></argument>, <argument><expr><call><name>CalculateTruncatedMedian</name><argument_list>(<argument><expr><name>fee_array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mediantime"</literal></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mediantxsize"</literal></expr></argument>, <argument><expr><call><name>CalculateTruncatedMedian</name><argument_list>(<argument><expr><name>txsize_array</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"minfee"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>minfee</name> <operator>==</operator> <name>MAX_MONEY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>minfee</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"minfeerate"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>minfeerate</name> <operator>==</operator> <name>MAX_MONEY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>minfeerate</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mintxsize"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>mintxsize</name> <operator>==</operator> <name>MAX_BLOCK_SERIALIZED_SIZE</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>mintxsize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"outs"</literal></expr></argument>, <argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"subsidy"</literal></expr></argument>, <argument><expr><call><name>GetBlockSubsidy</name><argument_list>(<argument><expr><name><name>pindex</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"swtotal_size"</literal></expr></argument>, <argument><expr><name>swtotal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"swtotal_weight"</literal></expr></argument>, <argument><expr><name>swtotal_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"swtxs"</literal></expr></argument>, <argument><expr><name>swtxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>pindex</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total_out"</literal></expr></argument>, <argument><expr><name>total_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total_size"</literal></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total_weight"</literal></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"totalfee"</literal></expr></argument>, <argument><expr><name>totalfee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txs"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"utxo_increase"</literal></expr></argument>, <argument><expr><name>outputs</name> <operator>-</operator> <name>inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret_all</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"utxo_size_inc"</literal></expr></argument>, <argument><expr><name>utxo_size_inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>do_all</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ret_all</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>stat</name> <range>: <expr><name>stats</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>value</name> <init>= <expr><name><name>ret_all</name><index>[<expr><name>stat</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid selected statistic %s"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>savemempool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"savemempool"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"savemempool"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"savemempool"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>mempool</name><operator>.</operator><name>IsLoaded</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The mempool was not loaded yet"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DumpMempool</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to dump mempool to disk"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Search for a given set of pubkey scripts</comment>
<function><type><name>bool</name></type> <name>FindScriptPubKey</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>scan_progress</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>should_abort</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCursor</name><modifier>*</modifier></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>needles</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>out_results</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>scan_progress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>cursor</name><operator>-&gt;</operator><name>Valid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>COutPoint</name></type> <name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>cursor</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>count</name> <operator>%</operator> <literal type="number">8192</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>should_abort</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// allow to abort the scan via the abort reference</comment>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>%</operator> <literal type="number">256</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// update progress reference every 256 item</comment>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>high</name> <init>= <expr><literal type="number">0x100</literal> <operator>*</operator> <operator>*</operator><call><name><name>key</name><operator>.</operator><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>*</operator><operator>(</operator><call><name><name>key</name><operator>.</operator><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>scan_progress</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>high</name> <operator>*</operator> <literal type="number">100.0</literal> <operator>/</operator> <literal type="number">65536.0</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>needles</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>out_results</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>-&gt;</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>scan_progress</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** RAII object to prevent concurrency issue when scanning the txout set */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>mutex</name></name></type> <name>g_utxosetscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>g_scan_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>g_scan_in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>g_should_abort_scan</name></decl>;</decl_stmt>
<class>class <name>CoinsViewScanReserver</name>
<block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name>bool</name></type> <name>m_could_reserve</name></decl>;</decl_stmt>
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>CoinsViewScanReserver</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>m_could_reserve</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>bool</name></type> <name>reserve</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><operator>!</operator><name>m_could_reserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>g_utxosetscan</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_scan_in_progress</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>g_scan_in_progress</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_could_reserve</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <destructor><name>~CoinsViewScanReserver</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>m_could_reserve</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>lock_guard</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>mutex</name></name></expr></argument>&gt;</argument_list></name></type> <name>lock</name><argument_list>(<argument><expr><name>g_utxosetscan</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>g_scan_in_progress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></destructor>
</public>}</block>;</class>

<function><type><name>UniValue</name></type> <name>scantxoutset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"scantxoutset"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\n"</literal>
                <literal type="string">"\nScans the unspent transaction output set for entries that match certain output descriptors.\n"</literal>
                <literal type="string">"Examples of output descriptors are:\n"</literal>
                <literal type="string">"    addr(&lt;address&gt;)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\n"</literal>
                <literal type="string">"    raw(&lt;hex script&gt;)                    Outputs whose scriptPubKey equals the specified hex scripts\n"</literal>
                <literal type="string">"    combo(&lt;pubkey&gt;)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\n"</literal>
                <literal type="string">"    pkh(&lt;pubkey&gt;)                        P2PKH outputs for the given pubkey\n"</literal>
                <literal type="string">"    sh(multi(&lt;n&gt;,&lt;pubkey&gt;,&lt;pubkey&gt;,...)) P2SH-multisig outputs for the given threshold and pubkeys\n"</literal>
                <literal type="string">"\nIn the above, &lt;pubkey&gt; either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\n"</literal>
                <literal type="string">"or more path elements separated by \"/\", and optionally ending in \"/*\" (unhardened), or \"/*'\" or \"/*h\" (hardened) to specify all\n"</literal>
                <literal type="string">"unhardened or hardened child keys.\n"</literal>
                <literal type="string">"In the latter case, a range needs to be specified by below if different from 1000.\n"</literal>
                <literal type="string">"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"action"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The action to execute\n"</literal>
            <literal type="string">"                                      \"start\" for starting a scan\n"</literal>
            <literal type="string">"                                      \"abort\" for aborting the current scan (returns true when abort was successful)\n"</literal>
            <literal type="string">"                                      \"status\" for progress report (in %) of the current scan"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"scanobjects"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Array of scan objects\n"</literal>
            <literal type="string">"                                  Every scan object is either a string descriptor or an object:"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"descriptor"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"An output descriptor"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"An object with output descriptor and metadata"</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"desc"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"An output descriptor"</literal></expr>}</block></expr>,
                                    <expr><block>{<expr><literal type="string">"range"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>RANGE</name></name></expr>, <comment type="block">/* default */</comment> <expr><literal type="string">"1000"</literal></expr>, <expr><literal type="string">"The range of HD chain indexes to explore (either end or [begin,end])"</literal></expr>}</block></expr>,
                                }</block></expr>,
                            }</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"[scanobjects,...]"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"success\": true|false,         (boolean) Whether the scan was completed\n"</literal>
            <literal type="string">"  \"txouts\": n,                   (numeric) The number of unspent transaction outputs scanned\n"</literal>
            <literal type="string">"  \"height\": n,                   (numeric) The current block height (index)\n"</literal>
            <literal type="string">"  \"bestblock\": \"hex\",            (string) The hash of the block at the tip of the chain\n"</literal>
            <literal type="string">"  \"unspents\": [\n"</literal>
            <literal type="string">"   {\n"</literal>
            <literal type="string">"    \"txid\": \"hash\",              (string) The transaction id\n"</literal>
            <literal type="string">"    \"vout\": n,                   (numeric) The vout value\n"</literal>
            <literal type="string">"    \"scriptPubKey\": \"script\",    (string) The script key\n"</literal>
            <literal type="string">"    \"desc\": \"descriptor\",        (string) A specialized descriptor for the matched scriptPubKey\n"</literal>
            <literal type="string">"    \"amount\": x.xxx,             (numeric) The total amount in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">" of the unspent output\n"</literal>
            <literal type="string">"    \"height\": n,                 (numeric) Height of the unspent transaction output\n"</literal>
            <literal type="string">"   }\n"</literal>
            <literal type="string">"   ,...],\n"</literal>
            <literal type="string">"  \"total_amount\": x.xxx,          (numeric) The total amount of all found unspent outputs in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{<argument><expr><literal type="string">""</literal></expr></argument>}</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"status"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CoinsViewScanReserver</name></type> <name>reserver</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// no scan in progress</comment>
            <return>return <expr><name>NullUniValue</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"progress"</literal></expr></argument>, <argument><expr><name>g_scan_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"abort"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CoinsViewScanReserver</name></type> <name>reserver</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// reserve was possible which means no scan was running</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// set the abort flag</comment>
        <expr_stmt><expr><name>g_should_abort_scan</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"start"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CoinsViewScanReserver</name></type> <name>reserver</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Scan already in progress, use action \"abort\" or \"status\""</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>needles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>descriptors</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>total_in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// loop through the scan objects</comment>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>scanobject</name> <range>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValues</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>provider</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>scripts</name> <init>= <expr><call><name>EvalDescriptorStringOrObject</name><argument_list>(<argument><expr><name>scanobject</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>script</name> <range>: <expr><name>scripts</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>inferred</name> <init>= <expr><call><name>InferDescriptor</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>needles</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>descriptors</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>inferred</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// Scan the unspent transaction output set for inputs</comment>
        <function_decl><type><name>UniValue</name></type> <name>unspents</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxOut</name></expr></argument>&gt;</argument_list></name></type> <name>input_txos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>coins</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>g_should_abort_scan</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_scan_progress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCursor</name></expr></argument>&gt;</argument_list></name></type> <name>pcursor</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ForceFlushStateToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pcursor</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCursor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>pcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><call><name>FindScriptPubKey</name><argument_list>(<argument><expr><name>g_scan_progress</name></expr></argument>, <argument><expr><name>g_should_abort_scan</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><call><name><name>pcursor</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>needles</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"success"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txouts"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bestblock"</literal></expr></argument>, <argument><expr><call><name><name>tip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name>coins</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>COutPoint</name><modifier>&amp;</modifier></type> <name>outpoint</name> <init>= <expr><name><name>it</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Coin</name><modifier>&amp;</modifier></type> <name>coin</name> <init>= <expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txo</name> <init>= <expr><name><name>coin</name><operator>.</operator><name>out</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>input_txos</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>txo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_in</name> <operator>+=</operator> <name><name>txo</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>

            <function_decl><type><name>UniValue</name></type> <name>unspent</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>outpoint</name><operator>.</operator><name>hash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vout"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>outpoint</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>txo</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txo</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"desc"</literal></expr></argument>, <argument><expr><name><name>descriptors</name><index>[<expr><name><name>txo</name><operator>.</operator><name>scriptPubKey</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name><name>txo</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>unspent</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>coin</name><operator>.</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>unspents</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>unspent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"unspents"</literal></expr></argument>, <argument><expr><name>unspents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total_amount"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>total_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid command"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>getblockfilter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblockfilter"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nRetrieve a BIP 157 content filter for a particular block.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"blockhash"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The hash of the block"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"filtertype"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/*default*/</comment> <expr><literal type="string">"basic"</literal></expr><operator>,</operator> <expr><literal type="string">"The type name of the filter"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
                    <argument><expr><literal type="string">"{\n"</literal>
                    <literal type="string">"  \"filter\" : (string) the hex-encoded filter data\n"</literal>
                    <literal type="string">"  \"header\" : (string) the hex-encoded filter header\n"</literal>
                    <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><macro><name>RPCExamples</name></macro><block>{
                    <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"getblockfilter"</literal></argument>, <argument><literal type="string">"\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\" \"basic\""</literal></argument>)</argument_list></macro>
                }</block></expr></argument>
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>block_hash</name> <init>= <expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"blockhash"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filtertype_name</name> <init>= <expr><literal type="string">"basic"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>filtertype_name</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BlockFilterType</name></type> <name>filtertype</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BlockFilterTypeByName</name><argument_list>(<argument><expr><name>filtertype_name</name></expr></argument>, <argument><expr><name>filtertype</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Unknown filtertype"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>BlockFilterIndex</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name>filtertype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Index is not enabled for filtertype "</literal> <operator>+</operator> <name>filtertype_name</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>block_index</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>block_was_connected</name></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>block_index</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>block_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_index</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Block not found"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>block_was_connected</name> <operator>=</operator> <call><name><name>block_index</name><operator>-&gt;</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>BLOCK_VALID_SCRIPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>bool</name></type> <name>index_ready</name> <init>= <expr><call><name><name>index</name><operator>-&gt;</operator><name>BlockUntilSyncedToCurrentChain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>filter_header</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>-&gt;</operator><name>LookupFilter</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name><name>index</name><operator>-&gt;</operator><name>LookupFilterHeader</name></name><argument_list>(<argument><expr><name>block_index</name></expr></argument>, <argument><expr><name>filter_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>err_code</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>errmsg</name> <init>= <expr><literal type="string">"Filter not found."</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>block_was_connected</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err_code</name> <operator>=</operator> <name>RPC_INVALID_ADDRESS_OR_KEY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errmsg</name> <operator>+=</operator> <literal type="string">" Block was not connected to active chain."</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>index_ready</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>err_code</name> <operator>=</operator> <name>RPC_MISC_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errmsg</name> <operator>+=</operator> <literal type="string">" Block filters are still in the process of being indexed."</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>err_code</name> <operator>=</operator> <name>RPC_INTERNAL_ERROR</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>errmsg</name> <operator>+=</operator> <literal type="string">" This error is unexpected and indicates index corruption."</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>err_code</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"header"</literal></expr></argument>, <argument><expr><call><name><name>filter_header</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Serialize the UTXO set to a file for loading elsewhere.
 *
 * @see SnapshotMetadata
 */</comment>
<function><type><name>UniValue</name></type> <name>dumptxoutset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{
        <argument><expr><literal type="string">"dumptxoutset"</literal></expr></argument>,
        <argument><expr><literal type="string">"\nWrite the serialized UTXO set to disk.\n"</literal>
        <literal type="string">"Incidentally flushes the latest coinsdb (leveldb) to disk.\n"</literal></expr></argument>,
        <block>{<block_content>
            <block>{<block_content><expr_stmt><expr><literal type="string">"path"</literal></expr><operator>,</operator>
                <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator>
                <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator>
                <comment type="block">/* default_val */</comment> <expr><literal type="string">""</literal></expr><operator>,</operator>
                <expr><literal type="string">"path to the output file. If relative, will be prefixed by datadir."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
        <expr_stmt/>}</block_content></block>,
        <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"coins_written\": n,   (numeric) the number of coins written in the snapshot\n"</literal>
            <literal type="string">"  \"base_hash\": \"...\",   (string) the hash of the base of the snapshot\n"</literal>
            <literal type="string">"  \"base_height\": n,     (string) the height of the base of the snapshot\n"</literal>
            <literal type="string">"  \"path\": \"...\"         (string) the absolute path that the snapshot was written to\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
        }</argument_list></call></expr></argument>,
        <argument><expr><macro><name>RPCExamples</name></macro><block>{
            <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"dumptxoutset"</literal></argument>, <argument><literal type="string">"utxo.dat"</literal></argument>)</argument_list></macro>
        }</block></expr></argument>
    }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>path</name> <init>= <expr><call><name><name>fs</name><operator>::</operator><name>absolute</name></name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Write to a temporary path and then move into `path` on completion</comment>
    <comment type="line">// to avoid confusion due to an interruption.</comment>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>temppath</name> <init>= <expr><call><name><name>fs</name><operator>::</operator><name>absolute</name></name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".incomplete"</literal></expr></argument>, <argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(
            <argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>,
            <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" already exists. If you are sure this is what you want, "</literal>
            <literal type="string">"move it out of the way first"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name><argument_list>{<argument><expr><macro><name>fsbridge</name></macro><name><operator>::</operator><name>fopen</name></name><operator>(</operator><name>temppath</name><operator>,</operator> <literal type="string">"wb"</literal><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAutoFile</name></type> <name>afile</name><argument_list>{<argument><expr><name>file</name></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCursor</name></expr></argument>&gt;</argument_list></name></type> <name>pcursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsStats</name></type> <name>stats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name></decl>;</decl_stmt>

    <block>{<block_content>
        <comment type="line">// We need to lock cs_main to ensure that the coinsdb isn't written to</comment>
        <comment type="line">// between (i) flushing coins cache to disk (coinsdb), (ii) getting stats</comment>
        <comment type="line">// based upon the coinsdb, and (iii) constructing a cursor to the</comment>
        <comment type="line">// coinsdb for use below this block.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Cursors returned by leveldb iterate over snapshots, so the contents</comment>
        <comment type="line">// of the pcursor will not be affected by simultaneous writes during</comment>
        <comment type="line">// use below this block.</comment>
        <comment type="line">//</comment>
        <comment type="line">// See discussion here:</comment>
        <comment type="line">//   https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274479369</comment>
        <comment type="line">//</comment>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ForceFlushStateToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetUTXOStats</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to read UTXO set"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>pcursor</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCursor</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Cursor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>hashBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>SnapshotMetadata</name></type> <name>metadata</name><argument_list>{<argument><expr><call><name><name>tip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>coins_count</name></name></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nChainTx</name></name></expr></argument>}</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><name>afile</name> <operator>&lt;&lt;</operator> <name>metadata</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>COutPoint</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iter</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>Valid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>%</operator> <literal type="number">5000</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_NOT_CONNECTED</name></expr></argument>, <argument><expr><literal type="string">"Shutting down"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>iter</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pcursor</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>afile</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>afile</name> <operator>&lt;&lt;</operator> <name>coin</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name><name>afile</name><operator>.</operator><name>fclose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>rename</name></name><argument_list>(<argument><expr><name>temppath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"coins_written"</literal></expr></argument>, <argument><expr><name><name>stats</name><operator>.</operator><name>coins_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"base_hash"</literal></expr></argument>, <argument><expr><call><name><name>tip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"base_height"</literal></expr></argument>, <argument><expr><name><name>tip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clang-format off</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>commands</name><index>[]</index></name> <init>=
<expr><block>{ <comment type="line">//  category              name                      actor (function)         argNames</comment>
  <comment type="line">//  --------------------- ------------------------  -----------------------  ----------</comment>
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockchaininfo"</literal></expr>,      <expr><operator>&amp;</operator><name>getblockchaininfo</name></expr>,      <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getchaintxstats"</literal></expr>,        <expr><operator>&amp;</operator><name>getchaintxstats</name></expr>,        <expr><block>{<expr><literal type="string">"nblocks"</literal></expr>, <expr><literal type="string">"blockhash"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockstats"</literal></expr>,          <expr><operator>&amp;</operator><name>getblockstats</name></expr>,          <expr><block>{<expr><literal type="string">"hash_or_height"</literal></expr>, <expr><literal type="string">"stats"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getbestblockhash"</literal></expr>,       <expr><operator>&amp;</operator><name>getbestblockhash</name></expr>,       <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockcount"</literal></expr>,          <expr><operator>&amp;</operator><name>getblockcount</name></expr>,          <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblock"</literal></expr>,               <expr><operator>&amp;</operator><name>getblock</name></expr>,               <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>,<expr><literal type="string">"verbosity|verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockhash"</literal></expr>,           <expr><operator>&amp;</operator><name>getblockhash</name></expr>,           <expr><block>{<expr><literal type="string">"height"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockheader"</literal></expr>,         <expr><operator>&amp;</operator><name>getblockheader</name></expr>,         <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>,<expr><literal type="string">"verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getchaintips"</literal></expr>,           <expr><operator>&amp;</operator><name>getchaintips</name></expr>,           <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getdifficulty"</literal></expr>,          <expr><operator>&amp;</operator><name>getdifficulty</name></expr>,          <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getmempoolancestors"</literal></expr>,    <expr><operator>&amp;</operator><name>getmempoolancestors</name></expr>,    <expr><block>{<expr><literal type="string">"txid"</literal></expr>,<expr><literal type="string">"verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getmempooldescendants"</literal></expr>,  <expr><operator>&amp;</operator><name>getmempooldescendants</name></expr>,  <expr><block>{<expr><literal type="string">"txid"</literal></expr>,<expr><literal type="string">"verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getmempoolentry"</literal></expr>,        <expr><operator>&amp;</operator><name>getmempoolentry</name></expr>,        <expr><block>{<expr><literal type="string">"txid"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getmempoolinfo"</literal></expr>,         <expr><operator>&amp;</operator><name>getmempoolinfo</name></expr>,         <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getrawmempool"</literal></expr>,          <expr><operator>&amp;</operator><name>getrawmempool</name></expr>,          <expr><block>{<expr><literal type="string">"verbose"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"gettxout"</literal></expr>,               <expr><operator>&amp;</operator><name>gettxout</name></expr>,               <expr><block>{<expr><literal type="string">"txid"</literal></expr>,<expr><literal type="string">"n"</literal></expr>,<expr><literal type="string">"include_mempool"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"gettxoutsetinfo"</literal></expr>,        <expr><operator>&amp;</operator><name>gettxoutsetinfo</name></expr>,        <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"pruneblockchain"</literal></expr>,        <expr><operator>&amp;</operator><name>pruneblockchain</name></expr>,        <expr><block>{<expr><literal type="string">"height"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"savemempool"</literal></expr>,            <expr><operator>&amp;</operator><name>savemempool</name></expr>,            <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"verifychain"</literal></expr>,            <expr><operator>&amp;</operator><name>verifychain</name></expr>,            <expr><block>{<expr><literal type="string">"checklevel"</literal></expr>,<expr><literal type="string">"nblocks"</literal></expr>}</block></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"preciousblock"</literal></expr>,          <expr><operator>&amp;</operator><name>preciousblock</name></expr>,          <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"scantxoutset"</literal></expr>,           <expr><operator>&amp;</operator><name>scantxoutset</name></expr>,           <expr><block>{<expr><literal type="string">"action"</literal></expr>, <expr><literal type="string">"scanobjects"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blockchain"</literal></expr>,         <expr><literal type="string">"getblockfilter"</literal></expr>,         <expr><operator>&amp;</operator><name>getblockfilter</name></expr>,         <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>, <expr><literal type="string">"filtertype"</literal></expr>}</block></expr> }</block></expr>,

    <comment type="block">/* Not shown in help */</comment>
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"invalidateblock"</literal></expr>,        <expr><operator>&amp;</operator><name>invalidateblock</name></expr>,        <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"reconsiderblock"</literal></expr>,        <expr><operator>&amp;</operator><name>reconsiderblock</name></expr>,        <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"waitfornewblock"</literal></expr>,        <expr><operator>&amp;</operator><name>waitfornewblock</name></expr>,        <expr><block>{<expr><literal type="string">"timeout"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"waitforblock"</literal></expr>,           <expr><operator>&amp;</operator><name>waitforblock</name></expr>,           <expr><block>{<expr><literal type="string">"blockhash"</literal></expr>,<expr><literal type="string">"timeout"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"waitforblockheight"</literal></expr>,     <expr><operator>&amp;</operator><name>waitforblockheight</name></expr>,     <expr><block>{<expr><literal type="string">"height"</literal></expr>,<expr><literal type="string">"timeout"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"syncwithvalidationinterfacequeue"</literal></expr>, <expr><operator>&amp;</operator><name>syncwithvalidationinterfacequeue</name></expr>, <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"dumptxoutset"</literal></expr>,           <expr><operator>&amp;</operator><name>dumptxoutset</name></expr>,           <expr><block>{<expr><literal type="string">"path"</literal></expr>}</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<function><type><name>void</name></type> <name>RegisterBlockchainRPCCommands</name><parameter_list>(<parameter><decl><type><name>CRPCTable</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>vcidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vcidx</name> <operator>&lt;</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>vcidx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>appendCommand</name></name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>NodeContext</name><modifier>*</modifier></type> <name>g_rpc_node</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</unit>
