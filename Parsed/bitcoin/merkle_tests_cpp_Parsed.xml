<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/merkle_tests.cpp"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>merkle_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>uint256</name></type> <name>ComputeMerkleRootFromBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>leaf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vMerkleBranch</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><name>leaf</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>vMerkleBranch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>vMerkleBranch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nIndex</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>Hash</name><argument_list>(<argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>Hash</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>nIndex</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>hash</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This implements a constant-space merkle root/path calculator, limited to 2^32 leaves. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MerkleComputation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>leaves</name></decl></parameter>, <parameter><decl><type><name>uint256</name><modifier>*</modifier></type> <name>proot</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pmutated</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>branchpos</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>pbranch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pbranch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>leaves</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pmutated</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pmutated</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>proot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>proot</name> <operator>=</operator> <call><name>uint256</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// count is the number of leaves processed so far.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// inner is an array of eagerly computed subtree hashes, indexed by tree</comment>
    <comment type="line">// level (0 being the leaves).</comment>
    <comment type="line">// For example, when count is 25 (11001 in binary), inner[4] is the hash of</comment>
    <comment type="line">// the first 16 leaves, inner[3] of the next 8 leaves, and inner[0] equal to</comment>
    <comment type="line">// the last leaf. The other inner entries are undefined.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name><name>inner</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// Which position in inner is a hash that depends on the matching leaf.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>matchlevel</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// First process all leaves into 'inner' values.</comment>
    <while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <call><name><name>leaves</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>h</name> <init>= <expr><name><name>leaves</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>matchh</name> <init>= <expr><name>count</name> <operator>==</operator> <name>branchpos</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
        <comment type="line">// For each of the lower bits in count that are 0, do 1 step. Each</comment>
        <comment type="line">// corresponds to an inner value that existed before processing the</comment>
        <comment type="line">// current leaf, and each needs a hash to combine it.</comment>
        <for>for <control>(<init><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><operator>(</operator><name>count</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pbranch</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>matchh</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matchlevel</name> <operator>==</operator> <name>level</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>matchh</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>mutated</name> <operator>|=</operator> <operator>(</operator><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name> <operator>==</operator> <name>h</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHash256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// Store the resulting hash at inner position level.</comment>
        <expr_stmt><expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>matchh</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>matchlevel</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <comment type="line">// Do a final 'sweep' over the rightmost branch of the tree to process</comment>
    <comment type="line">// odd levels, and reduce everything to a single top value.</comment>
    <comment type="line">// Level is the level (counted from the bottom) up to which we've sweeped.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// As long as bit number level in count is zero, skip it. It means there</comment>
    <comment type="line">// is nothing left at this level.</comment>
    <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>count</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>uint256</name></type> <name>h</name> <init>= <expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>matchh</name> <init>= <expr><name>matchlevel</name> <operator>==</operator> <name>level</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>count</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// If we reach this point, h is an inner value that is not the top.</comment>
        <comment type="line">// We combine it with itself (Bitcoin's special rule for odd levels in</comment>
        <comment type="line">// the tree) to produce a higher level one.</comment>
        <if_stmt><if>if <condition>(<expr><name>pbranch</name> <operator>&amp;&amp;</operator> <name>matchh</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>CHash256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Increment count to the value it would have if two entries at this</comment>
        <comment type="line">// level had existed.</comment>
        <expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
        <comment type="line">// And propagate the result upwards accordingly.</comment>
        <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>count</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>pbranch</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>matchh</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matchlevel</name> <operator>==</operator> <name>level</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pbranch</name><operator>-&gt;</operator><name>push_back</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>matchh</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>CHash256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name><name>inner</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>h</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
    <comment type="line">// Return result.</comment>
    <if_stmt><if>if <condition>(<expr><name>pmutated</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pmutated</name> <operator>=</operator> <name>mutated</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>proot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>proot</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>ComputeMerkleBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>leaves</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MerkleComputation</name><argument_list>(<argument><expr><name>leaves</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>BlockMerkleBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>position</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>leaves</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>leaves</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>leaves</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>s</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name>ComputeMerkleBranch</name><argument_list>(<argument><expr><name>leaves</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Older version of the merkle root computation code, for comparison.</comment>
<function><type><specifier>static</specifier> <name>uint256</name></type> <name>BlockBuildMerkleTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>fMutated</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vMerkleTree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>vMerkleTree</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vMerkleTree</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Safe upper bound for the number of total nodes.</comment>
    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>vMerkleTree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>nSize</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>nSize</name> <operator>=</operator> <operator>(</operator><name>nSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nSize</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSize</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i2</name> <operator>==</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i2</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>nSize</name> <operator>&amp;&amp;</operator> <name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Two identical hashes at the end of the list at a particular level.</comment>
                <expr_stmt><expr><name>mutated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>vMerkleTree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Hash</name><argument_list>(<argument><expr><name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i2</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i2</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>nSize</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>fMutated</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>fMutated</name> <operator>=</operator> <name>mutated</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>vMerkleTree</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>vMerkleTree</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Older version of the merkle branch computation code, for comparison.</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>BlockGetMerkleBranch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vMerkleTree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMerkleBranch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>nSize</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>nSize</name> <operator>=</operator> <operator>(</operator><name>nSize</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nIndex</name><operator>^</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSize</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vMerkleBranch</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vMerkleTree</name><index>[<expr><name>j</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nIndex</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>nSize</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>vMerkleBranch</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ctz</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test</argument>)</argument_list></macro>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// Try 32 block sizes: all sizes from 0 to 16 inclusive, and then 15 random sizes.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ntx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;=</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">17</literal> <operator>+</operator> <operator>(</operator><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <comment type="line">// Try up to 3 mutations.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>mutate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mutate</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>mutate</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>duplicate1</name> <init>= <expr><ternary><condition><expr><name>mutate</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ctz</name><argument_list>(<argument><expr><name>ntx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="line">// The last how many transactions to duplicate first.</comment>
            <if_stmt><if>if <condition>(<expr><name>duplicate1</name> <operator>&gt;=</operator> <name>ntx</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> <comment type="line">// Duplication of the entire tree results in a different root (it adds a level).</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ntx1</name> <init>= <expr><name>ntx</name> <operator>+</operator> <name>duplicate1</name></expr></init></decl>;</decl_stmt> <comment type="line">// The resulting number of transactions after the first duplication.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>duplicate2</name> <init>= <expr><ternary><condition><expr><name>mutate</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ctz</name><argument_list>(<argument><expr><name>ntx1</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="line">// Likewise for the second mutation.</comment>
            <if_stmt><if>if <condition>(<expr><name>duplicate2</name> <operator>&gt;=</operator> <name>ntx1</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ntx2</name> <init>= <expr><name>ntx1</name> <operator>+</operator> <name>duplicate2</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>duplicate3</name> <init>= <expr><ternary><condition><expr><name>mutate</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ctz</name><argument_list>(<argument><expr><name>ntx2</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> <comment type="line">// And for the third mutation.</comment>
            <if_stmt><if>if <condition>(<expr><name>duplicate3</name> <operator>&gt;=</operator> <name>ntx2</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ntx3</name> <init>= <expr><name>ntx2</name> <operator>+</operator> <name>duplicate3</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// Build a block with ntx different transactions.</comment>
            <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>ntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ntx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="line">// Compute the root of the block before mutating it.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>unmutatedMutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>unmutatedRoot</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unmutatedMutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>unmutatedMutated</name> <operator>==</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Optionally mutate by duplicating the last transactions, resulting in the same merkle root.</comment>
            <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>ntx3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>duplicate1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>duplicate1</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>duplicate2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx1</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx1</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>duplicate2</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>duplicate3</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx2</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>ntx2</name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>duplicate3</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="line">// Compute the merkle root and merkle tree using the old mechanism.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>oldMutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>merkleTree</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>oldRoot</name> <init>= <expr><call><name>BlockBuildMerkleTree</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldMutated</name></expr></argument>, <argument><expr><name>merkleTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Compute the merkle root using the new mechanism.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>newMutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>newRoot</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newMutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>oldRoot</name> <operator>==</operator> <name>newRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>newRoot</name> <operator>==</operator> <name>unmutatedRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>newRoot</name> <operator>==</operator> <call><name>uint256</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ntx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>oldMutated</name> <operator>==</operator> <name>newMutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>newMutated</name> <operator>==</operator> <operator>!</operator><operator>!</operator><name>mutate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// If no mutation was done (once for every ntx value), try up to 16 branches.</comment>
            <if_stmt><if>if <condition>(<expr><name>mutate</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>loop</name> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>ntx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>loop</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <comment type="line">// If ntx &lt;= 16, try all branches. Otherwise, try 16 random ones.</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>mtx</name> <init>= <expr><name>loop</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ntx</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>mtx</name> <operator>=</operator> <call><name>InsecureRandRange</name><argument_list>(<argument><expr><name>ntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>newBranch</name> <init>= <expr><call><name>BlockMerkleBranch</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>oldBranch</name> <init>= <expr><call><name>BlockGetMerkleBranch</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>merkleTree</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>oldBranch</name> <operator>==</operator> <name>newBranch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ComputeMerkleRootFromBranch</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>mtx</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newBranch</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>oldRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test_empty_block</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>root</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>root</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>mutated</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test_oneTx_block</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>root</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>mutated</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test_OddTxWithRepeatedLastTx_block</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>blockWithRepeatedLastTx</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>blockWithRepeatedLastTx</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>blockWithRepeatedLastTx</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>blockWithRepeatedLastTx</name><operator>.</operator><name>vtx</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>rootofBlock</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>mutated</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>rootofBlockWithRepeatedLastTx</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>blockWithRepeatedLastTx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>rootofBlock</name></expr></argument>, <argument><expr><name>rootofBlockWithRepeatedLastTx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>mutated</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test_LeftSubtreeRightSubtree</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>, <decl><type ref="prev"/><name>leftSubtreeBlock</name></decl>, <decl><type ref="prev"/><name>rightSubtreeBlock</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>pos</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>leftSubtreeBlock</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>rightSubtreeBlock</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <decl_stmt><decl><type><name>uint256</name></type> <name>root</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rootOfLeftSubtree</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>leftSubtreeBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rootOfRightSubtree</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>rightSubtreeBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>leftRight</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>leftRight</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>rootOfLeftSubtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>leftRight</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>rootOfRightSubtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rootOfLR</name> <init>= <expr><call><name>ComputeMerkleRoot</name><argument_list>(<argument><expr><name>leftRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rootOfLR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkle_test_BlockWitness</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint256</name></type> <name>blockWitness</name> <init>= <expr><call><name>BlockWitnessMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>hashes</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hashes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hashes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>merkleRootofHashes</name> <init>= <expr><call><name>ComputeMerkleRoot</name><argument_list>(<argument><expr><name>hashes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>merkleRootofHashes</name></expr></argument>, <argument><expr><name>blockWitness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
