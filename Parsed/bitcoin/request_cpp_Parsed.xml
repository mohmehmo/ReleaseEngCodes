<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/rpc/request.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/request.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * JSON-RPC protocol.  Bitcoin speaks version 1.0 for maximum compatibility,
 * but uses JSON-RPC 1.1/2.0 standards for parts of the 1.0 standard that were
 * unspecified (HTTP errors and contents of 'error').
 *
 * 1.0 spec: http://json-rpc.org/wiki/specification
 * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html
 */</comment>

<function><type><name>UniValue</name></type> <name>JSONRPCRequestObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strMethod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>request</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"method"</literal></expr></argument>, <argument><expr><name>strMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"params"</literal></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>request</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>JSONRPCReplyObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>error</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>reply</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name>NullUniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>reply</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name><name>reply</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reply</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>JSONRPCReply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>reply</name> <init>= <expr><call><name>JSONRPCReplyObj</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>reply</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>JSONRPCError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>error</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Username used when cookie authentication is in use (arbitrary, only for
 * recognizability in debugging/logging purposes)
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>COOKIEAUTH_USER</name> <init>= <expr><literal type="string">"__cookie__"</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default name for auth cookie file */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>COOKIEAUTH_FILE</name> <init>= <expr><literal type="string">".cookie"</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Get name of RPC authentication cookie file */</comment>
<function><type><specifier>static</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>GetAuthCookieFile</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>temp</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>arg</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpccookiefile"</literal></expr></argument>, <argument><expr><name>COOKIEAUTH_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>temp</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>arg</name> <operator>+=</operator> <literal type="string">".tmp"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>AbsPathForConfigVal</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GenerateAuthCookie</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>*</modifier></type><name>cookie_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>COOKIE_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rand_pwd</name><index>[<expr><name>COOKIE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><name>rand_pwd</name></expr></argument>, <argument><expr><name>COOKIE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>cookie</name> <init>= <expr><name>COOKIEAUTH_USER</name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name>HexStr</name><argument_list>(<argument><expr><name>rand_pwd</name></expr></argument>, <argument><expr><name>rand_pwd</name><operator>+</operator><name>COOKIE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** the umask determines what permissions are used to create this file -
     * these are set to 077 in init.cpp unless overridden with -sysperms.
     */</comment>
    <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ofstream</name></name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>filepath_tmp</name> <init>= <expr><call><name>GetAuthCookieFile</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>filepath_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>is_open</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Unable to open cookie authentication file %s for writing\n"</literal></expr></argument>, <argument><expr><call><name><name>filepath_tmp</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>file</name> <operator>&lt;&lt;</operator> <name>cookie</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>filepath</name> <init>= <expr><call><name>GetAuthCookieFile</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RenameOver</name><argument_list>(<argument><expr><name>filepath_tmp</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Unable to rename cookie authentication file %s to %s\n"</literal></expr></argument>, <argument><expr><call><name><name>filepath_tmp</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filepath</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Generated RPC authentication cookie %s\n"</literal></expr></argument>, <argument><expr><call><name><name>filepath</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cookie_out</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>cookie_out</name> <operator>=</operator> <name>cookie</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetAuthCookie</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>*</modifier></type><name>cookie_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ifstream</name></name></type> <name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>cookie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>filepath</name> <init>= <expr><call><name>GetAuthCookieFile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>is_open</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>getline</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cookie_out</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>cookie_out</name> <operator>=</operator> <name>cookie</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>DeleteAuthCookie</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>fs</name><operator>::</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>GetAuthCookieFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>filesystem_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Unable to remove random auth cookie file: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>fsbridge</name><operator>::</operator><name>get_filesystem_error_message</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>JSONRPCProcessBatchReply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>in</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Batch must be an array"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>batch</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>in</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>rec</name> <init>= <expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>rec</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Batch member must be object"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>id</name> <init>= <expr><name><name>rec</name><index>[<expr><literal type="string">"id"</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>id</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Batch member id larger than size"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>batch</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>batch</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>JSONRPCRequest</name><operator>::</operator><name>parse</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>valRequest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Parse request</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>valRequest</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"Invalid Request object"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>request</name> <init>= <expr><call><name><name>valRequest</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Parse id now so errors from here on will have the id</comment>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse method</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>valMethod</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>valMethod</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"Missing method"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>valMethod</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"Method must be a string"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>strMethod</name> <operator>=</operator> <call><name><name>valMethod</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fLogIPs</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>RPC</name></name></expr></argument>, <argument><expr><literal type="string">"ThreadRPCServer method=%s user=%s peeraddr=%s\n"</literal></expr></argument>, <argument><expr><call><name>SanitizeString</name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUser</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>peerAddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>RPC</name></name></expr></argument>, <argument><expr><literal type="string">"ThreadRPCServer method=%s user=%s\n"</literal></expr></argument>, <argument><expr><call><name>SanitizeString</name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Parse params</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>valParams</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"params"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>valParams</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>valParams</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <name>valParams</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>valParams</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>UniValue</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"Params must be an array or object"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
