<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/blockencodings_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pow.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>extra_txn</name></decl>;</decl_stmt>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>blockencodings_tests</argument>, <argument>RegTestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>CBlock</name></type> <name>BuildBlockTestCase</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x207fffff</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nBits</name></name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>block</name><operator>.</operator><name>nNonce</name></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>block</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Number of shared use_counts we expect for a tx we haven't touched</comment>
<comment type="line">// (block + mempool + our copy from the GetSharedTx call)</comment>
<decl_stmt><decl><type><specifier>constexpr</specifier> <name>long</name></type> <name>SHARED_TX_OFFSET</name><argument_list>{<argument><expr><literal type="number">3</literal></expr></argument>}</argument_list></decl>;</decl_stmt>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>SimpleRoundTripTest</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestMemPoolEntryHelper</name></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name><argument_list>(<argument><expr><call><name>BuildBlockTestCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Do a simple ShortTxIDs RT</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockHeaderAndShortTxIDs</name></type> <name>shortIDs</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

        <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>shortIDs</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlockHeaderAndShortTxIDs</name></type> <name>shortIDs2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>shortIDs2</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>partialBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>InitData</name></name><argument_list>(<argument><expr><name>shortIDs2</name></expr></argument>, <argument><expr><name>extra_txn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>poolSize</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>MemPoolRemovalReason</name><operator>::</operator><name>REPLACED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>poolSize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlock</name></type> <name>block2</name></decl>;</decl_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>tmp</name> <init>= <expr><name>partialBlock</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>)</block_content> == READ_STATUS_INVALID</block>)</block_content></block><empty_stmt>;</empty_stmt> <comment type="line">// No transactions</comment>
            <expr_stmt><expr><name>partialBlock</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// Wrong transaction</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>tmp</name> <init>= <expr><name>partialBlock</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <block>{<block_content><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt> <comment type="line">// Current implementation doesn't check txn here, but don't require that</comment>
            <expr_stmt><expr><name>partialBlock</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        }
        bool <expr_stmt><expr><name>mutated</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>!=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlock</name></type> <name>block3</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <block>{<block_content><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>) <expr_stmt><expr><operator>==</operator> <name>READ_STATUS_OK</name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }
}

<class>class <name>TestHeaderAndShortIDs</name> <block>{<private type="default">
    <comment type="line">// Utility to encode custom CBlockHeaderAndShortTxIDs</comment>
</private><public>public:
    <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nonce</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></type> <name>shorttxids</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PrefilledTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>prefilledtxn</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>TestHeaderAndShortIDs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockHeaderAndShortTxIDs</name><modifier>&amp;</modifier></type> <name>orig</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>orig</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <operator>*</operator><name>this</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    <constructor><specifier>explicit</specifier> <name>TestHeaderAndShortIDs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <member_init_list>:
        <call><name>TestHeaderAndShortIDs</name><argument_list>(<argument><expr><call><name>CBlockHeaderAndShortTxIDs</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>uint64_t</name></type> <name>GetShortID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txhash</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>this</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CBlockHeaderAndShortTxIDs</name></type> <name>base</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>base</name></expr>;</expr_stmt>
        <return>return <expr><call><name><name>base</name><operator>.</operator><name>GetShortID</name></name><argument_list>(<argument><expr><name>txhash</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <macro><name>ADD_SERIALIZE_METHODS</name></macro><empty_stmt>;</empty_stmt>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>, <parameter><type><name>typename</name></type> <name>Operation</name></parameter>&gt;</parameter_list></template>
    <type><specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>shorttxids_size</name> <init>= <expr><call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>shorttxids_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shorttxids</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>shorttxids_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>shorttxids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name></type> <name>lsb</name> <init>= <expr><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint16_t</name></type> <name>msb</name> <init>= <expr><operator>(</operator><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>msb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>shorttxids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>msb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>uint64_t</name><argument_list>(<argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>prefilledtxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>NonCoinbasePreforwardRTTest</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CTxMemPool</name></type> <name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestMemPoolEntryHelper</name></type> <name>entry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name><argument_list>(<argument><expr><call><name>BuildBlockTestCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>txhash</name></decl>;</decl_stmt>

    <comment type="line">// Test with pre-forwarding tx 1, but not coinbase</comment>
    <block>{<block_content>
        <function_decl><type><name>TestHeaderAndShortIDs</name></type> <name>shortIDs</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>shortIDs</name><operator>.</operator><name>prefilledtxn</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shortIDs</name><operator>.</operator><name>prefilledtxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shortIDs</name><operator>.</operator><name>shorttxids</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shortIDs</name><operator>.</operator><name>shorttxids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>shortIDs</name><operator>.</operator><name>GetShortID</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shortIDs</name><operator>.</operator><name>shorttxids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>shortIDs</name><operator>.</operator><name>GetShortID</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>shortIDs</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlockHeaderAndShortTxIDs</name></type> <name>shortIDs2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>shortIDs2</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>partialBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>InitData</name></name><argument_list>(<argument><expr><name>shortIDs2</name></expr></argument>, <argument><expr><name>extra_txn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// +1 because of partialBlock</comment>

        <decl_stmt><decl><type><name>CBlock</name></type> <name>block2</name></decl>;</decl_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>tmp</name> <init>= <expr><name>partialBlock</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <block>{<block_content/>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>)</block_content> == READ_STATUS_INVALID</block>)</block_content></block><empty_stmt>;</empty_stmt> <comment type="line">// No transactions</comment>
            <expr_stmt><expr><name>partialBlock</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// Wrong transaction</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>tmp</name> <init>= <expr><name>partialBlock</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <block>{<block_content><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt> <comment type="line">// Current implementation doesn't check txn here, but don't require that</comment>
            <expr_stmt><expr><name>partialBlock</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        }
        BOOST_CHECK_EQUAL<expr_stmt><expr><operator>(</operator><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call><operator>,</operator> <name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// +2 because of partialBlock and block2</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>!=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlock</name></type> <name>block3</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PartiallyDownloadedBlock</name></type> <name>partialBlockCopy</name> <init>= <expr><name>partialBlock</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <block>{<block_content><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>) <expr_stmt><expr><operator>==</operator> <name>READ_STATUS_OK</name></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block3</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// +2 because of partialBlock and block2 and block3</comment>

        <expr_stmt><expr><name>txhash</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>block2</name><operator>.</operator><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>block3</name><operator>.</operator><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txhash</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// + 1 because of partialBlock; -1 because of block.</comment>
    }
    BOOST_CHECK_EQUAL<expr_stmt><expr><operator>(</operator><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txhash</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call><operator>,</operator> <name>SHARED_TX_OFFSET</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// -1 because of block</comment>
}

BOOST_AUTO_TEST_CASE<expr_stmt><expr><operator>(</operator><name>SufficientPreforwardRTTest</name><operator>)</operator>
<block>{
    <expr><name>CTxMemPool</name> <name>pool</name></expr>;
    <expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr>;
    <expr><name>CBlock</name> <call><name>block</name><argument_list>(<argument><expr><call><name>BuildBlockTestCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

    <expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>, <argument><expr><name><name>pool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>pool</name><operator>.</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>FromTx</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;

    <expr><name>uint256</name> <name>txhash</name></expr>;

    <comment type="line">// Test with pre-forwarding coinbase + tx 2 with tx 1 in mempool</comment>
    <expr><block>{
        <expr><name>TestHeaderAndShortIDs</name> <call><name>shortIDs</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name><name>shortIDs</name><operator>.</operator><name>prefilledtxn</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>shortIDs</name><operator>.</operator><name>prefilledtxn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0</literal></expr>, <expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>}</block></expr>;
        <expr><name><name>shortIDs</name><operator>.</operator><name>prefilledtxn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">1</literal></expr>, <expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>}</block></expr>; <comment type="line">// id == 1 as it is 1 after index 1</comment>
        <expr><call><name><name>shortIDs</name><operator>.</operator><name>shorttxids</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name><name>shortIDs</name><operator>.</operator><name>shorttxids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>shortIDs</name><operator>.</operator><name>GetShortID</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>CDataStream</name> <call><name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>stream</name> <operator>&lt;&lt;</operator> <name>shortIDs</name></expr>;

        <expr><name>CBlockHeaderAndShortTxIDs</name> <name>shortIDs2</name></expr>;
        <expr><name>stream</name> <operator>&gt;&gt;</operator> <name>shortIDs2</name></expr>;

        <expr><name>PartiallyDownloadedBlock</name> <call><name>partialBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>InitData</name></name><argument_list>(<argument><expr><name>shortIDs2</name></expr></argument>, <argument><expr><name>extra_txn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;

        <expr><name>CBlock</name> <name>block2</name></expr>;
        <expr><name>PartiallyDownloadedBlock</name> <name>partialBlockCopy</name> <operator>=</operator> <name>partialBlock</name></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <block>{<block_content><expr_stmt/>}</block_content></block>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><name>bool</name> <name>mutated</name></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;

        <expr><name>txhash</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>block2</name><operator>.</operator><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txhash</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// + 1 because of partialBlock; -1 because of block.</comment>
    }</block>
    <call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>mapTx</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txhash</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetSharedTx</name><argument_list>()</argument_list></call><operator>.</operator><call><name>use_count</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SHARED_TX_OFFSET</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// -1 because of block</comment>
}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>EmptyBlockRoundTripTest</argument>)</argument_list></macro>
<block>{
    <expr><name>CTxMemPool</name> <name>pool</name></expr>;
    <expr><name>CMutableTransaction</name> <name>coinbase</name></expr>;
    <expr><call><name><name>coinbase</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>coinbase</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;
    <expr><call><name><name>coinbase</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>coinbase</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">42</literal></expr>;

    <expr><name>CBlock</name> <name>block</name></expr>;
    <expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>coinbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>block</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">42</literal></expr>;
    <expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;
    <expr><name><name>block</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x207fffff</literal></expr>;

    <expr><name>bool</name> <name>mutated</name></expr>;
    <expr><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;
    <while>while <condition>(<expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>block</name><operator>.</operator><name>nBits</name></name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name><name>block</name><operator>.</operator><name>nNonce</name></name></expr>;</expr_stmt></block_content></block></while>

    <comment type="line">// Test simple header round-trip with only coinbase</comment>
    <block>{
        <expr><name>CBlockHeaderAndShortTxIDs</name> <call><name>shortIDs</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;

        <expr><name>CDataStream</name> <call><name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>stream</name> <operator>&lt;&lt;</operator> <name>shortIDs</name></expr>;

        <expr><name>CBlockHeaderAndShortTxIDs</name> <name>shortIDs2</name></expr>;
        <expr><name>stream</name> <operator>&gt;&gt;</operator> <name>shortIDs2</name></expr>;

        <expr><name>PartiallyDownloadedBlock</name> <call><name>partialBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>InitData</name></name><argument_list>(<argument><expr><name>shortIDs2</name></expr></argument>, <argument><expr><name>extra_txn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>IsTxAvailable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

        <expr><name>CBlock</name> <name>block2</name></expr>;
        <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>vtx_missing</name></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>partialBlock</name><operator>.</operator><name>FillBlock</name></name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><name>vtx_missing</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>READ_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;
    }</block></block></expr></expr_stmt>
}

BOOST_AUTO_TEST_CASE<expr_stmt><expr><operator>(</operator><name>TransactionsRequestSerializationTest</name><operator>)</operator> <block>{
    <expr><name>BlockTransactionsRequest</name> <name>req1</name></expr>;
    <expr><name><name>req1</name><operator>.</operator><name>blockhash</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>req1</name><operator>.</operator><name>indexes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;
    <expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;
    <expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;

    <expr><name>CDataStream</name> <call><name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>stream</name> <operator>&lt;&lt;</operator> <name>req1</name></expr>;

    <expr><name>BlockTransactionsRequest</name> <name>req2</name></expr>;
    <expr><name>stream</name> <operator>&gt;&gt;</operator> <name>req2</name></expr>;

    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>req1</name><operator>.</operator><name>blockhash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>req2</name><operator>.</operator><name>blockhash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>req1</name><operator>.</operator><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>req2</name><operator>.</operator><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>req2</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>req2</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>req2</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>req2</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>TransactionsRequestDeserializationMaxTest</argument>)</argument_list></macro> <block>{
    <comment type="line">// Check that the highest legal index is decoded correctly</comment>
    <expr><name>BlockTransactionsRequest</name> <name>req0</name></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>blockhash</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>req0</name><operator>.</operator><name>indexes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;
    <expr><name>CDataStream</name> <call><name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>stream</name> <operator>&lt;&lt;</operator> <name>req0</name></expr>;

    <expr><name>BlockTransactionsRequest</name> <name>req1</name></expr>;
    <expr><name>stream</name> <operator>&gt;&gt;</operator> <name>req1</name></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>req0</name><operator>.</operator><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>req1</name><operator>.</operator><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>TransactionsRequestDeserializationOverflowTest</argument>)</argument_list></macro> <block>{
    <comment type="line">// Any set of index deltas that starts with N values that sum to (0x10000 - N)</comment>
    <comment type="line">// causes the edge-case overflow that was originally not checked for. Such</comment>
    <comment type="line">// a request cannot be created by serializing a real BlockTransactionsRequest</comment>
    <comment type="line">// due to the overflow, so here we'll serialize from raw deltas.</comment>
    <expr><name>BlockTransactionsRequest</name> <name>req0</name></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>blockhash</name></name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;
    <expr><call><name><name>req0</name><operator>.</operator><name>indexes</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7000</literal></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>-</operator> <literal type="number">0x7000</literal> <operator>-</operator> <literal type="number">2</literal></expr>;
    <expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>CDataStream</name> <call><name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>req0</name><operator>.</operator><name>blockhash</name></name></expr>;
    <expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name><name>req0</name><operator>.</operator><name>indexes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>req0</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;

    <expr><name>BlockTransactionsRequest</name> <name>req1</name></expr>;
    <macro><name>try</name></macro> <expr><block>{
        <expr><name>stream</name> <operator>&gt;&gt;</operator> <name>req1</name></expr>;
        <comment type="line">// before patch: deserialize above succeeds and this check fails, demonstrating the overflow</comment>
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>req1</name><operator>.</operator><name>indexes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
        <comment type="line">// this shouldn't be reachable before or after patch</comment>
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
    }</block></expr> <catch>catch<parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// deserialize should fail</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Needed to suppress "Test case [...] did not check any assertions"</comment>
    <expr_stmt/></block_content></block></catch>}</block></expr></expr_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
