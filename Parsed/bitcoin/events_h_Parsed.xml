<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/support/events.h"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SUPPORT_EVENTS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SUPPORT_EVENTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ios&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/http.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_RAII</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
<comment type="block">/* deleter */</comment>\
<cpp:value>struct type##_deleter {\
    void operator()(struct type* ob) {\
        type##_free(ob);\
    }\
};\
<comment type="block">/* unique ptr typedef */</comment>\
typedef std::unique_ptr&lt;struct type, type##_deleter&gt; raii_##type</cpp:value></cpp:define>

<expr_stmt><expr><call><name>MAKE_RAII</name><argument_list>(<argument><expr><name>event_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_RAII</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_RAII</name><argument_list>(<argument><expr><name>evhttp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_RAII</name><argument_list>(<argument><expr><name>evhttp_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MAKE_RAII</name><argument_list>(<argument><expr><name>evhttp_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>inline</specifier> <name>raii_event_base</name></type> <name>obtain_event_base</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name>raii_event_base</name><argument_list>(<argument><expr><call><name>event_base_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>runtime_error</name><argument_list>(<argument><expr><literal type="string">"cannot create event_base"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raii_event</name></type> <name>obtain_event</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>evutil_socket_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>events</name></decl></parameter>, <parameter><decl><type><name>event_callback_fn</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>raii_event</name><argument_list>(<argument><expr><call><name>event_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raii_evhttp</name></type> <name>obtain_evhttp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>event_base</name></name><modifier>*</modifier></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>raii_evhttp</name><argument_list>(<argument><expr><call><name>evhttp_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>raii_evhttp_request</name></type> <name>obtain_evhttp_request</name><parameter_list>(<parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>cb</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>raii_evhttp_request</name><argument_list>(<argument><expr><call><name>evhttp_request_new</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>inline</specifier> <name>raii_evhttp_connection</name></type> <name>obtain_evhttp_connection_base</name><argument_list>(<argument><expr>struct <name>event_base</name><operator>*</operator> <name>base</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <name>host</name></expr></argument>, <argument><expr><name>uint16_t</name> <name>port</name></expr></argument>)</argument_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>result</name> <init>= <expr><call><name>raii_evhttp_connection</name><argument_list>(<argument><expr><call><name>evhttp_connection_base_new</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>nullptr</name></expr></argument>, <argument><expr><call><name><name>host</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>runtime_error</name><argument_list>(<argument><expr><literal type="string">"create connection failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SUPPORT_EVENTS_H</comment>
</unit>
