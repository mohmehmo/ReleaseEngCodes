<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/dummywallet.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;walletinitinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>

<class_decl>class <name>CWallet</name>;</class_decl>
<enum_decl type="class">enum class <name>WalletCreationStatus</name>;</enum_decl>

<namespace>namespace <name>interfaces</name> <block>{
<class_decl>class <name>Chain</name>;</class_decl>
}</block></namespace>

<class>class <name>DummyWalletInit</name> <super_list>: <super><specifier>public</specifier> <name>WalletInitInterface</name></super></super_list> <block>{<private type="default">
</private><public>public:

    <function><type><name>bool</name></type> <name>HasWalletSupport</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content><return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content>}</block></function>
    <function_decl><type><name>void</name></type> <name>AddWalletOptions</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier>;</function_decl>
    <function><type><name>bool</name></type> <name>ParameterInteraction</name><parameter_list>()</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content><return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content>}</block></function>
    <function><type><name>void</name></type> <name>Construct</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <specifier>override</specifier> <block>{<block_content><expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"No wallet support compiled in!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
</public>}</block>;</class>

<function><type><name>void</name></type> <name><name>DummyWalletInit</name><operator>::</operator><name>AddWalletOptions</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddHiddenArgs</name></name><argument_list>(<argument><expr><block>{
        <expr><literal type="string">"-addresstype"</literal></expr>,
        <expr><literal type="string">"-avoidpartialspends"</literal></expr>,
        <expr><literal type="string">"-changetype"</literal></expr>,
        <expr><literal type="string">"-disablewallet"</literal></expr>,
        <expr><literal type="string">"-discardfee=&lt;amt&gt;"</literal></expr>,
        <expr><literal type="string">"-fallbackfee=&lt;amt&gt;"</literal></expr>,
        <expr><literal type="string">"-keypool=&lt;n&gt;"</literal></expr>,
        <expr><literal type="string">"-maxtxfee=&lt;amt&gt;"</literal></expr>,
        <expr><literal type="string">"-mintxfee=&lt;amt&gt;"</literal></expr>,
        <expr><literal type="string">"-paytxfee=&lt;amt&gt;"</literal></expr>,
        <expr><literal type="string">"-rescan"</literal></expr>,
        <expr><literal type="string">"-salvagewallet"</literal></expr>,
        <expr><literal type="string">"-spendzeroconfchange"</literal></expr>,
        <expr><literal type="string">"-txconfirmtarget=&lt;n&gt;"</literal></expr>,
        <expr><literal type="string">"-upgradewallet"</literal></expr>,
        <expr><literal type="string">"-wallet=&lt;path&gt;"</literal></expr>,
        <expr><literal type="string">"-walletbroadcast"</literal></expr>,
        <expr><literal type="string">"-walletdir=&lt;dir&gt;"</literal></expr>,
        <expr><literal type="string">"-walletnotify=&lt;cmd&gt;"</literal></expr>,
        <expr><literal type="string">"-walletrbf"</literal></expr>,
        <expr><literal type="string">"-zapwallettxes=&lt;mode&gt;"</literal></expr>,
        <expr><literal type="string">"-dblogsize=&lt;n&gt;"</literal></expr>,
        <expr><literal type="string">"-flushwallet"</literal></expr>,
        <expr><literal type="string">"-privdb"</literal></expr>,
        <expr><literal type="string">"-walletrejectlongchains"</literal></expr>,
    }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>WalletInitInterface</name><modifier>&amp;</modifier></type> <name>g_wallet_init_interface</name> <init>= <expr><call><name>DummyWalletInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>GetWalletDir</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name></type> <name>ListWalletDir</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>GetWallets</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>LoadWallet</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name>WalletCreationStatus</name></type> <name>CreateWallet</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Chain</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>wallet_creation_flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<namespace>namespace <name>interfaces</name> <block>{

<class_decl>class <name>Wallet</name>;</class_decl>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Wallet</name></expr></argument>&gt;</argument_list></name></type> <name>MakeWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>logic_error</name></name><argument_list>(<argument><expr><literal type="string">"Wallet function called in non-wallet build."</literal></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace interfaces</comment>
</unit>
