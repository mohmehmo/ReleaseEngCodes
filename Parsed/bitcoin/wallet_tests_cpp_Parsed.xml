<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/test/wallet_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/test/wallet_test_fixture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>importmulti</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>dumpwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>importwallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>wallet_tests</argument>, <argument>WalletTestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddKey</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>scan_for_wallet_transactions</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Cap last block file size, and mine new block in a new block file.</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>oldTip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetBlockFileInfo</name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nSize</name> <operator>=</operator> <name>MAX_BLOCKFILE_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>newTip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>LockAssertion</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name><operator>::</operator><name>cs_main</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Verify ScanForWalletTransactions accommodates a null start block.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>AddKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument> <comment type="block">/* start_block */</comment>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* update */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>SUCCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_failed_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_scanned_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_immature</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Verify ScanForWalletTransactions picks up transactions in both the old</comment>
    <comment type="line">// and new block files.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>AddKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* update */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>SUCCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_failed_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_scanned_block</name></name></expr></argument>, <argument><expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><operator>*</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr></argument>, <argument><expr><name><name>newTip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_immature</name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Prune the older block file.</comment>
    <expr_stmt><expr><call><name>PruneOneBlockFile</name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UnlinkPrunedFiles</name><argument_list>(<argument><expr><block>{<expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify ScanForWalletTransactions only picks transactions in the new block</comment>
    <comment type="line">// file.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>AddKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* update */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>FAILURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_failed_block</name></name></expr></argument>, <argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_scanned_block</name></name></expr></argument>, <argument><expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><operator>*</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr></argument>, <argument><expr><name><name>newTip</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_immature</name></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Prune the remaining block file.</comment>
    <expr_stmt><expr><call><name>PruneOneBlockFile</name><argument_list>(<argument><expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UnlinkPrunedFiles</name><argument_list>(<argument><expr><block>{<expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify ScanForWalletTransactions scans no blocks.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>AddKey</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* update */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>FAILURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_failed_block</name></name></expr></argument>, <argument><expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_scanned_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call><operator>.</operator><name>m_mine_immature</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>importmulti_rescan</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Cap last block file size, and mine new block in a new block file.</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>oldTip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetBlockFileInfo</name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nSize</name> <operator>=</operator> <name>MAX_BLOCKFILE_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>newTip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>LockAssertion</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name><operator>::</operator><name>cs_main</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Prune the older block file.</comment>
    <expr_stmt><expr><call><name>PruneOneBlockFile</name><argument_list>(<argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UnlinkPrunedFiles</name><argument_list>(<argument><expr><block>{<expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockPos</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nFile</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify importmulti RPC returns failure for a key whose creation time is</comment>
    <comment type="line">// before the missing block, and success for a key whose creation time is</comment>
    <comment type="line">// after.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>AddWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>keys</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>key</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>setObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"internal"</literal></expr></argument>, <argument><expr><call><name>UniValue</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>setObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CKey</name></type> <name>futureKey</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>futureKey</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>futureKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><call><name><name>newTip</name><operator>-&gt;</operator><name>GetBlockTimeMax</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>TIMESTAMP_WINDOW</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"internal"</literal></expr></argument>, <argument><expr><call><name>UniValue</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>JSONRPCRequest</name></type> <name>request</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>response</name> <init>= <expr><call><name>importmulti</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"[{\"success\":false,\"error\":{\"code\":-1,\"message\":\"Rescan failed for key with creation "</literal>
                      <literal type="string">"timestamp %d. There was an error reading a block from time %d, which is after or within %d "</literal>
                      <literal type="string">"seconds of key creation, and could contain transactions pertaining to the key. As a result, "</literal>
                      <literal type="string">"transactions and coins using this key may not appear in the wallet. This error could be caused "</literal>
                      <literal type="string">"by pruning or data corruption (see bitcoind log for details) and could be dealt with by "</literal>
                      <literal type="string">"downloading and rescanning the relevant blocks (see -reindex and -rescan "</literal>
                      <literal type="string">"options).\"}},{\"success\":true}]"</literal></expr></argument>,
                              <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>oldTip</name><operator>-&gt;</operator><name>GetBlockTimeMax</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TIMESTAMP_WINDOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<comment type="line">// Verify importwallet RPC starts rescan at earliest block with timestamp</comment>
<comment type="line">// greater or equal than key birthday. Previously there was a bug where</comment>
<comment type="line">// importwallet RPC would start the scan at the latest block with timestamp less</comment>
<comment type="line">// than or equal to key birthday.</comment>
<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>importwallet_rescan</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Create two blocks with same timestamp to verify that importwallet rescan</comment>
    <comment type="line">// will pick up both blocks, not just the first.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>BLOCK_TIME</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockTimeMax</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><name>BLOCK_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_coinbase_txns</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_coinbase_txns</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set key birthday to block time increased by the timestamp window, so</comment>
    <comment type="line">// rescan will start at the block time.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>KEY_TIME</name> <init>= <expr><name>BLOCK_TIME</name> <operator>+</operator> <name>TIMESTAMP_WINDOW</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><name>KEY_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_coinbase_txns</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>LockAssertion</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name><operator>::</operator><name>cs_main</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>backup_file</name> <init>= <expr><operator>(</operator><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"wallet.backup"</literal><operator>)</operator><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Import key into wallet and call dumpwallet to create backup file.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spk_man</name><operator>-&gt;</operator><name>mapKeyMetadata</name><index>[<expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><name>nCreateTime</name> <operator>=</operator> <name>KEY_TIME</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>coinbaseKey</name></expr></argument>, <argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JSONRPCRequest</name></type> <name>request</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>backup_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>dumpwallet</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Call importwallet RPC and verify all blocks with timestamps &gt;= BLOCK_TIME</comment>
    <comment type="line">// were scanned, and no prior blocks were scanned.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JSONRPCRequest</name></type> <name>request</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>backup_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>importwallet</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>m_coinbase_txns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">103U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>m_coinbase_txns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetWalletTx</name></name><argument_list>(<argument><expr><name><name>m_coinbase_txns</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>expected</name> <init>= <expr><name>i</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Check that GetImmatureCredit() returns a newly calculated value instead of</comment>
<comment type="line">// the cached value after a MarkDirty() call.</comment>
<comment type="line">//</comment>
<comment type="line">// This is a regression test written to verify a bugfix for the immature credit</comment>
<comment type="line">// function. Similar tests probably should be written for the other credit and</comment>
<comment type="line">// debit functions.</comment>
<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>coin_mark_dirty_immature_credit</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWalletTx</name></type> <name>wtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>, <argument><expr><call><name><name>m_coinbase_txns</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>LockAssertion</name></type> <name>lock</name><parameter_list>(<parameter><decl><type><name><operator>::</operator><name>cs_main</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>CWalletTx</name><operator>::</operator><name>Confirmation</name></name></type> <name>confirm</name><argument_list>(<argument><expr><name><name>CWalletTx</name><operator>::</operator><name>Status</name><operator>::</operator><name>CONFIRMED</name></name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name></name> <operator>=</operator> <name>confirm</name></expr>;</expr_stmt>

    <comment type="line">// Call GetImmatureCredit() once before adding the key to the wallet to</comment>
    <comment type="line">// cache the current immature credit amount, which is 0.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetImmatureCredit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Invalidate the cached vanue, add the key, and make sure a new immature</comment>
    <comment type="line">// credit amount is calculated.</comment>
    <expr_stmt><expr><call><name><name>wtx</name><operator>.</operator><name>MarkDirty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>coinbaseKey</name></expr></argument>, <argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetImmatureCredit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">50</literal><operator>*</operator><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>AddTx</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>lockTime</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>mockTime</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>blockTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>lockTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><name>mockTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>block</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>blockTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LockAssertion</name></type> <name>lock</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>inserted</name> <init>= <expr><call><name><operator>::</operator><name>BlockIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>emplace</name><argument_list>(<argument><expr><call><name>GetRandHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name>CBlockIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>inserted</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name> <init>= <expr><name><name>inserted</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>inserted</name><operator>.</operator><name>first</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <name>blockTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>phashBlock</name></name> <operator>=</operator> <operator>&amp;</operator><name>hash</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CWalletTx</name></type> <name>wtx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>, <argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// If transaction is already in map, to avoid inconsistencies, unconfirmation</comment>
    <comment type="line">// is needed before confirm again with different block.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>CWalletTx</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>wtx</name><operator>.</operator><name>setUnconfirmed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>AddToWallet</name></name><argument_list>(<argument><expr><name>wtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>CWalletTx</name><operator>::</operator><name>Confirmation</name></name></type> <name>confirm</name><argument_list>(<argument><expr><name><name>CWalletTx</name><operator>::</operator><name>Status</name><operator>::</operator><name>CONFIRMED</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>nHeight</name></name></expr></argument>, <argument><expr><call><name><name>block</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>wtx</name><operator>.</operator><name>m_confirm</name></name> <operator>=</operator> <name>confirm</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>AddToWallet</name></name><argument_list>(<argument><expr><name>wtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>nTimeSmart</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Simple test to verify assignment of CWalletTx::nSmartTime value. Could be</comment>
<comment type="line">// expanded to cover more corner cases of smart time logic.</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>ComputeTimeSmart</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// New transaction should use clock time if lower than block time.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test that updating existing transaction does not change smart time.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">220</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// New transaction should use clock time if there's no block time.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// New transaction should use block time if lower than clock time.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">420</literal></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// New transaction should use latest entry time if higher than</comment>
    <comment type="line">// min(block time, clock time).</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">390</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If there are future entries, new transaction should use time of the</comment>
    <comment type="line">// newest entry that is no more than 300 seconds ahead of the clock time.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AddTx</name><argument_list>(<argument><expr><name>m_wallet</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">600</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reset mock time for other tests.</comment>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>LoadReceiveRequests</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>PKHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WalletBatch</name></type> <name>batch</name><argument_list>{<argument><expr><macro><name>m_wallet</name></macro><operator>.</operator><macro><name>GetDatabase</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_wallet</name><operator>.</operator><name>AddDestData</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"misc"</literal></expr></argument>, <argument><expr><literal type="string">"val_misc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_wallet</name><operator>.</operator><name>AddDestData</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"rr0"</literal></expr></argument>, <argument><expr><literal type="string">"val_rr0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_wallet</name><operator>.</operator><name>AddDestData</name></name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"rr1"</literal></expr></argument>, <argument><expr><literal type="string">"val_rr1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>values</name> <init>= <expr><call><name><name>m_wallet</name><operator>.</operator><name>GetDestValues</name></name><argument_list>(<argument><expr><literal type="string">"rr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"val_rr0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"val_rr1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Test some watch-only LegacyScriptPubKeyMan methods by the procedure of loading (LoadWatchOnly),</comment>
<comment type="line">// checking (HaveWatchOnly), getting (GetWatchPubKey) and removing (RemoveWatchOnly) a</comment>
<comment type="line">// given PubKey, resp. its corresponding P2PK Script. Results of the the impact on</comment>
<comment type="line">// the address -&gt; PubKey map is dependent on whether the PubKey is a point on the curve</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TestWatchOnlyPubKey</name><parameter_list>(<parameter><decl><type><name>LegacyScriptPubKeyMan</name><modifier>*</modifier></type> <name>spk_man</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>add_pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>p2pk</name> <init>= <expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name>add_pubkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>add_address</name> <init>= <expr><call><name><name>add_pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>found_pubkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// all Scripts (i.e. also all PubKeys) are added to the general watch-only set</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>LoadWatchOnly</name></name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// only PubKeys on the curve shall be added to the watch-only address -&gt; PubKey map</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_pubkey_fully_valid</name> <init>= <expr><call><name><name>add_pubkey</name><operator>.</operator><name>IsFullyValid</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_pubkey_fully_valid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>GetWatchPubKey</name></name><argument_list>(<argument><expr><name>add_address</name></expr></argument>, <argument><expr><name>found_pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found_pubkey</name> <operator>==</operator> <name>add_pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>spk_man</name><operator>-&gt;</operator><name>GetWatchPubKey</name></name><argument_list>(<argument><expr><name>add_address</name></expr></argument>, <argument><expr><name>found_pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found_pubkey</name> <operator>==</operator> <call><name>CPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// passed key is unchanged</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>RemoveWatchOnly</name></name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>(<argument><expr><name>p2pk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_pubkey_fully_valid</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>spk_man</name><operator>-&gt;</operator><name>GetWatchPubKey</name></name><argument_list>(<argument><expr><name>add_address</name></expr></argument>, <argument><expr><name>found_pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>found_pubkey</name> <operator>==</operator> <name>add_pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// passed key is unchanged</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Cryptographically invalidate a PubKey whilst keeping length and first byte</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>PollutePubKey</name><parameter_list>(<parameter><decl><type><name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pubkey_raw</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>fill</name></name><argument_list>(<argument><expr><call><name><name>pubkey_raw</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>pubkey_raw</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name>CPubKey</name><argument_list>(<argument><expr><name>pubkey_raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>IsFullyValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Test watch-only logic for PubKeys</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>WatchOnlyPubKeys</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LegacyScriptPubKeyMan</name><modifier>*</modifier></type> <name>spk_man</name> <init>= <expr><call><name><name>m_wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>spk_man</name><operator>-&gt;</operator><name>HaveWatchOnly</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// uncompressed valid PubKey</comment>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestWatchOnlyPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// uncompressed cryptographically invalid PubKey</comment>
    <expr_stmt><expr><call><name>PollutePubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestWatchOnlyPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// compressed valid PubKey</comment>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestWatchOnlyPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// compressed cryptographically invalid PubKey</comment>
    <expr_stmt><expr><call><name>PollutePubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestWatchOnlyPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// invalid empty PubKey</comment>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name>CPubKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestWatchOnlyPubKey</name><argument_list>(<argument><expr><name>spk_man</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<class>class <name>ListCoinsTestingSetup</name> <super_list>: <super><specifier>public</specifier> <name>TestChain100Setup</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><name>ListCoinsTestingSetup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wallet</name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>m_chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateMock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <decl_stmt><decl><type><name>bool</name></type> <name>firstRun</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>firstRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AddKey</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><name>coinbaseKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Genesis</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* update */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>SUCCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_scanned_block</name></name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><operator>*</operator><name><name>result</name><operator>.</operator><name>last_scanned_height</name></name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_failed_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <destructor><name>~ListCoinsTestingSetup</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></destructor>

    <function><type><name>CWalletTx</name><modifier>&amp;</modifier></type> <name>AddTx</name><parameter_list>(<parameter><decl><type><name>CRecipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>fee</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>changePos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CCoinControl</name></type> <name>dummy</name></decl>;</decl_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>CreateTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <block>{<block_content><expr><name>recipient</name></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><name>tx</name></expr><operator>,</operator> <expr><name>fee</name></expr><operator>,</operator> <expr><name>changePos</name></expr><operator>,</operator> <expr><name>error</name></expr><operator>,</operator> <expr><name>dummy</name></expr></expr_stmt>)</block_content></block>)</block_content></block>;</function>
        </public>}</block>
        <decl><name><name>wallet</name><operator>-&gt;</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><block>{}</block></expr></argument>, <argument><expr><block>{}</block></expr></argument>)</argument_list></decl>;</class>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>blocktx</name></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>blocktx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>CreateAndProcessBlock</name><argument_list>(<argument><expr><block>{<macro><name>CMutableTransaction</name><argument_list>(<argument>blocktx</argument>)</argument_list></macro>}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetLastBlockHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>it</name> <operator>!=</operator> <call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWalletTx</name><operator>::</operator><name>Confirmation</name></name></type> <name>confirm</name><argument_list>(<argument><expr><name><name>CWalletTx</name><operator>::</operator><name>Status</name><operator>::</operator><name>CONFIRMED</name></name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>m_confirm</name></name> <operator>=</operator> <name>confirm</name></expr>;</expr_stmt>
        <return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
    }

    NodeContext <expr_stmt><expr><name>m_node</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Chain</name></name></expr></argument>&gt;</argument_list></name></type> <name>m_chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>m_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl>;</decl_stmt>
};

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>ListCoins</argument>, <argument>ListCoinsTestingSetup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>coinbaseAddress</name> <init>= <expr><call><name><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Confirm ListCoins initially returns 1 coin grouped under coinbaseKey</comment>
    <comment type="line">// address.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>wallet</name><operator>-&gt;</operator><name>ListCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>coinbaseAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check initial balance from one mature coinbase transaction.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetAvailableBalance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add a transaction creating a change address, and confirm ListCoins still</comment>
    <comment type="line">// returns the coin associated with the change address underneath the</comment>
    <comment type="line">// coinbaseKey pubkey, even though the change address has a different</comment>
    <comment type="line">// pubkey.</comment>
    <expr_stmt><expr><call><name>AddTx</name><argument_list>(<argument><expr><call><name>CRecipient</name><argument_list>{<argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* subtract fee */</comment>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>wallet</name><operator>-&gt;</operator><name>ListCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>coinbaseAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Lock both coins. Confirm number of available coins drops to 0.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name></type> <name>available</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>AvailableCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>available</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>group</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>coin</name> <range>: <expr><name><name>group</name><operator>.</operator><name>second</name></name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>LockCoin</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><call><name><name>coin</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>coin</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>COutput</name></expr></argument>&gt;</argument_list></name></type> <name>available</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>AvailableCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>available</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>available</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="line">// Confirm ListCoins still returns same result as before, despite coins</comment>
    <comment type="line">// being locked.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>m_chain</name><operator>-&gt;</operator><name>lock</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>wallet</name><operator>-&gt;</operator><name>ListCoins</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>coinbaseAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>wallet_disableprivkeys</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateDummy</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetMinVersion</name></name><argument_list>(<argument><expr><name>FEATURE_LATEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetWalletFlag</name></name><argument_list>(<argument><expr><name>WALLET_FLAG_DISABLE_PRIVATE_KEYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>wallet</name><operator>-&gt;</operator><name>TopUpKeyPool</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>wallet</name><operator>-&gt;</operator><name>GetNewDestination</name></name><argument_list>(<argument><expr><name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Explicit calculation which is used to test the wallet constant</comment>
<comment type="line">// We get the same virtual size due to rounding(weight/4) for both use_max_sig values</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>CalculateNestedKeyhashInputSize</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>use_max_sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Generate ephemeral valid pubkey</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Generate pubkey hash</comment>
    <decl_stmt><decl><type><name>uint160</name></type> <name>key_hash</name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Create inner-script to enter into keystore. Key hash can't be 0...</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>inner_script</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>key_hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key_hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create outer P2SH script for the output</comment>
    <decl_stmt><decl><type><name>uint160</name></type> <name>script_id</name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><call><name><name>inner_script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>inner_script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script_pubkey</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>script_id</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>script_id</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add inner-script to key store and key to watchonly</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>inner_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Fill in dummy signatures for fee calculation.</comment>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>sig_data</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><ternary><condition><expr><name>use_max_sig</name></expr> ?</condition><then> <expr><name>DUMMY_MAXIMUM_SIGNATURE_CREATOR</name></expr> </then><else>: <expr><name>DUMMY_SIGNATURE_CREATOR</name></expr></else></ternary></expr></argument>, <argument><expr><name>script_pubkey</name></expr></argument>, <argument><expr><name>sig_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// We're hand-feeding it correct arguments; shouldn't happen</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CTxIn</name></type> <name>tx_in</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name>tx_in</name></expr></argument>, <argument><expr><name>sig_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>GetVirtualTransactionInputSize</name><argument_list>(<argument><expr><name>tx_in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>dummy_input_size_test</argument>, <argument>TestChain100Setup</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNestedKeyhashInputSize</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DUMMY_NESTED_P2WPKH_INPUT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNestedKeyhashInputSize</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DUMMY_NESTED_P2WPKH_INPUT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
