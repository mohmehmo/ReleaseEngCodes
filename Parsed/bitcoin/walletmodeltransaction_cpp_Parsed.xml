<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/walletmodeltransaction.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodeltransaction.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>

<constructor><name><name>WalletModelTransaction</name><operator>::</operator><name>WalletModelTransaction</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsRecipient</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>_recipients</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>recipients</name><argument_list>(<argument><expr><name>_recipients</name></expr></argument>)</argument_list></call>,
    <call><name>fee</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsRecipient</name></expr></argument>&gt;</argument_list></name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>getRecipients</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><name>recipients</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CTransactionRef</name><modifier>&amp;</modifier></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>getWtx</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>wtx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>getTransactionSize</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>wtx</name></expr> ?</condition><then> <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><name>wtx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAmount</name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>getTransactionFee</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><name>fee</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>setTransactionFee</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>newFee</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>fee</name> <operator>=</operator> <name>newFee</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>reassignAmounts</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nChangePosRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>*</modifier></type> <name>walletTransaction</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsRecipient</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>recipients</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>recipients</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SendCoinsRecipient</name><modifier>&amp;</modifier></type> <name>rcp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nChangePosRet</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>rcp</name><operator>.</operator><name>amount</name></name> <operator>=</operator> <name><name>walletTransaction</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>CAmount</name></type> <name><name>WalletModelTransaction</name><operator>::</operator><name>getTotalTransactionAmount</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>totalTransactionAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>SendCoinsRecipient</name> <modifier>&amp;</modifier></type><name>rcp</name> <range>: <expr><name>recipients</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>totalTransactionAmount</name> <operator>+=</operator> <name><name>rcp</name><operator>.</operator><name>amount</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>totalTransactionAmount</name></expr>;</return>
</block_content>}</block></function>
</unit>
