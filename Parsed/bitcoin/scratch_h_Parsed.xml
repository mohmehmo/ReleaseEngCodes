<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/scratch.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2017 Andrew Poelstra	                              *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_SECP256K1_SCRATCH_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SECP256K1_SCRATCH_</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_SCRATCH_MAX_FRAMES</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>

<comment type="block">/* The typedef is used internally; the struct name is used in the public API
 * (where it is exposed as a different typedef) */</comment>
<typedef>typedef <type><struct>struct <name>secp256k1_scratch_space_struct</name> <block>{
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>data</name><index>[<expr><name>SECP256K1_SCRATCH_MAX_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>offset</name><index>[<expr><name>SECP256K1_SCRATCH_MAX_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>frame_size</name><index>[<expr><name>SECP256K1_SCRATCH_MAX_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>frame</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>max_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>error_callback</name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_scratch</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>secp256k1_scratch</name><modifier>*</modifier></type> <name>secp256k1_scratch_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_callback</name><modifier>*</modifier></type> <name>error_callback</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scratch_destroy</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Attempts to allocate a new stack frame with `n` available bytes. Returns 1 on success, 0 on failure */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scratch_allocate_frame</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>objects</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Deallocates a stack frame */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scratch_deallocate_frame</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Returns the maximum allocation the scratch space will allow */</comment>
<function_decl><type><specifier>static</specifier> <name>size_t</name></type> <name>secp256k1_scratch_max_allocation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n_objects</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Returns a pointer into the most recently allocated frame, or NULL if there is insufficient available space */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>secp256k1_scratch_alloc</name><parameter_list>(<parameter><decl><type><name>secp256k1_scratch</name><modifier>*</modifier></type> <name>scratch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
