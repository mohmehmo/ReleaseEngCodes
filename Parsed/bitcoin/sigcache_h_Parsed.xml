<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/sigcache.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_SIGCACHE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_SIGCACHE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/interpreter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="line">// DoS prevention: limit cache size to 32MB (over 1000000 entries on 64-bit</comment>
<comment type="line">// systems). Due to how we count cache size, actual memory usage is slightly</comment>
<comment type="line">// more (~32.25 MB)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_MAX_SIG_CACHE_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// Maximum sig cache size allowed</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name>MAX_MAX_SIG_CACHE_SIZE</name> <init>= <expr><literal type="number">16384</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CPubKey</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * We're hashing a nonce into the entries themselves, so we don't need extra
 * blinding in the set hash computation.
 *
 * This may exhibit platform endian dependent behavior but because these are
 * nonced hashes (random) and this state is only ever used locally it is safe.
 * All that matters is local consistency.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SignatureCacheHasher</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>uint8_t</name> <name>hash_select</name></expr></argument>&gt;</argument_list></name>
    <name>uint32_t</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>key</name><operator>)</operator> <specifier>const</specifier>
    <block>{
        <expr><call><name>static_assert</name><argument_list>(<argument><expr><name>hash_select</name> <operator>&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"SignatureCacheHasher only has 8 hashes available."</literal></expr></argument>)</argument_list></call></expr>;
        <expr><name>uint32_t</name> <name>u</name></expr>;
        <expr><name>std</name><operator>::</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>hash_select</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name>u</name></expr>;</return>
    }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CachingTransactionSignatureChecker</name> <range>: <expr><name>public</name> <name>TransactionSignatureChecker</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>bool</name> <name>store</name></expr>;

<expr><name>public</name><operator>:</operator>
    <macro><name>CachingTransactionSignatureChecker</name><argument_list>(<argument>const CTransaction* txToIn</argument>, <argument>unsigned int nInIn</argument>, <argument>const CAmount&amp; amountIn</argument>, <argument>bool storeIn</argument>, <argument>PrecomputedTransactionData&amp; txdataIn</argument>)</argument_list></macro> <operator>:</operator> <call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><name>txToIn</name></expr></argument>, <argument><expr><name>nInIn</name></expr></argument>, <argument><expr><name>amountIn</name></expr></argument>, <argument><expr><name>txdataIn</name></expr></argument>)</argument_list></call></expr>, <macro><name>store</name><argument_list>(<argument>storeIn</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>bool</name> <macro><name>VerifySignature</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vchSig</argument>, <argument>const CPubKey&amp; vchPubKey</argument>, <argument>const uint256&amp; sighash</argument>)</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>InitSignatureCache</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_SIGCACHE_H</comment>
</unit>
