<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/netmessagemaker.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NETMESSAGEMAKER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NETMESSAGEMAKER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CNetMsgMaker</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <macro><name>CNetMsgMaker</name><argument_list>(<argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>nVersion</name><argument_list>(<argument>nVersionIn</argument>)</argument_list></macro><block>{<block_content/>}</block>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
    <name>CSerializedNetMsg</name></type> <name>Make</name><argument_list>(<argument><expr><name>int</name> <name>nFlags</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <name>sCommand</name></expr></argument>, <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <decl_stmt><decl><type><name>CSerializedNetMsg</name></type> <name>msg</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>command</name></name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>sCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>CVectorWriter</name></macro><block>{<block_content> <expr_stmt><expr><name>SER_NETWORK</name></expr><operator>,</operator> <expr><name>nFlags</name> <operator>|</operator> <name>nVersion</name></expr><operator>,</operator> <expr><name><name>msg</name><operator>.</operator><name>data</name></name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr><operator>,</operator> <expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></expr_stmt> </block_content>}</block><empty_stmt>;</empty_stmt>
        <return>return <expr><name>msg</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name>
    <name>CSerializedNetMsg</name></type> <name>Make</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>sCommand</name></expr></argument>, <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <return>return <expr><call><name>Make</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>sCommand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NETMESSAGEMAKER_H</comment>
</unit>
