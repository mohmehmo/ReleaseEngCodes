<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/rpc/misc.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpserver.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;outputtype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/check.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MALLOC_INFO</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>validateaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"validateaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturn information about the given bitcoin address.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address to validate"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"isvalid\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\n"</literal>
            <literal type="string">"  \"address\" : \"address\",        (string) The bitcoin address validated\n"</literal>
            <literal type="string">"  \"scriptPubKey\" : \"hex\",       (string) The hex-encoded scriptPubKey generated by the address\n"</literal>
            <literal type="string">"  \"isscript\" : true|false,      (boolean) If the key is a script\n"</literal>
            <literal type="string">"  \"iswitness\" : true|false,     (boolean) If the address is a witness address\n"</literal>
            <literal type="string">"  \"witness_version\" : version   (numeric, optional) The version number of the witness program\n"</literal>
            <literal type="string">"  \"witness_program\" : \"hex\"     (string, optional) The hex value of the witness program\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"validateaddress"</literal></expr></argument>, <argument><expr><literal type="string">"\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"validateaddress"</literal></argument>, <argument><literal type="string">"\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isValid</name> <init>= <expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>ret</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"isvalid"</literal></expr></argument>, <argument><expr><name>isValid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isValid</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>currentAddress</name> <init>= <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><name>currentAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scriptPubKey"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>detail</name> <init>= <expr><call><name>DescribeAddress</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>createmultisig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"createmultisig"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nCreates a multi-signature address with n signature of m keys required.\n"</literal>
                <literal type="string">"It returns a json object with the address and redeemScript.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nrequired"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The number of required signatures out of the n keys."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"keys"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of hex-encoded public keys."</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"key"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"The hex-encoded public key"</literal></expr>}</block></expr>,
                        }</block></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address_type"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"legacy"</literal></expr><operator>,</operator> <expr><literal type="string">"The address type to use. Options are \"legacy\", \"p2sh-segwit\", and \"bech32\"."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.\n"</literal>
            <literal type="string">"  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nCreate a multisig address from 2 public keys\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"createmultisig"</literal></expr></argument>, <argument><expr><literal type="string">"2 \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"createmultisig"</literal></argument>, <argument><literal type="string">"2, \"[\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\",\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\"]\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>required</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get the public keys</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>keys</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>pubkeys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IsHex</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">66</literal> <operator>||</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">130</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>HexToPubKey</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid public key: %s\n."</literal></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Get the output type</comment>
    <decl_stmt><decl><type><name>OutputType</name></type> <name>output_type</name> <init>= <expr><name><name>OutputType</name><operator>::</operator><name>LEGACY</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseOutputType</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Unknown address type '%s'"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Construct using pay-to-script-hash:</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>inner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTxDestination</name></type> <name>dest</name> <init>= <expr><call><name>AddAndGetMultisigDestination</name><argument_list>(<argument><expr><name>required</name></expr></argument>, <argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><name>output_type</name></expr></argument>, <argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"redeemScript"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>inner</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>inner</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>getdescriptorinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getdescriptorinfo"</literal></expr></argument>,
            <block>{<block_content><expr_stmt><expr><literal type="string">"\nAnalyses a descriptor.\n"</literal></expr></expr_stmt>}</block_content></block>,
            <block>{<block_content>
                <block>{<block_content><expr_stmt><expr><literal type="string">"descriptor"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The descriptor."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <expr_stmt/>}</block_content></block>,
            <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"descriptor\" : \"desc\",         (string) The descriptor in canonical form, without private keys\n"</literal>
            <literal type="string">"  \"checksum\" : \"chksum\",         (string) The checksum for the input descriptor\n"</literal>
            <literal type="string">"  \"isrange\" : true|false,        (boolean) Whether the descriptor is ranged\n"</literal>
            <literal type="string">"  \"issolvable\" : true|false,     (boolean) Whether the descriptor is solvable\n"</literal>
            <literal type="string">"  \"hasprivatekeys\" : true|false, (boolean) Whether the input descriptor contained at least one private key\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
            }</argument_list></call></expr></argument>,
            <argument><expr><macro><name>RPCExamples</name></macro><block>{
                <expr><literal type="string">"Analyse a descriptor\n"</literal> <operator>+</operator>
                <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"getdescriptorinfo"</literal></argument>, <argument><literal type="string">"\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\""</literal></argument>)</argument_list></macro></expr>
            }</block></expr></argument>}</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>

    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>desc</name> <init>= <expr><call><name>Parse</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>provider</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"descriptor"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>-&gt;</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"checksum"</literal></expr></argument>, <argument><expr><call><name>GetDescriptorChecksum</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"isrange"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"issolvable"</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>-&gt;</operator><name>IsSolvable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hasprivatekeys"</literal></expr></argument>, <argument><expr><call><name><name>provider</name><operator>.</operator><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}

UniValue <macro><name>deriveaddresses</name><argument_list>(<argument>const JSONRPCRequest&amp; request</argument>)</argument_list></macro>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"deriveaddresses"</literal></expr></argument>,
            <block>{<block_content><expr_stmt><expr><literal type="string">"\nDerives one or more addresses corresponding to an output descriptor.\n"</literal>
            <literal type="string">"Examples of output descriptors are:\n"</literal>
            <literal type="string">"    pkh(&lt;pubkey&gt;)                        P2PKH outputs for the given pubkey\n"</literal>
            <literal type="string">"    wpkh(&lt;pubkey&gt;)                       Native segwit P2PKH outputs for the given pubkey\n"</literal>
            <literal type="string">"    sh(multi(&lt;n&gt;,&lt;pubkey&gt;,&lt;pubkey&gt;,...)) P2SH-multisig outputs for the given threshold and pubkeys\n"</literal>
            <literal type="string">"    raw(&lt;hex script&gt;)                    Outputs whose scriptPubKey equals the specified hex scripts\n"</literal>
            <literal type="string">"\nIn the above, &lt;pubkey&gt; either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\n"</literal>
            <literal type="string">"or more path elements separated by \"/\", where \"h\" represents a hardened child key.\n"</literal>
            <literal type="string">"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\n"</literal></expr></expr_stmt>}</block_content></block>,
            <block>{<block_content>
                <block>{<block_content><expr_stmt><expr><literal type="string">"descriptor"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The descriptor."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <block>{<block_content><expr_stmt><expr><literal type="string">"range"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>RANGE</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <expr_stmt/>}</block_content></block>,
            <argument><expr><call><name>RPCResult</name><argument_list>{
                <argument><expr><literal type="string">"[ address ] (array) the derived addresses\n"</literal></expr></argument>
            }</argument_list></call></expr></argument>,
            <argument><expr><macro><name>RPCExamples</name></macro><block>{
                <expr><literal type="string">"First three native segwit receive addresses\n"</literal> <operator>+</operator>
                <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"deriveaddresses"</literal></argument>, <argument><literal type="string">"\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\" \"[0,2]\""</literal></argument>)</argument_list></macro></expr>
            }</block></expr></argument>}</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr><operator>,</operator> <macro><name>UniValueType</name><argument_list>()</argument_list></macro></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt> <comment type="line">// Range argument is checked later</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>desc_str</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>range_begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>range_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name>range_begin</name></expr></argument>, <argument><expr><name>range_end</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ParseDescriptorRange</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>key_provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>desc</name> <init>= <expr><call><name>Parse</name><argument_list>(<argument><expr><name>desc_str</name></expr></argument>, <argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <comment type="block">/* require_checksum = */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>desc</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Range should not be specified for an un-ranged descriptor"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>desc</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Range must be specified for a ranged descriptor"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>addresses</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>range_begin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>range_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>provider</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>scripts</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>desc</name><operator>-&gt;</operator><name>Expand</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>scripts</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot derive script without private keys"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CScript</name> <modifier>&amp;</modifier></type><name>script</name> <range>: <expr><name>scripts</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Descriptor does not have a corresponding address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">// This should not be possible, but an assert seems overkill:</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>addresses</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_MISC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unexpected empty result"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>addresses</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>verifymessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"verifymessage"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nVerify a signed message\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The bitcoin address to use for the signature."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"signature"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The signature provided by the signer in base 64 encoding (see signmessage)."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"message"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The message that was signed."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"true|false   (boolean) If the signature is verified or not.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nUnlock the wallet for 30 seconds\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"walletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"\"mypassphrase\" 30"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nCreate the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signmessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nVerify the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"verifymessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"verifymessage"</literal></argument>, <argument><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\", \"signature\", \"my message\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strAddress</name>  <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strSign</name>     <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMessage</name>  <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destination</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name>strAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>PKHash</name> <modifier>*</modifier></type><name>pkhash</name> <init>= <expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkhash</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Address does not refer to key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fInvalid</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name> <init>= <expr><call><name>DecodeBase64</name><argument_list>(<argument><expr><call><name><name>strSign</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fInvalid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fInvalid</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Malformed base64 encoding"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CHashWriter</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessageMagic</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessage</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubkey</name><operator>.</operator><name>RecoverCompact</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><operator>(</operator><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>*</operator><name>pkhash</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>signmessagewithprivkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"signmessagewithprivkey"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSign a message with the private key of an address\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"privkey"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The private key to sign the message with."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"message"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The message to create a signature of."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"\"signature\"          (string) The signature of the message encoded in base 64\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nCreate the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"signmessagewithprivkey"</literal></expr></argument>, <argument><expr><literal type="string">"\"privkey\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nVerify the signature\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"verifymessage"</literal></expr></argument>, <argument><expr><literal type="string">"\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\" \"signature\" \"my message\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <literal type="string">"\nAs a JSON-RPC call\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"signmessagewithprivkey"</literal></argument>, <argument><literal type="string">"\"privkey\", \"my message\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strPrivkey</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMessage</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><name>strPrivkey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Invalid private key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CHashWriter</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessageMagic</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>strMessage</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>SignCompact</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Sign failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <return>return <expr><call><name>EncodeBase64</name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>setmocktime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"setmocktime"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSet the local time to given timestamp (-regtest only)\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"timestamp"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Unix seconds-since-epoch timestamp\n"</literal>
            <literal type="string">"   Pass 0 to go back to using the system time."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{<argument><expr><literal type="string">""</literal></expr></argument>}</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>MineBlocksOnDemand</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"setmocktime for regression testing (-regtest mode) only"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <comment type="line">// For now, don't change mocktime if we're in the middle of validation, as</comment>
    <comment type="line">// this could have an effect on mempool time-based eviction, as well as</comment>
    <comment type="line">// IsCurrentForFeeEstimation() and IsInitialBlockDownload().</comment>
    <comment type="line">// TODO: figure out the right way to synchronize around mocktime, and</comment>
    <comment type="line">// ensure all call sites of GetTime() are accessing this safely.</comment>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NullUniValue</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>RPCLockedMemoryInfo</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>LockedPool</name><operator>::</operator><name>Stats</name></name></type> <name>stats</name> <init>= <expr><call><name><name>LockedPoolManager</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stats</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"used"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"free"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>free</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"total"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"locked"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>locked</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chunks_used"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>chunks_used</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chunks_free"</literal></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>chunks_free</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MALLOC_INFO</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>RPCMallocInfo</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>open_memstream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>malloc_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rv</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmemoryinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Please, avoid using the word "pool" here in the RPC interface or help,
     * as users will undoubtedly confuse it with the other "memory pool"
     */</comment>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmemoryinfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"Returns an object containing information about memory usage.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"mode"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"\"stats\""</literal></expr><operator>,</operator> <expr><literal type="string">"determines what kind of information is returned.\n"</literal>
            <literal type="string">"  - \"stats\" returns general statistics about memory usage in the daemon.\n"</literal>
            <literal type="string">"  - \"mallocinfo\" returns an XML string describing low-level heap state (only available if compiled with glibc 2.10+)."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <block>{<block_content>
                    <expr_stmt><expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"mode \"stats\""</literal></expr></argument>,
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"locked\": {               (json object) Information about locked memory manager\n"</literal>
            <literal type="string">"    \"used\": xxxxx,          (numeric) Number of bytes used\n"</literal>
            <literal type="string">"    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas\n"</literal>
            <literal type="string">"    \"total\": xxxxxxx,       (numeric) Total number of bytes managed\n"</literal>
            <literal type="string">"    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n"</literal>
            <literal type="string">"    \"chunks_used\": xxxxx,   (numeric) Number allocated chunks\n"</literal>
            <literal type="string">"    \"chunks_free\": xxxxx,   (numeric) Number unused chunks\n"</literal>
            <literal type="string">"  }\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator>
                    <expr><call><name>RPCResult</name><argument_list>{<argument><expr><literal type="string">"mode \"mallocinfo\""</literal></expr></argument>,
            <argument><expr><literal type="string">"\"&lt;malloc version=\"1\"&gt;...\"\n"</literal></expr></argument>
                    }</argument_list></call></expr><operator>,</operator></expr_stmt>
                }</block_content></block>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmemoryinfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmemoryinfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"stats"</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="string">"stats"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"locked"</literal></expr></argument>, <argument><expr><call><name>RPCLockedMemoryInfo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>obj</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="string">"mallocinfo"</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MALLOC_INFO</name></cpp:ifdef>
        <return>return <expr><call><name>RPCMallocInfo</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"mallocinfo is only available when compiled with glibc 2.10+"</literal></expr></argument>)</argument_list></call></expr>;</throw>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"unknown mode "</literal> <operator>+</operator> <name>mode</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EnableOrDisableLogCategories</name><parameter_list>(<parameter><decl><type><name>UniValue</name></type> <name>cats</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>cats</name> <operator>=</operator> <call><name><name>cats</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>cats</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>cat</name> <init>= <expr><name><name>cats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>success</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>EnableCategory</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisableCategory</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"unknown logging category "</literal> <operator>+</operator> <name>cat</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>UniValue</name></type> <name>logging</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"logging"</literal></expr></argument>,
            <argument><expr><literal type="string">"Gets and sets the logging configuration.\n"</literal>
            <literal type="string">"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\n"</literal>
            <literal type="string">"When called with arguments, adds or removes categories from debug logging and return the lists above.\n"</literal>
            <literal type="string">"The arguments are evaluated in order \"include\", \"exclude\".\n"</literal>
            <literal type="string">"If an item is both included and excluded, it will thus end up being excluded.\n"</literal>
            <literal type="string">"The valid logging categories are: "</literal> <operator>+</operator> <call><name>ListLogCategories</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal>
            <literal type="string">"In addition, the following are available as category names with special meanings:\n"</literal>
            <literal type="string">"  - \"all\",  \"1\" : represent all logging categories.\n"</literal>
            <literal type="string">"  - \"none\", \"0\" : even if other logging categories are specified, ignore all of them.\n"</literal></expr></argument>
            ,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"include"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of categories to add debug logging"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"include_category"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"the valid logging category"</literal></expr>}</block></expr>,
                        }</block></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"exclude"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"A json array of categories to remove debug logging"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"exclude_category"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"the valid logging category"</literal></expr>}</block></expr>,
                        }</block></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{                   (json object where keys are the logging categories, and values indicates its status\n"</literal>
            <literal type="string">"  \"category\": true|false,  (bool) if being debug logged or not. false:inactive, true:active\n"</literal>
            <literal type="string">"  ...\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"logging"</literal></expr></argument>, <argument><expr><literal type="string">"\"[\\\"all\\\"]\" \"[\\\"http\\\"]\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"logging"</literal></argument>, <argument><literal type="string">"[\"all\"], [\"libevent\"]"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>original_log_categories</name> <init>= <expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCategoryMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EnableOrDisableLogCategories</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EnableOrDisableLogCategories</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>updated_log_categories</name> <init>= <expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetCategoryMask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>changed_log_categories</name> <init>= <expr><name>original_log_categories</name> <operator>^</operator> <name>updated_log_categories</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Update libevent logging if BCLog::LIBEVENT has changed.</comment>
    <comment type="line">// If the library version doesn't allow it, UpdateHTTPServerLogging() returns false,</comment>
    <comment type="line">// in which case we should clear the BCLog::LIBEVENT flag.</comment>
    <comment type="line">// Throw an error if the user has explicitly asked to change only the libevent</comment>
    <comment type="line">// flag and it failed.</comment>
    <if_stmt><if>if <condition>(<expr><name>changed_log_categories</name> <operator>&amp;</operator> <name><name>BCLog</name><operator>::</operator><name>LIBEVENT</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UpdateHTTPServerLogging</name><argument_list>(<argument><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>WillLogCategory</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>LIBEVENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisableCategory</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>LIBEVENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>changed_log_categories</name> <operator>==</operator> <name><name>BCLog</name><operator>::</operator><name>LIBEVENT</name></name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"libevent logging cannot be updated when using libevent before v2.1.1."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CLogCategoryActive</name></expr></argument>&gt;</argument_list></name></type> <name>vLogCatActive</name> <init>= <expr><call><name>ListActiveLogCategories</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>logCatActive</name> <range>: <expr><name>vLogCatActive</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name><name>logCatActive</name><operator>.</operator><name>category</name></name></expr></argument>, <argument><expr><name><name>logCatActive</name><operator>.</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>echo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(
            <argument><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"echo|echojson ..."</literal></expr></argument>,
                <argument><expr><literal type="string">"\nSimply echo back the input arguments. This command is for testing.\n"</literal>
                <literal type="string">"\nIt will return an internal bug report when exactly 100 arguments are passed.\n"</literal>
                <literal type="string">"\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in "</literal>
                <literal type="string">"bitcoin-cli and the GUI. There is no server-side difference."</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{<argument><expr><literal type="string">""</literal></expr></argument>}</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>request</name><operator>.</operator><name>params</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// clang-format off</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>commands</name><index>[]</index></name> <init>=
<expr><block>{ <comment type="line">//  category              name                      actor (function)         argNames</comment>
  <comment type="line">//  --------------------- ------------------------  -----------------------  ----------</comment>
    <expr><block>{ <expr><literal type="string">"control"</literal></expr>,            <expr><literal type="string">"getmemoryinfo"</literal></expr>,          <expr><operator>&amp;</operator><name>getmemoryinfo</name></expr>,          <expr><block>{<expr><literal type="string">"mode"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"control"</literal></expr>,            <expr><literal type="string">"logging"</literal></expr>,                <expr><operator>&amp;</operator><name>logging</name></expr>,                <expr><block>{<expr><literal type="string">"include"</literal></expr>, <expr><literal type="string">"exclude"</literal></expr>}</block></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"validateaddress"</literal></expr>,        <expr><operator>&amp;</operator><name>validateaddress</name></expr>,        <expr><block>{<expr><literal type="string">"address"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"createmultisig"</literal></expr>,         <expr><operator>&amp;</operator><name>createmultisig</name></expr>,         <expr><block>{<expr><literal type="string">"nrequired"</literal></expr>,<expr><literal type="string">"keys"</literal></expr>,<expr><literal type="string">"address_type"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"deriveaddresses"</literal></expr>,        <expr><operator>&amp;</operator><name>deriveaddresses</name></expr>,        <expr><block>{<expr><literal type="string">"descriptor"</literal></expr>, <expr><literal type="string">"range"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"getdescriptorinfo"</literal></expr>,      <expr><operator>&amp;</operator><name>getdescriptorinfo</name></expr>,      <expr><block>{<expr><literal type="string">"descriptor"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"verifymessage"</literal></expr>,          <expr><operator>&amp;</operator><name>verifymessage</name></expr>,          <expr><block>{<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"signature"</literal></expr>,<expr><literal type="string">"message"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"signmessagewithprivkey"</literal></expr>, <expr><operator>&amp;</operator><name>signmessagewithprivkey</name></expr>, <expr><block>{<expr><literal type="string">"privkey"</literal></expr>,<expr><literal type="string">"message"</literal></expr>}</block></expr> }</block></expr>,

    <comment type="block">/* Not shown in help */</comment>
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"setmocktime"</literal></expr>,            <expr><operator>&amp;</operator><name>setmocktime</name></expr>,            <expr><block>{<expr><literal type="string">"timestamp"</literal></expr>}</block></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"echo"</literal></expr>,                   <expr><operator>&amp;</operator><name>echo</name></expr>,                   <expr><block>{<expr><literal type="string">"arg0"</literal></expr>,<expr><literal type="string">"arg1"</literal></expr>,<expr><literal type="string">"arg2"</literal></expr>,<expr><literal type="string">"arg3"</literal></expr>,<expr><literal type="string">"arg4"</literal></expr>,<expr><literal type="string">"arg5"</literal></expr>,<expr><literal type="string">"arg6"</literal></expr>,<expr><literal type="string">"arg7"</literal></expr>,<expr><literal type="string">"arg8"</literal></expr>,<expr><literal type="string">"arg9"</literal></expr>}</block></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"echojson"</literal></expr>,               <expr><operator>&amp;</operator><name>echo</name></expr>,                   <expr><block>{<expr><literal type="string">"arg0"</literal></expr>,<expr><literal type="string">"arg1"</literal></expr>,<expr><literal type="string">"arg2"</literal></expr>,<expr><literal type="string">"arg3"</literal></expr>,<expr><literal type="string">"arg4"</literal></expr>,<expr><literal type="string">"arg5"</literal></expr>,<expr><literal type="string">"arg6"</literal></expr>,<expr><literal type="string">"arg7"</literal></expr>,<expr><literal type="string">"arg8"</literal></expr>,<expr><literal type="string">"arg9"</literal></expr>}</block></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<function><type><name>void</name></type> <name>RegisterMiscRPCCommands</name><parameter_list>(<parameter><decl><type><name>CRPCTable</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>vcidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vcidx</name> <operator>&lt;</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>vcidx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>appendCommand</name></name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
