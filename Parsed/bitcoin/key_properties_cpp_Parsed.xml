<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/key_properties.cpp"><comment type="line">// Copyright (c) 2018-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/boost_test.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/gen/Arbitrary.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rapidcheck/Gen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/gen/crypto_gen.h&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>key_properties</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="block" format="doxygen">/** Check CKey uniqueness */</comment>
<macro><name>RC_BOOST_PROP</name><argument_list>(<argument>key_uniqueness</argument>, <argument>(const CKey&amp; key1, const CKey&amp; key2)</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>RC_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>key1</name> <operator>==</operator> <name>key2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block" format="doxygen">/** Verify that a private key generates the correct public key */</comment>
<macro><name>RC_BOOST_PROP</name><argument_list>(<argument>key_generates_correct_pubkey</argument>, <argument>(const CKey&amp; key)</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubKey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RC_ASSERT</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>VerifyPubKey</name></name><argument_list>(<argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block" format="doxygen">/** Create a CKey using the 'Set' function must give us the same key */</comment>
<macro><name>RC_BOOST_PROP</name><argument_list>(<argument>key_set_symmetry</argument>, <argument>(const CKey&amp; key)</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key1</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RC_ASSERT</name><argument_list>(<argument><expr><name>key1</name> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block" format="doxygen">/** Create a CKey, sign a piece of data, then verify it with the public key */</comment>
<macro><name>RC_BOOST_PROP</name><argument_list>(<argument>key_sign_symmetry</argument>, <argument>(const CKey&amp; key, const uint256&amp; hash)</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubKey</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RC_ASSERT</name><argument_list>(<argument><expr><call><name><name>pubKey</name><operator>.</operator><name>Verify</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
