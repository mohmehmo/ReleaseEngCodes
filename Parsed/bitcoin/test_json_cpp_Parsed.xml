<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/test/test_json.cpp"><comment type="line">// Test program that can be called by the JSON test suite at</comment>
<comment type="line">// https://github.com/nst/JSONTestSuite.</comment>
<comment type="line">//</comment>
<comment type="line">// It reads JSON input from stdin and exits with code 0 if it can be parsed</comment>
<comment type="line">// successfully. It also pretty prints the parsed JSON value to stdout.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>val</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>val</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><call><name>string</name><argument_list>(<argument><expr><call><name><name>istreambuf_iterator</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>cin</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>istreambuf_iterator</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>val</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* prettyIndent */</comment>, <argument><expr><literal type="number">4</literal></expr></argument> <comment type="block">/* indentLevel */</comment>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"JSON Parse Error."</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
