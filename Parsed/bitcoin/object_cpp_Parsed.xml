<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/test/object.cpp"><comment type="line">// Copyright (c) 2014 BitPay Inc.</comment>
<comment type="line">// Copyright (c) 2014-2016 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_FIXTURE_TEST_SUITE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_AUTO_TEST_CASE</name><parameter_list>(<parameter><type><name>funcName</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void funcName()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_AUTO_TEST_SUITE_END</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_CHECK</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(expr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_CHECK_EQUAL</name><parameter_list>(<parameter><type><name>v1</name></type></parameter>, <parameter><type><name>v2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert((v1) == (v2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_CHECK_THROW</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>, <parameter><type><name>excMatch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
        try { \
            (stmt); \
            assert(0 &amp;&amp; "No exception caught"); \
        } catch (excMatch &amp; e) { \
	} catch (...) { \
	    assert(0 &amp;&amp; "Wrong exception caught"); \
	} \
    }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOST_CHECK_NO_THROW</name><parameter_list>(<parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
        try { \
            (stmt); \
	} catch (...) { \
	    assert(0); \
	} \
    }</cpp:value></cpp:define>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>univalue_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_constructor</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>UniValue</name></type> <name>v2</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v3</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>numTest</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>numTest</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"82"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>numTest</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>numTest</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"82"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>vu64</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v4</name><parameter_list>(<parameter><decl><type><name>vu64</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"82"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vi64</name> <init>= <expr><operator>-</operator><literal type="number">82</literal></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v5</name><parameter_list>(<parameter><decl><type><name>vi64</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v5</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v5</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-82"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>vi</name> <init>= <expr><operator>-</operator><literal type="number">688</literal></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v6</name><parameter_list>(<parameter><decl><type><name>vi</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v6</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v6</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-688"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>vd</name> <init>= <expr><operator>-</operator><literal type="number">7.21</literal></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v7</name><parameter_list>(<parameter><decl><type><name>vd</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v7</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v7</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-7.21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>vs</name><argument_list>(<argument><expr><literal type="string">"yawn"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v8</name><parameter_list>(<parameter><decl><type><name>vs</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v8</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v8</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yawn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vcs</name> <init>= <expr><literal type="string">"zappa"</literal></expr></init></decl>;</decl_stmt>
    <function_decl><type><name>UniValue</name></type> <name>v9</name><parameter_list>(<parameter><decl><type><name>vcs</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v9</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v9</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zappa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_typecheck</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>get_bool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>setBool</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>get_bool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>get_int</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v3</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"32482348723847471234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"1000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v3</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v4</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"2147483648"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2147483648</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_int</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"1000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_int</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_real</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>getKeys</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name><name>v4</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v5</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v5</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[true, 10]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name><name>v5</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>vals</name> <init>= <expr><call><name><name>v5</name><operator>.</operator><name>getValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name><name>vals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_set</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setObject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setStr</name></name><argument_list>(<argument><expr><literal type="string">"zum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setFloat</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1.01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1023"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>-</operator><literal type="number">1023LL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1023"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1023ULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1023"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"-688"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-688"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setBool</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isBool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isFalse</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getBool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setBool</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isBool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isTrue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isFalse</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>getBool</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><literal type="string">"zombocom"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>setNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_array</argument>)</argument_list></macro>
<block>{<block_content>
    <function_decl><type><name>UniValue</name></type> <name>arr</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>v</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1023LL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>vStr</name><argument_list>(<argument><expr><literal type="string">"zippy"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>vStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><literal type="string">"pippy"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setStr</name></name><argument_list>(<argument><expr><literal type="string">"boing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setStr</name></name><argument_list>(<argument><expr><literal type="string">"going"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_backV</name></name><argument_list>(<argument><expr><name>vec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">400ULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>-</operator><literal type="number">400LL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>-</operator><literal type="number">401</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">40.1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1023"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zippy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pippy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"boing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"going"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"400"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-400"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-401"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-40.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">999</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_object</argument>)</argument_list></macro>
<block>{<block_content>
    <function_decl><type><name>UniValue</name></type> <name>obj</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strKey</name></decl>, <decl><type ref="prev"/><name>strVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"age"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"first"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>strVal</name> <operator>=</operator> <literal type="string">"John"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><name>strVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"last"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cVal</name> <init>= <expr><literal type="string">"Smith"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><name>cVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"distance"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"time"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"calories"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"temperature"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">90.012</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"moon"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strKey</name> <operator>=</operator> <literal type="string">"spoon"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>UniValue</name></type> <name>obj2</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj2</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"cat1"</literal></expr></argument>, <argument><expr><literal type="number">9000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj2</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"cat2"</literal></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>pushKVs</name></name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"age"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"first"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"John"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"last"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Smith"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"distance"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"25"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"time"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"3600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"calories"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"temperature"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"90.012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"moon"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"spoon"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"cat1"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"9000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"cat2"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12345"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"nyuknyuknyuk"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"age"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"last"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"distance"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"calories"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"temperature"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"moon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"spoon"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"cat1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"cat2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>obj</name><operator>.</operator><name>exists</name></name><argument_list>(<argument><expr><literal type="string">"nyuknyuknyuk"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VType</name></name></expr></argument>&gt;</argument_list></name></type> <name>objTypes</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"age"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"first"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"last"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"distance"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"time"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"calories"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"temperature"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"moon"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"spoon"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VBOOL</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"cat1"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"cat2"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>checkObject</name></name><argument_list>(<argument><expr><name>objTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>objTypes</name><index>[<expr><literal type="string">"cat2"</literal></expr>]</index></name> <operator>=</operator> <name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>obj</name><operator>.</operator><name>checkObject</name></name><argument_list>(<argument><expr><name>objTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VNULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>setObject</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>uv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>uv</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>__pushKV</name></name><argument_list>(<argument><expr><literal type="string">"age"</literal></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"age"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"42"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>uv</name><operator>.</operator><name>setInt</name></name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"age"</literal></expr></argument>, <argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"age"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"43"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="string">"foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>,<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>kv</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>getObjMap</name></name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><literal type="string">"age"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"43"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>kv</name><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"foo bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>json1</name> <init>=
<expr><literal type="string">"[1.10000000,{\"key1\":\"str\\u0000\",\"key2\":800,\"key3\":{\"name\":\"martian http://test.com\"}}]"</literal></expr></init></decl>;</decl_stmt>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>univalue_readwrite</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>json1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strJson1</name><parameter_list>(<parameter><decl><type><name>json1</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>strJson1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.10000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name> <init>= <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>obj</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"key1"</literal></expr>]</index></name><operator>.</operator><call><name>isStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>correctValue</name><argument_list>(<argument><expr><literal type="string">"str"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>correctValue</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"key1"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>correctValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"key2"</literal></expr>]</index></name><operator>.</operator><call><name>isNum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"key2"</literal></expr>]</index></name><operator>.</operator><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"800"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>obj</name><index>[<expr><literal type="string">"key3"</literal></expr>]</index></name><operator>.</operator><call><name>isObject</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>strJson1</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check for (correctly reporting) a parsing error if the initial
       JSON construct is followed by more stuff.  Note that whitespace
       is, of course, exempt.  */</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"  {}\n  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"  []\n  "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"@{}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"{} garbage"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"[]{}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"{}[]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><literal type="string">"{} 42"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>univalue_constructor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>univalue_typecheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>univalue_set</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>univalue_array</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>univalue_object</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>univalue_readwrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
