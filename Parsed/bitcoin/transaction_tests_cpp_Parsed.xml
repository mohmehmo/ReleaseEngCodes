<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/transaction_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/tx_invalid.json.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/tx_valid.json.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;checkqueue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/tx_check.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/settings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/classification.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/split.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>valtype</name>;</typedef>

<comment type="line">// In script_tests.cpp</comment>
<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>read_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>jsondata</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mapFlagNames</name> <init>= <expr><block>{
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_NONE</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"P2SH"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_P2SH</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"STRICTENC"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_STRICTENC</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"DERSIG"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_DERSIG</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"LOW_S"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_LOW_S</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"SIGPUSHONLY"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_SIGPUSHONLY</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"MINIMALDATA"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_MINIMALDATA</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"NULLDUMMY"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_NULLDUMMY</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"DISCOURAGE_UPGRADABLE_NOPS"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"CLEANSTACK"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_CLEANSTACK</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"MINIMALIF"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_MINIMALIF</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"NULLFAIL"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_NULLFAIL</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"CHECKLOCKTIMEVERIFY"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"CHECKSEQUENCEVERIFY"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_CHECKSEQUENCEVERIFY</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"WITNESS"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_WITNESS</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"WITNESS_PUBKEYTYPE"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr>}</block></expr>,
    <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"CONST_SCRIPTCODE"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>SCRIPT_VERIFY_CONST_SCRIPTCODE</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>unsigned</name> <name>int</name></type> <name>ParseScriptFlags</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strFlags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>strFlags</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>words</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>split</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><name>strFlags</name></expr></argument>, <argument><expr><call><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>is_any_of</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>word</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mapFlagNames</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: unknown verification flag '"</literal> <operator>&lt;&lt;</operator> <name>word</name> <operator>&lt;&lt;</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name><name>mapFlagNames</name><index>[<expr><name>word</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>flags</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatScriptFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mapFlagNames</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>mapFlagNames</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>+</operator> <literal type="string">","</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><call><name><name>ret</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ret</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>transaction_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>tx_valid</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Read tests from test/data/tx_valid.json</comment>
    <comment type="line">// Format is an array of arrays</comment>
    <comment type="line">// Inner arrays are either [ "comment" ]</comment>
    <comment type="line">// or [[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],"], serializedTransaction, verifyFlags</comment>
    <comment type="line">// ... where all scripts are stringified scripts.</comment>
    <comment type="line">//</comment>
    <comment type="line">// verifyFlags is a comma separated list of script verification flags to apply, or "NONE"</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_valid</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_valid</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_valid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isStr</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isStr</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>mapprevOutScriptPubKeys</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>mapprevOutValues</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>inputs</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>fValid</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>inpIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>inpIdx</name> <operator>&lt;</operator> <call><name><name>inputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>inpIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>input</name> <init>= <expr><name><name>inputs</name><index>[<expr><name>inpIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>input</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>UniValue</name></type> <name>vinput</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><name><name>vinput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vinput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>mapprevOutScriptPubKeys</name><index>[<expr><name>outpoint</name></expr>]</index></name> <operator>=</operator> <call><name>ParseScript</name><argument_list>(<argument><expr><name><name>vinput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mapprevOutValues</name><index>[<expr><name>outpoint</name></expr>]</index></name> <operator>=</operator> <name><name>vinput</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fValid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>transaction</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <function_decl><type><name>CTransaction</name></type> <name>tx</name><parameter_list>(<parameter><decl><type><name>deserialize</name></type></decl></parameter>, <parameter><decl><type><name>stream</name></type></decl></parameter>)</parameter_list>;</function_decl>

            <decl_stmt><decl><type><name>TxValidationState</name></type> <name>state</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>CheckTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <function_decl><type><name>PrecomputedTransactionData</name></type> <name>txdata</name><parameter_list>(<parameter><decl><type><name>tx</name></type></decl></parameter>)</parameter_list>;</function_decl>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mapprevOutScriptPubKeys</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>CAmount</name></type> <name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>mapprevOutValues</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>mapprevOutValues</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>verify_flags</name> <init>= <expr><call><name>ParseScriptFlags</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptWitness</name> <modifier>*</modifier></type><name>witness</name> <init>= <expr><operator>&amp;</operator><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name><name>mapprevOutScriptPubKeys</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr>]</index></name></expr></argument>,
                                                 <argument><expr><name>witness</name></expr></argument>, <argument><expr><name>verify_flags</name></expr></argument>, <argument><expr><call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>tx_invalid</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Read tests from test/data/tx_invalid.json</comment>
    <comment type="line">// Format is an array of arrays</comment>
    <comment type="line">// Inner arrays are either [ "comment" ]</comment>
    <comment type="line">// or [[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],"], serializedTransaction, verifyFlags</comment>
    <comment type="line">// ... where all scripts are stringified scripts.</comment>
    <comment type="line">//</comment>
    <comment type="line">// verifyFlags is a comma separated list of script verification flags to apply, or "NONE"</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_invalid</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_invalid</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>tx_invalid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Initialize to SCRIPT_ERR_OK. The tests expect err to be changed to a</comment>
    <comment type="line">// value other than SCRIPT_ERR_OK.</comment>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name> <init>= <expr><name>SCRIPT_ERR_OK</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isStr</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isStr</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>mapprevOutScriptPubKeys</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>COutPoint</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>mapprevOutValues</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>inputs</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>fValid</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>inpIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>inpIdx</name> <operator>&lt;</operator> <call><name><name>inputs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>inpIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>input</name> <init>= <expr><name><name>inputs</name><index>[<expr><name>inpIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>input</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>UniValue</name></type> <name>vinput</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>fValid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>COutPoint</name></type> <name>outpoint</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><name><name>vinput</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>vinput</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>mapprevOutScriptPubKeys</name><index>[<expr><name>outpoint</name></expr>]</index></name> <operator>=</operator> <call><name>ParseScript</name><argument_list>(<argument><expr><name><name>vinput</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>vinput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>mapprevOutValues</name><index>[<expr><name>outpoint</name></expr>]</index></name> <operator>=</operator> <name><name>vinput</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fValid</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>transaction</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument> )</argument_list></decl>;</decl_stmt>
            <function_decl><type><name>CTransaction</name></type> <name>tx</name><parameter_list>(<parameter><decl><type><name>deserialize</name></type></decl></parameter>, <parameter><decl><type><name>stream</name></type></decl></parameter>)</parameter_list>;</function_decl>

            <decl_stmt><decl><type><name>TxValidationState</name></type> <name>state</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>fValid</name> <operator>=</operator> <call><name>CheckTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <function_decl><type><name>PrecomputedTransactionData</name></type> <name>txdata</name><parameter_list>(<parameter><decl><type><name>tx</name></type></decl></parameter>)</parameter_list>;</function_decl>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>fValid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mapprevOutScriptPubKeys</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>verify_flags</name> <init>= <expr><call><name>ParseScriptFlags</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CAmount</name></type> <name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>mapprevOutValues</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>amount</name> <operator>=</operator> <name><name>mapprevOutValues</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>CScriptWitness</name> <modifier>*</modifier></type><name>witness</name> <init>= <expr><operator>&amp;</operator><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>fValid</name> <operator>=</operator> <call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name><name>mapprevOutScriptPubKeys</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name></expr>]</index></name></expr></argument>,
                                      <argument><expr><name>witness</name></expr></argument>, <argument><expr><name>verify_flags</name></expr></argument>, <argument><expr><call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>txdata</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><name>fValid</name></expr></argument>, <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>basic_transaction_tests</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Random real transaction (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ch</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ch</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>vch</name></type></decl></parameter>, <parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>tx</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TxValidationState</name></type> <name>state</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>CheckTransaction</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Simple deserialized transaction should be valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that duplicate txins fail</comment>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckTransaction</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Transaction with duplicate txins should be invalid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">//</comment>
<comment type="line">// Helper: create two dummy transactions, each with</comment>
<comment type="line">// two outputs.  The first has 11 and 50 CENT outputs</comment>
<comment type="line">// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs</comment>
<comment type="line">// paid to a TX_PUBKEYHASH.</comment>
<comment type="line">//</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type>
<name>SetupDummyInputs</name><parameter_list>(<parameter><decl><type><name>FillableSigningProvider</name><modifier>&amp;</modifier></type> <name>keystoreRet</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>coinsRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>dummyTransactions</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dummyTransactions</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add some keys to the keystore:</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keystoreRet</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Create some dummy input transactions</comment>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">50</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coinsRet</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">21</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">22</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coinsRet</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>dummyTransactions</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>test_Get</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>coinsDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name></type> <name>coins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coinsDummy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>dummyTransactions</name> <init>= <expr><call><name>SetupDummyInputs</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>t1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">90</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>AreInputsStandard</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>coins</name><operator>.</operator><name>GetValueIn</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><literal type="number">50</literal><operator>+</operator><literal type="number">21</literal><operator>+</operator><literal type="number">22</literal><operator>)</operator><operator>*</operator><name>CENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CreateCreditAndSpend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FillableSigningProvider</name><modifier>&amp;</modifier></type> <name>keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>outscript</name></decl></parameter>, <parameter><decl><type><name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>outputm</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>outputm</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputm</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputm</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>outputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>outscript</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssout</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ssout</name> <operator>&lt;&lt;</operator> <name>outputm</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssout</name> <operator>&gt;&gt;</operator> <name>output</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>output</name><operator>-&gt;</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>outputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>output</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>outputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>inputm</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>inputm</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inputm</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <call><name><name>output</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inputm</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><name>inputm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssin</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ssin</name> <operator>&lt;&lt;</operator> <name>inputm</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ssin</name> <operator>&gt;&gt;</operator> <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>inputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>inputm</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scriptWitness</name><operator>.</operator><name>stack</name></name> <operator>==</operator> <name><name>inputm</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>scriptWitness</name><operator>.</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckWithFlag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>success</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>inputi</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name><name>inputi</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>inputi</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptWitness</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>TransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inputi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CScript</name></type> <name>PushAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>valtype</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <call><name><name>CScript</name><operator>::</operator><name>EncodeOP_N</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>v</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReplaceRedeemScript</name><parameter_list>(<parameter><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemScript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>PushAll</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>test_big_witness_transaction</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>mtx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Need to use compressed keys in segwit or the signing will fail</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKeyID</name></type> <name>hash</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sigHashes</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_NONE</name> <operator>|</operator> <name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_SINGLE</name> <operator>|</operator> <name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_ALL</name> <operator>|</operator> <name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// create a big transaction of 4500 inputs signed by the same key</comment>
    <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>ij</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ij</name> <operator>&lt;</operator> <literal type="number">4500</literal></expr>;</condition> <incr><expr><name>ij</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>prevId</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>prevId</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>COutPoint</name></type> <name>outpoint</name><parameter_list>(<parameter><decl><type><name>prevId</name></type></decl></parameter>, <parameter><decl><type><name>i</name></type></decl></parameter>)</parameter_list>;</function_decl>

        <expr_stmt><expr><call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prevout</name> <operator>=</operator> <name>outpoint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mtx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>mtx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mtx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// sign all inputs</comment>
    <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>hashSigned</name> <init>= <expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>mtx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><call><name><name>sigHashes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name> <operator>%</operator> <call><name><name>sigHashes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hashSigned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <function_decl><type><name>CDataStream</name></type> <name>ssout</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>ssout</name> <operator>&lt;&lt;</operator> <name>mtx</name></expr>;</expr_stmt>
    <function_decl><type><name>CTransaction</name></type> <name>tx</name><parameter_list>(<parameter><decl><type><name>deserialize</name></type></decl></parameter>, <parameter><decl><type><name>ssout</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// check all inputs concurrently, with the cache</comment>
    <function_decl><type><name>PrecomputedTransactionData</name></type> <name>txdata</name><parameter_list>(<parameter><decl><type><name>tx</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>thread_group</name></name></type> <name>threadGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CCheckQueue</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name></type> <name>scriptcheckqueue</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CCheckQueueControl</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name></type> <name>control</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scriptcheckqueue</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name><name>CCheckQueue</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Thread</name></name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ref</name></name><argument_list>(<argument><expr><name>scriptcheckqueue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>coins</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>fCoinBase</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>coin</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>coins</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mtx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScriptCheck</name></expr></argument>&gt;</argument_list></name></type> <name>vChecks</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptCheck</name></type> <name>check</name><argument_list>(<argument><expr><name><name>coins</name><index>[<expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name></expr>]</index></name><operator>.</operator><name>out</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>txdata</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vChecks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CScriptCheck</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><call><name><name>vChecks</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>control</name><operator>.</operator><name>Add</name></name><argument_list>(<argument><expr><name>vChecks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>bool</name></type> <name>controlCheck</name> <init>= <expr><call><name><name>control</name><operator>.</operator><name>Wait</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>controlCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>interrupt_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>join_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>SignatureData</name></type> <name>CombineSignatures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>input1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>input2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name></type> <name>tx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>sigdata</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>sigdata</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sigdata</name><operator>.</operator><name>MergeSignatureData</name></name><argument_list>(<argument><expr><call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>DUMMY_SIGNING_PROVIDER</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureCreator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name>sigdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>sigdata</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>test_witness</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>, <decl><type ref="prev"/><name>keystore2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>, <decl><type ref="prev"/><name>key3</name></decl>, <decl><type ref="prev"/><name>key1L</name></decl>, <decl><type ref="prev"/><name>key2L</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey1</name></decl>, <decl><type ref="prev"/><name>pubkey2</name></decl>, <decl><type ref="prev"/><name>pubkey3</name></decl>, <decl><type ref="prev"/><name>pubkey1L</name></decl>, <decl><type ref="prev"/><name>pubkey2L</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key1</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key2</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key3</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key1L</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key2L</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey1</name> <operator>=</operator> <call><name><name>key1</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey2</name> <operator>=</operator> <call><name><name>key2</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey3</name> <operator>=</operator> <call><name><name>key3</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey1L</name> <operator>=</operator> <call><name><name>key1L</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey2L</name> <operator>=</operator> <call><name><name>key2L</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>, <argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key1L</name></expr></argument>, <argument><expr><name>pubkey1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key2L</name></expr></argument>, <argument><expr><name>pubkey2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubkey1</name></decl>, <decl><type ref="prev"/><name>scriptPubkey2</name></decl>, <decl><type ref="prev"/><name>scriptPubkey1L</name></decl>, <decl><type ref="prev"/><name>scriptPubkey2L</name></decl>, <decl><type ref="prev"/><name>scriptMulti</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptPubkey1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptPubkey2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey2</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptPubkey1L</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey1L</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptPubkey2L</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey2L</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>oneandthree</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>oneandthree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pubkey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>oneandthree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pubkey3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptMulti</name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>oneandthree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptPubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptPubkey2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore2</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore2</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore2</name><operator>.</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name>key3</name></expr></argument>, <argument><expr><name>pubkey3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>output1</name></decl>, <decl><type ref="prev"/><name>output2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>input1</name></decl>, <decl><type ref="prev"/><name>input2</name></decl>;</decl_stmt>

    <comment type="line">// Normal pay-to-compressed-pubkey.</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptPubkey1</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptPubkey2</name></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH pay-to-compressed-pubkey.</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptPubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReplaceRedeemScript</name><argument_list>(<argument><expr><name><name>input2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Witness pay-to-compressed-pubkey (v0).</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH witness pay-to-compressed-pubkey (v0).</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReplaceRedeemScript</name><argument_list>(<argument><expr><name><name>input2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Normal pay-to-uncompressed-pubkey.</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptPubkey1L</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptPubkey2L</name></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH pay-to-uncompressed-pubkey.</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptPubkey2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReplaceRedeemScript</name><argument_list>(<argument><expr><name><name>input2</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Signing disabled for witness pay-to-uncompressed-pubkey (v1).</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2L</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey1L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptPubkey2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Normal 2-of-2 multisig</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>scriptMulti</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore2</name></expr></argument>, <argument><expr><name>scriptMulti</name></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>*</operator><name>output1</name> <operator>==</operator> <operator>*</operator><name>output2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>input1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>CombineSignatures</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH 2-of-2 multisig</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore2</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>*</operator><name>output1</name> <operator>==</operator> <operator>*</operator><name>output2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>input1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>CombineSignatures</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Witness 2-of-2 multisig</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore2</name></expr></argument>, <argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>*</operator><name>output1</name> <operator>==</operator> <operator>*</operator><name>output2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>input1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>CombineSignatures</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH witness 2-of-2 multisig</comment>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CreateCreditAndSpend</name><argument_list>(<argument><expr><name>keystore2</name></expr></argument>, <argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>scriptMulti</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output2</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>*</operator><name>output1</name> <operator>==</operator> <operator>*</operator><name>output2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UpdateInput</name><argument_list>(<argument><expr><name><name>input1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>CombineSignatures</name><argument_list>(<argument><expr><name>input1</name></expr></argument>, <argument><expr><name>input2</name></expr></argument>, <argument><expr><name>output1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckWithFlag</name><argument_list>(<argument><expr><name>output1</name></expr></argument>, <argument><expr><name>input1</name></expr></argument>, <argument><expr><name>STANDARD_SCRIPT_VERIFY_FLAGS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>test_IsStandard</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>coinsDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name></type> <name>coins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coinsDummy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>dummyTransactions</name> <init>= <expr><call><name>SetupDummyInputs</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">90</literal><operator>*</operator><name>CENT</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>reason</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check dust with default relay fee:</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nDustThreshold</name> <init>= <expr><literal type="number">182</literal> <operator>*</operator> <call><name><name>dustRelayFee</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nDustThreshold</name></expr></argument>, <argument><expr><literal type="number">546</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// dust:</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nDustThreshold</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"dust"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// not dust:</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>nDustThreshold</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disallowed nVersion</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allowed nVersion</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check dust with odd relay fee to verify rounding:</comment>
    <comment type="line">// nDustThreshold = 182 * 3702 / 1000</comment>
    <expr_stmt><expr><name>dustRelayFee</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">3702</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// dust:</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">673</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"dust"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// not dust:</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">673</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dustRelayFee</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><name>DUST_RELAY_TX_FEE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"scriptpubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// MAX_OP_RETURN_RELAY-byte TX_NULL_DATA (standard)</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>MAX_OP_RETURN_RELAY</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// MAX_OP_RETURN_RELAY+1-byte TX_NULL_DATA (non-standard)</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>MAX_OP_RETURN_RELAY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"scriptpubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Data payload can be encoded in any way...</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <name>OP_RESERVED</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"01"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">9</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"01"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// ...so long as it only contains PUSHDATA's</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"scriptpubkey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_NULL_DATA w/o PUSHDATA</comment>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only one TX_NULL_DATA permitted in all cases</comment>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"multi-op-return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"multi-op-return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_RETURN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"multi-op-return"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check large scriptSig (non-standard if size is &gt;1650 bytes)</comment>
    <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>MAX_MONEY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// OP_PUSHDATA2 with len (3 bytes) + data (1647 bytes) = 1650 bytes</comment>
    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1647</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1650</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1648</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1651</comment>
    <expr_stmt><expr><call><name><name>reason</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsStandardTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>reason</name></expr></argument>, <argument><expr><literal type="string">"scriptsig-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
