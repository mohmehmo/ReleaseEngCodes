<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/index/txindex.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INDEX_TXINDEX_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INDEX_TXINDEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/base.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txdb.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * TxIndex is used to look up transactions included in the blockchain by hash.
 * The index is written to a LevelDB database and records the filesystem
 * location of each transaction by transaction hash.
 */</comment>
<decl_stmt><decl><type><name>class</name> <name>TxIndex</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BaseIndex</name>
<block>{
<expr><name>protected</name><operator>:</operator>
    <name>class</name> <name>DB</name></expr>;

<expr><name>private</name><operator>:</operator>
    <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>DB</name></expr></argument>&gt;</argument_list></name> <name>m_db</name></expr>;

<expr><name>protected</name><operator>:</operator>
    <comment type="line" format="doxygen">/// Override base class init to migrate from old database.</comment>
    <name>bool</name> <macro><name>Init</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

    <expr><name>bool</name> <macro><name>WriteBlock</name><argument_list>(<argument>const CBlock&amp; block</argument>, <argument>const CBlockIndex* pindex</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>BaseIndex</name><operator>::</operator><name>DB</name><operator>&amp;</operator> <macro><name>GetDB</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name></expr>;

    <expr><specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><literal type="string">"txindex"</literal></expr>;</return> }</block>

<name>public</name><operator>:</operator>
    <comment type="line" format="doxygen">/// Constructs the index, which becomes available to be queried.</comment>
    <name>explicit</name> <macro><name>TxIndex</name><argument_list>(<argument>size_t n_cache_size</argument>, <argument>bool f_memory = false</argument>, <argument>bool f_wipe = false</argument>)</argument_list></macro></expr>;

    <comment type="line">// Destructor is declared because this class contains a unique_ptr to an incomplete type.</comment>
    <expr><name>virtual</name> <operator>~</operator><macro><name>TxIndex</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

    <comment type="line" format="doxygen">/// Look up a transaction by hash.</comment>
    <comment type="line" format="doxygen">///</comment>
    <comment type="line" format="doxygen">/// @param[in]   tx_hash  The hash of the transaction to be returned.</comment>
    <comment type="line" format="doxygen">/// @param[out]  block_hash  The hash of the block the transaction is found in.</comment>
    <comment type="line" format="doxygen">/// @param[out]  tx  The transaction itself.</comment>
    <comment type="line" format="doxygen">/// @return  true if transaction is found, false otherwise</comment>
    <expr><name>bool</name> <macro><name>FindTx</name><argument_list>(<argument>const uint256&amp; tx_hash</argument>, <argument>uint256&amp; block_hash</argument>, <argument>CTransactionRef&amp; tx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="line" format="doxygen">/// The global transaction index, used in GetTransaction. May be null.</comment>
<extern>extern std::unique_ptr&lt;TxIndex&gt; g_txindex;</extern>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INDEX_TXINDEX_H</comment>
</unit>
