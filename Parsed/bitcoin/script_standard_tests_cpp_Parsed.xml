<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/script_standard_tests.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>script_standard_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_Solver_success</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name><name>pubkeys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pubkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>solutions</name></decl>;</decl_stmt>

    <comment type="line">// TX_PUBKEY</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_PUBKEYHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_PUBKEYHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_SCRIPTHASH</comment>
    <function_decl><type><name>CScript</name></type> <name>redeemScript</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// initialize with leftover P2PKH script</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_SCRIPTHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_MULTISIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>solutions[<literal type="number">0</literal>] == std::vector&lt;unsigned char&gt;({<literal type="number">1</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>solutions[<literal type="number">3</literal>] == std::vector&lt;unsigned char&gt;({<literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_MULTISIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>solutions[<literal type="number">0</literal>] == std::vector&lt;unsigned char&gt;({<literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>solutions[<literal type="number">4</literal>] == std::vector&lt;unsigned char&gt;({<literal type="number">3</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="line">// TX_NULL_DATA</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator>
        <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">75</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">255</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NULL_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS_V0_KEYHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_WITNESS_V0_KEYHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS_V0_SCRIPTHASH</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>scriptHash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>redeemScript</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>scriptHash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scriptHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_WITNESS_V0_SCRIPTHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>solutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scriptHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_NONSTANDARD</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_9</name> <operator>&lt;&lt;</operator> <name>OP_ADD</name> <operator>&lt;&lt;</operator> <name>OP_11</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_Solver_failure</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>solutions</name></decl>;</decl_stmt>

    <comment type="line">// TX_PUBKEY with incorrectly sized pubkey</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_PUBKEYHASH with incorrectly sized key hash</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_SCRIPTHASH with incorrectly sized script hash</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG 0/2</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG 2/1</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG n = 2 with 1 pubkey</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG n = 1 with 0 pubkeys</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_NULL_DATA with other opcodes</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">75</literal></expr>}</block></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_ADD</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS with incorrect program size</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>Solver</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>solutions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TX_NONSTANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_ExtractDestination</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>

    <comment type="line">// TX_PUBKEY</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_PUBKEYHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_SCRIPTHASH</comment>
    <function_decl><type><name>CScript</name></type> <name>redeemScript</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// initialize with leftover P2PKH script</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_NULL_DATA</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">75</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS_V0_KEYHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WitnessV0KeyHash</name></type> <name>keyhash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CHash160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>keyhash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0KeyHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0KeyHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>keyhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS_V0_SCRIPTHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WitnessV0ScriptHash</name></type> <name>scripthash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>redeemScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>scripthash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scripthash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessV0ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>scripthash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_WITNESS with unknown version</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WitnessUnknown</name></type> <name>unk</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>unk</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>unk</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>unk</name><operator>.</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessUnknown</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>WitnessUnknown</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>unk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_ExtractDestinations</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name><name>pubkeys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pubkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>whichType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>addresses</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nRequired</name></decl>;</decl_stmt>

    <comment type="line">// TX_PUBKEY</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>TX_PUBKEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nRequired</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_PUBKEYHASH</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>TX_PUBKEYHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nRequired</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_SCRIPTHASH</comment>
    <function_decl><type><name>CScript</name></type> <name>redeemScript</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="line">// initialize with leftover P2PKH script</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>TX_SCRIPTHASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nRequired</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>ScriptHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_MULTISIG</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>TX_MULTISIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>addresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nRequired</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>*</operator><call><name><name>boost</name><operator>::</operator><name>get</name><argument_list type="generic">&lt;<argument><expr><name>PKHash</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addresses</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TX_NULL_DATA</comment>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><block>{<expr><literal type="number">75</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ExtractDestinations</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>whichType</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>, <argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_GetScriptFor_</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name><name>pubkeys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pubkeys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CScript</name></type> <name>expected</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

    <comment type="line">// PKHash</comment>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// CScriptID</comment>
    <function_decl><type><name>CScript</name></type> <name>redeemScript</name><parameter_list>(<parameter><decl><type><name>result</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>redeemScript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// CNoDestination</comment>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>CNoDestination</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// GetScriptForRawPubKey</comment>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// GetScriptForMultisig</comment>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator>
        <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pubkeys</name></expr></argument>, <argument><expr><name>pubkeys</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// GetScriptForWitness</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>witnessScript</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>witnessScript</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>witnessScript</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>witnessScript</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>witnessScript</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>witnessScript</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>pubkeys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>scriptHash</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>witnessScript</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>witnessScript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>scriptHash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>expected</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scriptHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GetScriptForWitness</name><argument_list>(<argument><expr><name>witnessScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
