<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/db.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_DB_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_DB_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<comment type="line">// Update Makefile if you change these</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMajorVersion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMinorVersion</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<struct_decl>struct <name>Options</name>;</struct_decl>
<struct_decl>struct <name>ReadOptions</name>;</struct_decl>
<struct_decl>struct <name>WriteOptions</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>WriteBatch</name></decl>;</decl_stmt>

<comment type="line">// Abstract handle to particular state of a DB.</comment>
<comment type="line">// A Snapshot is an immutable object and can therefore be safely</comment>
<comment type="line">// accessed from multiple threads without any external synchronization.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Snapshot</name> <block>{<block_content>
 <label><name>protected</name>:</label>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Snapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// A range of keys</comment>
<struct>struct <name>Range</name> <block>{
  <decl_stmt><decl><type><name>Slice</name></type> <name>start</name></decl>;</decl_stmt>          <comment type="line">// Included in the range</comment>
  <decl_stmt><decl><type><name>Slice</name></type> <name>limit</name></decl>;</decl_stmt>          <comment type="line">// Not included in the range</comment>

  <macro><name>Range</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <expr_stmt><expr><call><name>Range</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>s</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>l</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>start</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>limit</name><argument_list>(<argument>l</argument>)</argument_list></macro> <expr><block>{ }</block></expr></expr_stmt>
}</block>;</struct>

<comment type="line">// A DB is a persistent ordered map from keys to values.</comment>
<comment type="line">// A DB is safe for concurrent access from multiple threads without</comment>
<comment type="line">// any external synchronization.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>DB</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Open the database with the specified "name".</comment>
  <comment type="line">// Stores a pointer to a heap-allocated database in *dbptr and returns</comment>
  <comment type="line">// OK on success.</comment>
  <comment type="line">// Stores NULL in *dbptr and returns a non-OK status on error.</comment>
  <comment type="line">// Caller should delete *dbptr when it is no longer needed.</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>Status</name></type> <name>Open</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>,
                     <argument><expr><name>DB</name><operator>*</operator><operator>*</operator> <name>dbptr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <macro><name>DB</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set the database entry for "key" to "value".  Returns OK on success,</comment>
  <comment type="line">// and a non-OK status on error.</comment>
  <comment type="line">// Note: consider setting options.sync = true.</comment>
  <function_decl><type><name>virtual</name> <name>Status</name></type> <name>Put</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Remove the database entry (if any) for "key".  Returns OK on</comment>
  <comment type="line">// success, and a non-OK status on error.  It is not an error if "key"</comment>
  <comment type="line">// did not exist in the database.</comment>
  <comment type="line">// Note: consider setting options.sync = true.</comment>
  <function_decl><type><name>virtual</name> <name>Status</name></type> <name>Delete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Apply the specified updates to the database.</comment>
  <comment type="line">// Returns OK on success, non-OK on failure.</comment>
  <comment type="line">// Note: consider setting options.sync = true.</comment>
  <function_decl><type><name>virtual</name> <name>Status</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WriteOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>WriteBatch</name><modifier>*</modifier></type> <name>updates</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// If the database contains an entry for "key" store the</comment>
  <comment type="line">// corresponding value in *value and return OK.</comment>
  <comment type="line">//</comment>
  <comment type="line">// If there is no entry for "key" leave *value unchanged and return</comment>
  <comment type="line">// a status for which Status::IsNotFound() returns true.</comment>
  <comment type="line">//</comment>
  <comment type="line">// May return some other Status on an error.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>Status</name></type> <name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Return a heap-allocated iterator over the contents of the database.</comment>
  <comment type="line">// The result of NewIterator() is initially invalid (caller must</comment>
  <comment type="line">// call one of the Seek methods on the iterator before using it).</comment>
  <comment type="line">//</comment>
  <comment type="line">// Caller should delete the iterator when it is no longer needed.</comment>
  <comment type="line">// The returned iterator should be deleted before this db is deleted.</comment>
  <function_decl><type><name>virtual</name> <name>Iterator</name><modifier>*</modifier></type> <name>NewIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Return a handle to the current DB state.  Iterators created with</comment>
  <comment type="line">// this handle will all observe a stable snapshot of the current DB</comment>
  <comment type="line">// state.  The caller must call ReleaseSnapshot(result) when the</comment>
  <comment type="line">// snapshot is no longer needed.</comment>
  <function_decl><type><name>virtual</name> <specifier>const</specifier> <name>Snapshot</name><modifier>*</modifier></type> <name>GetSnapshot</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Release a previously acquired snapshot.  The caller must not</comment>
  <comment type="line">// use "snapshot" after this call.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>ReleaseSnapshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Snapshot</name><modifier>*</modifier></type> <name>snapshot</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// DB implementations can export properties about their state</comment>
  <comment type="line">// via this method.  If "property" is a valid property understood by this</comment>
  <comment type="line">// DB implementation, fills "*value" with its current value and returns</comment>
  <comment type="line">// true.  Otherwise returns false.</comment>
  <comment type="line">//</comment>
  <comment type="line">//</comment>
  <comment type="line">// Valid property names include:</comment>
  <comment type="line">//</comment>
  <comment type="line">//  "leveldb.num-files-at-level&lt;N&gt;" - return the number of files at level &lt;N&gt;,</comment>
  <comment type="line">//     where &lt;N&gt; is an ASCII representation of a level number (e.g. "0").</comment>
  <comment type="line">//  "leveldb.stats" - returns a multi-line string that describes statistics</comment>
  <comment type="line">//     about the internal operation of the DB.</comment>
  <comment type="line">//  "leveldb.sstables" - returns a multi-line string that describes all</comment>
  <comment type="line">//     of the sstables that make up the db contents.</comment>
  <comment type="line">//  "leveldb.approximate-memory-usage" - returns the approximate number of</comment>
  <comment type="line">//     bytes of memory in use by the DB.</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>GetProperty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>property</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>value</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// For each i in [0,n-1], store in "sizes[i]", the approximate</comment>
  <comment type="line">// file system space used by keys in "[range[i].start .. range[i].limit)".</comment>
  <comment type="line">//</comment>
  <comment type="line">// Note that the returned sizes measure file system space usage, so</comment>
  <comment type="line">// if the user data compresses by a factor of ten, the returned</comment>
  <comment type="line">// sizes will be one-tenth the size of the corresponding user data size.</comment>
  <comment type="line">//</comment>
  <comment type="line">// The results may not include the sizes of recently written data.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>GetApproximateSizes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Range</name><modifier>*</modifier></type> <name>range</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>sizes</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Compact the underlying storage for the key range [*begin,*end].</comment>
  <comment type="line">// In particular, deleted and overwritten versions are discarded,</comment>
  <comment type="line">// and the data is rearranged to reduce the cost of operations</comment>
  <comment type="line">// needed to access the data.  This operation should typically only</comment>
  <comment type="line">// be invoked by users who understand the underlying implementation.</comment>
  <comment type="line">//</comment>
  <comment type="line">// begin==NULL is treated as a key before all keys in the database.</comment>
  <comment type="line">// end==NULL is treated as a key after all keys in the database.</comment>
  <comment type="line">// Therefore the following call will compact the entire database:</comment>
  <comment type="line">//    db-&gt;CompactRange(NULL, NULL);</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>CompactRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>*</modifier></type> <name>begin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>*</modifier></type> <name>end</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>DB</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DB</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>DB</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Destroy the contents of the specified database.</comment>
<comment type="line">// Be very careful using this method.</comment>
<decl_stmt><decl><type><name>Status</name></type> <name>DestroyDB</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// If a DB cannot be opened, you may attempt to call this method to</comment>
<comment type="line">// resurrect as much of the contents of the database as possible.</comment>
<comment type="line">// Some data may be lost, so be careful when calling this function</comment>
<comment type="line">// on a database that contains important information.</comment>
<decl_stmt><decl><type><name>Status</name></type> <name>RepairDB</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>dbname</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_DB_H_</comment>
</unit>
