<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/chainparams.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CHAINPARAMS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CHAINPARAMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/params.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;protocol.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<struct>struct <name>SeedSpec6</name> <block>{
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>addr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>port</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <name>MapCheckpoints</name></expr>;</expr_stmt></typedef>

<struct>struct <name>CCheckpointData</name> <block>{
    <decl_stmt><decl><type><name>MapCheckpoints</name></type> <name>mapCheckpoints</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * Holds various statistics on transactions within a chain. Used to estimate
 * verification progress during chain sync.
 *
 * See also: CChainParams::TxData, GuessVerificationProgress.
 */</comment>
<struct>struct <name>ChainTxData</name> <block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTime</name></decl>;</decl_stmt>    <comment type="line" format="doxygen">//!&lt; UNIX timestamp of last known number of transactions</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTxCount</name></decl>;</decl_stmt> <comment type="line" format="doxygen">//!&lt; total number of transactions between genesis and that timestamp</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>dTxRate</name></decl>;</decl_stmt>   <comment type="line" format="doxygen">//!&lt; estimated number of transactions per second after that timestamp</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/**
 * CChainParams defines various tweakable parameters of a given instance of the
 * Bitcoin system. There are three: the main network on which people trade goods
 * and services, the public test network which gets reset from time to time and
 * a regression test mode which is intended for private networks only. It has
 * minimal difficulty to ensure that blocks can be found instantly.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CChainParams</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <enum>enum <name>Base58Type</name> <block>{
        <decl><name>PUBKEY_ADDRESS</name></decl>,
        <decl><name>SCRIPT_ADDRESS</name></decl>,
        <decl><name>SECRET_KEY</name></decl>,
        <decl><name>EXT_PUBLIC_KEY</name></decl>,
        <decl><name>EXT_SECRET_KEY</name></decl>,

        <decl><name>MAX_BASE58_TYPES</name></decl>
    }</block>;</enum>

    <expr_stmt><expr><specifier>const</specifier> <name>Consensus</name><operator>::</operator><name>Params</name><operator>&amp;</operator> <macro><name>GetConsensus</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>consensus</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>CMessageHeader</name><operator>::</operator><name>MessageStartChars</name><operator>&amp;</operator> <macro><name>MessageStart</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>pchMessageStart</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetDefaultPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nDefaultPort</name></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>const</specifier> <name>CBlock</name><operator>&amp;</operator> <macro><name>GenesisBlock</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>genesis</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Default value for -checkmempool and -checkblockindex argument */</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>DefaultConsistencyChecks</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fDefaultConsistencyChecks</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Policy: Filter transactions that do not match well-defined patterns */</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>RequireStandard</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fRequireStandard</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** If this chain is exclusively used for testing */</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>IsTestChain</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_is_test_chain</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>PruneAfterHeight</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nPruneAfterHeight</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Minimum free space (in GB) needed for data directory */</comment>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>AssumedBlockchainSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_assumed_blockchain_size</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/</comment>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>AssumedChainStateSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_assumed_chain_state_size</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Whether it is possible to mine blocks on demand (no retargeting) */</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>MineBlocksOnDemand</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>consensus</name><operator>.</operator><name>fPowNoRetargeting</name></name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Return the network string */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>NetworkIDString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>strNetworkID</name></expr>;</return> }</block></expr></expr_stmt>
    <comment type="block" format="doxygen">/** Return the list of hostnames to look up for DNS seeds */</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>DNSSeeds</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>vSeeds</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>Base58Prefix</name><argument_list>(<argument>Base58Type type</argument>)</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>base58Prefixes</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>Bech32HRP</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>bech32_hrp</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SeedSpec6</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>FixedSeeds</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>vFixedSeeds</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>CCheckpointData</name><operator>&amp;</operator> <macro><name>Checkpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>checkpointData</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>ChainTxData</name><operator>&amp;</operator> <macro><name>TxData</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>chainTxData</name></expr>;</return> }</block></expr></expr_stmt>
<label><name>protected</name>:</label>
    <macro><name>CChainParams</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

    <expr_stmt><expr><name>Consensus</name><operator>::</operator><name>Params</name> <name>consensus</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>CMessageHeader</name><operator>::</operator><name>MessageStartChars</name> <name>pchMessageStart</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nDefaultPort</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nPruneAfterHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m_assumed_blockchain_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m_assumed_chain_state_size</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>vSeeds</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name><name>base58Prefixes</name><index>[<expr><name>MAX_BASE58_TYPES</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>bech32_hrp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>strNetworkID</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>genesis</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SeedSpec6</name></expr></argument>&gt;</argument_list></name> <name>vFixedSeeds</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fDefaultConsistencyChecks</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fRequireStandard</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_is_test_chain</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCheckpointData</name></type> <name>checkpointData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ChainTxData</name></type> <name>chainTxData</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
 * Creates and returns a std::unique_ptr&lt;CChainParams&gt; of the chosen chain.
 * @returns a CChainParams* of the chosen chain.
 * @throws a std::runtime_error if the chain is not supported.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CChainParams</name></expr></argument>&gt;</argument_list></name> <call><name>CreateChainParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Return the currently selected parameters. This won't change after app
 * startup, except for unit tests.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>CChainParams</name> <modifier>&amp;</modifier></type><name>Params</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Sets the params returned by Params() to those for the given chain name.
 * @throws std::runtime_error when the chain is not supported.
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SelectParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chain</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CHAINPARAMS_H</comment>
</unit>
