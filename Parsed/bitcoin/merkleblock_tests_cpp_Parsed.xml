<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/merkleblock_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;merkleblock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>merkleblock_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="block" format="doxygen">/**
 * Create a CMerkleBlock using a list of txids which will be found in the
 * given block.
 */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkleblock_construct_from_txids_found</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name> <init>= <expr><call><name>getBlock13b8a</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>txids</name></decl>;</decl_stmt>

    <comment type="line">// Last txn in block.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txhash1</name> <init>= <expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Second txn in block.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txhash2</name> <init>= <expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xf9fc751cb7dc372406a9f8d738d5e6f8f63bab71986a39cf36ee70ee17036d07"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>txids</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>txhash1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txids</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>txhash2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>txids</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// vMatchedTxn is only used when bloom filter is specified.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ordered by occurrence in depth-first tree traversal.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txhash2</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vMatched</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>txhash1</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>vIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<comment type="block" format="doxygen">/**
 * Create a CMerkleBlock using a list of txids which will not be found in the
 * given block.
 */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>merkleblock_construct_from_txids_not_found</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name> <init>= <expr><call><name>getBlock13b8a</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>txids2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>txids2</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0xc0ffee00003bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>CMerkleBlock</name></type> <name>merkleBlock</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>txids2</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>header</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>vMatchedTxn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatched</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>merkleBlock</name><operator>.</operator><name>txn</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatched</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vMatched</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>vIndex</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
