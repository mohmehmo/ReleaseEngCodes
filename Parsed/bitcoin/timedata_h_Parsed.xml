<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/timedata.h"><comment type="line">// Copyright (c) 2014-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_TIMEDATA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_TIMEDATA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name>DEFAULT_MAX_TIME_ADJUSTMENT</name> <init>= <expr><literal type="number">70</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CNetAddr</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Median filter over a stream of values.
 * Returns the median of the last N numbers
 */</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>CMedianFilter</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>vValues</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>vSorted</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nSize</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <macro><name>CMedianFilter</name><argument_list>(<argument>unsigned int _size</argument>, <argument>T initial_value</argument>)</argument_list></macro> : <macro><name>nSize</name><argument_list>(<argument>_size</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>vValues</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vValues</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>initial_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vSorted</name> <operator>=</operator> <name>vValues</name></expr>;</expr_stmt>
    </block_content>}</block>

    <function><type><name>void</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>vValues</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nSize</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>vValues</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vValues</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>vValues</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>vSorted</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>vValues</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><call><name>copy</name><argument_list>(<argument><expr><call><name><name>vValues</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vValues</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vSorted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vSorted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vSorted</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>T</name> <macro><name>median</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <expr><name>int</name> <name>vSortedSize</name> <operator>=</operator> <call><name><name>vSorted</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name>assert</name><argument_list>(<argument><expr><name>vSortedSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>vSortedSize</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <comment type="line">// Odd number of elements</comment>
        <block>{<block_content>
            <return>return <expr><name><name>vSorted</name><index>[<expr><name>vSortedSize</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</return>
        <expr_stmt/>}</block_content> else <comment type="line">// Even number of elements</comment>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name><name>vSorted</name><index>[<expr><name>vSortedSize</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>vSorted</name><index>[<expr><name>vSortedSize</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
        <expr_stmt/>}</block_content>
    }

    int size(</block></block></if></if_stmt>) <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name><name>vValues</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block>

    <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <macro><name>sorted</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>vSorted</name></expr>;</return>
    }</block>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Functions to keep track of adjusted P2P time */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetTimeOffset</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>int64_t</name></type> <name>GetAdjustedTime</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddTimeData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTime</name></decl></parameter>)</parameter_list>;</function_decl></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_TIMEDATA_H</comment>
</unit>
