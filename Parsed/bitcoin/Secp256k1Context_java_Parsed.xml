<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/java/org/bitcoin/Secp256k1Context.java"><comment type="block">/*
 * Copyright 2014-2016 the libsecp256k1 contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>bitcoin</name></name>;</package>

<comment type="block" format="javadoc">/**
 * This class holds the context reference used in native methods 
 * to handle ECDSA operations.
 */</comment>
<class><specifier>public</specifier> class <name>Secp256k1Context</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>enabled</name></decl>;</decl_stmt> <comment type="line">//true if the library is loaded</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>context</name></decl>;</decl_stmt> <comment type="line">//ref to pointer to context obj</comment>

  <static>static <block>{<block_content> <comment type="line">//static initializer</comment>
      <decl_stmt><decl><type><name>boolean</name></type> <name>isEnabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>contextRef</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>loadLibrary</name></name><argument_list>(<argument><expr><literal type="string">"secp256k1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>contextRef</name> <operator>=</operator> <call><name>secp256k1_init_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"UnsatisfiedLinkError: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>isEnabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      </block_content>}</block></catch></try>
      <expr_stmt><expr><name>enabled</name> <operator>=</operator> <name>isEnabled</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>context</name> <operator>=</operator> <name>contextRef</name></expr>;</expr_stmt>
  </block_content>}</block></static>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
     <return>return <expr><name>enabled</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{<block_content>
     <if_stmt><if>if<condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">//sanity check</comment>
     <return>return <expr><name>context</name></expr>;</return>
  </block_content>}</block></function>

  <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>long</name></type> <name>secp256k1_init_context</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>
