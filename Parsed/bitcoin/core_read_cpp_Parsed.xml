<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/core_read.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/classification.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/replace.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/split.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>CScript</name></type> <name>ParseScript</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>result</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>opcodetype</name></expr></argument>&gt;</argument_list></name></type> <name>mapOpNames</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>mapOpNames</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>op</name> <operator>&lt;=</operator> <name>MAX_OPCODE</name></expr>;</condition> <incr><expr><name>op</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Allow OP_RESERVED to get into mapOpNames</comment>
            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>OP_NOP</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>OP_RESERVED</name></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>GetOpName</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>opcodetype</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"OP_UNKNOWN"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>mapOpNames</name><index>[<expr><name>strName</name></expr>]</index></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>opcodetype</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
            <comment type="line">// Convenience: OP_ADD and just ADD are both recognized:</comment>
            <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>replace_first</name></name><argument_list>(<argument><expr><name>strName</name></expr></argument>, <argument><expr><literal type="string">"OP_"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mapOpNames</name><index>[<expr><name>strName</name></expr>]</index></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>opcodetype</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>words</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>split</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>is_any_of</name></name><argument_list>(<argument><expr><literal type="string">" \t\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>boost</name><operator>::</operator><name>algorithm</name><operator>::</operator><name>token_compress_on</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>w</name> <init>= <expr><call><name><name>words</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>w</name> <operator>!=</operator> <call><name><name>words</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>w</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>w</name><operator>-&gt;</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Empty string, ignore. (boost::split given '' will return one word)</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>std</name><operator>::</operator><name>all_of</name></name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><operator>::</operator><name>IsDigit</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
            <operator>(</operator><call><name><name>w</name><operator>-&gt;</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <call><name><name>w</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>std</name><operator>::</operator><name>all_of</name></name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><operator>::</operator><name>IsDigit</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Number</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name>atoi64</name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>w</name><operator>-&gt;</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"0x"</literal> <operator>&amp;&amp;</operator> <call><name><name>w</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>IsHex</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Raw hex data, inserted NOT pushed onto stack:</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>raw</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>raw</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>raw</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>w</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name><name>w</name><operator>-&gt;</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator> <call><name><name>w</name><operator>-&gt;</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Single-quoted string, pushed as data. NOTE: this is poor-man's</comment>
            <comment type="line">// parsing, spaces/tabs/newlines in single-quoted strings won't work.</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>value</name><argument_list>(<argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>w</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>mapOpNames</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// opcode, e.g. OP_ADD or ADD:</comment>
            <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name><name>mapOpNames</name><index>[<expr><operator>*</operator><name>w</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"script parse error"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Check that all of the input and output scripts of a transaction contains valid opcodes</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>CheckTxScriptsSanity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Check input scripts for non-coinbase txs</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SCRIPT_SIZE</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Check output scripts</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>scriptPubKey</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SCRIPT_SIZE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecodeHexTx</name><parameter_list>(<parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>hex_tx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>try_no_witness</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>try_witness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>hex_tx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>txData</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>hex_tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>try_no_witness</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssData</name><argument_list>(<argument><expr><name>txData</name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name> <operator>|</operator> <name>SERIALIZE_TRANSACTION_NO_WITNESS</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>ssData</name> <operator>&gt;&gt;</operator> <name>tx</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ssData</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>try_witness</name> <operator>||</operator> <call><name>CheckTxScriptsSanity</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Fall through.</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>try_witness</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssData</name><argument_list>(<argument><expr><name>txData</name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>ssData</name> <operator>&gt;&gt;</operator> <name>tx</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>ssData</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Fall through.</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecodeHexBlockHeader</name><parameter_list>(<parameter><decl><type><name>CBlockHeader</name><modifier>&amp;</modifier></type> <name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>hex_header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>hex_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>header_data</name><argument_list>{<argument><expr><macro><name>ParseHex</name><argument_list>(<argument>hex_header</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ser_header</name><argument_list>(<argument><expr><name>header_data</name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><name>ser_header</name> <operator>&gt;&gt;</operator> <name>header</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>DecodeHexBlk</name><parameter_list>(<parameter><decl><type><name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strHexBlk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>strHexBlk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>blockData</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>strHexBlk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssBlock</name><argument_list>(<argument><expr><name>blockData</name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><name>ssBlock</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></catch></try>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ParseHashStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strHex</name></decl></parameter>, <parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>strHex</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>strHex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><name>strHex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ParseHexUV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHex</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>strHex</name> <operator>=</operator> <call><name><name>v</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHex</name><argument_list>(<argument><expr><name>strHex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><name>strName</name> <operator>+</operator> <literal type="string">" must be hexadecimal string (not '"</literal> <operator>+</operator> <name>strHex</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>strHex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ParseSighashString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>sighash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>hash_type</name> <init>= <expr><name>SIGHASH_ALL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>sighash</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>map_sighash_values</name> <init>= <expr><block>{
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_ALL</argument>)</argument_list></macro>}</block></expr>,
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"ALL|ANYONECANPAY"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_ALL|SIGHASH_ANYONECANPAY</argument>)</argument_list></macro>}</block></expr>,
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"NONE"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_NONE</argument>)</argument_list></macro>}</block></expr>,
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"NONE|ANYONECANPAY"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_NONE|SIGHASH_ANYONECANPAY</argument>)</argument_list></macro>}</block></expr>,
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"SINGLE"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_SINGLE</argument>)</argument_list></macro>}</block></expr>,
            <expr><block>{<expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"SINGLE|ANYONECANPAY"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>int</name><argument_list>(<argument>SIGHASH_SINGLE|SIGHASH_ANYONECANPAY</argument>)</argument_list></macro>}</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHashType</name> <init>= <expr><call><name><name>sighash</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <init>= <expr><call><name><name>map_sighash_values</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>strHashType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>map_sighash_values</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>hash_type</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><name>strHashType</name> <operator>+</operator> <literal type="string">" is not a valid sighash parameter."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>hash_type</name></expr>;</return>
</block_content>}</block></function>
</unit>
