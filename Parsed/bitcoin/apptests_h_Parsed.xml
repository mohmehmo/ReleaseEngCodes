<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/test/apptests.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_TEST_APPTESTS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_TEST_APPTESTS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BitcoinApplication</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BitcoinGUI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RPCConsole</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AppTests</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>
<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>AppTests</name><argument_list>(<argument><expr><name>BitcoinApplication</name><operator>&amp;</operator> <name>app</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_app</name><argument_list>(<argument>app</argument>)</argument_list></macro> <block>{}</block>

<name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>appTests</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>guiTests</name><argument_list>(<argument><expr><name>BitcoinGUI</name><operator>*</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>consoleTests</name><argument_list>(<argument><expr><name>RPCConsole</name><operator>*</operator> <name>console</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <comment type="line" format="doxygen">//! Add expected callback name to list of pending callbacks.</comment>
    <name>void</name> <macro><name>expectCallback</name><argument_list>(<argument>std::string callback</argument>)</argument_list></macro> <block>{ <expr><call><name><name>m_callbacks</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>; }</block>

    <comment type="line" format="doxygen">//! RAII helper to remove no-longer-pending callback.</comment>
    struct <name>HandleCallback</name>
    <block>{
        <expr><name>std</name><operator>::</operator><name>string</name> <name>m_callback</name></expr>;
        <expr><name>AppTests</name><operator>&amp;</operator> <name>m_app_tests</name></expr>;
        <expr><operator>~</operator><call><name>HandleCallback</name><argument_list>()</argument_list></call></expr>;
    }</block></expr>;

    <comment type="line" format="doxygen">//! Bitcoin application.</comment>
    <expr><name>BitcoinApplication</name><operator>&amp;</operator> <name>m_app</name></expr>;

    <comment type="line" format="doxygen">//! Set of pending callback names. Used to track expected callbacks and shut</comment>
    <comment type="line" format="doxygen">//! down the app after the last callback has been handled and all tests have</comment>
    <comment type="line" format="doxygen">//! either run or thrown exceptions. This could be a simple int counter</comment>
    <comment type="line" format="doxygen">//! instead of a set of names, but the names might be useful for debugging.</comment>
    <expr><name>std</name><operator>::</operator><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_callbacks</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_TEST_APPTESTS_H</comment>
</unit>
