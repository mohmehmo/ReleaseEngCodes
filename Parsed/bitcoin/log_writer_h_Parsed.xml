<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/log_writer.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_LOG_WRITER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_LOG_WRITER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/log_format.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>WritableFile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>log</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Writer</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Create a writer that will append data to "*dest".</comment>
  <comment type="line">// "*dest" must be initially empty.</comment>
  <comment type="line">// "*dest" must remain live while this Writer is in use.</comment>
  <function_decl><type><name>explicit</name></type> <name>Writer</name><parameter_list>(<parameter><decl><type><name>WritableFile</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Create a writer that will append data to "*dest".</comment>
  <comment type="line">// "*dest" must have initial length "dest_length".</comment>
  <comment type="line">// "*dest" must remain live while this Writer is in use.</comment>
  <macro><name>Writer</name><argument_list>(<argument>WritableFile* dest</argument>, <argument>uint64_t dest_length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><operator>~</operator><call><name>Writer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>Status</name></type> <name>AddRecord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>slice</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>WritableFile</name><modifier>*</modifier></type> <name>dest_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>block_offset_</name></decl>;</decl_stmt>       <comment type="line">// Current offset in block</comment>

  <comment type="line">// crc32c values for all supported record types.  These are</comment>
  <comment type="line">// pre-computed to reduce the overhead of computing the crc of the</comment>
  <comment type="line">// record type stored in the header.</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>type_crc_</name><index>[<expr><name>kMaxRecordType</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

  <function_decl><type><name>Status</name></type> <name>EmitPhysicalRecord</name><parameter_list>(<parameter><decl><type><name>RecordType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Writer</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Writer</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Writer</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace log</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_LOG_WRITER_H_</comment>
</unit>
