<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/primitives/block.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_PRIMITIVES_BLOCK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_PRIMITIVES_BLOCK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Nodes collect new transactions into a block, hash them into a hash tree,
 * and scan through nonce values to make the block's hash satisfy proof-of-work
 * requirements.  When they solve the proof-of-work, they broadcast the block
 * to everyone and the block is added to the block chain.  The first transaction
 * in the block is a special one that creates a new coin owned by the creator
 * of the block.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CBlockHeader</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line">// header</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashPrevBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashMerkleRoot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nNonce</name></decl>;</decl_stmt>

    <macro><name>CBlockHeader</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>hashPrevBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>hashMerkleRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nBits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nNonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>nVersion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hashPrevBlock</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hashMerkleRoot</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nBits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNonce</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>bool</name> <macro><name>IsNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>(</operator><name>nBits</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>uint256</name> <macro><name>GetHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <expr_stmt><expr><name>int64_t</name> <macro><name>GetBlockTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>nTime</name></expr>;</return>
    }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CBlock</name> <range>: <expr><name>public</name> <name>CBlockHeader</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <comment type="line">// network and disk</comment>
    <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>vtx</name></expr>;

    <comment type="line">// memory only</comment>
    <expr><name>mutable</name> <name>bool</name> <name>fChecked</name></expr>;

    <macro><name>CBlock</name><argument_list>()</argument_list></macro>
    <expr><block>{
        <expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <macro><name>CBlock</name><argument_list>(<argument>const CBlockHeader &amp;header</argument>)</argument_list></macro>
    <block>{
        <expr><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;
        <expr><operator>*</operator><operator>(</operator><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>CBlockHeader</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <name>header</name></expr>;
    }</block>

    <name>ADD_SERIALIZE_METHODS</name></expr>;

    <expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name> <macro><name>SerializationOp</name><argument_list>(<argument>Stream&amp; s</argument>, <argument>Operation ser_action</argument>)</argument_list></macro> <block>{
        <expr><call><name>READWRITEAS</name><argument_list>(<argument><expr><name>CBlockHeader</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>vtx</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    <name>void</name> <macro><name>SetNull</name><argument_list>()</argument_list></macro>
    <block>{
        <expr><name>CBlockHeader</name><operator>::</operator><call><name>SetNull</name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>vtx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name>fChecked</name> <operator>=</operator> <name>false</name></expr>;
    }</block>

    <name>CBlockHeader</name> <macro><name>GetBlockHeader</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <expr><name>CBlockHeader</name> <name>block</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>nVersion</name></name>       <operator>=</operator> <name>nVersion</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name>  <operator>=</operator> <name>hashPrevBlock</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>=</operator> <name>hashMerkleRoot</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>nTime</name></name>          <operator>=</operator> <name>nTime</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>nBits</name></name>          <operator>=</operator> <name>nBits</name></expr>;
        <expr><name><name>block</name><operator>.</operator><name>nNonce</name></name>         <operator>=</operator> <name>nNonce</name></expr>;
        <return>return <expr><name>block</name></expr>;</return>
    }</block>

    <name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Describes a place in the block chain to another node such that if the
 * other node doesn't have the same branch, it can find a recent common trunk.
 * The further back it is, the further before the fork it may be.
 */</comment>
<struct>struct <name>CBlockLocator</name>
<block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <name>vHave</name></expr>;</expr_stmt>

    <macro><name>CBlockLocator</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

    <decl_stmt><decl><type><name>explicit</name></type> <name>CBlockLocator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vHaveIn</name></expr></argument>)</argument_list> <range>: <macro><name>vHave</name><argument_list>(<argument>vHaveIn</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>ADD_SERIALIZE_METHODS</name></expr></range></decl>;</decl_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nVersion</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>GetVersion</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>SER_GETHASH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>vHave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>SetNull</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>vHave</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>bool</name> <macro><name>IsNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name><name>vHave</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_PRIMITIVES_BLOCK_H</comment>
</unit>
