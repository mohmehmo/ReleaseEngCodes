<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/sync_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>MutexType</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>TestPotentialDeadLockDetected</name><parameter_list>(<parameter><decl><type><name>MutexType</name><modifier>&amp;</modifier></type> <name>mutex1</name></decl></parameter>, <parameter><decl><type><name>MutexType</name><modifier>&amp;</modifier></type> <name>mutex2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>mutex1</name></expr></argument>, <argument><expr><name>mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>bool</name></type> <name>error_thrown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK2</name><argument_list>(<argument><expr><name>mutex2</name></expr></argument>, <argument><expr><name>mutex1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>logic_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"potential deadlock detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>error_thrown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_LOCKORDER</name></cpp:ifdef>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>error_thrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>error_thrown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
}</block></namespace> <comment type="line">// namespace</comment>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>sync_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>potential_deadlock_detected</argument>)</argument_list></macro>
<block>{<block_content>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_LOCKORDER</name></cpp:ifdef>
    <decl_stmt><decl><type><name>bool</name></type> <name>prev</name> <init>= <expr><name>g_debug_lockorder_abort</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>g_debug_lockorder_abort</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>CCriticalSection</name></type> <name>rmutex1</name></decl>, <decl><type ref="prev"/><name>rmutex2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TestPotentialDeadLockDetected</name><argument_list>(<argument><expr><name>rmutex1</name></expr></argument>, <argument><expr><name>rmutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Mutex</name></type> <name>mutex1</name></decl>, <decl><type ref="prev"/><name>mutex2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TestPotentialDeadLockDetected</name><argument_list>(<argument><expr><name>mutex1</name></expr></argument>, <argument><expr><name>mutex2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_LOCKORDER</name></cpp:ifdef>
    <expr_stmt><expr><name>g_debug_lockorder_abort</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
