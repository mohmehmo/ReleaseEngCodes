<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/posix_logger.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// Logger implementation that can be shared by all environments</comment>
<comment type="line">// where enough Posix functionality is available.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/env.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>PosixLogger</name> <range>: <expr><name>public</name> <name>Logger</name> <block>{
 <expr><name>private</name><operator>:</operator>
  <name>FILE</name><operator>*</operator> <name>file_</name></expr>;
  <expr><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator><name>gettid_</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr>;  <comment type="line">// Return the thread id for the current thread</comment>
 <expr><name>public</name><operator>:</operator>
  <call><name>PosixLogger</name><argument_list>(<argument><expr><name>FILE</name><operator>*</operator> <name>f</name></expr></argument>, <argument><expr><call><call><name>uint64_t</name> <argument_list>(<argument><expr><operator>*</operator><name>gettid</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>file_</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>, <macro><name>gettid_</name><argument_list>(<argument>gettid</argument>)</argument_list></macro> <expr><block>{ }</block>
  <name>virtual</name> <operator>~</operator><macro><name>PosixLogger</name><argument_list>()</argument_list></macro> <block>{
    <expr><call><name>fclose</name><argument_list>(<argument><expr><name>file_</name></expr></argument>)</argument_list></call></expr>;
  }</block>
  <name>virtual</name> <name>void</name> <macro><name>Logv</name><argument_list>(<argument>const char* format</argument>, <argument>va_list ap</argument>)</argument_list></macro> <block>{
    <expr><specifier>const</specifier> <name>uint64_t</name> <name>thread_id</name> <operator>=</operator> <call>(<modifier>*</modifier><name>gettid_</name>)<argument_list>()</argument_list></call></expr>;

    <comment type="line">// We try twice: the first time with a fixed-size stack allocated buffer,</comment>
    <comment type="line">// and the second time with a much larger dynamically allocated buffer.</comment>
    <expr><name>char</name> <name><name>buffer</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></expr>;
    <for>for <control>(<init><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>base</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
      <expr_stmt/>}</block_content> else <block>{<block_content>
        <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>base</name> <operator>=</operator> <name>new</name> <name><name>char</name><index>[<expr><name>bufsize</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>
      char* p = base</block></block><empty_stmt>;</empty_stmt></if></if_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>limit</name> <init>= <expr><name>base</name> <operator>+</operator> <name>bufsize</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now_tv</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now_tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>seconds</name> <init>= <expr><name><name>now_tv</name><operator>.</operator><name>tv_sec</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>t</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seconds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <macro><name>snprintf</name><argument_list>(<argument>p</argument>, <argument>limit - p</argument>,
                    <argument><literal type="string">"%04d/%02d/%02d-%02d:%02d:%02d.%06d %llx "</literal></argument>,
                    <argument>t.tm_year + <literal type="number">1900</literal></argument>,
                    <argument>t.tm_mon + <literal type="number">1</literal></argument>,
                    <argument>t.tm_mday</argument>,
                    <argument>t.tm_hour</argument>,
                    <argument>t.tm_min</argument>,
                    <argument>t.tm_sec</argument>,
                    <argument>static_cast&lt;int&gt;(now_tv.tv_usec)</argument>,
                    <argument>static_cast&lt;long long unsigned int&gt;(thread_id)</argument>)</argument_list></macro></expr>;</expr_stmt>

      <comment type="line">// Print the message</comment>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>va_list</name></type> <name>backup_ap</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>backup_ap</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>limit</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>backup_ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>backup_ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>

      <comment type="line">// Truncate to available space if necessary</comment>
      if (p &gt;= limit</block></if></if_stmt>)</block_content> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>iter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>       <comment type="line">// Try again with larger buffer</comment>
        <expr_stmt/>}</block_content> else <block>{<block_content>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <name>limit</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
      }

      <comment type="line">// Add newline if necessary</comment>
      if (p == base || p[-1] != '\n'</block></block></if></if_stmt>)</block_content> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <expr_stmt/>}</block_content>

      assert(p &lt;= limit</block></block></block></for>)</block></expr>;
      <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>base</name></expr></argument>, <argument><expr><name>file_</name></expr></argument>)</argument_list></call></expr>;
      <expr><call><name>fflush</name><argument_list>(<argument><expr><name>file_</name></expr></argument>)</argument_list></call></expr>;
      <if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <name>buffer</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>delete</name><index>[]</index></name></type> <name>base</name></decl>;</decl_stmt>
      <expr_stmt/>}</block_content>
      break</block><empty_stmt>;</empty_stmt></if></if_stmt>
    }</block></expr></range></decl></decl_stmt>
  </block_content>}</block></decl></decl_stmt>
};

}  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_POSIX_LOGGER_H_</comment>
</unit>
