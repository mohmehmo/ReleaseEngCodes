<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/banman.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2017 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;banman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>


<constructor><name><name>BanMan</name><operator>::</operator><name>BanMan</name></name><parameter_list>(<parameter><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>ban_file</name></decl></parameter>, <parameter><decl><type><name>CClientUIInterface</name><modifier>*</modifier></type> <name>client_interface</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>default_ban_time</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>m_client_interface</name><argument_list>(<argument><expr><name>client_interface</name></expr></argument>)</argument_list></call>, <call><name>m_ban_db</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>ban_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>m_default_ban_time</name><argument_list>(<argument><expr><name>default_ban_time</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_client_interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>m_client_interface</name><operator>-&gt;</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Loading banlist..."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n_start</name> <init>= <expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>banmap_t</name></type> <name>banmap</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_ban_db</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><name>banmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SetBanned</name><argument_list>(<argument><expr><name>banmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">// thread save setter</comment>
        <expr_stmt><expr><call><name>SetBannedSetDirty</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// no need to write down, just read data</comment>
        <expr_stmt><expr><call><name>SweepBanned</name><argument_list>()</argument_list></call></expr>;</expr_stmt>            <comment type="line">// sweep out unused entries</comment>

        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>NET</name></name></expr></argument>, <argument><expr><literal type="string">"Loaded %d banned node ips/subnets from banlist.dat  %dms\n"</literal></expr></argument>,
            <argument><expr><call><name><name>banmap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>n_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Invalid or missing banlist.dat; recreating\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetBannedSetDirty</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// force write</comment>
        <expr_stmt><expr><call><name>DumpBanlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>BanMan</name><operator>::</operator><name>~BanMan</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DumpBanlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>DumpBanlist</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SweepBanned</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// clean unused entries (if bantime has expired)</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BannedSetIsDirty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n_start</name> <init>= <expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>banmap_t</name></type> <name>banmap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetBanned</name><argument_list>(<argument><expr><name>banmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_ban_db</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>banmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SetBannedSetDirty</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>NET</name></name></expr></argument>, <argument><expr><literal type="string">"Flushed %d banned node ips/subnets to banlist.dat  %dms\n"</literal></expr></argument>,
        <argument><expr><call><name><name>banmap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>n_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>ClearBanned</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>m_banned</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>DumpBanlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//store banlist to disk</comment>
    <if_stmt><if>if <condition>(<expr><name>m_client_interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>m_client_interface</name><operator>-&gt;</operator><name>BannedListChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BanMan</name><operator>::</operator><name>IsBannedLevel</name></name><parameter_list>(<parameter><decl><type><name>CNetAddr</name></type> <name>net_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Returns the most severe level of banning that applies to this address.</comment>
    <comment type="line">// 0 - Not banned</comment>
    <comment type="line">// 1 - Automatic misbehavior ban</comment>
    <comment type="line">// 2 - Any other ban</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>current_time</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name>m_banned</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name> <init>= <expr><name><name>it</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBanEntry</name></type> <name>ban_entry</name> <init>= <expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>current_time</name> <operator>&lt;</operator> <name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name> <operator>&amp;&amp;</operator> <call><name><name>sub_net</name><operator>.</operator><name>Match</name></name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ban_entry</name><operator>.</operator><name>banReason</name></name> <operator>!=</operator> <name>BanReasonNodeMisbehaving</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>level</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanMan</name><operator>::</operator><name>IsBanned</name></name><parameter_list>(<parameter><decl><type><name>CNetAddr</name></type> <name>net_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>current_time</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name>m_banned</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name> <init>= <expr><name><name>it</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBanEntry</name></type> <name>ban_entry</name> <init>= <expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>current_time</name> <operator>&lt;</operator> <name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name> <operator>&amp;&amp;</operator> <call><name><name>sub_net</name><operator>.</operator><name>Match</name></name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanMan</name><operator>::</operator><name>IsBanned</name></name><parameter_list>(<parameter><decl><type><name>CSubNet</name></type> <name>sub_net</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>current_time</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>banmap_t</name><operator>::</operator><name>iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>m_banned</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>sub_net</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name><name>m_banned</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBanEntry</name></type> <name>ban_entry</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>current_time</name> <operator>&lt;</operator> <name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>Ban</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BanReason</name><modifier>&amp;</modifier></type> <name>ban_reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>since_unix_epoch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Ban</name><argument_list>(<argument><expr><name>sub_net</name></expr></argument>, <argument><expr><name>ban_reason</name></expr></argument>, <argument><expr><name>ban_time_offset</name></expr></argument>, <argument><expr><name>since_unix_epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>Ban</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>sub_net</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BanReason</name><modifier>&amp;</modifier></type> <name>ban_reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>since_unix_epoch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CBanEntry</name></type> <name>ban_entry</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ban_reason</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>normalized_ban_time_offset</name> <init>= <expr><name>ban_time_offset</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>normalized_since_unix_epoch</name> <init>= <expr><name>since_unix_epoch</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ban_time_offset</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>normalized_ban_time_offset</name> <operator>=</operator> <name>m_default_ban_time</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>normalized_since_unix_epoch</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>normalized_since_unix_epoch</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>normalized_ban_time_offset</name></expr>;</expr_stmt>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>m_banned</name><index>[<expr><name>sub_net</name></expr>]</index></name><operator>.</operator><name>nBanUntil</name> <operator>&lt;</operator> <name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>m_banned</name><index>[<expr><name>sub_net</name></expr>]</index></name> <operator>=</operator> <name>ban_entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <return>return;</return></block_content></block></else></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name>m_client_interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>m_client_interface</name><operator>-&gt;</operator><name>BannedListChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//store banlist to disk immediately if user requested ban</comment>
    <if_stmt><if>if <condition>(<expr><name>ban_reason</name> <operator>==</operator> <name>BanReasonManuallyAdded</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>DumpBanlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanMan</name><operator>::</operator><name>Unban</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name><argument_list>(<argument><expr><name>net_addr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name>Unban</name><argument_list>(<argument><expr><name>sub_net</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanMan</name><operator>::</operator><name>Unban</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>sub_net</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>m_banned</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>sub_net</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name>m_client_interface</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>m_client_interface</name><operator>-&gt;</operator><name>BannedListChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>DumpBanlist</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//store banlist to disk immediately</comment>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>GetBanned</name></name><parameter_list>(<parameter><decl><type><name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Sweep the banlist so expired bans are not returned</comment>
    <expr_stmt><expr><call><name>SweepBanned</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>banmap</name> <operator>=</operator> <name>m_banned</name></expr>;</expr_stmt> <comment type="line">//create a thread safe copy</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>SetBanned</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_banned</name> <operator>=</operator> <name>banmap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>SweepBanned</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>notify_ui</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>banmap_t</name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>m_banned</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>m_banned</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CBanEntry</name></type> <name>ban_entry</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>now</name> <operator>&gt;</operator> <name><name>ban_entry</name><operator>.</operator><name>nBanUntil</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>m_banned</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>notify_ui</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>NET</name></name></expr></argument>, <argument><expr><literal type="string">"%s: Removed banned node ip/subnet from banlist.dat: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>sub_net</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block>
    <comment type="line">// update UI</comment>
    <if_stmt><if>if <condition>(<expr><name>notify_ui</name> <operator>&amp;&amp;</operator> <name>m_client_interface</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_client_interface</name><operator>-&gt;</operator><name>BannedListChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanMan</name><operator>::</operator><name>BannedSetIsDirty</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>m_is_dirty</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanMan</name><operator>::</operator><name>SetBannedSetDirty</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>dirty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>m_cs_banned</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//reuse m_banned lock for the m_is_dirty flag</comment>
    <expr_stmt><expr><name>m_is_dirty</name> <operator>=</operator> <name>dirty</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
