<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/util/error.cpp"><comment type="line">// Copyright (c) 2010-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/error.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>TransactionErrorString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TransactionError</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>OK</name></name></expr>:</case>
            <return>return <expr><literal type="string">"No error"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>MISSING_INPUTS</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Missing inputs"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>ALREADY_IN_CHAIN</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Transaction already in block chain"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>P2P_DISABLED</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Peer-to-peer functionality missing or disabled"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>MEMPOOL_REJECTED</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Transaction rejected by AcceptToMemoryPool"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>MEMPOOL_ERROR</name></name></expr>:</case>
            <return>return <expr><literal type="string">"AcceptToMemoryPool failed"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>INVALID_PSBT</name></name></expr>:</case>
            <return>return <expr><literal type="string">"PSBT is not sane"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>PSBT_MISMATCH</name></name></expr>:</case>
            <return>return <expr><literal type="string">"PSBTs not compatible (different transactions)"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>SIGHASH_MISMATCH</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Specified sighash value does not match existing value"</literal></expr>;</return>
        <case>case <expr><name><name>TransactionError</name><operator>::</operator><name>MAX_FEE_EXCEEDED</name></name></expr>:</case>
            <return>return <expr><literal type="string">"Fee exceeds maximum configured by -maxtxfee"</literal></expr>;</return>
        <comment type="line">// no default case, so the compiler can warn about missing cases</comment>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ResolveErrMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strBind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot resolve -%s address: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>strBind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bilingual_str</name></type> <name>AmountHighWarn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>optname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s is set very high!"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bilingual_str</name></type> <name>AmountErrMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>optname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid amount for -%s=&lt;amount&gt;: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>strValue</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
