<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/askpassphrasedialog.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/askpassphrasedialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_askpassphrasedialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPushButton&gt;</cpp:file></cpp:include>

<constructor><name><name>AskPassphraseDialog</name><operator>::</operator><name>AskPassphraseDialog</name></name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>_mode</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name>SecureString</name><modifier>*</modifier></type> <name>passphrase_out</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QDialog</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>AskPassphraseDialog</name></name></expr></argument>)</argument_list></call>,
    <call><name>mode</name><argument_list>(<argument><expr><name>_mode</name></expr></argument>)</argument_list></call>,
    <call><name>model</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>,
    <call><name>fCapsLock</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>,
    <call><name>m_passphrase_out</name><argument_list>(<argument><expr><name>passphrase_out</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>setMinimumSize</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>sizeHint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>setMinimumSize</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>sizeHint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>setMinimumSize</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>sizeHint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>setMaxLength</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>setMaxLength</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>setMaxLength</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Setup Caps Lock detection.</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch<condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>Encrypt</name></expr>:</case> <comment type="line">// Ask passphrase x2</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>warningLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Enter the new passphrase for the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passLabel1</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Encrypt wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>Unlock</name></expr>:</case> <comment type="line">// Ask passphrase</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>warningLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"This operation needs your wallet passphrase to unlock the wallet."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passLabel2</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passLabel3</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unlock wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>Decrypt</name></expr>:</case>   <comment type="line">// Ask passphrase</comment>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>warningLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"This operation needs your wallet passphrase to decrypt the wallet."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passLabel2</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passLabel3</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Decrypt wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>ChangePass</name></expr>:</case> <comment type="line">// Ask old passphrase + new passphrase x2</comment>
            <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Change passphrase"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>warningLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Enter the old passphrase and new passphrase for the wallet."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>textChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>toggleShowPasswordButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>toggled</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AskPassphraseDialog</name><operator>::</operator><name>toggleShowPassword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AskPassphraseDialog</name><operator>::</operator><name>textChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AskPassphraseDialog</name><operator>::</operator><name>textChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>AskPassphraseDialog</name><operator>::</operator><name>textChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>AskPassphraseDialog</name><operator>::</operator><name>~AskPassphraseDialog</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>secureClearPassFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>void</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>setModel</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier></type><name>_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>_model</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>accept</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SecureString</name></type> <name>oldpass</name></decl>, <decl><type ref="prev"/><name>newpass1</name></decl>, <decl><type ref="prev"/><name>newpass2</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <name>Encrypt</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>oldpass</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newpass1</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newpass2</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>MAX_PASSPHRASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)</comment>
    <comment type="line">// Alternately, find a way to make this input mlock()'d to begin with.</comment>
    <expr_stmt><expr><call><name><name>oldpass</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newpass1</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>newpass2</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toStdString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secureClearPassFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <switch>switch<condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>Encrypt</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name><name>newpass1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>newpass2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Cannot encrypt with empty passphrase</comment>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>QMessageBox</name><operator>::</operator><name>StandardButton</name></name></type> <name>retval</name> <init>= <expr><call><name><name>QMessageBox</name><operator>::</operator><name>question</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Confirm wallet encryption"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;&lt;br&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Are you sure you wish to encrypt your wallet?"</literal></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name><operator>|</operator><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>,
                 <argument><expr><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>retval</name> <operator>==</operator> <name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>newpass1</name> <operator>==</operator> <name>newpass2</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>QString</name></type> <name>encryption_reminder</name> <init>= <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Remember that encrypting your wallet cannot fully protect "</literal>
                <literal type="string">"your bitcoins from being stolen by malware infecting your computer."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>m_passphrase_out</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>m_passphrase_out</name><operator>-&gt;</operator><name>assign</name></name><argument_list>(<argument><expr><name>newpass1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>warning</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet to be encrypted"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><literal type="string">"&lt;qt&gt;"</literal> <operator>+</operator>
                                         <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Your wallet is about to be encrypted. "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>encryption_reminder</name> <operator>+</operator>
                                         <literal type="string">"&lt;/b&gt;&lt;/qt&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>model</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if<condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>setWalletEncrypted</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>newpass1</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>warning</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encrypted"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><literal type="string">"&lt;qt&gt;"</literal> <operator>+</operator>
                                             <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Your wallet is now encrypted. "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>encryption_reminder</name> <operator>+</operator>
                                             <literal type="string">"&lt;br&gt;&lt;br&gt;&lt;b&gt;"</literal> <operator>+</operator>
                                             <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"IMPORTANT: Any previous backups you have made of your wallet file "</literal>
                                             <literal type="string">"should be replaced with the newly generated, encrypted wallet file. "</literal>
                                             <literal type="string">"For security reasons, previous backups of the unencrypted wallet file "</literal>
                                             <literal type="string">"will become useless as soon as you start using the new, encrypted wallet."</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                                             <literal type="string">"&lt;/b&gt;&lt;/qt&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encryption failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encryption failed due to an internal error. Your wallet was not encrypted."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>QDialog</name><operator>::</operator><name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Success</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encryption failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The supplied passphrases do not match."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QDialog</name><operator>::</operator><name>reject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Cancelled</comment>
        </block_content>}</block></else></if_stmt>
        </block_content>}</block> <break>break;</break>
    <case>case <expr><name>Unlock</name></expr>:</case>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>setWalletLocked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>oldpass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet unlock failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The passphrase entered for the wallet decryption was incorrect."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>QDialog</name><operator>::</operator><name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Success</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet unlock failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <break>break;</break>
    <case>case <expr><name>Decrypt</name></expr>:</case>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>model</name><operator>-&gt;</operator><name>setWalletEncrypted</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>oldpass</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet decryption failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The passphrase entered for the wallet decryption was incorrect."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QDialog</name><operator>::</operator><name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Success</comment>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    <case>case <expr><name>ChangePass</name></expr>:</case>
        <if_stmt><if>if<condition>(<expr><name>newpass1</name> <operator>==</operator> <name>newpass2</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>model</name><operator>-&gt;</operator><name>changePassphrase</name></name><argument_list>(<argument><expr><name>oldpass</name></expr></argument>, <argument><expr><name>newpass1</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>information</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encrypted"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet passphrase was successfully changed."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>QDialog</name><operator>::</operator><name>accept</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Success</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encryption failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The passphrase entered for the wallet decryption was incorrect."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Wallet encryption failed"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"The supplied passphrases do not match."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>textChanged</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Validate input, set Ok button to enabled when acceptable</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>acceptable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>(<expr><name>mode</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>Encrypt</name></expr>:</case> <comment type="line">// New passphrase x2</comment>
        <expr_stmt><expr><name>acceptable</name> <operator>=</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>Unlock</name></expr>:</case> <comment type="line">// Old passphrase x1</comment>
    <case>case <expr><name>Decrypt</name></expr>:</case>
        <expr_stmt><expr><name>acceptable</name> <operator>=</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>ChangePass</name></expr>:</case> <comment type="line">// Old passphrase x1, new passphrase x2</comment>
        <expr_stmt><expr><name>acceptable</name> <operator>=</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>buttonBox</name><operator>-&gt;</operator><name>button</name></name><argument_list>(<argument><expr><name><name>QDialogButtonBox</name><operator>::</operator><name>Ok</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setEnabled</name><argument_list>(<argument><expr><name>acceptable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>event</name></name><parameter_list>(<parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Detect Caps Lock key press.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>ke</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>ke</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_CapsLock</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fCapsLock</name> <operator>=</operator> <operator>!</operator><name>fCapsLock</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fCapsLock</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>capsLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: The Caps Lock key is on!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>capsLabel</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QWidget</name><operator>::</operator><name>event</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>toggleShowPassword</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>show</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>toggleShowPasswordButton</name><operator>-&gt;</operator><name>setDown</name></name><argument_list>(<argument><expr><name>show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>QLineEdit</name><operator>::</operator><name>Normal</name></name></expr> </then><else>: <expr><name><name>QLineEdit</name><operator>::</operator><name>Password</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name><operator>-&gt;</operator><name>setEchoMode</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name><operator>-&gt;</operator><name>setEchoMode</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name><operator>-&gt;</operator><name>setEchoMode</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Detect Caps Lock.
     * There is no good OS-independent way to check a key state in Qt, but we
     * can detect Caps Lock by checking for the following condition:
     * Shift key is down and the result is a lower case character, or
     * Shift key is not down and the result is an upper case character.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>ke</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>str</name> <init>= <expr><call><name><name>ke</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>QChar</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>unicode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>fShift</name> <init>= <expr><operator>(</operator><call><name><name>ke</name><operator>-&gt;</operator><name>modifiers</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>ShiftModifier</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fShift</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>fShift</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fCapsLock</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>capsLabel</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Warning: The Caps Lock key is on!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>psz</name><operator>-&gt;</operator><name>isLetter</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fCapsLock</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>capsLabel</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QDialog</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SecureClearQLineEdit</name><parameter_list>(<parameter><decl><type><name>QLineEdit</name><modifier>*</modifier></type> <name>edit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Attempt to overwrite text so that they do not linger around in memory</comment>
    <expr_stmt><expr><call><name><name>edit</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>repeated</name><argument_list>(<argument><expr><call><name><name>edit</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>edit</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>AskPassphraseDialog</name><operator>::</operator><name>secureClearPassFields</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SecureClearQLineEdit</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SecureClearQLineEdit</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SecureClearQLineEdit</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>passEdit3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
