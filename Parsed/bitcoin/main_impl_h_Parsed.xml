<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/modules/ecdh/main_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2015 Andrew Poelstra                                 *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_MODULE_ECDH_MAIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_MODULE_ECDH_MAIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"include/secp256k1_ecdh.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecmult_const_impl.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ecdh_hash_function_sha256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>version</name> <init>= <expr><operator>(</operator><name><name>y</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x02</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_sha256</name></type> <name>sha</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>secp256k1_sha256_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_sha256_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>secp256k1_ecdh_hash_function</name></type> <name>secp256k1_ecdh_hash_function_sha256</name> <init>= <expr><name>ecdh_hash_function_sha256</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>secp256k1_ecdh_hash_function</name></type> <name>secp256k1_ecdh_hash_function_default</name> <init>= <expr><name>ecdh_hash_function_sha256</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>secp256k1_ecdh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_pubkey</name> <modifier>*</modifier></type><name>point</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>, <parameter><decl><type><name>secp256k1_ecdh_hash_function</name></type> <name>hashfp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>overflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_gej</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_ge</name></type> <name>pt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>secp256k1_scalar</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARG_CHECK</name><argument_list>(<argument><expr><name>output</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARG_CHECK</name><argument_list>(<argument><expr><name>point</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ARG_CHECK</name><argument_list>(<argument><expr><name>scalar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>hashfp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>hashfp</name> <operator>=</operator> <name>secp256k1_ecdh_hash_function_default</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_pubkey_load</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_scalar_set_b32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>||</operator> <call><name>secp256k1_scalar_is_zero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>y</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>secp256k1_ecmult_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_ge_set_gej</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Compute a hash of the point */</comment>
        <expr_stmt><expr><call><name>secp256k1_fe_normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_normalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_get_b32</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>secp256k1_fe_get_b32</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>hashfp</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>secp256k1_scalar_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_MODULE_ECDH_MAIN_H */</comment>
</unit>
