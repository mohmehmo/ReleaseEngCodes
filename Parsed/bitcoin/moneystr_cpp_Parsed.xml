<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/util/moneystr.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/moneystr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatMoney</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Note: not using straight sprintf here because we do NOT want</comment>
    <comment type="line">// localized number formatting.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n_abs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><name>n</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>quotient</name> <init>= <expr><name>n_abs</name><operator>/</operator><name>COIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>remainder</name> <init>= <expr><name>n_abs</name><operator>%</operator><name>COIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name> <init>= <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%d.%08d"</literal></expr></argument>, <argument><expr><name>quotient</name></expr></argument>, <argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Right-trim excess zeros before the decimal point:</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nTrim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name>IsDigit</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>++</operator><name>nTrim</name></expr>;</expr_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><name>nTrim</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>nTrim</name></expr></argument>, <argument><expr><name>nTrim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>ParseMoney</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>nRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>ParseMoney</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nRet</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ParseMoney</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pszIn</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>nRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strWhole</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nUnits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pszIn</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>IsSpace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>nMult</name> <init>= <expr><name>COIN</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name>IsDigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>nMult</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nUnits</name> <operator>+=</operator> <name>nMult</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>nMult</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IsSpace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsDigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>strWhole</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>strWhole</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSpace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <if_stmt><if>if <condition>(<expr><call><name><name>strWhole</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// guard against 63 bit overflow</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nUnits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nUnits</name></expr></argument> &gt;</argument_list></name> <name>COIN</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nWhole</name> <init>= <expr><call><name>atoi64</name><argument_list>(<argument><expr><name>strWhole</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValue</name> <init>= <expr><name>nWhole</name><operator>*</operator><name>COIN</name> <operator>+</operator> <name>nUnits</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>nRet</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
