<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/bench.cpp"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>ConsolePrinter</name><operator>::</operator><name>header</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"# Benchmark, evals, iterations, total, min, max, median"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>ConsolePrinter</name><operator>::</operator><name>result</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>results</name> <init>= <expr><name><name>state</name><operator>.</operator><name>m_elapsed_results</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>results</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>results</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>total</name> <init>= <expr><name><name>state</name><operator>.</operator><name>m_num_iters</name></name> <operator>*</operator> <call><name><name>std</name><operator>::</operator><name>accumulate</name></name><argument_list>(<argument><expr><call><name><name>results</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>results</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>front</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>back</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>median</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>results</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>front</name> <operator>=</operator> <call><name><name>results</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>back</name> <operator>=</operator> <call><name><name>results</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>mid</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>median</name> <operator>=</operator> <name><name>results</name><index>[<expr><name>mid</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>median</name> <operator>=</operator> <operator>(</operator><name><name>results</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>+</operator> <name><name>results</name><index>[<expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>state</name><operator>.</operator><name>m_name</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>.</operator><name>m_num_evals</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>.</operator><name>m_num_iters</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name>total</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name>front</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name>back</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name>median</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>ConsolePrinter</name><operator>::</operator><name>footer</name></name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
<constructor><name><name>benchmark</name><operator>::</operator><name>PlotlyPrinter</name><operator>::</operator><name>PlotlyPrinter</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>plotly_url</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>height</name></decl></parameter>)</parameter_list>
    <member_init_list>: <call><name>m_plotly_url</name><argument_list>(<argument><expr><name>plotly_url</name></expr></argument>)</argument_list></call>, <call><name>m_width</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call>, <call><name>m_height</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>PlotlyPrinter</name><operator>::</operator><name>header</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;html&gt;&lt;head&gt;"</literal>
              <operator>&lt;&lt;</operator> <literal type="string">"&lt;script src=\""</literal> <operator>&lt;&lt;</operator> <name>m_plotly_url</name> <operator>&lt;&lt;</operator> <literal type="string">"\"&gt;&lt;/script&gt;"</literal>
              <operator>&lt;&lt;</operator> <literal type="string">"&lt;/head&gt;&lt;body&gt;&lt;div id=\"myDiv\" style=\"width:"</literal> <operator>&lt;&lt;</operator> <name>m_width</name> <operator>&lt;&lt;</operator> <literal type="string">"px; height:"</literal> <operator>&lt;&lt;</operator> <name>m_height</name> <operator>&lt;&lt;</operator> <literal type="string">"px\"&gt;&lt;/div&gt;"</literal>
              <operator>&lt;&lt;</operator> <literal type="string">"&lt;script&gt; var data = ["</literal>
              <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>PlotlyPrinter</name><operator>::</operator><name>result</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>State</name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"{ "</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name>
              <operator>&lt;&lt;</operator> <literal type="string">"  name: '"</literal> <operator>&lt;&lt;</operator> <name><name>state</name><operator>.</operator><name>m_name</name></name> <operator>&lt;&lt;</operator> <literal type="string">"', "</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name>
              <operator>&lt;&lt;</operator> <literal type="string">"  y: ["</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>e</name> <range>: <expr><name><name>state</name><operator>.</operator><name>m_elapsed_results</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>prefix</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>e</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"],"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name>
              <operator>&lt;&lt;</operator> <literal type="string">"  boxpoints: 'all', jitter: 0.3, pointpos: 0, type: 'box',"</literal>
              <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name>
              <operator>&lt;&lt;</operator> <literal type="string">"},"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>PlotlyPrinter</name><operator>::</operator><name>footer</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"]; var layout = { showlegend: false, yaxis: { rangemode: 'tozero', autorange: true } };"</literal>
              <operator>&lt;&lt;</operator> <literal type="string">"Plotly.newPlot('myDiv', data, layout);"</literal>
              <operator>&lt;&lt;</operator> <literal type="string">"&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;"</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name><name>benchmark</name><operator>::</operator><name>BenchRunner</name><operator>::</operator><name>BenchmarkMap</name></name><modifier>&amp;</modifier></type> <name><name>benchmark</name><operator>::</operator><name>BenchRunner</name><operator>::</operator><name>benchmarks</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>Bench</name></expr></argument>&gt;</argument_list></name></type> <name>benchmarks_map</name></decl>;</decl_stmt>
    <return>return <expr><name>benchmarks_map</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>benchmark</name><operator>::</operator><name>BenchRunner</name><operator>::</operator><name>BenchRunner</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>BenchFunction</name></name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num_iters_for_one_second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>benchmarks</name><argument_list>()</argument_list></call><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>Bench</name><argument_list>{<argument><expr><name>func</name></expr></argument>, <argument><expr><name>num_iters_for_one_second</name></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>benchmark</name><operator>::</operator><name>BenchRunner</name><operator>::</operator><name>RunAll</name></name><parameter_list>(<parameter><decl><type><name>Printer</name><modifier>&amp;</modifier></type> <name>printer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num_evals</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>scaling</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_list_only</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>std</name><operator>::</operator><name>ratio_less_equal</name><argument_list type="generic">&lt;<argument><expr><name><name>benchmark</name><operator>::</operator><name>clock</name><operator>::</operator><name>period</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>micro</name></name></expr></argument>&gt;</argument_list><operator>::</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"WARNING: Clock precision is worse than microsecond - benchmarks may be less accurate!\n"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">"WARNING: This is a debug build - may result in slower benchmarks.\n"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>regex</name></name></type> <name>reFilter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>smatch</name></name></type> <name>baseMatch</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>header</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>p</name> <range>: <expr><call><name>benchmarks</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>RegTestingSetup</name></type> <name>test</name><argument_list>{}</argument_list></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>witness_enabled</name><argument_list>{<argument><expr><macro><name>IsWitnessEnabled</name><argument_list>(<argument>::ChainActive().Tip()</argument>, <argument>Params().GetConsensus()</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>witness_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>std</name><operator>::</operator><name>regex_match</name></name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>baseMatch</name></expr></argument>, <argument><expr><name>reFilter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_iters</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>second</name><operator>.</operator><name>num_iters_for_one_second</name></name> <operator>*</operator> <name>scaling</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>num_iters</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>num_iters</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>State</name></type> <name>state</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>num_evals</name></expr></argument>, <argument><expr><name>num_iters</name></expr></argument>, <argument><expr><name>printer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_list_only</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>second</name><operator>.</operator><name>func</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>result</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>footer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>benchmark</name><operator>::</operator><name>State</name><operator>::</operator><name>UpdateTimer</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>benchmark</name><operator>::</operator><name>time_point</name></name></type> <name>current_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_start_time</name> <operator>!=</operator> <call><name>time_point</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>duration</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>diff</name> <init>= <expr><name>current_time</name> <operator>-</operator> <name>m_start_time</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>m_elapsed_results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>diff</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>m_num_iters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>m_elapsed_results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>m_num_evals</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>m_num_iters_left</name> <operator>=</operator> <name>m_num_iters</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
