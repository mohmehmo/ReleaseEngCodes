<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/consensus/consensus.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CONSENSUS_CONSENSUS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CONSENSUS_CONSENSUS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_BLOCK_SERIALIZED_SIZE</name> <init>= <expr><literal type="number">4000000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum allowed weight for a block, see BIP 141 (network rule) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_BLOCK_WEIGHT</name> <init>= <expr><literal type="number">4000000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** The maximum allowed number of signature check operations in a block (network rule) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name>MAX_BLOCK_SIGOPS_COST</name> <init>= <expr><literal type="number">80000</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>COINBASE_MATURITY</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>WITNESS_SCALE_FACTOR</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MIN_TRANSACTION_WEIGHT</name> <init>= <expr><name>WITNESS_SCALE_FACTOR</name> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 60 is the lower bound for the size of a valid serialized CTransaction</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>MIN_SERIALIZABLE_TRANSACTION_WEIGHT</name> <init>= <expr><name>WITNESS_SCALE_FACTOR</name> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 10 is the lower bound for the size of a serialized CTransaction</comment>

<comment type="block" format="doxygen">/** Flags for nSequence and nLockTime locks */</comment>
<comment type="block" format="doxygen">/** Interpret sequence numbers as relative lock-time constraints. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>LOCKTIME_VERIFY_SEQUENCE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Use GetMedianTimePast() instead of nTime for end point timestamp. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>LOCKTIME_MEDIAN_TIME_PAST</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CONSENSUS_CONSENSUS_H</comment>
</unit>
