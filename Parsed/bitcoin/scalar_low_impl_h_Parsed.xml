<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/scalar_low_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2015 Andrew Poelstra                                 *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_SCALAR_REPR_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_SCALAR_REPR_IMPL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scalar.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_even</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>a</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>a</name> <operator>&gt;&gt;</operator> <name>offset</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>secp256k1_scalar_get_bits_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>secp256k1_scalar_get_bits</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_check_overflow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><name>a</name> <operator>&gt;=</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>a</name> <operator>+</operator> <operator>*</operator><name>b</name><operator>)</operator> <operator>%</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>r</name> <operator>&lt;</operator> <operator>*</operator><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_cadd_bit</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name>bit</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><call><name>secp256k1_scalar_check_overflow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b32</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>overflow</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>base</name> <init>= <expr><literal type="number">0x100</literal> <operator>%</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
       <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>r</name> <operator>*</operator> <name>base</name><operator>)</operator> <operator>+</operator> <name><name>b32</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block">/* just deny overflow, it basically always happens */</comment>
    <if_stmt><if>if <condition>(<expr><name>overflow</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>overflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name><modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>*</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>EXHAUSTIVE_TEST_ORDER</name> <operator>-</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>*</operator><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_is_high</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>*</operator><name>a</name> <operator>&gt;</operator> <name>EXHAUSTIVE_TEST_ORDER</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_cond_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>secp256k1_scalar_negate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>a</name> <operator>*</operator> <operator>*</operator><name>b</name><operator>)</operator> <operator>%</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_shr_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><name>r</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>&gt;&gt;=</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>a</name> <operator>*</operator> <operator>*</operator><name>a</name><operator>)</operator> <operator>%</operator> <name>EXHAUSTIVE_TEST_ORDER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_scalar_split_128</name><parameter_list>(<parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r1</name></decl></parameter>, <parameter><decl><type><name>secp256k1_scalar</name> <modifier>*</modifier></type><name>r2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>r1</name> <operator>=</operator> <operator>*</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>r2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_scalar_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_scalar</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>*</operator><name>a</name> <operator>==</operator> <operator>*</operator><name>b</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_SCALAR_REPR_IMPL_H */</comment>
</unit>
