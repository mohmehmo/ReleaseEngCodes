<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/standard.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_STANDARD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_STANDARD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/interpreter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/variant.hpp&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_ACCEPT_DATACARRIER</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CKeyID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CScript</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** A reference to a CScript: the Hash160 of its serialization (see script.h) */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CScriptID</name> <range>: <expr><name>public</name> <name>uint160</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <call><name>CScriptID</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>CScriptID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>in</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>CScriptID</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint160</name><operator>&amp;</operator> <name>in</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>(<argument>in</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Default setting for nMaxDatacarrierBytes. 80 bytes of data, +1 for OP_RETURN,
 * +2 for the pushdata opcodes.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MAX_OP_RETURN_RELAY</name> <init>= <expr><literal type="number">83</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * A data carrying output is an unspendable output containing data. The script
 * type is designated as TX_NULL_DATA.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>fAcceptDatacarrier</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Maximum size of TX_NULL_DATA scripts that this node considers standard. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>nMaxDatacarrierBytes</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Mandatory script verification flags that all new blocks must comply with for
 * them to be valid. (but old blocks may not comply with) Currently just P2SH,
 * but in the future other flags may be added, such as a soft-fork to enforce
 * strict DER encoding.
 *
 * Failing one of these tests may trigger a DoS ban - see CheckInputs() for
 * details.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>MANDATORY_SCRIPT_VERIFY_FLAGS</name> <init>= <expr><name>SCRIPT_VERIFY_P2SH</name></expr></init></decl>;</decl_stmt>

<enum>enum <name>txnouttype</name>
<block>{
    <decl><name>TX_NONSTANDARD</name></decl>,
    <comment type="line">// 'standard' transaction types:</comment>
    <decl><name>TX_PUBKEY</name></decl>,
    <decl><name>TX_PUBKEYHASH</name></decl>,
    <decl><name>TX_SCRIPTHASH</name></decl>,
    <decl><name>TX_MULTISIG</name></decl>,
    <decl><name>TX_NULL_DATA</name></decl>, <comment type="line" format="doxygen">//!&lt; unspendable OP_RETURN script that carries data</comment>
    <decl><name>TX_WITNESS_V0_SCRIPTHASH</name></decl>,
    <decl><name>TX_WITNESS_V0_KEYHASH</name></decl>,
    <decl><name>TX_WITNESS_UNKNOWN</name></decl>, <comment type="line" format="doxygen">//!&lt; Only for Witness versions not already defined above</comment>
}</block>;</enum>

<decl_stmt><decl><type><name>class</name></type> <name>CNoDestination</name> <block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CNoDestination</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>CNoDestination</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CNoDestination</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>CNoDestination</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>PKHash</name></name></type> <range>: <expr><name>public</name> <name>uint160</name>
<block>{
    <expr><call><name>PKHash</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>PKHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint160</name><operator>&amp;</operator> <name>hash</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>(<argument>hash</argument>)</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>PKHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CPubKey</name><operator>&amp;</operator> <name>pubkey</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>using</name> <name>uint160</name><operator>::</operator><name>uint160</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ScriptHash</name></name></type> <range>: <expr><name>public</name> <name>uint160</name>
<block>{
    <expr><call><name>ScriptHash</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>ScriptHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint160</name><operator>&amp;</operator> <name>hash</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>(<argument>hash</argument>)</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>ScriptHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>using</name> <name>uint160</name><operator>::</operator><name>uint160</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>WitnessV0ScriptHash</name></name></type> <range>: <expr><name>public</name> <name>uint256</name>
<block>{
    <expr><call><name>WitnessV0ScriptHash</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uint256</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>WitnessV0ScriptHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>hash</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>uint256</name><argument_list>(<argument>hash</argument>)</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>WitnessV0ScriptHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>using</name> <name>uint256</name><operator>::</operator><name>uint256</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>WitnessV0KeyHash</name></name></type> <range>: <expr><name>public</name> <name>uint160</name>
<block>{
    <expr><call><name>WitnessV0KeyHash</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>()</argument_list></macro> <block>{}</block>
    <name>explicit</name> <call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint160</name><operator>&amp;</operator> <name>hash</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>uint160</name><argument_list>(<argument>hash</argument>)</argument_list></macro> <block>{}</block>
    <name>using</name> <name>uint160</name><operator>::</operator><name>uint160</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! CTxDestination subtype to encode any future Witness version</comment>
<struct>struct <name>WitnessUnknown</name>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>program</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>WitnessUnknown</name><operator>&amp;</operator> <name>w1</name><operator>,</operator> <specifier>const</specifier> <name>WitnessUnknown</name><operator>&amp;</operator> <name>w2</name><operator>)</operator> <block>{
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>w2</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>w2</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>std</name><operator>::</operator><call><name>equal</name><argument_list>(<argument><expr><name><name>w1</name><operator>.</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>w1</name><operator>.</operator><name>program</name></name> <operator>+</operator> <name><name>w1</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>w2</name><operator>.</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>

    <decl><name>friend</name> <name>bool</name> <name>operator</name><name/>&lt;<argument_list>(<argument><expr><specifier>const</specifier> <name>WitnessUnknown</name><operator>&amp;</operator> <name>w1</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>WitnessUnknown</name><operator>&amp;</operator> <name>w2</name></expr></argument>)</argument_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>w2</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>w2</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name><name>w2</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>w1</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name><name>w2</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>std</name><operator>::</operator><call><name>lexicographical_compare</name><argument_list>(<argument><expr><name><name>w1</name><operator>.</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>w1</name><operator>.</operator><name>program</name></name> <operator>+</operator> <name><name>w1</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>w2</name><operator>.</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>w2</name><operator>.</operator><name>program</name></name> <operator>+</operator> <name><name>w2</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl>
<decl/></struct>};

<comment type="block" format="doxygen">/**
 * A txout script template with a specific destination. It is either:
 *  * CNoDestination: no destination set
 *  * PKHash: TX_PUBKEYHASH destination (P2PKH)
 *  * ScriptHash: TX_SCRIPTHASH destination (P2SH)
 *  * WitnessV0ScriptHash: TX_WITNESS_V0_SCRIPTHASH destination (P2WSH)
 *  * WitnessV0KeyHash: TX_WITNESS_V0_KEYHASH destination (P2WPKH)
 *  * WitnessUnknown: TX_WITNESS_UNKNOWN destination (P2W???)
 *  A CTxDestination is the internal data type encoded in a bitcoin address
 */</comment>
<typedef>typedef <expr_stmt><expr><name>boost</name><operator>::</operator><name><name>variant</name><argument_list type="generic">&lt;<argument><expr><name>CNoDestination</name></expr></argument>, <argument><expr><name>PKHash</name></expr></argument>, <argument><expr><name>ScriptHash</name></expr></argument>, <argument><expr><name>WitnessV0ScriptHash</name></expr></argument>, <argument><expr><name>WitnessV0KeyHash</name></expr></argument>, <argument><expr><name>WitnessUnknown</name></expr></argument>&gt;</argument_list></name> <name>CTxDestination</name></expr>;</expr_stmt></typedef>

<comment type="block" format="doxygen">/** Check whether a CTxDestination is a CNoDestination. */</comment>
<function_decl><type><name>bool</name></type> <name>IsValidDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Get the name of a txnouttype as a C string, or nullptr if unknown. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetTxnOutputType</name><parameter_list>(<parameter><decl><type><name>txnouttype</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Parse a scriptPubKey and identify script type for standard scripts. If
 * successful, returns script type and parsed pubkeys or hashes, depending on
 * the type. For example, for a P2SH script, vSolutionsRet will contain the
 * script hash, for P2PKH it will contain the key hash, etc.
 *
 * @param[in]   scriptPubKey   Script to parse
 * @param[out]  vSolutionsRet  Vector of parsed pubkeys and hashes
 * @return                     The script type. TX_NONSTANDARD represents a failed solve.
 */</comment>
<decl_stmt><decl><type><name>txnouttype</name></type> <name>Solver</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKey</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vSolutionsRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Parse a standard scriptPubKey for the destination address. Assigns result to
 * the addressRet parameter and returns true if successful. For multisig
 * scripts, instead use ExtractDestinations. Currently only works for P2PK,
 * P2PKH, P2SH, P2WPKH, and P2WSH scripts.
 */</comment>
<function_decl><type><name>bool</name></type> <name>ExtractDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>CTxDestination</name><modifier>&amp;</modifier></type> <name>addressRet</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Parse a standard scriptPubKey with one or more destination addresses. For
 * multisig scripts, this populates the addressRet vector with the pubkey IDs
 * and nRequiredRet with the n required to spend. For other destinations,
 * addressRet is populated with a single value and nRequiredRet is set to 1.
 * Returns true if successful.
 *
 * Note: this function confuses destinations (a subset of CScripts that are
 * encodable as an address) with key identifiers (of keys involved in a
 * CScript), and its use should be phased out.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>ExtractDestinations</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKey</name></expr></argument>, <argument><expr><name>txnouttype</name><operator>&amp;</operator> <name>typeRet</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>addressRet</name></expr></argument>, <argument><expr><name>int</name><operator>&amp;</operator> <name>nRequiredRet</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Generate a Bitcoin scriptPubKey for the given CTxDestination. Returns a P2PKH
 * script for a CKeyID destination, a P2SH script for a CScriptID, and an empty
 * script for CNoDestination.
 */</comment>
<function_decl><type><name>CScript</name></type> <name>GetScriptForDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a P2PK script for the given pubkey. */</comment>
<function_decl><type><name>CScript</name></type> <name>GetScriptForRawPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Generate a multisig script. */</comment>
<decl_stmt><decl><type><name>CScript</name></type> <name>GetScriptForMultisig</name><argument_list>(<argument><expr><name>int</name> <name>nRequired</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>keys</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Generate a pay-to-witness script for the given redeem script. If the redeem
 * script is P2PK or P2PKH, this returns a P2WPKH script, otherwise it returns a
 * P2WSH script.
 *
 * TODO: replace calls to GetScriptForWitness with GetScriptForDestination using
 * the various witness-specific CTxDestination subtypes.
 */</comment>
<function_decl><type><name>CScript</name></type> <name>GetScriptForWitness</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemscript</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_STANDARD_H</comment>
</unit>
