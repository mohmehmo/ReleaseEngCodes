<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/transactionrecord.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_TRANSACTIONRECORD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_TRANSACTIONRECORD_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>
<struct_decl>struct <name>WalletTx</name>;</struct_decl>
<struct_decl>struct <name>WalletTxStatus</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** UI model for transaction status. The transaction status is the part of a transaction that will change over time.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionStatus</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>TransactionStatus</name><argument_list>()</argument_list></call><operator>:</operator>
        <call><name>countsForBalance</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sortKey</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
        <expr><call><name>matures_in</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>status</name><argument_list>(<argument><expr><name>Unconfirmed</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>depth</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>open_for</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>cur_num_blocks</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro>
    <expr><block>{ }</block>

    enum <name>Status</name> <block>{
        <expr><name>Confirmed</name></expr>,          <comment type="block" format="doxygen">/**&lt; Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/</comment>
        <comment type="line" format="doxygen">/// Normal (sent/received) transactions</comment>
        <expr><name>OpenUntilDate</name></expr>,      <comment type="block" format="doxygen">/**&lt; Transaction not yet final, waiting for date */</comment>
        <expr><name>OpenUntilBlock</name></expr>,     <comment type="block" format="doxygen">/**&lt; Transaction not yet final, waiting for block */</comment>
        <expr><name>Unconfirmed</name></expr>,        <comment type="block" format="doxygen">/**&lt; Not yet mined into a block **/</comment>
        <expr><name>Confirming</name></expr>,         <comment type="block" format="doxygen">/**&lt; Confirmed, but waiting for the recommended number of confirmations **/</comment>
        <expr><name>Conflicted</name></expr>,         <comment type="block" format="doxygen">/**&lt; Conflicts with other transaction or mempool **/</comment>
        <expr><name>Abandoned</name></expr>,          <comment type="block" format="doxygen">/**&lt; Abandoned from the wallet **/</comment>
        <comment type="line" format="doxygen">/// Generated (mined) transactions</comment>
        <expr><name>Immature</name></expr>,           <comment type="block" format="doxygen">/**&lt; Mined but waiting for maturity */</comment>
        <expr><name>NotAccepted</name></expr>         <comment type="block" format="doxygen">/**&lt; Mined but not accepted */</comment>
    }</block></expr>;</expr_stmt>

    <comment type="line" format="doxygen">/// Transaction counts towards available balance</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>countsForBalance</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">/// Sorting key based on status</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sortKey</name></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** @name Generated (mined) transactions
       @{*/</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>matures_in</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**@}*/</comment>

    <comment type="block" format="doxygen">/** @name Reported status
       @{*/</comment>
    <decl_stmt><decl><type><name>Status</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>open_for</name></decl>;</decl_stmt> <comment type="block" format="doxygen">/**&lt; Timestamp if status==OpenUntilDate, otherwise number
                      of additional blocks that need to be mined before
                      finalization */</comment>
    <comment type="block" format="doxygen">/**@}*/</comment>

    <comment type="block" format="doxygen">/** Current number of blocks (to know whether cached status is still valid) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>cur_num_blocks</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>needsUpdate</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** UI model for a transaction. A core transaction can be represented by multiple UI transactions if it has
    multiple outputs.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionRecord</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <enum>enum <name>Type</name>
    <block>{
        <decl><name>Other</name></decl>,
        <decl><name>Generated</name></decl>,
        <decl><name>SendToAddress</name></decl>,
        <decl><name>SendToOther</name></decl>,
        <decl><name>RecvWithAddress</name></decl>,
        <decl><name>RecvFromOther</name></decl>,
        <decl><name>SendToSelf</name></decl>
    }</block>;</enum>

    <comment type="block" format="doxygen">/** Number of confirmation recommended for accepting a transaction */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RecommendedNumConfirmations</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TransactionRecord</name><argument_list>()</argument_list></call><operator>:</operator>
            <call><name>hash</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>address</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>debit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>credit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>idx</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr><block>{
    }</block>

    <macro><name>TransactionRecord</name><argument_list>(<argument>uint256 _hash</argument>, <argument>qint64 _time</argument>)</argument_list></macro><operator>:</operator>
            <call><name>hash</name><argument_list>(<argument><expr><name>_hash</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>time</name><argument_list>(<argument><expr><name>_time</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>Other</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>address</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>debit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <expr><call><name>credit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>idx</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr><block>{
    }</block>

    <macro><name>TransactionRecord</name><argument_list>(<argument>uint256 _hash</argument>, <argument>qint64 _time</argument>,
                <argument>Type _type</argument>, <argument>const std::string &amp;_address</argument>,
                <argument>const CAmount&amp; _debit</argument>, <argument>const CAmount&amp; _credit</argument>)</argument_list></macro><operator>:</operator>
            <call><name>hash</name><argument_list>(<argument><expr><name>_hash</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>time</name><argument_list>(<argument><expr><name>_time</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>type</name><argument_list>(<argument><expr><name>_type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>address</name><argument_list>(<argument><expr><name>_address</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>debit</name><argument_list>(<argument><expr><name>_debit</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>credit</name><argument_list>(<argument><expr><name>_credit</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <macro><name>idx</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr><block>{
    }</block>

    <comment type="block" format="doxygen">/** Decompose CWallet transaction to model transaction records.
     */</comment>
    <specifier>static</specifier> <name>bool</name> <call><name>showTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>TransactionRecord</name></expr></argument>&gt;</argument_list></name></type> <name>decomposeTransaction</name><argument_list>(<argument><expr><specifier>const</specifier> <name>interfaces</name><operator>::</operator><name>WalletTx</name><operator>&amp;</operator> <name>wtx</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** @name Immutable transaction attributes
      @{*/</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>address</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>debit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>credit</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**@}*/</comment>

    <comment type="block" format="doxygen">/** Subtransaction index, for sort key */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Status: can change with block chain update */</comment>
    <decl_stmt><decl><type><name>TransactionStatus</name></type> <name>status</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Whether the transaction was sent/received with a watch-only address */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>involvesWatchAddress</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Return the unique identifier for this transaction (part) */</comment>
    <expr_stmt><expr><name>QString</name> <macro><name>getTxHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Return the output index of the subtransaction  */</comment>
    <expr_stmt><expr><name>int</name> <macro><name>getOutputIndex</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Update status from core wallet tx.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>updateStatus</name><argument_list>(<argument><expr><specifier>const</specifier> <name>interfaces</name><operator>::</operator><name>WalletTxStatus</name><operator>&amp;</operator> <name>wtx</name></expr></argument>, <argument><expr><name>int</name> <name>numBlocks</name></expr></argument>, <argument><expr><name>int64_t</name> <name>block_time</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Return whether a status update is needed.
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>statusUpdateNeeded</name><argument_list>(<argument><expr><name>int</name> <name>numBlocks</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_TRANSACTIONRECORD_H</comment>
</unit>
