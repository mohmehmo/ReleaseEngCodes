<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/base58.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;base58.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Base58Encode</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>array</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>buff</name> <init>= <expr><block>{
        <expr><block>{
            <expr><literal type="number">17</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">147</literal></expr>,
            <expr><literal type="number">227</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">90</literal></expr>,
            <expr><literal type="number">200</literal></expr>, <expr><literal type="number">24</literal></expr>
        }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EncodeBase58</name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>buff</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Base58CheckEncode</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>array</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>buff</name> <init>= <expr><block>{
        <expr><block>{
            <expr><literal type="number">17</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">147</literal></expr>,
            <expr><literal type="number">227</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">90</literal></expr>,
            <expr><literal type="number">200</literal></expr>, <expr><literal type="number">24</literal></expr>
        }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>buff</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buff</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>EncodeBase58Check</name><argument_list>(<argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>Base58Decode</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>addr</name> <init>= <expr><literal type="string">"17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vch</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>DecodeBase58</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>


<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>Base58Encode</name></expr></argument>, <argument><expr><literal type="number">470</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>Base58CheckEncode</name></expr></argument>, <argument><expr><literal type="number">320</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>Base58Decode</name></expr></argument>, <argument><expr><literal type="number">800</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
