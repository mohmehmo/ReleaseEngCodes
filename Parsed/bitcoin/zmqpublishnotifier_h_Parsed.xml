<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/zmq/zmqpublishnotifier.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqabstractnotifier.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQAbstractPublishNotifier</name> <range>: <expr><name>public</name> <name>CZMQAbstractNotifier</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>uint32_t</name> <name>nSequence</name> <block>{<expr><literal type="number">0U</literal></expr>}</block></expr>; <comment type="line" format="doxygen">//!&lt; upcounting per message sequence number</comment>

<expr><name>public</name><operator>:</operator>

    <comment type="block">/* send zmq multipart message
       parts:
          * command
          * data
          * message sequence number
    */</comment>
    <name>bool</name> <macro><name>SendMessage</name><argument_list>(<argument>const char *command</argument>, <argument>const void* data</argument>, <argument>size_t size</argument>)</argument_list></macro></expr>;

    <expr><name>bool</name> <macro><name>Initialize</name><argument_list>(<argument>void *pcontext</argument>)</argument_list></macro> <name>override</name></expr>;
    <expr><name>void</name> <macro><name>Shutdown</name><argument_list>()</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQPublishHashBlockNotifier</name> <range>: <expr><name>public</name> <name>CZMQAbstractPublishNotifier</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>bool</name> <macro><name>NotifyBlock</name><argument_list>(<argument>const CBlockIndex *pindex</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQPublishHashTransactionNotifier</name> <range>: <expr><name>public</name> <name>CZMQAbstractPublishNotifier</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>bool</name> <macro><name>NotifyTransaction</name><argument_list>(<argument>const CTransaction &amp;transaction</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQPublishRawBlockNotifier</name> <range>: <expr><name>public</name> <name>CZMQAbstractPublishNotifier</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>bool</name> <macro><name>NotifyBlock</name><argument_list>(<argument>const CBlockIndex *pindex</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CZMQPublishRawTransactionNotifier</name> <range>: <expr><name>public</name> <name>CZMQAbstractPublishNotifier</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>bool</name> <macro><name>NotifyTransaction</name><argument_list>(<argument>const CTransaction &amp;transaction</argument>)</argument_list></macro> <name>override</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H</comment>
</unit>
