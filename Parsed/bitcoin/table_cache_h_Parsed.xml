<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/table_cache.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// Thread-safe (provides internal synchronization)</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_TABLE_CACHE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_TABLE_CACHE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/dbformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>TableCache</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>TableCache</name><argument_list>(<argument>const std::string&amp; dbname</argument>, <argument>const Options* options</argument>, <argument>int entries</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>TableCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Return an iterator for the specified file number (the corresponding</comment>
  <comment type="line">// file length must be exactly "file_size" bytes).  If "tableptr" is</comment>
  <comment type="line">// non-NULL, also sets "*tableptr" to point to the Table object</comment>
  <comment type="line">// underlying the returned iterator, or NULL if no Table object underlies</comment>
  <comment type="line">// the returned iterator.  The returned "*tableptr" object is owned by</comment>
  <comment type="line">// the cache and should not be deleted, and is valid for as long as the</comment>
  <comment type="line">// returned iterator is live.</comment>
  <function_decl><type><name>Iterator</name><modifier>*</modifier></type> <name>NewIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
                        <parameter><decl><type><name>uint64_t</name></type> <name>file_number</name></decl></parameter>,
                        <parameter><decl><type><name>uint64_t</name></type> <name>file_size</name></decl></parameter>,
                        <parameter><decl><type><name>Table</name><modifier>*</modifier><modifier>*</modifier></type> <name>tableptr</name> <init>= <expr><name>NULL</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// If a seek to internal key "k" in specified file finds an entry,</comment>
  <comment type="line">// call (*handle_result)(arg, found_key, found_value).</comment>
  <function_decl><type><name>Status</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReadOptions</name><modifier>&amp;</modifier></type> <name>options</name></decl></parameter>,
             <parameter><decl><type><name>uint64_t</name></type> <name>file_number</name></decl></parameter>,
             <parameter><decl><type><name>uint64_t</name></type> <name>file_size</name></decl></parameter>,
             <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>,
             <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
             <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handle_result</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

  <comment type="line">// Evict any entry for the specified file number</comment>
  <function_decl><type><name>void</name></type> <name>Evict</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>file_number</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>Env</name><modifier>*</modifier> <specifier>const</specifier></type> <name>env_</name></decl>;</decl_stmt>
  <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>dbname_</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Options</name><modifier>*</modifier></type> <name>options_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Cache</name><modifier>*</modifier></type> <name>cache_</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Status</name></type> <name>FindTable</name><argument_list>(<argument><expr><name>uint64_t</name> <name>file_number</name></expr></argument>, <argument><expr><name>uint64_t</name> <name>file_size</name></expr></argument>, <argument><expr><name>Cache</name><operator>::</operator><name>Handle</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_TABLE_CACHE_H_</comment>
</unit>
