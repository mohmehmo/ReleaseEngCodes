<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/pow_tests.cpp"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pow.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>pow_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="block">/* Test calculation of next difficulty target with no constraints applying */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_next_work</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastRetargetTime</name> <init>= <expr><literal type="number">1261130161</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Block #30240</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name></type> <name>pindexLast</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">32255</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1262152739</literal></expr>;</expr_stmt>  <comment type="line">// Block #32255</comment>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x1d00ffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNextWorkRequired</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pindexLast</name></expr></argument>, <argument><expr><name>nLastRetargetTime</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1d00d86aU</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test the constraint on the upper bound for next work */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_next_work_pow_limit</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastRetargetTime</name> <init>= <expr><literal type="number">1231006505</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Block #0</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name></type> <name>pindexLast</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">2015</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1233061996</literal></expr>;</expr_stmt>  <comment type="line">// Block #2015</comment>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x1d00ffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNextWorkRequired</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pindexLast</name></expr></argument>, <argument><expr><name>nLastRetargetTime</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1d00ffffU</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test the constraint on the lower bound for actual time taken */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_next_work_lower_limit_actual</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastRetargetTime</name> <init>= <expr><literal type="number">1279008237</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Block #66528</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name></type> <name>pindexLast</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">68543</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1279297671</literal></expr>;</expr_stmt>  <comment type="line">// Block #68543</comment>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x1c05a3f4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNextWorkRequired</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pindexLast</name></expr></argument>, <argument><expr><name>nLastRetargetTime</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1c0168fdU</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test the constraint on the upper bound for actual time taken */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>get_next_work_upper_limit_actual</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nLastRetargetTime</name> <init>= <expr><literal type="number">1263163443</literal></expr></init></decl>;</decl_stmt> <comment type="line">// NOTE: Not an actual block time</comment>
    <decl_stmt><decl><type><name>CBlockIndex</name></type> <name>pindexLast</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">46367</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <literal type="number">1269211443</literal></expr>;</expr_stmt>  <comment type="line">// Block #46367</comment>
    <expr_stmt><expr><name><name>pindexLast</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">0x1c387f6f</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>CalculateNextWorkRequired</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pindexLast</name></expr></argument>, <argument><expr><name>nLastRetargetTime</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1d00e1fdU</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>CheckProofOfWork_test_negative_target</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>consensus</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBits</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nBits</name> <operator>=</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetCompact</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hash</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><literal type="string">"0x1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>consensus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>CheckProofOfWork_test_overflow_target</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>consensus</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBits</name> <init>= <expr><operator>~</operator><literal type="number">0x00800000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hash</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><literal type="string">"0x1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>consensus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>CheckProofOfWork_test_too_easy_target</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>consensus</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>nBits_arith</name> <init>= <expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nBits_arith</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nBits</name> <operator>=</operator> <call><name><name>nBits_arith</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hash</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><literal type="string">"0x1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>consensus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>CheckProofOfWork_test_biger_hash_than_target</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>consensus</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>hash_arith</name> <init>= <expr><call><name>UintToArith256</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nBits</name> <operator>=</operator> <call><name><name>hash_arith</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash_arith</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <comment type="line">// hash &gt; nBits</comment>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>ArithToUint256</name><argument_list>(<argument><expr><name>hash_arith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>consensus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>CheckProofOfWork_test_zero_target</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>consensus</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>hash_arith</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>nBits</name> <operator>=</operator> <call><name><name>hash_arith</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>ArithToUint256</name><argument_list>(<argument><expr><name>hash_arith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>consensus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>GetBlockProofEquivalentTime_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CBlockIndex</name></expr></argument>&gt;</argument_list></name></type> <name>blocks</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pprev</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">nullptr</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nHeight</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTime</name> <operator>=</operator> <literal type="number">1269211443</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nPowTargetSpacing</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nBits</name> <operator>=</operator> <literal type="number">0x207fffff</literal></expr>;</expr_stmt> <comment type="block">/* target 0x7fffff000... */</comment>
        <expr_stmt><expr><name><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nChainWork</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nChainWork</name> <operator>+</operator> <call><name>GetBlockProof</name><argument_list>(<argument><expr><name><name>blocks</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>&amp;</operator><name><name>blocks</name><index>[<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>&amp;</operator><name><name>blocks</name><index>[<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>p3</name> <init>= <expr><operator>&amp;</operator><name><name>blocks</name><index>[<expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>tdiff</name> <init>= <expr><call><name>GetBlockProofEquivalentTime</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>, <argument><expr><operator>*</operator><name>p2</name></expr></argument>, <argument><expr><operator>*</operator><name>p3</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>tdiff</name></expr></argument>, <argument><expr><call><name><name>p1</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>p2</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
