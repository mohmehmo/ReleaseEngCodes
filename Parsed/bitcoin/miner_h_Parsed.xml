<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/miner.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_MINER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_MINER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/multi_index_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/multi_index/ordered_index.hpp&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CChainParams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CScript</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>Consensus</name> <block>{<block_content> <struct_decl>struct <name>Params</name>;</struct_decl> </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_PRINTPRIORITY</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct <name>CBlockTemplate</name>
<block>{
    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>&gt;</argument_list></name> <name>vTxFees</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <name>vTxSigOpsCost</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>vchCoinbaseCommitment</name></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// Container for tracking updates to ancestor feerate as we include (parent)</comment>
<comment type="line">// transactions in a block</comment>
<struct>struct <name>CTxMemPoolModifiedEntry</name> <block>{
    <decl_stmt><decl><type><name>explicit</name></type> <name>CTxMemPoolModifiedEntry</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>entry</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <expr_stmt><expr><name>iter</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSizeWithAncestors</name> <operator>=</operator> <call><name><name>entry</name><operator>-&gt;</operator><name>GetSizeWithAncestors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nModFeesWithAncestors</name> <operator>=</operator> <call><name><name>entry</name><operator>-&gt;</operator><name>GetModFeesWithAncestors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSigOpCostWithAncestors</name> <operator>=</operator> <call><name><name>entry</name><operator>-&gt;</operator><name>GetSigOpCostWithAncestors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name>int64_t</name> <macro><name>GetModifiedFee</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>iter</name><operator>-&gt;</operator><name>GetModifiedFee</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>GetSizeWithAncestors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nSizeWithAncestors</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>CAmount</name> <macro><name>GetModFeesWithAncestors</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nModFeesWithAncestors</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>size_t</name> <macro><name>GetTxSize</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>iter</name><operator>-&gt;</operator><name>GetTxSize</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>CTransaction</name><operator>&amp;</operator> <macro><name>GetTx</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>iter</name><operator>-&gt;</operator><name>GetTx</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>iter</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nSizeWithAncestors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nModFeesWithAncestors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSigOpCostWithAncestors</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/** Comparator for CTxMemPool::txiter objects.
 *  It simply compares the internal memory address of the CTxMemPoolEntry object
 *  pointed to. This means it has no meaning, and is only useful for using them
 *  as key in other indexes.
 */</comment>
<struct>struct <name>CompareCTxMemPoolIter</name> <block>{
    <expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>txiter</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>txiter</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator> <operator>&lt;</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>
}</block>;</struct>

<struct>struct <name>modifiedentry_iter</name> <block>{
    <typedef>typedef <expr_stmt><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>result_type</name></expr>;</expr_stmt></typedef>
    <expr_stmt><expr><name>result_type</name> <macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><specifier>const</specifier> <name>CTxMemPoolModifiedEntry</name> <operator>&amp;</operator><name>entry</name><operator>)</operator> <specifier>const</specifier>
    <block>{
        <return>return <expr><name><name>entry</name><operator>.</operator><name>iter</name></name></expr>;</return>
    }</block></expr></expr_stmt>
}</block>;</struct>

<comment type="line">// A comparator that sorts transactions based on number of ancestors.</comment>
<comment type="line">// This is sufficient to sort an ancestor package in an order that is valid</comment>
<comment type="line">// to appear in a block.</comment>
<struct>struct <name>CompareTxIterByAncestorCount</name> <block>{
    <expr_stmt><expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>txiter</name> <operator>&amp;</operator><name>a</name><operator>,</operator> <specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>txiter</name> <operator>&amp;</operator><name>b</name><operator>)</operator> <specifier>const</specifier>
    <block>{
        <if_stmt><if>if <condition>(<expr><call><name><name>a</name><operator>-&gt;</operator><name>GetCountWithAncestors</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>b</name><operator>-&gt;</operator><name>GetCountWithAncestors</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>a</name><operator>-&gt;</operator><name>GetCountWithAncestors</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>-&gt;</operator><name>GetCountWithAncestors</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
        <return>return <expr><name>CTxMemPool</name><operator>::</operator><call><call><name>CompareIteratorByHash</name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block>
<decl/></struct>};

<typedef>typedef <expr_stmt><expr><name>boost</name><operator>::</operator><name><name>multi_index_container</name><argument_list type="generic">&lt;
    <argument><expr><name>CTxMemPoolModifiedEntry</name></expr></argument>,
    <argument><expr><name>boost</name><operator>::</operator><name>multi_index</name><operator>::</operator><name><name>indexed_by</name><argument_list type="generic">&lt;
        <argument><expr><name>boost</name><operator>::</operator><name>multi_index</name><operator>::</operator><name><name>ordered_unique</name><argument_list type="generic">&lt;
            <argument><expr><name>modifiedentry_iter</name></expr></argument>,
            <argument><expr><name>CompareCTxMemPoolIter</name></expr></argument>
        &gt;</argument_list></name></expr></argument>,
        <comment type="line">// sorted by modified ancestor fee rate</comment>
        <argument><expr><name>boost</name><operator>::</operator><name>multi_index</name><operator>::</operator><name><name>ordered_non_unique</name><argument_list type="generic">&lt;
            <comment type="line">// Reuse same tag from CTxMemPool's similar index</comment>
            <argument><expr><name>boost</name><operator>::</operator><name>multi_index</name><operator>::</operator><name><name>tag</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name></expr></argument>,
            <argument><expr><name>boost</name><operator>::</operator><name>multi_index</name><operator>::</operator><name><name>identity</name><argument_list type="generic">&lt;<argument><expr><name>CTxMemPoolModifiedEntry</name></expr></argument>&gt;</argument_list></name></expr></argument>,
            <argument><expr><name>CompareTxMemPoolEntryByAncestorFee</name></expr></argument>
        &gt;</argument_list></name></expr></argument>
    &gt;</argument_list></name></expr></argument>
&gt;</argument_list></name> <name>indexed_modified_transaction_set</name></expr>;</expr_stmt></typedef>

<typedef>typedef <expr_stmt><expr><name>indexed_modified_transaction_set</name><operator>::</operator><name><name>nth_index</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>::</operator><name>iterator</name> <name>modtxiter</name></expr>;</expr_stmt></typedef>
<typedef>typedef <expr_stmt><expr><name>indexed_modified_transaction_set</name><operator>::</operator><name><name>index</name><argument_list type="generic">&lt;<argument><expr><name>ancestor_score</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name><operator>::</operator><name>iterator</name> <name>modtxscoreiter</name></expr>;</expr_stmt></typedef>

<struct>struct <name>update_for_parent_inclusion</name>
<block>{
    <decl_stmt><decl><type><name>explicit</name></type> <name>update_for_parent_inclusion</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>it</name></expr></argument>)</argument_list> <range>: <macro><name>iter</name><argument_list>(<argument>it</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>void</name> <macro><name>operator</name><argument_list>()</argument_list></macro> <operator>(</operator><name>CTxMemPoolModifiedEntry</name> <operator>&amp;</operator><name>e</name><operator>)</operator>
    <block>{
        <expr><name><name>e</name><operator>.</operator><name>nModFeesWithAncestors</name></name> <operator>-=</operator> <call><name><name>iter</name><operator>-&gt;</operator><name>GetFee</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>e</name><operator>.</operator><name>nSizeWithAncestors</name></name> <operator>-=</operator> <call><name><name>iter</name><operator>-&gt;</operator><name>GetTxSize</name></name><argument_list>()</argument_list></call></expr>;
        <expr><name><name>e</name><operator>.</operator><name>nSigOpCostWithAncestors</name></name> <operator>-=</operator> <call><name><name>iter</name><operator>-&gt;</operator><name>GetSigOpCost</name></name><argument_list>()</argument_list></call></expr>;
    }</block>

    <name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>iter</name></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/** Generate a new block, without valid proof-of-work */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BlockAssembler</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <comment type="line">// The constructed block template</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name> <name>pblocktemplate</name></expr>;</expr_stmt>
    <comment type="line">// A convenience pointer that always refers to the CBlock in pblocktemplate</comment>
    <decl_stmt><decl><type><name>CBlock</name><modifier>*</modifier></type> <name>pblock</name></decl>;</decl_stmt>

    <comment type="line">// Configuration parameters for the block size</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fIncludeWitness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBlockMaxWeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>blockMinFeeRate</name></decl>;</decl_stmt>

    <comment type="line">// Information on the current status of the block</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nBlockWeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nBlockTx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nBlockSigOpsCost</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nFees</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>CTxMemPool</name><operator>::</operator><name>setEntries</name> <name>inBlock</name></expr>;</expr_stmt>

    <comment type="line">// Chain context for the block</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nLockTimeCutoff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>chainparams</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <struct>struct <name>Options</name> <block>{
        <expr_stmt><expr><call><name>Options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>nBlockMaxWeight</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CFeeRate</name></type> <name>blockMinFeeRate</name></decl>;</decl_stmt>
    }</block>;</struct>

    <function_decl><type><name>explicit</name></type> <name>BlockAssembler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BlockAssembler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CChainParams</name><operator>&amp;</operator> <name>params</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Construct a new block template with coinbase to scriptPubKeyIn */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name> <call><name>CreateNewBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKeyIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>m_last_block_num_txs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>m_last_block_weight</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
    <comment type="line">// utility functions</comment>
    <comment type="block" format="doxygen">/** Clear the block's state and prepare for assembling a new block */</comment>
    <function_decl><type><name>void</name></type> <name>resetBlock</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/** Add a tx to the block */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>AddToBlock</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>iter</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Methods for how to add transactions to a block.</comment>
    <comment type="block" format="doxygen">/** Add transactions based on feerate including unconfirmed ancestors
      * Increments nPackagesSelected / nDescendantsUpdated with corresponding
      * statistics from the package selection (for logging statistics). */</comment>
    <function_decl><type><name>void</name></type> <name>addPackageTxs</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>nPackagesSelected</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>nDescendantsUpdated</name></decl></parameter>)</parameter_list> EXCLUSIVE_LOCKS_REQUIRED<parameter_list>(<parameter><decl><type><name><name>mempool</name><operator>.</operator><name>cs</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// helper functions for addPackageTxs()</comment>
    <comment type="block" format="doxygen">/** Remove confirmed (inBlock) entries from given set */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>onlyUnconfirmed</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>::</operator><name>setEntries</name><operator>&amp;</operator> <name>testSet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Test if a new package would "fit" in the block */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>TestPackage</name><argument_list>(<argument><expr><name>uint64_t</name> <name>packageSize</name></expr></argument>, <argument><expr><name>int64_t</name> <name>packageSigOpsCost</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Perform checks on each transaction in a package:
      * locktime, premature-witness, serialized size (if necessary)
      * These checks should always succeed, and they're here
      * only as an extra check in case of suboptimal node configuration */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>TestPackageTransactions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>setEntries</name><operator>&amp;</operator> <name>package</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Return true if given transaction from mapTx has already been evaluated,
      * or if the transaction's cached data in mapTx is incorrect. */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>SkipMapTxEntry</name><argument_list>(<argument><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name> <name>it</name></expr></argument>, <argument><expr><name>indexed_modified_transaction_set</name> <operator>&amp;</operator><name>mapModifiedTx</name></expr></argument>, <argument><expr><name>CTxMemPool</name><operator>::</operator><name>setEntries</name> <operator>&amp;</operator><name>failedTx</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Sort the package in an order that is valid to appear in a block */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>SortForBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>setEntries</name><operator>&amp;</operator> <name>package</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxMemPool</name><operator>::</operator><name>txiter</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sortedEntries</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Add descendants of given transactions to mapModifiedTx with ancestor
      * state updated assuming given transactions are inBlock. Returns number
      * of updated descendants. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>UpdatePackagesForAdded</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTxMemPool</name><operator>::</operator><name>setEntries</name><operator>&amp;</operator> <name>alreadyAdded</name></expr></argument>, <argument><expr><name>indexed_modified_transaction_set</name> <operator>&amp;</operator><name>mapModifiedTx</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>mempool</name><operator>.</operator><name>cs</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Modify the extranonce in a block */</comment>
<function_decl><type><name>void</name></type> <name>IncrementExtraNonce</name><parameter_list>(<parameter><decl><type><name>CBlock</name><modifier>*</modifier></type> <name>pblock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPrev</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>&amp;</modifier></type> <name>nExtraNonce</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int64_t</name></type> <name>UpdateTime</name><argument_list>(<argument><expr><name>CBlockHeader</name><operator>*</operator> <name>pblock</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Consensus</name><operator>::</operator><name>Params</name><operator>&amp;</operator> <name>consensusParams</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindexPrev</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_MINER_H</comment>
</unit>
