<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/init.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;init.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;banman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/sanity.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httprpc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpserver.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/blockfilterindex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/txindex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miner.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_permissions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_processing.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/feerate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/settings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/register.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scheduler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sigcache.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shutdown.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;timedata.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;torcontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/moneystr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/threadnames.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;walletinitinterface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cerrno&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/classification.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/replace.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/split.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/thread.hpp&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_ZMQ</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqabstractnotifier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqnotificationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqrpc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fFeeEstimatesInitialized</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_PROXYRANDOMIZE</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_REST_ENABLE</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_STOPAFTERBLOCKIMPORT</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Dump addresses to banlist.dat every 15 minutes (900s)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>int</name></type> <name>DUMP_BANS_INTERVAL</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="line">// Win32 LevelDB doesn't use filedescriptors, and the ones used for</comment>
<comment type="line">// accessing block files don't count towards the fd_set size limit</comment>
<comment type="line">// anyway.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_CORE_FILEDESCRIPTORS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_CORE_FILEDESCRIPTORS</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>FEE_ESTIMATES_FILENAME</name><init>=<expr><literal type="string">"fee_estimates.dat"</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * The PID file facilities.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>BITCOIN_PID_FILENAME</name> <init>= <expr><literal type="string">"bitcoind.pid"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>GetPidFile</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>AbsPathForConfigVal</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-pid"</literal></expr></argument>, <argument><expr><name>BITCOIN_PID_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>NODISCARD</name> <specifier>static</specifier> <name>bool</name></type> <name>CreatePidFile</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fsbridge</name><operator>::</operator><name>ofstream</name></name></type> <name>file</name><argument_list>{<argument><expr><macro><name>GetPidFile</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to create the PID file '%s': %s"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name>GetPidFile</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>strerror</name></name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line">// Shutdown</comment>
<comment type="line">//</comment>

<comment type="line">//</comment>
<comment type="line">// Thread management and startup/shutdown:</comment>
<comment type="line">//</comment>
<comment type="line">// The network-processing threads are all part of a thread group</comment>
<comment type="line">// created by AppInit() or the Qt main() function.</comment>
<comment type="line">//</comment>
<comment type="line">// A clean exit happens when StartShutdown() or the SIGTERM</comment>
<comment type="line">// signal handler sets ShutdownRequested(), which makes main thread's</comment>
<comment type="line">// WaitForShutdown() interrupts the thread group.</comment>
<comment type="line">// And then, WaitForShutdown() makes all other on-going threads</comment>
<comment type="line">// in the thread group join the main thread.</comment>
<comment type="line">// Shutdown() is then called to clean up database connections, and stop other</comment>
<comment type="line">// threads that should only be stopped after the main network-processing</comment>
<comment type="line">// threads have exited.</comment>
<comment type="line">//</comment>
<comment type="line">// Shutdown for Qt is very similar, only it uses a QTimer to detect</comment>
<comment type="line">// ShutdownRequested() getting set, and then does the normal Qt</comment>
<comment type="line">// shutdown thing.</comment>
<comment type="line">//</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>ECCVerifyHandle</name></expr></argument>&gt;</argument_list></name></type> <name>globalVerifyHandle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>boost</name><operator>::</operator><name>thread_group</name></name></type> <name>threadGroup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CScheduler</name></type> <name>scheduler</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Interrupt</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>InterruptHTTPServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InterruptHTTPRPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InterruptRPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InterruptREST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InterruptTorControl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InterruptMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>connman</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>Interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_txindex</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>g_txindex</name><operator>-&gt;</operator><name>Interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ForEachBlockFilterIndex</name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>BlockFilterIndex</name><modifier>&amp;</modifier></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>Interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>Shutdown</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: In progress...\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>CCriticalSection</name></type> <name>cs_Shutdown</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TRY_LOCK</name><argument_list>(<argument><expr><name>cs_Shutdown</name></expr></argument>, <argument><expr><name>lockShutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lockShutdown</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line" format="doxygen">/// Note: Shutdown() must be able to handle cases in which initialization failed part of the way,</comment>
    <comment type="line" format="doxygen">/// for example if the data directory was found to be locked.</comment>
    <comment type="line" format="doxygen">/// Be sure that anything that writes files or flushes caches only does this if the respective</comment>
    <comment type="line" format="doxygen">/// module was initialized.</comment>
    <expr_stmt><expr><call><name><name>util</name><operator>::</operator><name>ThreadRename</name></name><argument_list>(<argument><expr><literal type="string">"shutoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mempool</name><operator>.</operator><name>AddTransactionsUpdated</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>StopHTTPRPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>StopREST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>StopRPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>StopHTTPServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>StopMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Because these depend on each-other, we make sure that neither can be</comment>
    <comment type="line">// using the other before destroying them.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>peer_logic</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>UnregisterValidationInterface</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>peer_logic</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>connman</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_txindex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>g_txindex</name><operator>-&gt;</operator><name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ForEachBlockFilterIndex</name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>BlockFilterIndex</name><modifier>&amp;</modifier></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>index</name><operator>.</operator><name>Stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>StopTorControl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// After everything has been shut down, but before things get flushed, stop the</comment>
    <comment type="line">// CScheduler/checkqueue threadGroup</comment>
    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>interrupt_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>join_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// After the threads that potentially access these pointers have been stopped,</comment>
    <comment type="line">// destruct and reset all to nullptr.</comment>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>peer_logic</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>connman</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>banman</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g_txindex</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DestroyAllBlockFilterIndexes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>mempool</name><operator>.</operator><name>IsLoaded</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-persistmempool"</literal></expr></argument>, <argument><expr><name>DEFAULT_PERSIST_MEMPOOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>DumpMempool</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fFeeEstimatesInitialized</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>FlushUnconfirmed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>est_path</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <name>FEE_ESTIMATES_FILENAME</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>est_fileout</name><argument_list>(<argument><expr><call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>est_path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>est_fileout</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>est_fileout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Failed to write fee estimates to %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>est_path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>fFeeEstimatesInitialized</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// FlushStateToDisk generates a ChainStateFlushed callback, which we should avoid missing</comment>
    <comment type="line">//</comment>
    <comment type="line">// g_chainstate is referenced here directly (instead of ::ChainstateActive()) because it</comment>
    <comment type="line">// may not have been initialized yet.</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_chainstate</name> <operator>&amp;&amp;</operator> <call><name><name>g_chainstate</name><operator>-&gt;</operator><name>CanFlushToDisk</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>g_chainstate</name><operator>-&gt;</operator><name>ForceFlushStateToDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="line">// After there are no more peers/RPC left to give us new data which may generate</comment>
    <comment type="line">// CValidationInterface callbacks, flush them...</comment>
    <expr_stmt><expr><call><name>GetMainSignals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>FlushBackgroundCallbacks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Any future callbacks will be dropped. This should absolutely be safe - if</comment>
    <comment type="line">// missing a callback results in an unrecoverable situation, unclean shutdown</comment>
    <comment type="line">// would too. The only reason to do the above flushes is to let the wallet catch</comment>
    <comment type="line">// up with our current chain to avoid any strange pruning edge cases and make</comment>
    <comment type="line">// next startup faster by avoiding rescan.</comment>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>g_chainstate</name> <operator>&amp;&amp;</operator> <call><name><name>g_chainstate</name><operator>-&gt;</operator><name>CanFlushToDisk</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>g_chainstate</name><operator>-&gt;</operator><name>ForceFlushStateToDisk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g_chainstate</name><operator>-&gt;</operator><name>ResetCoinsViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>pblocktree</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_ZMQ</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>g_zmq_notification_interface</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>UnregisterValidationInterface</name><argument_list>(<argument><expr><name>g_zmq_notification_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator> <name>g_zmq_notification_interface</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>g_zmq_notification_interface</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <try>try <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fs</name><operator>::</operator><name>remove</name></name><argument_list>(<argument><expr><call><name>GetPidFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Unable to remove PID file: File does not exist\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>filesystem_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: Unable to remove PID file: %s\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name><name>fsbridge</name><operator>::</operator><name>get_filesystem_error_message</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>chain_clients</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UnregisterAllValidationInterfaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetMainSignals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>UnregisterBackgroundSignalScheduler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>globalVerifyHandle</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ECC_Stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>mempool</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>node</name><operator>.</operator><name>mempool</name></name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: done\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Signal handlers are very limited in what they are allowed to do.
 * The execution context the handler is invoked in is not guaranteed,
 * so we restrict handler operations to just touching variables:
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleSIGTERM</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleSIGHUP</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_reopen_file</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>consoleCtrlHandler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>dwCtrlType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>registerSignalHandler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signal</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type>(<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sa</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sa</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>rpc_notify_block_change_connection</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>OnRPCStarted</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>rpc_notify_block_change_connection</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>NotifyBlockTip_connect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>RPCNotifyBlockChange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OnRPCStopped</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>rpc_notify_block_change_connection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RPCNotifyBlockChange</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>g_best_block_cv</name><operator>.</operator><name>notify_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>RPC</name></name></expr></argument>, <argument><expr><literal type="string">"RPC stopped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetupServerArgs</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SetupHelpOptions</name><argument_list>(<argument><expr><name>gArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-help-debug"</literal></expr></argument>, <argument><expr><literal type="string">"Print help message with debugging options and exit"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// server-only for now</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>defaultBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>testnetBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>regtestBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>defaultChainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>testnetChainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>regtestChainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Hidden Options</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>hidden_args</name> <init>= <expr><block>{
        <expr><literal type="string">"-dbcrashratio"</literal></expr>, <expr><literal type="string">"-forcecompactdb"</literal></expr>,
        <comment type="line">// GUI args. These will be overwritten by SetupUIArgs for the GUI</comment>
        <expr><literal type="string">"-choosedatadir"</literal></expr>, <expr><literal type="string">"-lang=&lt;lang&gt;"</literal></expr>, <expr><literal type="string">"-min"</literal></expr>, <expr><literal type="string">"-resetguisettings"</literal></expr>, <expr><literal type="string">"-splash"</literal></expr>, <expr><literal type="string">"-uiplatform"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>, <argument><expr><literal type="string">"Print version and exit"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-alertnotify=&lt;cmd&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-assumevalid=&lt;hex&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)"</literal></expr></argument>, <argument><expr><call><name><name>defaultChainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>defaultAssumeValid</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testnetChainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>defaultAssumeValid</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocksdir=&lt;dir&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Specify directory to hold blocks subdirectory for *.dat files (default: &lt;datadir&gt;)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocknotify=&lt;cmd&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Execute command when the best block changes (%s in cmd is replaced by block hash)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockreconstructionextratxn=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Extra transactions to keep in memory for compact block reconstructions (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocksonly"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Whether to reject transactions from network peers. Transactions from the wallet, RPC and relay whitelisted inbound peers are not affected. (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCKSONLY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-conf=&lt;file&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)"</literal></expr></argument>, <argument><expr><name>BITCOIN_CONF_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir=&lt;dir&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Specify data directory"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dbbatchsize"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum database write batch size in bytes (default: %u)"</literal></expr></argument>, <argument><expr><name>nDefaultDbBatchSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dbcache=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum database cache size &lt;n&gt; MiB (%d to %d, default: %d). In addition, unused mempool memory is shared for this cache (see -maxmempool)."</literal></expr></argument>, <argument><expr><name>nMinDbCache</name></expr></argument>, <argument><expr><name>nMaxDbCache</name></expr></argument>, <argument><expr><name>nDefaultDbCache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-debuglogfile=&lt;file&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (-nodebuglogfile to disable; default: %s)"</literal></expr></argument>, <argument><expr><name>DEFAULT_DEBUGLOGFILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-feefilter"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Tell other nodes to filter invs to us by our mempool min fee (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_FEEFILTER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-includeconf=&lt;file&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Specify additional configuration file, relative to the -datadir path (only useable from configuration file, not command line)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-loadblock=&lt;file&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Imports blocks from external file on startup"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxmempool=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_MEMPOOL_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxorphantx=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Keep at most &lt;n&gt; unconnectable transactions in memory (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_ORPHAN_TRANSACTIONS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-mempoolexpiry=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MEMPOOL_EXPIRY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-minimumchainwork=&lt;hex&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)"</literal></expr></argument>, <argument><expr><call><name><name>defaultChainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>nMinimumChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testnetChainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>nMinimumChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-par=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)"</literal></expr></argument>,
        <argument><expr><operator>-</operator><call><name>GetNumCores</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAX_SCRIPTCHECK_THREADS</name></expr></argument>, <argument><expr><name>DEFAULT_SCRIPTCHECK_THREADS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-persistmempool"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Whether to save the mempool on shutdown and load on restart (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PERSIST_MEMPOOL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-pid=&lt;file&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)"</literal></expr></argument>, <argument><expr><name>BITCOIN_PID_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-prune=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. "</literal>
            <literal type="string">"Warning: Reverting this setting requires re-downloading the entire blockchain. "</literal>
            <literal type="string">"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, &gt;=%u = automatically prune block files to stay under the specified target size in MiB)"</literal></expr></argument>, <argument><expr><name>MIN_DISK_SPACE_FOR_BLOCK_FILES</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-reindex"</literal></expr></argument>, <argument><expr><literal type="string">"Rebuild chain state and block index from the blk*.dat files on disk"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-reindex-chainstate"</literal></expr></argument>, <argument><expr><literal type="string">"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-sysperms"</literal></expr></argument>, <argument><expr><literal type="string">"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-sysperms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-txindex"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_TXINDEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockfilterindex=&lt;type&gt;"</literal></expr></argument>,
                 <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maintain an index of compact filters by block (default: %s, values: %s)."</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCKFILTERINDEX</name></expr></argument>, <argument><expr><call><name>ListBlockFilterTypes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
                 <literal type="string">" If &lt;type&gt; is not supplied or if &lt;type&gt; = 1, indexes for all known types are enabled."</literal></expr></argument>,
                 <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-addnode=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-banscore=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Threshold for disconnecting misbehaving peers (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_BANSCORE_THRESHOLD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-bantime=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Number of seconds to keep misbehaving peers from reconnecting (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MISBEHAVING_BANTIME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-bind=&lt;addr&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Bind to given address and always listen on it. Use [host]:port notation for IPv6"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-connect=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-discover"</literal></expr></argument>, <argument><expr><literal type="string">"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dns"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_NAME_LOOKUP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dnsseed"</literal></expr></argument>, <argument><expr><literal type="string">"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-externalip=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Specify your own public address"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-forcednsseed"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Always query for peer addresses via DNS lookup (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_FORCEDNSSEED</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><literal type="string">"Accept connections from outside (default: 1 if no -proxy or -connect)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-listenonion"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Automatically create Tor hidden service (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_LISTEN_ONION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxconnections=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maintain at most &lt;n&gt; connections to peers (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_PEER_CONNECTIONS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxreceivebuffer=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum per-connection receive buffer, &lt;n&gt;*1000 bytes (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAXRECEIVEBUFFER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxsendbuffer=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum per-connection send buffer, &lt;n&gt;*1000 bytes (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAXSENDBUFFER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxtimeadjustment"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_TIME_ADJUSTMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxuploadtarget=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_UPLOAD_TARGET</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-onion=&lt;ip:port&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-onlynet=&lt;net&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Make outgoing connections only through network &lt;net&gt; (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-peerbloomfilters"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Support filtering of blocks and transaction with bloom filters (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PEERBLOOMFILTERS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-permitbaremultisig"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Relay non-P2SH multisig (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PERMIT_BAREMULTISIG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-port=&lt;port&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Listen for connections on &lt;port&gt; (default: %u, testnet: %u, regtest: %u)"</literal></expr></argument>, <argument><expr><call><name><name>defaultChainParams</name><operator>-&gt;</operator><name>GetDefaultPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testnetChainParams</name><operator>-&gt;</operator><name>GetDefaultPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regtestChainParams</name><operator>-&gt;</operator><name>GetDefaultPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-proxy=&lt;ip:port&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-proxyrandomize"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PROXYRANDOMIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-seednode=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-timeout=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify connection timeout in milliseconds (minimum: 1, default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-peertimeout=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PEER_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-torcontrol=&lt;ip&gt;:&lt;port&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Tor control port to use if onion listening enabled (default: %s)"</literal></expr></argument>, <argument><expr><name>DEFAULT_TOR_CONTROL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-torpassword=&lt;pass&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Tor control port password (default: empty)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_UPNP</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_UPNP</name></expr></cpp:if>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>, <argument><expr><literal type="string">"Use UPnP to map the listening port (default: 1 when listening and no -proxy)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Use UPnP to map the listening port (default: %u)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitebind=&lt;[permissions@]addr&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Bind to given address and whitelist peers connecting to it. "</literal>
        <literal type="string">"Use [host]:port notation for IPv6. Allowed permissions are bloomfilter (allow requesting BIP37 filtered blocks and transactions), "</literal>
        <literal type="string">"noban (do not ban for misbehavior), "</literal>
        <literal type="string">"forcerelay (relay even non-standard transactions), "</literal>
        <literal type="string">"relay (relay even in -blocksonly mode), "</literal>
        <literal type="string">"and mempool (allow requesting BIP35 mempool contents). "</literal>
        <literal type="string">"Specify multiple permissions separated by commas (default: noban,mempool,relay). Can be specified multiple times."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelist=&lt;[permissions@]IP address or network&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or "</literal>
        <literal type="string">"CIDR notated network(e.g. 1.2.3.0/24). Uses same permissions as "</literal>
        <literal type="string">"-whitebind. Can be specified multiple times."</literal></expr></argument> , <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>CONNECTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>g_wallet_init_interface</name><operator>.</operator><name>AddWalletOptions</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_ZMQ</name></expr></cpp:if>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashblock=&lt;address&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Enable publish hash block in &lt;address&gt;"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashtx=&lt;address&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Enable publish hash transaction in &lt;address&gt;"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawblock=&lt;address&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Enable publish raw block in &lt;address&gt;"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawtx=&lt;address&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Enable publish raw transaction in &lt;address&gt;"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashblockhwm=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set publish hash block outbound message high water mark (default: %d)"</literal></expr></argument>, <argument><expr><name><name>CZMQAbstractNotifier</name><operator>::</operator><name>DEFAULT_ZMQ_SNDHWM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashtxhwm=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set publish hash transaction outbound message high water mark (default: %d)"</literal></expr></argument>, <argument><expr><name><name>CZMQAbstractNotifier</name><operator>::</operator><name>DEFAULT_ZMQ_SNDHWM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawblockhwm=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set publish raw block outbound message high water mark (default: %d)"</literal></expr></argument>, <argument><expr><name><name>CZMQAbstractNotifier</name><operator>::</operator><name>DEFAULT_ZMQ_SNDHWM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawtxhwm=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set publish raw transaction outbound message high water mark (default: %d)"</literal></expr></argument>, <argument><expr><name><name>CZMQAbstractNotifier</name><operator>::</operator><name>DEFAULT_ZMQ_SNDHWM</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>ZMQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashblock=&lt;address&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashtx=&lt;address&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawblock=&lt;address&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawtx=&lt;address&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashblockhwm=&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubhashtxhwm=&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawblockhwm=&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-zmqpubrawtxhwm=&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblocks=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"How many blocks to check at startup (default: %u, 0 = all)"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKBLOCKS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-checklevel=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"How thorough the block verification of -checkblocks is: "</literal>
        <literal type="string">"level 0 reads the blocks from disk, "</literal>
        <literal type="string">"level 1 verifies block validity, "</literal>
        <literal type="string">"level 2 verifies undo data, "</literal>
        <literal type="string">"level 3 checks disconnection of tip blocks, "</literal>
        <literal type="string">"and level 4 tries to reconnect the blocks, "</literal>
        <literal type="string">"each level includes the checks of the previous levels "</literal>
        <literal type="string">"(0-4, default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKLEVEL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblockindex"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do a consistency check for the block tree, chainstate, and other validation data structures occasionally. (default: %u, regtest: %u)"</literal></expr></argument>, <argument><expr><call><name><name>defaultChainParams</name><operator>-&gt;</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regtestChainParams</name><operator>-&gt;</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkmempool=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Run checks every &lt;n&gt; transactions (default: %u, regtest: %u)"</literal></expr></argument>, <argument><expr><call><name><name>defaultChainParams</name><operator>-&gt;</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regtestChainParams</name><operator>-&gt;</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkpoints"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Enable rejection of any forks from the known historical chain until block 295000 (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKPOINTS_ENABLED</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-deprecatedrpc=&lt;method&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Allows deprecated RPC method(s) to be used"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dropmessagestest=&lt;n&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Randomly drop 1 of every &lt;n&gt; network messages"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-stopafterblockimport"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Stop running after importing blocks from disk (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_STOPAFTERBLOCKIMPORT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-stopatheight"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Stop running after reaching the given height in the main chain (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_STOPATHEIGHT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-limitancestorcount=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do not accept transactions if number of in-mempool ancestors is &lt;n&gt; or more (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_ANCESTOR_LIMIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-limitancestorsize=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do not accept transactions whose size with all in-mempool ancestors exceeds &lt;n&gt; kilobytes (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_ANCESTOR_SIZE_LIMIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-limitdescendantcount=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do not accept transactions if any ancestor would have &lt;n&gt; or more in-mempool descendants (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_DESCENDANT_LIMIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-limitdescendantsize=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Do not accept transactions if any ancestor would have more than &lt;n&gt; kilobytes of in-mempool descendants (default: %u)."</literal></expr></argument>, <argument><expr><name>DEFAULT_DESCENDANT_SIZE_LIMIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-addrmantest"</literal></expr></argument>, <argument><expr><literal type="string">"Allows to test address relay on localhost"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-debug=&lt;category&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Output debugging information (default: -nodebug, supplying &lt;category&gt; is optional). "</literal>
        <literal type="string">"If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information. &lt;category&gt; can be: "</literal> <operator>+</operator> <call><name>ListLogCategories</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-debugexclude=&lt;category&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-logips"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Include IP addresses in debug output (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGIPS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-logtimestamps"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Prepend debug output with timestamp (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTIMESTAMPS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-logthreadnames"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTHREADNAMES</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-logtimemicros"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Add microsecond precision to debug timestamps (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTIMEMICROS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-mocktime=&lt;n&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Replace actual time with &lt;n&gt; seconds since epoch (default: 0)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxsigcachesize=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Limit sum of signature cache and script execution cache sizes to &lt;n&gt; MiB (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_SIG_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxtipage=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum tip age in seconds to consider node in initial block download (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_TIP_AGE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-printpriority"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Log transaction fee per kB when mining blocks (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_PRINTPRIORITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-printtoconsole"</literal></expr></argument>, <argument><expr><literal type="string">"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-shrinkdebugfile"</literal></expr></argument>, <argument><expr><literal type="string">"Shrink debug.log file on client startup (default: 1 when no -debug)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-uacomment=&lt;cmt&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Append comment to the user agent string"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>DEBUG_TEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SetupChainParamsBaseOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-acceptnonstdtxn"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Relay and mine \"non-standard\" transactions (%sdefault: %u)"</literal></expr></argument>, <argument><expr><literal type="string">"testnet/regtest only; "</literal></expr></argument>, <argument><expr><operator>!</operator><call><name><name>testnetChainParams</name><operator>-&gt;</operator><name>RequireStandard</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-incrementalrelayfee=&lt;amt&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)"</literal></expr></argument>, <argument><expr><name>CURRENCY_UNIT</name></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>DEFAULT_INCREMENTAL_RELAY_FEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-dustrelayfee=&lt;amt&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)"</literal></expr></argument>, <argument><expr><name>CURRENCY_UNIT</name></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>DUST_RELAY_TX_FEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-bytespersigop"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Equivalent bytes per sigop in transactions for relay and mining (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_BYTES_PER_SIGOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-datacarrier"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Relay and mine data carrier transactions (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_ACCEPT_DATACARRIER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-datacarriersize"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Maximum size of data in data carrier transactions we relay and mine (default: %u)"</literal></expr></argument>, <argument><expr><name>MAX_OP_RETURN_RELAY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-minrelaytxfee=&lt;amt&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)"</literal></expr></argument>,
        <argument><expr><name>CURRENCY_UNIT</name></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>DEFAULT_MIN_RELAY_TX_FEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelistforcerelay"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool or violate local relay policy. (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_WHITELISTFORCERELAY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelistrelay"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Add 'relay' permission to whitelisted inbound peers with default permissions. The will accept relayed transactions even when not relaying transactions (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_WHITELISTRELAY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>NODE_RELAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockmaxweight=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set maximum BIP141 block weight (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCK_MAX_WEIGHT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>BLOCK_CREATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockmintxfee=&lt;amt&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)"</literal></expr></argument>, <argument><expr><name>CURRENCY_UNIT</name></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>DEFAULT_BLOCK_MIN_TX_FEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>BLOCK_CREATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockversion=&lt;n&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Override block version to test forking scenarios"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>BLOCK_CREATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rest"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Accept public REST requests (default: %u)"</literal></expr></argument>, <argument><expr><name>DEFAULT_REST_ENABLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcallowip=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcauth=&lt;userpw&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Username and HMAC-SHA-256 hashed password for JSON-RPC connections. The field &lt;userpw&gt; comes in the format: &lt;USERNAME&gt;:&lt;SALT&gt;$&lt;HASH&gt;. A canonical python script is included in share/rpcauth. The client then connects normally using the rpcuser=&lt;USERNAME&gt;/rpcpassword=&lt;PASSWORD&gt; pair of arguments. This option can be specified multiple times"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcbind=&lt;addr&gt;[:port]"</literal></expr></argument>, <argument><expr><literal type="string">"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpccookiefile=&lt;loc&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcpassword=&lt;pw&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Password for JSON-RPC connections"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcport=&lt;port&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Listen for JSON-RPC connections on &lt;port&gt; (default: %u, testnet: %u, regtest: %u)"</literal></expr></argument>, <argument><expr><call><name><name>defaultBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testnetBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regtestBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcserialversion"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_RPC_SERIALIZE_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcservertimeout=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Timeout during HTTP requests (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_HTTP_SERVER_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcthreads=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set the number of threads to service RPC calls (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_HTTP_THREADS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcuser=&lt;user&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Username for JSON-RPC connections"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcworkqueue=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Set the depth of the work queue to service RPC calls (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_HTTP_WORKQUEUE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>DEBUG_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-server"</literal></expr></argument>, <argument><expr><literal type="string">"Accept command line and JSON-RPC commands"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>RPC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_DECL_DAEMON</name></expr></cpp:if>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-daemon"</literal></expr></argument>, <argument><expr><literal type="string">"Run in the background as a daemon and accept commands"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>hidden_args</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"-daemon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Add the hidden options</comment>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddHiddenArgs</name></name><argument_list>(<argument><expr><name>hidden_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>LicenseInfo</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>URL_SOURCE_CODE</name> <init>= <expr><literal type="string">"&lt;https://github.com/bitcoin/bitcoin&gt;"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>URL_WEBSITE</name> <init>= <expr><literal type="string">"&lt;https://bitcoincore.org&gt;"</literal></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>CopyrightHolders</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Copyright (C) %i-%i"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><literal type="number">2009</literal></expr></argument>, <argument><expr><name>COPYRIGHT_YEAR</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator>
           <literal type="string">"\n"</literal> <operator>+</operator>
           <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please contribute if you find %s useful. "</literal>
                       <literal type="string">"Visit %s for further information about the software."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>,
               <argument><expr><name>PACKAGE_NAME</name></expr></argument>, <argument><expr><name>URL_WEBSITE</name></expr></argument>)</argument_list></call> <operator>+</operator>
           <literal type="string">"\n"</literal> <operator>+</operator>
           <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The source code is available from %s."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>,
               <argument><expr><name>URL_SOURCE_CODE</name></expr></argument>)</argument_list></call> <operator>+</operator>
           <literal type="string">"\n"</literal> <operator>+</operator>
           <literal type="string">"\n"</literal> <operator>+</operator>
           <call><name>_</name><argument_list>(<argument><expr><literal type="string">"This is experimental software."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator>
           <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Distributed under the MIT software license, see the accompanying file %s or %s"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><literal type="string">"COPYING"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;https://opensource.org/licenses/MIT&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
           <literal type="string">"\n"</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockNotifyCallback</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>initialSync</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pBlockIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>initialSync</name> <operator>||</operator> <operator>!</operator><name>pBlockIndex</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strCmd</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocknotify"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>strCmd</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>replace_all</name></name><argument_list>(<argument><expr><name>strCmd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name><name>pBlockIndex</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>thread</name></name></type> <name>t</name><argument_list>(<argument><expr><name>runCommand</name></expr></argument>, <argument><expr><name>strCmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>detach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// thread runs free</comment>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fHaveGenesis</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Mutex</name></type> <name>g_genesis_wait_mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>condition_variable</name></name></type> <name>g_genesis_wait_cv</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockNotifyGenesisWait</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pBlockIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pBlockIndex</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>g_genesis_wait_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fHaveGenesis</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name><name>g_genesis_wait_cv</name><operator>.</operator><name>notify_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<struct>struct <name>CImportingNow</name>
<block>{<public type="default">
    <constructor><name>CImportingNow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fImporting</name> <operator>==</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fImporting</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <destructor><name>~CImportingNow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fImporting</name> <operator>==</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fImporting</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></destructor>
</public>}</block>;</struct>


<comment type="line">// If we're using -prune with -reindex, then delete block files that will be ignored by the</comment>
<comment type="line">// reindex.  Since reindexing works by starting at block file 0 and looping until a blockfile</comment>
<comment type="line">// is missing, do the same here to delete any later block files after a gap.  Also delete all</comment>
<comment type="line">// rev files since they'll be rewritten by the reindex anyway.  This ensures that vinfoBlockFile</comment>
<comment type="line">// is in sync with what's actually on disk by the time we start downloading, so that pruning</comment>
<comment type="line">// works correctly.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CleanupBlockRevFiles</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name></type> <name>mapBlockFiles</name></decl>;</decl_stmt>

    <comment type="line">// Glob all blk?????.dat and rev?????.dat files from the blocks directory.</comment>
    <comment type="line">// Remove the rev files immediately and insert the blk file paths into an</comment>
    <comment type="line">// ordered map keyed by block file index.</comment>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>blocksdir</name> <init>= <expr><call><name>GetBlocksDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>fs</name><operator>::</operator><name>directory_iterator</name></name></type> <name>it</name><argument_list>(<argument><expr><name>blocksdir</name></expr></argument>)</argument_list></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>fs</name><operator>::</operator><name>directory_iterator</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>is_regular_file</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filename</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator>
            <call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filename</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">".dat"</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filename</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"blk"</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>mapBlockFiles</name><index>[<expr><call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filename</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filename</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"rev"</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Remove all block files that aren't part of a contiguous set starting at</comment>
    <comment type="line">// zero by walking the ordered map (keys are block file indices) by</comment>
    <comment type="line">// keeping a separate counter.  Once we hit a gap (or if 0 doesn't exist)</comment>
    <comment type="line">// start removing block files.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nContigCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><name>mapBlockFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nContigCounter</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nContigCounter</name><operator>++</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ThreadImport</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name></type> <name>vImportFiles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>chainparams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>util</name><operator>::</operator><name>ThreadRename</name></name><argument_list>(<argument><expr><literal type="string">"loadblk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ScheduleBatchPriority</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
    <decl_stmt><decl><type><name>CImportingNow</name></type> <name>imp</name></decl>;</decl_stmt>

    <comment type="line">// -reindex</comment>
    <if_stmt><if>if <condition>(<expr><name>fReindex</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FlatFilePos</name></type> <name>pos</name><argument_list>(<argument><expr><name>nFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><call><name>GetBlockPosFilename</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt> <comment type="line">// No block files left to reindex</comment>
            <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>OpenBlockFile</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt> <comment type="line">// This error is logged in OpenBlockFile</comment>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Reindexing block file blk%05u.dat...\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>nFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LoadExternalBlockFile</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nFile</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>pblocktree</name><operator>-&gt;</operator><name>WriteReindexing</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fReindex</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Reindexing finished\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):</comment>
        <expr_stmt><expr><call><name>LoadGenesisBlock</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -loadblock=</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>path</name> <range>: <expr><name>vImportFiles</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Importing blocks file %s...\n"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LoadExternalBlockFile</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Warning: Could not open blocks file %s\n"</literal></expr></argument>, <argument><expr><call><name><name>path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// scan for better chains in the block chain database, that are not yet connected in the active best chain</comment>
    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ActivateBestChain</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Failed to connect best block (%s)\n"</literal></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-stopafterblockimport"</literal></expr></argument>, <argument><expr><name>DEFAULT_STOPAFTERBLOCKIMPORT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Stopping after block import\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>StartShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    </block_content>}</block> <comment type="line">// End scope of CImportingNow</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-persistmempool"</literal></expr></argument>, <argument><expr><name>DEFAULT_PERSIST_MEMPOOL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadMempool</name><argument_list>(<argument><expr><name><operator>::</operator><name>mempool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><operator>::</operator><name>mempool</name><operator>.</operator><name>SetIsLoaded</name></name><argument_list>(<argument><expr><operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Sanity checks
 *  Ensure that Bitcoin is running in a usable environment with all
 *  necessary library support.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>InitSanityCheck</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ECC_InitSanityCheck</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"Elliptic curve cryptography sanity check failure. Aborting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>glibc_sanity_test</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>glibcxx_sanity_test</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Random_SanityCheck</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"OS cryptographic RNG sanity check failure. Aborting."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AppInitServers</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>RPCServer</name><operator>::</operator><name>OnStarted</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>OnRPCStarted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCServer</name><operator>::</operator><name>OnStopped</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>OnRPCStopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitHTTPServer</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>StartRPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>StartHTTPRPC</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-rest"</literal></expr></argument>, <argument><expr><name>DEFAULT_REST_ENABLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>StartREST</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>StartHTTPServer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Parameter interaction based on rules</comment>
<function><type><name>void</name></type> <name>InitParameterInteraction</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// when specifying an explicit binding address, you want to listen on it</comment>
    <comment type="line">// even when -connect or -proxy is specified</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-bind"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -bind set -&gt; setting -listen=1\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-whitebind"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -whitebind set -&gt; setting -listen=1\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-connect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// when only connecting to trusted nodes, do not seed via DNS, or listen by default</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-dnsseed"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -connect set -&gt; setting -dnsseed=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -connect set -&gt; setting -listen=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-proxy"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// to protect privacy, do not listen by default if a default proxy server is specified</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -proxy set -&gt; setting -listen=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// to protect privacy, do not use UPNP when a proxy is set. The user may still specify -listen=1</comment>
        <comment type="line">// to listen locally, so don't rely on this happening through -listen below.</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -proxy set -&gt; setting -upnp=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// to protect privacy, do not discover addresses by default</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-discover"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -proxy set -&gt; setting -discover=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><name>DEFAULT_LISTEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// do not map ports or try to retrieve public IP when not listening (pointless)</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -listen=0 -&gt; setting -upnp=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-discover"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -listen=0 -&gt; setting -discover=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listenonion"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -listen=0 -&gt; setting -listenonion=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-externalip"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// if an explicit public IP is specified, do not try to find others</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-discover"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -externalip set -&gt; setting -discover=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// disable whitelistrelay in blocksonly mode</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocksonly"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCKSONLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelistrelay"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -blocksonly=1 -&gt; setting -whitelistrelay=0\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Forcing relay from whitelisted hosts implies we will accept relays from them in the first place.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelistforcerelay"</literal></expr></argument>, <argument><expr><name>DEFAULT_WHITELISTFORCERELAY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>SoftSetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-whitelistrelay"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: parameter interaction: -whitelistforcerelay=1 -&gt; setting -whitelistrelay=1\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Initialize global loggers.
 *
 * Note that this is called very early in the process lifetime, so you should be
 * careful about what global state you rely on here.
 */</comment>
<function><type><name>void</name></type> <name>InitLogging</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_print_to_file</name> <operator>=</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>IsArgNegated</name></name><argument_list>(<argument><expr><literal type="string">"-debuglogfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_file_path</name> <operator>=</operator> <call><name>AbsPathForConfigVal</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-debuglogfile"</literal></expr></argument>, <argument><expr><name>DEFAULT_DEBUGLOGFILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_print_to_console</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-printtoconsole"</literal></expr></argument>, <argument><expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-daemon"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_log_timestamps</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-logtimestamps"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTIMESTAMPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_log_time_micros</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-logtimemicros"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTIMEMICROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_log_threadnames</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-logthreadnames"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGTHREADNAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fLogIPs</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-logips"</literal></expr></argument>, <argument><expr><name>DEFAULT_LOGIPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>version_string</name> <init>= <expr><call><name>FormatFullVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name>version_string</name> <operator>+=</operator> <literal type="string">" (debug build)"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>version_string</name> <operator>+=</operator> <literal type="string">" (release build)"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name> <literal type="string">" version %s\n"</literal></expr></argument>, <argument><expr><name>version_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<namespace>namespace <block>{ <comment type="line">// Variables internal to initialization process only</comment>

<decl_stmt><decl><type><name>int</name></type> <name>nMaxConnections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nUserMaxConnections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nFD</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ServiceFlags</name></type> <name>nLocalServices</name> <init>= <expr><call><name>ServiceFlags</name><argument_list>(<argument><expr><name>NODE_NETWORK</name> <operator>|</operator> <name>NODE_NETWORK_LIMITED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>peer_connect_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>BlockFilterType</name></expr></argument>&gt;</argument_list></name></type> <name>g_enabled_filter_types</name></decl>;</decl_stmt>

}</block></namespace> <comment type="line">// namespace</comment>

<function><attribute>[[<expr><name>noreturn</name></expr>]]</attribute> <type><specifier>static</specifier> <name>void</name></type> <name>new_handler_terminate</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Rather than throwing std::bad-alloc if allocation fails, terminate</comment>
    <comment type="line">// immediately to (try to) avoid chain corruption.</comment>
    <comment type="line">// Since LogPrintf may itself allocate memory, set the handler directly</comment>
    <comment type="line">// to terminate first.</comment>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>set_new_handler</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>terminate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Error: Out of memory. Terminating.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The log was successful, terminate now.</comment>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>terminate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>bool</name></type> <name>AppInitBasicSetup</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// ********************************************************* Step 1: setup</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
    <comment type="line">// Turn off Microsoft heap dump noise</comment>
    <expr_stmt><expr><call><name>_CrtSetReportMode</name><argument_list>(<argument><expr><name>_CRT_WARN</name></expr></argument>, <argument><expr><name>_CRTDBG_MODE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_CrtSetReportFile</name><argument_list>(<argument><expr><name>_CRT_WARN</name></expr></argument>, <argument><expr><call><name>CreateFileA</name><argument_list>(<argument><expr><literal type="string">"NUL"</literal></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Disable confusing "helpful" text message on abort, Ctrl-C</comment>
    <expr_stmt><expr><call><name>_set_abort_behavior</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>_WRITE_ABORT_MSG</name> <operator>|</operator> <name>_CALL_REPORTFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <comment type="line">// Enable Data Execution Prevention (DEP)</comment>
    <expr_stmt><expr><call><name>SetProcessDEPPolicy</name><argument_list>(<argument><expr><name>PROCESS_DEP_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetupNetworking</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"Initializing networking failed"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-sysperms"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">077</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Clean shutdown on SIGTERM</comment>
    <expr_stmt><expr><call><name>registerSignalHandler</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>HandleSIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerSignalHandler</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>HandleSIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reopen debug.log on SIGHUP</comment>
    <expr_stmt><expr><call><name>registerSignalHandler</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>HandleSIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ignore SIGPIPE, otherwise it will bring the daemon down if the client closes unexpectedly</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>consoleCtrlHandler</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>set_new_handler</name></name><argument_list>(<argument><expr><name>new_handler_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AppInitParameterInteraction</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>chainparams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ********************************************************* Step 2: parameter interactions</comment>

    <comment type="line">// also see: InitParameterInteraction()</comment>

    <comment type="line">// Warn if network-specific options (-addnode, -connect, etc) are</comment>
    <comment type="line">// specified in default section of config file, but not overridden</comment>
    <comment type="line">// on the command line or in this network's section of the config file.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>network</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>arg</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetUnsuitableSectionOnlyArgs</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Config setting for %s only applied on %s network when in [%s] section."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>network</name></expr></argument>, <argument><expr><name>network</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></for>

    <comment type="line">// Warn if unrecognized section name are present in the config file.</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>section</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetUnrecognizedSections</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>InitWarning</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s:%i "</literal> <operator>+</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Section [%s] is not recognized."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name><name>section</name><operator>.</operator><name>m_file</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>.</operator><name>m_line</name></name></expr></argument>, <argument><expr><name><name>section</name><operator>.</operator><name>m_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fs</name><operator>::</operator><name>is_directory</name></name><argument_list>(<argument><expr><call><name>GetBlocksDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Specified blocks directory \"%s\" does not exist."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocksdir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// parse and validate enabled filter types</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>blockfilterindex_value</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockfilterindex"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCKFILTERINDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>blockfilterindex_value</name> <operator>==</operator> <literal type="string">""</literal> <operator>||</operator> <name>blockfilterindex_value</name> <operator>==</operator> <literal type="string">"1"</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>g_enabled_filter_types</name> <operator>=</operator> <call><name>AllBlockFilterTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blockfilterindex_value</name> <operator>!=</operator> <literal type="string">"0"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>names</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-blockfilterindex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g_enabled_filter_types</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>names</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>name</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BlockFilterTypeByName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown -blockfilterindex value %s."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>g_enabled_filter_types</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if using block pruning, then disallow txindex</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-prune"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-txindex"</literal></expr></argument>, <argument><expr><name>DEFAULT_TXINDEX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prune mode is incompatible with -txindex."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>g_enabled_filter_types</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prune mode is incompatible with -blockfilterindex."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -bind and -whitebind can't be set when not listening</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nUserBind</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-bind"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-whitebind"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nUserBind</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><name>DEFAULT_LISTEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"Cannot set -bind or -whitebind together with -listen=0"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Make sure enough file descriptors are available</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nBind</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>nUserBind</name></expr></argument>, <argument><expr><call><name>size_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nUserMaxConnections</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxconnections"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_PEER_CONNECTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxConnections</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>nUserMaxConnections</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Trim requested connection counts, to fit into system limitations</comment>
    <comment type="line">// &lt;int&gt; in std::min&lt;int&gt;(...) to work around FreeBSD compilation issue described in #2695</comment>
    <expr_stmt><expr><name>nFD</name> <operator>=</operator> <call><name>RaiseFileDescriptorLimit</name><argument_list>(<argument><expr><name>nMaxConnections</name> <operator>+</operator> <name>MIN_CORE_FILEDESCRIPTORS</name> <operator>+</operator> <name>MAX_ADDNODE_CONNECTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_POLL</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>fd_max</name> <init>= <expr><name>nFD</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>fd_max</name> <init>= <expr><name>FD_SETSIZE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>nMaxConnections</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nMaxConnections</name></expr></argument>, <argument><expr><name>fd_max</name> <operator>-</operator> <name>nBind</name> <operator>-</operator> <name>MIN_CORE_FILEDESCRIPTORS</name> <operator>-</operator> <name>MAX_ADDNODE_CONNECTIONS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nFD</name> <operator>&lt;</operator> <name>MIN_CORE_FILEDESCRIPTORS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Not enough file descriptors available."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nMaxConnections</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nFD</name> <operator>-</operator> <name>MIN_CORE_FILEDESCRIPTORS</name> <operator>-</operator> <name>MAX_ADDNODE_CONNECTIONS</name></expr></argument>, <argument><expr><name>nMaxConnections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nMaxConnections</name> <operator>&lt;</operator> <name>nUserMaxConnections</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>InitWarning</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Reducing -maxconnections from %d to %d, because of system limitations."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>nUserMaxConnections</name></expr></argument>, <argument><expr><name>nMaxConnections</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 3: parameter-to-internal-flags</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Special-case: if -debug=0/-nodebug is set, turn off debugging messages</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-debug"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>std</name><operator>::</operator><name>none_of</name></name><argument_list>(<argument><expr><call><name><name>categories</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>categories</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>std::<name>string</name> <name>cat</name></lambda></expr></argument>)</argument_list></call></expr></condition><block>{<block_content><return>return <expr><name>cat</name> <operator>==</operator> <literal type="string">"0"</literal> <operator>||</operator> <name>cat</name> <operator>==</operator> <literal type="string">"none"</literal></expr>;</return></block_content>}</block></if></if_stmt>)</block_content></block></if></if_stmt>)</block_content> <block>{<block_content>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>cat</name> <range>: <expr><name>categories</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>EnableCategory</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>InitWarning</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unsupported logging category %s=%s."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><literal type="string">"-debug"</literal></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></block></function>
    }

    <comment type="line">// Now remove the logging categories which were explicitly excluded</comment>
    for <expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><operator>&amp;</operator> <name>cat</name> <operator>:</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-debugexclude"</literal></expr></argument>)</argument_list></call><operator>)</operator> <block>{
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DisableCategory</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>InitWarning</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unsupported logging category %s=%s."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><literal type="string">"-debugexclude"</literal></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
    }

    <comment type="line">// Checkmempool and checkblockindex default to true in regtest mode</comment>
    int <expr_stmt><expr><name>ratio</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkmempool"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>chainparams</name><operator>.</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mempool</name><operator>.</operator><name>setSanityCheck</name></name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>fCheckBlockIndex</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblockindex"</literal></expr></argument>, <argument><expr><call><name><name>chainparams</name><operator>.</operator><name>DefaultConsistencyChecks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fCheckpointsEnabled</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkpoints"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKPOINTS_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>hashAssumeValid</name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-assumevalid"</literal></expr></argument>, <argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>defaultAssumeValid</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>hashAssumeValid</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Assuming ancestors of block %s have valid signatures.\n"</literal></expr></argument>, <argument><expr><call><name><name>hashAssumeValid</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Validating signatures for all blocks.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-minimumchainwork"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>minChainWorkStr</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-minimumchainwork"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHexNumber</name><argument_list>(<argument><expr><name>minChainWorkStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid non-hex (%s) minimum chain work value specified"</literal></expr></argument>, <argument><expr><name>minChainWorkStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nMinimumChainWork</name> <operator>=</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><name>minChainWorkStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>nMinimumChainWork</name> <operator>=</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nMinimumChainWork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Setting nMinimumChainWork=%s\n"</literal></expr></argument>, <argument><expr><call><name><name>nMinimumChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nMinimumChainWork</name> <operator>&lt;</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><name>nMinimumChainWork</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Warning: nMinimumChainWork set below default value of %s\n"</literal></expr></argument>, <argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>nMinimumChainWork</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// mempool limits</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nMempoolSizeMax</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxmempool"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_MEMPOOL_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nMempoolSizeMin</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-limitdescendantsize"</literal></expr></argument>, <argument><expr><name>DEFAULT_DESCENDANT_SIZE_LIMIT</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">40</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nMempoolSizeMax</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>nMempoolSizeMax</name> <operator>&lt;</operator> <name>nMempoolSizeMin</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-maxmempool must be at least %d MB"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>ceil</name></name><argument_list>(<argument><expr><name>nMempoolSizeMin</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool</comment>
    <comment type="line">// and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-incrementalrelayfee"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseMoney</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-incrementalrelayfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>AmountErrMsg</name><argument_list>(<argument><expr><literal type="string">"incrementalrelayfee"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-incrementalrelayfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>incrementalRelayFee</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// block pruning; get the amount of disk space (in MiB) to allot for block &amp; undo files</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nPruneArg</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-prune"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nPruneArg</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prune cannot be configured with a negative value."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nPruneTarget</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>nPruneArg</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nPruneArg</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// manual pruning: -prune=1</comment>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Block pruning enabled.  Use RPC call pruneblockchain(height) to manually prune block and undo files.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPruneTarget</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fPruneMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nPruneTarget</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nPruneTarget</name> <operator>&lt;</operator> <name>MIN_DISK_SPACE_FOR_BLOCK_FILES</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prune configured below the minimum of %d MiB.  Please use a higher number."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>MIN_DISK_SPACE_FOR_BLOCK_FILES</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Prune configured to target %u MiB on disk for block and undo files.\n"</literal></expr></argument>, <argument><expr><name>nPruneTarget</name> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fPruneMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nConnectTimeout</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-timeout"</literal></expr></argument>, <argument><expr><name>DEFAULT_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nConnectTimeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nConnectTimeout</name> <operator>=</operator> <name>DEFAULT_CONNECT_TIMEOUT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>peer_connect_timeout</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-peertimeout"</literal></expr></argument>, <argument><expr><name>DEFAULT_PEER_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>peer_connect_timeout</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"peertimeout cannot be configured with a negative value."</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-minrelaytxfee"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseMoney</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-minrelaytxfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>AmountErrMsg</name><argument_list>(<argument><expr><literal type="string">"minrelaytxfee"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-minrelaytxfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// High fee check is done afterward in CWallet::CreateWalletFromFile()</comment>
        <expr_stmt><expr><name><operator>::</operator><name>minRelayTxFee</name></name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>incrementalRelayFee</name> <operator>&gt;</operator> <name><operator>::</operator><name>minRelayTxFee</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Allow only setting incrementalRelayFee to control both</comment>
        <expr_stmt><expr><name><operator>::</operator><name>minRelayTxFee</name></name> <operator>=</operator> <name>incrementalRelayFee</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Increasing minrelaytxfee to %s to match incrementalrelayfee\n"</literal></expr></argument>,<argument><expr><call><name><operator>::</operator><name>minRelayTxFee</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Sanity check argument for min fee for including tx in block</comment>
    <comment type="line">// TODO: Harmonize which arguments need sanity checking and where that happens</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-blockmintxfee"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseMoney</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockmintxfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>AmountErrMsg</name><argument_list>(<argument><expr><literal type="string">"blockmintxfee"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-blockmintxfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Feerate used to define dust.  Shouldn't be changed lightly as old</comment>
    <comment type="line">// implementations may inadvertently create non-standard transactions</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-dustrelayfee"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseMoney</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-dustrelayfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>AmountErrMsg</name><argument_list>(<argument><expr><literal type="string">"dustrelayfee"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-dustrelayfee"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>dustRelayFee</name> <operator>=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fRequireStandard</name> <operator>=</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-acceptnonstdtxn"</literal></expr></argument>, <argument><expr><operator>!</operator><call><name><name>chainparams</name><operator>.</operator><name>RequireStandard</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>chainparams</name><operator>.</operator><name>IsTestChain</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>fRequireStandard</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"acceptnonstdtxn is not currently supported for %s chain"</literal></expr></argument>, <argument><expr><call><name><name>chainparams</name><operator>.</operator><name>NetworkIDString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nBytesPerSigOp</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-bytespersigop"</literal></expr></argument>, <argument><expr><name>nBytesPerSigOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>g_wallet_init_interface</name><operator>.</operator><name>ParameterInteraction</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fIsBareMultisigStd</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-permitbaremultisig"</literal></expr></argument>, <argument><expr><name>DEFAULT_PERMIT_BAREMULTISIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fAcceptDatacarrier</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-datacarrier"</literal></expr></argument>, <argument><expr><name>DEFAULT_ACCEPT_DATACARRIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxDatacarrierBytes</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datacarriersize"</literal></expr></argument>, <argument><expr><name>nMaxDatacarrierBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option to startup with mocktime set (used for regression testing):</comment>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-mocktime"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// SetMockTime(0) is a no-op</comment>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-peerbloomfilters"</literal></expr></argument>, <argument><expr><name>DEFAULT_PEERBLOOMFILTERS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nLocalServices</name> <operator>=</operator> <call><name>ServiceFlags</name><argument_list>(<argument><expr><name>nLocalServices</name> <operator>|</operator> <name>NODE_BLOOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcserialversion"</literal></expr></argument>, <argument><expr><name>DEFAULT_RPC_SERIALIZE_VERSION</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"rpcserialversion must be non-negative."</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcserialversion"</literal></expr></argument>, <argument><expr><name>DEFAULT_RPC_SERIALIZE_VERSION</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><literal type="string">"unknown rpcserialversion requested."</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>nMaxTipAge</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxtipage"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_TIP_AGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}

static <function><type><name>bool</name></type> <name>LockDataDirectory</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>probeOnly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Make sure only a single Bitcoin process is using the data directory.</comment>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>datadir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DirIsWritable</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot write to data directory '%s'; check permissions."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name><name>datadir</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockDirectory</name><argument_list>(<argument><expr><name>datadir</name></expr></argument>, <argument><expr><literal type="string">".lock"</literal></expr></argument>, <argument><expr><name>probeOnly</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot obtain a lock on data directory %s. %s is probably already running."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name><name>datadir</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AppInitSanityChecks</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// ********************************************************* Step 4: sanity checks</comment>

    <comment type="line">// Initialize elliptic curve code</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>sha256_algo</name> <init>= <expr><call><name>SHA256AutoDetect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Using the '%s' SHA256 implementation\n"</literal></expr></argument>, <argument><expr><name>sha256_algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RandomInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ECC_Start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>globalVerifyHandle</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ECCVerifyHandle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Sanity check</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InitSanityCheck</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Initialization sanity check failed. %s is shutting down."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Probe the data directory lock to give an early error message, if possible</comment>
    <comment type="line">// We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,</comment>
    <comment type="line">// and a fork will cause weird behavior to it.</comment>
    <return>return <expr><call><name>LockDataDirectory</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AppInitLockDataDirectory</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// After daemonization get the data directory lock again and hold on to it until exit</comment>
    <comment type="line">// This creates a slight window for a race condition to happen, however this condition is harmless: it</comment>
    <comment type="line">// will at most make us exit without printing a message to console.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockDataDirectory</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Detailed error printed inside LockDataDirectory</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AppInitMain</name><parameter_list>(<parameter><decl><type><name>NodeContext</name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>chainparams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ********************************************************* Step 4a: application initialization</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePidFile</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Detailed error printed inside CreatePidFile().</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_print_to_file</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-shrinkdebugfile"</literal></expr></argument>, <argument><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DefaultShrinkDebugFile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Do this first since it both loads a bunch of debug.log into memory,</comment>
            <comment type="line">// and because this needs to happen before any other debug.log printing</comment>
            <expr_stmt><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ShrinkDebugFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>StartLogging</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Could not open debug log file %s"</literal></expr></argument>,
                <argument><expr><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>m_file_path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LogInstance</name><argument_list>()</argument_list></call><operator>.</operator><name>m_log_timestamps</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Startup time: %s\n"</literal></expr></argument>, <argument><expr><call><name>FormatISO8601DateTime</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Default data directory %s\n"</literal></expr></argument>, <argument><expr><call><name>GetDefaultDataDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Using data directory %s\n"</literal></expr></argument>, <argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only log conf file usage message if conf file actually exists.</comment>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>config_file_path</name> <init>= <expr><call><name>GetConfigFile</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-conf"</literal></expr></argument>, <argument><expr><name>BITCOIN_CONF_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>config_file_path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Config file: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>config_file_path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-conf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Warn if no conf file exists at path provided by user</comment>
        <expr_stmt><expr><call><name>InitWarning</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The specified config file %s does not exist\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name><name>config_file_path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Not categorizing as "Warning" because it's the default behavior</comment>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Config file: %s (not found, skipping)\n"</literal></expr></argument>, <argument><expr><call><name><name>config_file_path</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Using at most %i automatic connections (%i file descriptors available)\n"</literal></expr></argument>, <argument><expr><name>nMaxConnections</name></expr></argument>, <argument><expr><name>nFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Warn about relative -datadir path.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>is_absolute</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Warning: relative datadir option '%s' specified, which will be interpreted relative to the "</literal> <comment type="block">/* Continued */</comment>
                  <literal type="string">"current working directory '%s'. This is fragile, because if bitcoin is started in the future "</literal>
                  <literal type="string">"from a different location, it will be unable to locate the current data files. There could "</literal>
                  <literal type="string">"also be data loss if bitcoin is started while in a temporary directory.\n"</literal></expr></argument>,
            <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>fs</name><operator>::</operator><name>current_path</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>InitSignatureCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>InitScriptExecutionCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>script_threads</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-par"</literal></expr></argument>, <argument><expr><name>DEFAULT_SCRIPTCHECK_THREADS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>script_threads</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// -par=0 means autodetect (number of cores - 1 script threads)</comment>
        <comment type="line">// -par=-n means "leave n cores free" (number of cores - n - 1 script threads)</comment>
        <expr_stmt><expr><name>script_threads</name> <operator>+=</operator> <call><name>GetNumCores</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Subtract 1 because the main thread counts towards the par threads</comment>
    <expr_stmt><expr><name>script_threads</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>script_threads</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Number of script-checking threads &lt;= MAX_SCRIPTCHECK_THREADS</comment>
    <expr_stmt><expr><name>script_threads</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>script_threads</name></expr></argument>, <argument><expr><name>MAX_SCRIPTCHECK_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Script verification uses %d additional threads\n"</literal></expr></argument>, <argument><expr><name>script_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>script_threads</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>g_parallel_script_checks</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>script_threads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>i</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>ThreadScriptCheck</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Start the lightweight task scheduler thread</comment>
    <decl_stmt><decl><type><name><name>CScheduler</name><operator>::</operator><name>Function</name></name></type> <name>serviceLoop</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CScheduler</name><operator>::</operator><name>serviceQueue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scheduler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>TraceThread</name><argument_list type="generic">&lt;<argument><expr><name><name>CScheduler</name><operator>::</operator><name>Function</name></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><literal type="string">"scheduler"</literal></expr></argument>, <argument><expr><name>serviceLoop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Gather some entropy once per minute.</comment>
    <expr_stmt><expr><call><name><name>scheduler</name><operator>.</operator><name>scheduleEvery</name></name><argument_list>(<argument><expr><lambda><capture>[]</capture><block>{<block_content>
        <expr_stmt><expr><call><name>RandAddPeriodic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>, <argument><expr><literal type="number">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>GetMainSignals</name><argument_list>()</argument_list></call><operator>.</operator><call><name>RegisterBackgroundSignalScheduler</name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create client interfaces for wallets that are supposed to be loaded</comment>
    <comment type="line">// according to -wallet and -disablewallet options. This only constructs</comment>
    <comment type="line">// the interfaces, it doesn't load wallet data. Wallets actually get loaded</comment>
    <comment type="line">// when load() and start() interface methods are called below.</comment>
    <expr_stmt><expr><call><name><name>g_wallet_init_interface</name><operator>.</operator><name>Construct</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Register RPC commands regardless of -server setting so they will be
     * available in the GUI RPC console even if external calls are disabled.
     */</comment>
    <expr_stmt><expr><call><name>RegisterAllCoreRPCCommands</name><argument_list>(<argument><expr><name>tableRPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>registerRpcs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>g_rpc_node</name> <operator>=</operator> <operator>&amp;</operator><name>node</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_ZMQ</name></expr></cpp:if>
    <expr_stmt><expr><call><name>RegisterZMQRPCCommands</name><argument_list>(<argument><expr><name>tableRPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Start the RPC server already.  It will be started in "warmup" mode
     * and not really process calls already (but it will signify connections
     * that the server is there and will be ready later).  Warmup mode will
     * be disabled when initialisation is finished.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-server"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage_connect</name></name><argument_list>(<argument><expr><name>SetRPCWarmupStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppInitServers</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to start HTTP server. See debug log for details."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 5: verify wallet database integrity</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>verify</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// ********************************************************* Step 6: network initialization</comment>
    <comment type="line">// Note that we absolutely cannot open any actual connections</comment>
    <comment type="line">// until the very end ("start node") as the UTXO/block state</comment>
    <comment type="line">// is not yet setup and may end up being set up twice if we</comment>
    <comment type="line">// need to reindex later.</comment>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>node</name><operator>.</operator><name>banman</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>banman</name></name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>BanMan</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="string">"banlist.dat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>uiInterface</name></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-bantime"</literal></expr></argument>, <argument><expr><name>DEFAULT_MISBEHAVING_BANTIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>node</name><operator>.</operator><name>connman</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>connman</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CConnman</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CConnman</name><argument_list>(<argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>peer_logic</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerLogicValidation</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>connman</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>node</name><operator>.</operator><name>banman</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RegisterValidationInterface</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>peer_logic</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// sanitize comments per BIP-0014, format user agent and check total size</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>uacomments</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>cmt</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-uacomment"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cmt</name> <operator>!=</operator> <call><name>SanitizeString</name><argument_list>(<argument><expr><name>cmt</name></expr></argument>, <argument><expr><name>SAFE_CHARS_UA_COMMENT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"User Agent comment (%s) contains unsafe characters."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>uacomments</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>strSubVersion</name> <operator>=</operator> <call><name>FormatSubVersion</name><argument_list>(<argument><expr><name>CLIENT_NAME</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>, <argument><expr><name>uacomments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>strSubVersion</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SUBVERSION_LENGTH</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>,
            <argument><expr><call><name><name>strSubVersion</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MAX_SUBVERSION_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-onlynet"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr>enum <name>Network</name></expr></argument>&gt;</argument_list></name></type> <name>nets</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>snet</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-onlynet"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>enum</name> <name>Network</name></name></type> <name>net</name> <init>= <expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><name>snet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>net</name> <operator>==</operator> <name>NET_UNROUTABLE</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown network specified in -onlynet: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>snet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>nets</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>net</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NET_MAX</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>enum</name> <name>Network</name></name></type> <name>net</name> <init>= <expr><operator>(</operator>enum <name>Network</name><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>nets</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>net</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>SetReachable</name><argument_list>(<argument><expr><name>net</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check for host lookup allowed before parsing any network related parameters</comment>
    <expr_stmt><expr><name>fNameLookup</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-dns"</literal></expr></argument>, <argument><expr><name>DEFAULT_NAME_LOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>proxyRandomize</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-proxyrandomize"</literal></expr></argument>, <argument><expr><name>DEFAULT_PROXYRANDOMIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// -proxy sets a proxy for all outgoing network traffic</comment>
    <comment type="line">// -noproxy (or -proxy=0) as well as the empty string can be used to not set a proxy, this is the default</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>proxyArg</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-proxy"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SetReachable</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>proxyArg</name> <operator>!=</operator> <literal type="string">""</literal> <operator>&amp;&amp;</operator> <name>proxyArg</name> <operator>!=</operator> <literal type="string">"0"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>proxyAddr</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lookup</name><argument_list>(<argument><expr><call><name><name>proxyArg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>proxyAddr</name></expr></argument>, <argument><expr><literal type="number">9050</literal></expr></argument>, <argument><expr><name>fNameLookup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid -proxy address or hostname: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>proxyArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>proxyType</name></type> <name>addrProxy</name> <init>= <expr><call><name>proxyType</name><argument_list>(<argument><expr><name>proxyAddr</name></expr></argument>, <argument><expr><name>proxyRandomize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>addrProxy</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid -proxy address or hostname: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>proxyArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>SetProxy</name><argument_list>(<argument><expr><name>NET_IPV4</name></expr></argument>, <argument><expr><name>addrProxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetProxy</name><argument_list>(<argument><expr><name>NET_IPV6</name></expr></argument>, <argument><expr><name>addrProxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetProxy</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><name>addrProxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetNameProxy</name><argument_list>(<argument><expr><name>addrProxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SetReachable</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// by default, -proxy sets onion as reachable, unless -noonion later</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -onion can be used to set only a proxy for .onion, or override normal proxy for .onion addresses</comment>
    <comment type="line">// -noonion (or -onion=0) disables connecting to .onion entirely</comment>
    <comment type="line">// An empty string is used to not override the onion proxy (in which case it defaults to -proxy set above, or none)</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>onionArg</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-onion"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>onionArg</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>onionArg</name> <operator>==</operator> <literal type="string">"0"</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Handle -noonion/-onion=0</comment>
            <expr_stmt><expr><call><name>SetReachable</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>CService</name></type> <name>onionProxy</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lookup</name><argument_list>(<argument><expr><call><name><name>onionArg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>onionProxy</name></expr></argument>, <argument><expr><literal type="number">9050</literal></expr></argument>, <argument><expr><name>fNameLookup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid -onion address or hostname: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>onionArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>proxyType</name></type> <name>addrOnion</name> <init>= <expr><call><name>proxyType</name><argument_list>(<argument><expr><name>onionProxy</name></expr></argument>, <argument><expr><name>proxyRandomize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>addrOnion</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid -onion address or hostname: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>onionArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>SetProxy</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><name>addrOnion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SetReachable</name><argument_list>(<argument><expr><name>NET_ONION</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// see Step 2: parameter interactions for more information about these</comment>
    <expr_stmt><expr><name>fListen</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listen"</literal></expr></argument>, <argument><expr><name>DEFAULT_LISTEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fDiscover</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-discover"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_relay_txes</name> <operator>=</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-blocksonly"</literal></expr></argument>, <argument><expr><name>DEFAULT_BLOCKSONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strAddr</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-externalip"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addrLocal</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>Lookup</name><argument_list>(<argument><expr><call><name><name>strAddr</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>addrLocal</name></expr></argument>, <argument><expr><call><name>GetListenPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fNameLookup</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>addrLocal</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>AddLocal</name><argument_list>(<argument><expr><name>addrLocal</name></expr></argument>, <argument><expr><name>LOCAL_MANUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>ResolveErrMsg</name><argument_list>(<argument><expr><literal type="string">"externalip"</literal></expr></argument>, <argument><expr><name>strAddr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_ZMQ</name></expr></cpp:if>
    <expr_stmt><expr><name>g_zmq_notification_interface</name> <operator>=</operator> <call><name><name>CZMQNotificationInterface</name><operator>::</operator><name>Create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>g_zmq_notification_interface</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>RegisterValidationInterface</name><argument_list>(<argument><expr><name>g_zmq_notification_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nMaxOutboundLimit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">//unlimited unless -maxuploadtarget is set</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nMaxOutboundTimeframe</name> <init>= <expr><name>MAX_UPLOAD_TIMEFRAME</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-maxuploadtarget"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nMaxOutboundLimit</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxuploadtarget"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_UPLOAD_TARGET</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 7: load block chain</comment>

    <expr_stmt><expr><name>fReindex</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-reindex"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fReindexChainState</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-reindex-chainstate"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// cache size calculations</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTotalCache</name> <init>= <expr><operator>(</operator><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-dbcache"</literal></expr></argument>, <argument><expr><name>nDefaultDbCache</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nTotalCache</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>nTotalCache</name></expr></argument>, <argument><expr><name>nMinDbCache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// total cache cannot be less than nMinDbCache</comment>
    <expr_stmt><expr><name>nTotalCache</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nTotalCache</name></expr></argument>, <argument><expr><name>nMaxDbCache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// total cache cannot be greater than nMaxDbcache</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nBlockTreeDBCache</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nTotalCache</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>nMaxBlockDBCache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nTotalCache</name> <operator>-=</operator> <name>nBlockTreeDBCache</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nTxIndexCache</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nTotalCache</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-txindex"</literal></expr></argument>, <argument><expr><name>DEFAULT_TXINDEX</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>nMaxTxIndexCache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nTotalCache</name> <operator>-=</operator> <name>nTxIndexCache</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>filter_index_cache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>g_enabled_filter_types</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>n_indexes</name> <init>= <expr><call><name><name>g_enabled_filter_types</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>max_cache</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nTotalCache</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>max_filter_index_cache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>filter_index_cache</name> <operator>=</operator> <name>max_cache</name> <operator>/</operator> <name>n_indexes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTotalCache</name> <operator>-=</operator> <name>filter_index_cache</name> <operator>*</operator> <name>n_indexes</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nCoinDBCache</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nTotalCache</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>nTotalCache</name> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// use 25%-50% of the remainder for disk cache</comment>
    <expr_stmt><expr><name>nCoinDBCache</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nCoinDBCache</name></expr></argument>, <argument><expr><name>nMaxCoinsDBCache</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// cap total coins db cache</comment>
    <expr_stmt><expr><name>nTotalCache</name> <operator>-=</operator> <name>nCoinDBCache</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCoinCacheUsage</name> <operator>=</operator> <name>nTotalCache</name></expr>;</expr_stmt> <comment type="line">// the rest goes to in-memory cache</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nMempoolSizeMax</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxmempool"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAX_MEMPOOL_SIZE</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Cache configuration:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"* Using %.1f MiB for block index database\n"</literal></expr></argument>, <argument><expr><name>nBlockTreeDBCache</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-txindex"</literal></expr></argument>, <argument><expr><name>DEFAULT_TXINDEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"* Using %.1f MiB for transaction index database\n"</literal></expr></argument>, <argument><expr><name>nTxIndexCache</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>BlockFilterType</name></type> <name>filter_type</name> <range>: <expr><name>g_enabled_filter_types</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"* Using %.1f MiB for %s block filter index database\n"</literal></expr></argument>,
                  <argument><expr><name>filter_index_cache</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>BlockFilterTypeName</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"* Using %.1f MiB for chain state database\n"</literal></expr></argument>, <argument><expr><name>nCoinDBCache</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\n"</literal></expr></argument>, <argument><expr><name>nCoinCacheUsage</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>, <argument><expr><name>nMempoolSizeMax</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">1024</literal> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fLoaded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><name>fLoaded</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>fReset</name> <init>= <expr><name>fReindex</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strLoadError</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Loading block index..."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do>do <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>load_block_index_start_time</name> <init>= <expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>is_coinsview_empty</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// This statement makes ::ChainstateActive() usable.</comment>
                <expr_stmt><expr><name>g_chainstate</name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>CChainState</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>UnloadBlockIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// new CBlockTreeDB tries to delete the existing file, which</comment>
                <comment type="line">// fails if it's still open from the previous loop. Close it first:</comment>
                <expr_stmt><expr><call><name><name>pblocktree</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pblocktree</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CBlockTreeDB</name><argument_list>(<argument><expr><name>nBlockTreeDBCache</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>fReset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>fReset</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>pblocktree</name><operator>-&gt;</operator><name>WriteReindexing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//If we're reindexing in prune mode, wipe away unusable block files and all undo data files</comment>
                    <if_stmt><if>if <condition>(<expr><name>fPruneMode</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>CleanupBlockRevFiles</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

                <comment type="line">// LoadBlockIndex will load fHavePruned if we've ever removed a</comment>
                <comment type="line">// block file from disk.</comment>
                <comment type="line">// Note that it also sets fReindex based on the disk flag!</comment>
                <comment type="line">// From here on out fReindex and fReset mean something different!</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LoadBlockIndex</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error loading block database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If the loaded chain has a wrong genesis, bail out immediately</comment>
                <comment type="line">// (we're likely using a testnet datadir, or the other way around).</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>BlockIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                        <operator>!</operator><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><name>hashGenesisBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Incorrect or no genesis block found. Wrong datadir for network?"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Check for changed -prune state.  What we are concerned about is a user who has pruned blocks</comment>
                <comment type="line">// in the past, but is now trying to run unpruned.</comment>
                <if_stmt><if>if <condition>(<expr><name>fHavePruned</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>fPruneMode</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// At this point blocktree args are consistent with what's on disk.</comment>
                <comment type="line">// If we're not mid-reindex (based on disk + args), add a genesis block on disk</comment>
                <comment type="line">// (otherwise we use the one already on disk).</comment>
                <comment type="line">// This is called again in ThreadImport after the reindex completes.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fReindex</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>LoadGenesisBlock</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error initializing block database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// At this point we're either in reindex or we've loaded a useful</comment>
                <comment type="line">// block tree into BlockIndex()!</comment>

                <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>InitCoinsDB</name><argument_list>(
                    <comment type="block">/* cache_size_bytes */</comment> <argument><expr><name>nCoinDBCache</name></expr></argument>,
                    <comment type="block">/* in_memory */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>,
                    <comment type="block">/* should_wipe */</comment> <argument><expr><name>fReset</name> <operator>||</operator> <name>fReindexChainState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsErrorCatcher</name><argument_list>()</argument_list></call><operator>.</operator><call><name>AddReadErrCallback</name><argument_list>(<argument><expr><lambda><capture>[]</capture><parameter_list>()</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox</name></name><argument_list>(
                        <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error reading from database, shutting down."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>,
                        <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If necessary, upgrade from older database format.</comment>
                <comment type="line">// This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Upgrade</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error upgrading chainstate database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ReplayBlocks</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// The on-disk coinsdb is now in a good state, create the cache</comment>
                <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>InitCoinsCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CanFlushToDisk</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>is_coinsview_empty</name> <operator>=</operator> <name>fReset</name> <operator>||</operator> <name>fReindexChainState</name> <operator>||</operator>
                    <call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetBestBlock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsNull</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_coinsview_empty</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// LoadChainTip initializes the chain based on CoinsTip()'s best block</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>LoadChainTip</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error initializing block database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error opening block database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fReset</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.</comment>
                <comment type="line">// It both disconnects blocks based on ::ChainActive(), and drops block data in</comment>
                <comment type="line">// BlockIndex() based on lack of available witness data.</comment>
                <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Rewinding blocks..."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RewindBlockIndex</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_coinsview_empty</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Verifying blocks..."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fHavePruned</name> <operator>&amp;&amp;</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblocks"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKBLOCKS</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MIN_BLOCKS_TO_KEEP</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\n"</literal></expr></argument>,
                            <argument><expr><name>MIN_BLOCKS_TO_KEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>tip</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>RPCNotifyBlockChange</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>tip</name> <operator>&amp;&amp;</operator> <name><name>tip</name><operator>-&gt;</operator><name>nTime</name></name> <operator>&gt;</operator> <call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"The block database contains a block which appears to be from the future. "</literal>
                                <literal type="string">"This may be due to your computer's date and time being set incorrectly. "</literal>
                                <literal type="string">"Only rebuild the block database if you are sure that your computer's date and time are correct"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CVerifyDB</name><argument_list>()</argument_list></call><operator>.</operator><call><name>VerifyDB</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsDB</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checklevel"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKLEVEL</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-checkblocks"</literal></expr></argument>, <argument><expr><name>DEFAULT_CHECKBLOCKS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Corrupted block database detected"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>strLoadError</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error opening block database"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><name>fLoaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">" block index %15dms\n"</literal></expr></argument>, <argument><expr><call><name>GetTimeMillis</name><argument_list>()</argument_list></call> <operator>-</operator> <name>load_block_index_start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while<condition>(<expr><literal type="boolean">false</literal></expr>)</condition>;</do>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fLoaded</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// first suggest a reindex</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fReset</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>fRet</name> <init>= <expr><call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeQuestion</name></name><argument_list>(
                    <argument><expr><name>strLoadError</name> <operator>+</operator> <literal type="string">".\n\n"</literal> <operator>+</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Do you want to rebuild the block database now?"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>,
                    <argument><expr><name>strLoadError</name> <operator>+</operator> <literal type="string">".\nPlease restart with -reindex or -reindex-chainstate to recover."</literal></expr></argument>,
                    <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name> <operator>|</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>BTN_ABORT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>fRet</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fReindex</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>AbortShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Aborted block database rebuild. Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><name>strLoadError</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="line">// As LoadBlockIndex can take several minutes, it's possible the user</comment>
    <comment type="line">// requested to kill the GUI during the last operation. If so, exit.</comment>
    <comment type="line">// As the program has not fully started yet, Shutdown() is possibly overkill.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Shutdown requested. Exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Now that the chain state is loaded, make mempool generally available in the node context. For example the</comment>
    <comment type="line">// connection manager, wallet, or RPC threads, which are all started after this, may use it from the node context.</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>node</name><operator>.</operator><name>mempool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>mempool</name></name> <operator>=</operator> <operator>&amp;</operator><name><operator>::</operator><name>mempool</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>est_path</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call> <operator>/</operator> <name>FEE_ESTIMATES_FILENAME</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAutoFile</name></type> <name>est_filein</name><argument_list>(<argument><expr><call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>est_path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Allowed to fail as this file IS missing on first startup.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>est_filein</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>Read</name></name><argument_list>(<argument><expr><name>est_filein</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>fFeeEstimatesInitialized</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <comment type="line">// ********************************************************* Step 8: start indexers</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-txindex"</literal></expr></argument>, <argument><expr><name>DEFAULT_TXINDEX</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>g_txindex</name> <operator>=</operator> <call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>TxIndex</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nTxIndexCache</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>fReindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g_txindex</name><operator>-&gt;</operator><name>Start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>filter_type</name> <range>: <expr><name>g_enabled_filter_types</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>InitBlockFilterIndex</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>, <argument><expr><name>filter_index_cache</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>fReindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GetBlockFilterIndex</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>Start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// ********************************************************* Step 9: load wallet</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>client</name><operator>-&gt;</operator><name>load</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// ********************************************************* Step 10: data directory maintenance</comment>

    <comment type="line">// if pruning, unset the service bit and perform the initial blockstore prune</comment>
    <comment type="line">// after any wallet rescanning has taken place.</comment>
    <if_stmt><if>if <condition>(<expr><name>fPruneMode</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Unsetting NODE_NETWORK on prune mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLocalServices</name> <operator>=</operator> <call><name>ServiceFlags</name><argument_list>(<argument><expr><name>nLocalServices</name> <operator>&amp;</operator> <operator>~</operator><name>NODE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fReindex</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pruning blockstore..."</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>PruneAndFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>chainparams</name><operator>.</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call><operator>.</operator><name>SegwitHeight</name> <operator>!=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Advertise witness capabilities.</comment>
        <comment type="line">// The option to not set NODE_WITNESS is only used in the tests and should be removed.</comment>
        <expr_stmt><expr><name>nLocalServices</name> <operator>=</operator> <call><name>ServiceFlags</name><argument_list>(<argument><expr><name>nLocalServices</name> <operator>|</operator> <name>NODE_WITNESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 11: import blocks</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckDiskSpace</name><argument_list>(<argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error: Disk space is low for %s"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckDiskSpace</name><argument_list>(<argument><expr><call><name>GetBlocksDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Error: Disk space is low for %s"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><call><name>GetBlocksDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.</comment>
    <comment type="line">// No locking, as this happens before any background thread is started.</comment>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>block_notify_genesis_wait_connection</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>block_notify_genesis_wait_connection</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>NotifyBlockTip_connect</name></name><argument_list>(<argument><expr><name>BlockNotifyGenesisWait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>fHaveGenesis</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYSTEM</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-blocknotify"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>NotifyBlockTip_connect</name></name><argument_list>(<argument><expr><name>BlockNotifyCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>fs</name><operator>::</operator><name>path</name></name></expr></argument>&gt;</argument_list></name></type> <name>vImportFiles</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strFile</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-loadblock"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>vImportFiles</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>strFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>threadGroup</name><operator>.</operator><name>create_thread</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ThreadImport</name></expr></argument>, <argument><expr><name>vImportFiles</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Wait for genesis block to be processed</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>g_genesis_wait_mutex</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We previously could hang here if StartShutdown() is called prior to</comment>
        <comment type="line">// ThreadImport getting started, so instead we just wait on a timer to</comment>
        <comment type="line">// check ShutdownRequested() regularly.</comment>
        <while>while <condition>(<expr><operator>!</operator><name>fHaveGenesis</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>g_genesis_wait_cv</name><operator>.</operator><name>wait_for</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>block_notify_genesis_wait_connection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 12: start node</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>chain_active_height</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//// debug print</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"block tree size = %u\n"</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>BlockIndex</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chain_active_height</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"nBestHeight = %d\n"</literal></expr></argument>, <argument><expr><name>chain_active_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-listenonion"</literal></expr></argument>, <argument><expr><name>DEFAULT_LISTEN_ONION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>StartTorControl</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Discover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Map ports with UPnP</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-upnp"</literal></expr></argument>, <argument><expr><name>DEFAULT_UPNP</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>StartMapPort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>CConnman</name><operator>::</operator><name>Options</name></name></type> <name>connOptions</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nLocalServices</name></name> <operator>=</operator> <name>nLocalServices</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nMaxConnections</name></name> <operator>=</operator> <name>nMaxConnections</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_max_outbound_full_relay</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>MAX_OUTBOUND_FULL_RELAY_CONNECTIONS</name></expr></argument>, <argument><expr><name><name>connOptions</name><operator>.</operator><name>nMaxConnections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_max_outbound_block_relay</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>MAX_BLOCKS_ONLY_CONNECTIONS</name></expr></argument>, <argument><expr><name><name>connOptions</name><operator>.</operator><name>nMaxConnections</name></name><operator>-</operator><name><name>connOptions</name><operator>.</operator><name>m_max_outbound_full_relay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nMaxAddnode</name></name> <operator>=</operator> <name>MAX_ADDNODE_CONNECTIONS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nMaxFeeler</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nBestHeight</name></name> <operator>=</operator> <name>chain_active_height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>uiInterface</name></name> <operator>=</operator> <operator>&amp;</operator><name>uiInterface</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_banman</name></name> <operator>=</operator> <call><name><name>node</name><operator>.</operator><name>banman</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_msgproc</name></name> <operator>=</operator> <call><name><name>node</name><operator>.</operator><name>peer_logic</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nSendBufferMaxSize</name></name> <operator>=</operator> <literal type="number">1000</literal><operator>*</operator><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxsendbuffer"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAXSENDBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nReceiveFloodSize</name></name> <operator>=</operator> <literal type="number">1000</literal><operator>*</operator><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-maxreceivebuffer"</literal></expr></argument>, <argument><expr><name>DEFAULT_MAXRECEIVEBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_added_nodes</name></name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-addnode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nMaxOutboundTimeframe</name></name> <operator>=</operator> <name>nMaxOutboundTimeframe</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>nMaxOutboundLimit</name></name> <operator>=</operator> <name>nMaxOutboundLimit</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_peer_connect_timeout</name></name> <operator>=</operator> <name>peer_connect_timeout</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strBind</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-bind"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>addrBind</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lookup</name><argument_list>(<argument><expr><call><name><name>strBind</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>addrBind</name></expr></argument>, <argument><expr><call><name>GetListenPort</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><call><name>ResolveErrMsg</name><argument_list>(<argument><expr><literal type="string">"bind"</literal></expr></argument>, <argument><expr><name>strBind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>connOptions</name><operator>.</operator><name>vBinds</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>addrBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strBind</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-whitebind"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>NetWhitebindPermissions</name></type> <name>whitebind</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><name>strBind</name></expr></argument>, <argument><expr><name>whitebind</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>connOptions</name><operator>.</operator><name>vWhiteBinds</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>whitebind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>net</name> <range>: <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-whitelist"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>NetWhitelistPermissions</name></type> <name>subnet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><name>net</name></expr></argument>, <argument><expr><name>subnet</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>InitError</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>connOptions</name><operator>.</operator><name>vWhitelistedRange</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>subnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>vSeedNodes</name></name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-seednode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initiate outbound connections unless connect=0</comment>
    <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_use_addrman_outgoing</name></name> <operator>=</operator> <operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>connOptions</name><operator>.</operator><name>m_use_addrman_outgoing</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>connect</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-connect"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>connect</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>connect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="string">"0"</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>connOptions</name><operator>.</operator><name>m_specified_outgoing</name></name> <operator>=</operator> <name>connect</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>node</name><operator>.</operator><name>connman</name><operator>-&gt;</operator><name>Start</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>, <argument><expr><name>connOptions</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ********************************************************* Step 13: finished</comment>

    <expr_stmt><expr><call><name>SetRPCWarmupFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Done loading"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>client</name> <range>: <expr><name><name>node</name><operator>.</operator><name>chain_clients</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>start</name></name><argument_list>(<argument><expr><name>scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>BanMan</name><modifier>*</modifier></type> <name>banman</name> <init>= <expr><call><name><name>node</name><operator>.</operator><name>banman</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scheduler</name><operator>.</operator><name>scheduleEvery</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>banman</name></argument>]</capture><block>{<block_content>
        <expr_stmt><expr><call><name><name>banman</name><operator>-&gt;</operator><name>DumpBanlist</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></argument>, <argument><expr><name>DUMP_BANS_INTERVAL</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
