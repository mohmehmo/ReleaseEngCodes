<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/port/port_win.h"><comment type="line">// LevelDB Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// See port_example.h for documentation for the following types/functions.</comment>

<comment type="line">// Redistribution and use in source and binary forms, with or without</comment>
<comment type="line">// modification, are permitted provided that the following conditions are met:</comment>
<comment type="line">// </comment>
<comment type="line">//  * Redistributions of source code must retain the above copyright</comment>
<comment type="line">//    notice, this list of conditions and the following disclaimer.</comment>
<comment type="line">//  * Redistributions in binary form must reproduce the above copyright</comment>
<comment type="line">//    notice, this list of conditions and the following disclaimer in the</comment>
<comment type="line">//    documentation and/or other materials provided with the distribution.</comment>
<comment type="line">//  * Neither the name of the University of California, Berkeley nor the</comment>
<comment type="line">//    names of its contributors may be used to endorse or promote products</comment>
<comment type="line">//    derived from this software without specific prior written permission.</comment>
<comment type="line">// </comment>
<comment type="line">// THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY</comment>
<comment type="line">// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</comment>
<comment type="line">// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</comment>
<comment type="line">// DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY</comment>
<comment type="line">// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</comment>
<comment type="line">// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</comment>
<comment type="line">// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</comment>
<comment type="line">// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</comment>
<comment type="line">// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</comment>
<comment type="line">// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</comment>
<comment type="line">//</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_PORT_PORT_WIN_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_PORT_PORT_WIN_H_</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>close</name></cpp:macro> <cpp:value>_close</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fread_unlocked</name></cpp:macro> <cpp:value>_fread_nolock</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssize_t</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ssize_t</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;snappy.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>port</name> <block>{<block_content>

<comment type="line">// Windows is little endian (for now :p)</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kLittleEndian</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CondVar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Mutex</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>AssertHeld</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CondVar</name></decl>;</decl_stmt>
  <comment type="line">// critical sections are more efficient than mutexes</comment>
  <comment type="line">// but they are not recursive and can only be used to synchronize threads within the same process</comment>
  <comment type="line">// we use opaque void * to avoid including windows.h in port_win.h</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>cs_</name></decl>;</decl_stmt>

  <comment type="line">// No copying</comment>
  <expr_stmt><expr><call><name>Mutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Mutex</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Mutex</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// the Win32 API offers a dependable condition variable mechanism, but only starting with</comment>
<comment type="line">// Windows 2008 and Vista</comment>
<comment type="line">// no matter what we will implement our own condition variable with a semaphore</comment>
<comment type="line">// implementation as described in a paper written by Andrew D. Birrell in 2003</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CondVar</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>CondVar</name><parameter_list>(<parameter><decl><type><name>Mutex</name><modifier>*</modifier></type> <name>mu</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><call><name>CondVar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>Wait</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Signal</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SignalAll</name><parameter_list>()</parameter_list>;</function_decl>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>Mutex</name><modifier>*</modifier></type> <name>mu_</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>Mutex</name></type> <name>wait_mtx_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>waiting_</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>sem1_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>sem2_</name></decl>;</decl_stmt>
  
  
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OnceType</name> <block>{<block_content>
<label><name>public</name>:</label>
<comment type="line">//    OnceType() : init_(false) {}</comment>
    <expr_stmt><expr><call><name>OnceType</name><argument_list>(<argument><expr><specifier>const</specifier> <name>OnceType</name> <operator>&amp;</operator><name>once</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>init_</name><argument_list>(<argument>once.init_</argument>)</argument_list></macro> <block>{}</block>
    <macro><name>OnceType</name><argument_list>(<argument>bool f</argument>)</argument_list></macro> <operator>:</operator> <macro><name>init_</name><argument_list>(<argument>f</argument>)</argument_list></macro> <block>{}</block>
    <name>void</name> <macro><name>InitOnce</name><argument_list>(<argument>void (*initializer)()</argument>)</argument_list></macro> <block>{
        <expr><call><name><name>mutex_</name><operator>.</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>init_</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initializer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
        mutex_.Unlock(</block></if></if_stmt>)</block></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>bool</name></type> <name>init_</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Mutex</name></type> <name>mutex_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_ONCE_INIT</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>InitOnce</name><argument_list>(<argument><expr><name>port</name><operator>::</operator><name>OnceType</name><operator>*</operator></expr></argument>, <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>initializer</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Storage for a lock-free pointer</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AtomicPointer</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>AtomicPointer</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>rep_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{ }</block>
  <name>explicit</name> <call><name>AtomicPointer</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name>void</name><operator>*</operator> <macro><name>Acquire_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>Release_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>void</name><operator>*</operator> <macro><name>NoBarrier_Load</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>NoBarrier_Store</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_Compress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>input</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>,
                            <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>output</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>snappy</name><operator>::</operator><call><name>MaxCompressedLength</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>snappy</name><operator>::</operator><call><name>RawCompress</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_GetUncompressedLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <return>return <expr><name>snappy</name><operator>::</operator><call><name>GetUncompressedLength</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_Uncompress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                              <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <return>return <expr><name>snappy</name><operator>::</operator><call><name>RawUncompress</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>GetHeapProfile</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>HasAcceleratedCRC32C</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>AcceleratedCRC32C</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_PORT_PORT_WIN_H_</comment>
</unit>
