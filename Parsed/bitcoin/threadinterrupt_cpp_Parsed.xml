<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/threadinterrupt.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;threadinterrupt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<constructor><name><name>CThreadInterrupt</name><operator>::</operator><name>CThreadInterrupt</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>flag</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function type="operator"><name><name>CThreadInterrupt</name><operator>::</operator><name>operator <name>bool</name></name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>flag</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>memory_order_acquire</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CThreadInterrupt</name><operator>::</operator><name>reset</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>flag</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>memory_order_release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function type="operator"><type><name>void</name></type> <name><name>CThreadInterrupt</name><operator>::</operator><name>operator<name>()</name></name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>mut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>flag</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>memory_order_release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>cond</name><operator>.</operator><name>notify_all</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CThreadInterrupt</name><operator>::</operator><name>sleep_for</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name></type> <name>rel_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>mut</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>cond</name><operator>.</operator><name>wait_for</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>rel_time</name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>flag</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>memory_order_acquire</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CThreadInterrupt</name><operator>::</operator><name>sleep_for</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name></name></type> <name>rel_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sleep_for</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rel_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CThreadInterrupt</name><operator>::</operator><name>sleep_for</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>minutes</name></name></type> <name>rel_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sleep_for</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rel_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
