<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/dbwrapper.h"><comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_DBWRAPPER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_DBWRAPPER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;leveldb/db.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;leveldb/write_batch.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>DBWRAPPER_PREALLOC_KEY_SIZE</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>DBWRAPPER_PREALLOC_VALUE_SIZE</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>dbwrapper_error</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>runtime_error</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>dbwrapper_error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>msg</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>std</name><operator>::</operator><macro><name>runtime_error</name><argument_list>(<argument>msg</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CDBWrapper</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** These should be considered an implementation detail of the specific database.
 */</comment>
<decl_stmt><decl><type><name>namespace</name></type> <name>dbwrapper_private</name> <block>{<block_content>

<comment type="block" format="doxygen">/** Handle database error by throwing dbwrapper_error exception.
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>HandleError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>leveldb</name><operator>::</operator><name>Status</name><operator>&amp;</operator> <name>status</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Work around circular dependency, as well as for testing in dbwrapper_tests.
 * Database obfuscation should be considered an implementation detail of the
 * specific database.
 */</comment>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <call><name>GetObfuscateKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CDBWrapper</name> <operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Batch of changes queued to be written to a CDBWrapper */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CDBBatch</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CDBWrapper</name></decl>;</decl_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CDBWrapper</name> <modifier>&amp;</modifier></type><name>parent</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>WriteBatch</name> <name>batch</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssValue</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size_estimate</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/**
     * @param[in] _parent   CDBWrapper that this batch is to be submitted to
     */</comment>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>CDBBatch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CDBWrapper</name> <operator>&amp;</operator><name>_parent</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>parent</name><argument_list>(<argument><expr><name>_parent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ssKey</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>ssValue</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>size_estimate</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block></expr>;</expr_stmt>

    <function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size_estimate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey</name><argument_list>(<argument><expr><call><name><name>ssKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ssValue</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_VALUE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssValue</name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssValue</name><operator>.</operator><name>Xor</name></name><argument_list>(<argument><expr><name>dbwrapper_private</name><operator>::</operator><call><name>GetObfuscateKey</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slValue</name><argument_list>(<argument><expr><call><name><name>ssValue</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssValue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Put</name></name><argument_list>(<argument><expr><name>slKey</name></expr></argument>, <argument><expr><name>slValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LevelDB serializes writes as:</comment>
        <comment type="line">// - byte: header</comment>
        <comment type="line">// - varint: key length (1 byte up to 127B, 2 bytes up to 16383B, ...)</comment>
        <comment type="line">// - byte[]: key</comment>
        <comment type="line">// - varint: value length</comment>
        <comment type="line">// - byte[]: value</comment>
        <comment type="line">// The formula below assumes the key and value are both less than 16k.</comment>
        <expr_stmt><expr><name>size_estimate</name> <operator>+=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><call><name><name>slKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>+</operator> <call><name><name>slKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><call><name><name>slValue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>+</operator> <call><name><name>slValue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssValue</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey</name><argument_list>(<argument><expr><call><name><name>ssKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Delete</name></name><argument_list>(<argument><expr><name>slKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// LevelDB serializes erases as:</comment>
        <comment type="line">// - byte: header</comment>
        <comment type="line">// - varint: key length</comment>
        <comment type="line">// - byte[]: key</comment>
        <comment type="line">// The formula below assumes the key is less than 16kB.</comment>
        <expr_stmt><expr><name>size_estimate</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><call><name><name>slKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">127</literal><operator>)</operator> <operator>+</operator> <call><name><name>slKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>size_t</name> <macro><name>SizeEstimate</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>size_estimate</name></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CDBIterator</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CDBWrapper</name> <modifier>&amp;</modifier></type><name>parent</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Iterator</name> <operator>*</operator><name>piter</name></expr>;</expr_stmt>

<label><name>public</name>:</label>

    <comment type="block" format="doxygen">/**
     * @param[in] _parent          Parent CDBWrapper instance.
     * @param[in] _piter           The original leveldb iterator.
     */</comment>
    <expr_stmt><expr><call><name>CDBIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CDBWrapper</name> <operator>&amp;</operator><name>_parent</name></expr></argument>, <argument><expr><name>leveldb</name><operator>::</operator><name>Iterator</name> <operator>*</operator><name>_piter</name></expr></argument>)</argument_list></call> <operator>:</operator>
        <call><name>parent</name><argument_list>(<argument><expr><name>_parent</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>piter</name><argument_list>(<argument>_piter</argument>)</argument_list></macro> <expr><block>{ }</block></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>CDBIterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>Valid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <function_decl><type><name>void</name></type> <name>SeekToFirst</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name> <name>void</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssKey</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey</name><argument_list>(<argument><expr><call><name><name>ssKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>piter</name><operator>-&gt;</operator><name>Seek</name></name><argument_list>(<argument><expr><name>slKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function_decl><type><name>void</name></type> <name>Next</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>GetKey</name><parameter_list>(<parameter><decl><type><name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <name>slKey</name> <operator>=</operator> <call><name><name>piter</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <macro><name>try</name></macro> <block>{<block_content>
            <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssKey</name><argument_list>(<argument><expr><call><name><name>slKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>slKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><name>ssKey</name> <operator>&gt;&gt;</operator> <name>key</name></expr>;</expr_stmt>
        </block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>const std::exception&amp;</argument>)</argument_list></macro> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name> <name>bool</name></type> <name>GetValue</name><parameter_list>(<parameter><decl><type><name>V</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <name>slValue</name> <operator>=</operator> <call><name><name>piter</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <macro><name>try</name></macro> <block>{<block_content>
            <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssValue</name><argument_list>(<argument><expr><call><name><name>slValue</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>slValue</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>slValue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ssValue</name><operator>.</operator><name>Xor</name></name><argument_list>(<argument><expr><name>dbwrapper_private</name><operator>::</operator><call><name>GetObfuscateKey</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ssValue</name> <operator>&gt;&gt;</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>const std::exception&amp;</argument>)</argument_list></macro> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>unsigned</name> <name>int</name></type> <name>GetValueSize</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>piter</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CDBWrapper</name>
<block>{<block_content>
    <expr_stmt><expr><name>friend</name> <specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>dbwrapper_private</name><operator>::</operator><call><name>GetObfuscateKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CDBWrapper</name> <operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
    <comment type="line" format="doxygen">//! custom environment this database is using (may be nullptr in case of default environment)</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Env</name><operator>*</operator> <name>penv</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! database options used</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Options</name> <name>options</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! options used when reading from the database</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>ReadOptions</name> <name>readoptions</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! options used when iterating over values of the database</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>ReadOptions</name> <name>iteroptions</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! options used when writing to the database</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>WriteOptions</name> <name>writeoptions</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! options used when sync writing to the database</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>WriteOptions</name> <name>syncoptions</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! the database itself</comment>
    <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>DB</name><operator>*</operator> <name>pdb</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! the name of this database</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! a key used for optional XOR-obfuscation of the database</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>obfuscate_key</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! the key under which the obfuscation key is stored</comment>
    <expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>OBFUSCATE_KEY_KEY</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! the length of the obfuscate key in number of bytes</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>OBFUSCATE_KEY_NUM_BYTES</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <macro><name>CreateObfuscateKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/**
     * @param[in] path        Location in the filesystem where leveldb data will be stored.
     * @param[in] nCacheSize  Configures various leveldb cache settings.
     * @param[in] fMemory     If true, use leveldb's memory environment.
     * @param[in] fWipe       If true, remove all existing data.
     * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR
     *                        with a zero'd byte array.
     */</comment>
    <macro><name>CDBWrapper</name><argument_list>(<argument>const fs::path&amp; path</argument>, <argument>size_t nCacheSize</argument>, <argument>bool fMemory = false</argument>, <argument>bool fWipe = false</argument>, <argument>bool obfuscate = false</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>CDBWrapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CDBWrapper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CDBWrapper</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CDBWrapper</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CDBWrapper</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
    <name>bool</name></type> <name>Read</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><name>V</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <function_decl><type><name>CDataStream</name></type> <name>ssKey</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey</name><argument_list>(<argument><expr><call><name><name>ssKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>strValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Status</name> <name>status</name> <operator>=</operator> <call><name><name>pdb</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>readoptions</name></expr></argument>, <argument><expr><name>slKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>status</name><operator>.</operator><name>ok</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>IsNotFound</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"LevelDB read failure: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dbwrapper_private</name><operator>::</operator><call><name>HandleError</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <macro><name>try</name></macro> <block>{<block_content>
            <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssValue</name><argument_list>(<argument><expr><call><name><name>strValue</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strValue</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>strValue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ssValue</name><operator>.</operator><name>Xor</name></name><argument_list>(<argument><expr><name>obfuscate_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ssValue</name> <operator>&gt;&gt;</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block> <macro><name>catch</name> <argument_list>(<argument>const std::exception&amp;</argument>)</argument_list></macro> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>, <argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
    <name>bool</name></type> <name>Write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSync</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDBBatch</name></type> <name>batch</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>WriteBatch</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>fSync</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
    <name>bool</name></type> <name>Exists</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <function_decl><type><name>CDataStream</name></type> <name>ssKey</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>ssKey</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey</name> <operator>&lt;&lt;</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey</name><argument_list>(<argument><expr><call><name><name>ssKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>strValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Status</name> <name>status</name> <operator>=</operator> <call><name><name>pdb</name><operator>-&gt;</operator><name>Get</name></name><argument_list>(<argument><expr><name>readoptions</name></expr></argument>, <argument><expr><name>slKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>status</name><operator>.</operator><name>ok</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>IsNotFound</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"LevelDB read failure: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>status</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dbwrapper_private</name><operator>::</operator><call><name>HandleError</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
    <name>bool</name></type> <name>Erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSync</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDBBatch</name></type> <name>batch</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>batch</name><operator>.</operator><name>Erase</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>WriteBatch</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>fSync</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><name>bool</name></type> <name>WriteBatch</name><parameter_list>(<parameter><decl><type><name>CDBBatch</name><modifier>&amp;</modifier></type> <name>batch</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSync</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Get an estimate of LevelDB memory usage (in bytes).</comment>
    <expr_stmt><expr><name>size_t</name> <macro><name>DynamicMemoryUsage</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="line">// not available for LevelDB; provide for compatibility with BDB</comment>
    <function><type><name>bool</name></type> <name>Flush</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>Sync</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDBBatch</name></type> <name>batch</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <return>return <expr><call><name>WriteBatch</name><argument_list>(<argument><expr><name>batch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>CDBIterator</name> <modifier>*</modifier></type><name>NewIterator</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <return>return <expr><name>new</name> <call><name>CDBIterator</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>NewIterator</name></name><argument_list>(<argument><expr><name>iteroptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="doxygen">/**
     * Return true if the database managed by this class contains no entries.
     */</comment>
    <function_decl><type><name>bool</name></type> <name>IsEmpty</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
    <name>size_t</name></type> <name>EstimateSize</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key_begin</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key_end</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssKey1</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ssKey2</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ssKey1</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssKey2</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey1</name> <operator>&lt;&lt;</operator> <name>key_begin</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey2</name> <operator>&lt;&lt;</operator> <name>key_end</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey1</name><argument_list>(<argument><expr><call><name><name>ssKey1</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey2</name><argument_list>(<argument><expr><call><name><name>ssKey2</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Range</name> <call><name>range</name><argument_list>(<argument><expr><name>slKey1</name></expr></argument>, <argument><expr><name>slKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>GetApproximateSizes</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>size</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <comment type="block" format="doxygen">/**
     * Compact a certain range of keys in the database.
     */</comment>
    <decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>K</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>CompactRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key_begin</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key_end</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssKey1</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ssKey2</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ssKey1</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ssKey2</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>DBWRAPPER_PREALLOC_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey1</name> <operator>&lt;&lt;</operator> <name>key_begin</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ssKey2</name> <operator>&lt;&lt;</operator> <name>key_end</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey1</name><argument_list>(<argument><expr><call><name><name>ssKey1</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>leveldb</name><operator>::</operator><name>Slice</name> <call><name>slKey2</name><argument_list>(<argument><expr><call><name><name>ssKey2</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssKey2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pdb</name><operator>-&gt;</operator><name>CompactRange</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>slKey1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>slKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_DBWRAPPER_H</comment>
</unit>
