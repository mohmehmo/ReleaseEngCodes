<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/bantablemodel.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bantablemodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_types.h&gt;</cpp:file></cpp:include> <comment type="line">// For banmap_t</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/clientmodel.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDebug&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>

<function type="operator"><type><name>bool</name></type> <name><name>BannedNodeLessThan</name><operator>::</operator><name>operator<name>()</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCombinedBan</name><modifier>&amp;</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCombinedBan</name><modifier>&amp;</modifier></type> <name>right</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CCombinedBan</name><modifier>*</modifier></type> <name>pLeft</name> <init>= <expr><operator>&amp;</operator><name>left</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CCombinedBan</name><modifier>*</modifier></type> <name>pRight</name> <init>= <expr><operator>&amp;</operator><name>right</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DescendingOrder</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>pLeft</name></expr></argument>, <argument><expr><name>pRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch>switch<condition>(<expr><name>column</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name><name>BanTableModel</name><operator>::</operator><name>Address</name></name></expr>:</case>
        <return>return <expr><call><name><name>pLeft</name><operator>-&gt;</operator><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compare</name><argument_list>(<argument><expr><call><name><name>pRight</name><operator>-&gt;</operator><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
    <case>case <expr><name><name>BanTableModel</name><operator>::</operator><name>Bantime</name></name></expr>:</case>
        <return>return <expr><name><name>pLeft</name><operator>-&gt;</operator><name>banEntry</name><operator>.</operator><name>nBanUntil</name></name> <operator>&lt;</operator> <name><name>pRight</name><operator>-&gt;</operator><name>banEntry</name><operator>.</operator><name>nBanUntil</name></name></expr>;</return>
    </block_content>}</block></switch>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// private implementation</comment>
<class>class <name>BanTablePriv</name>
<block>{<private type="default">
</private><public>public:
    <comment type="block" format="doxygen">/** Local cache of peer information */</comment>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>CCombinedBan</name></expr></argument>&gt;</argument_list></name></type> <name>cachedBanlist</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Column to sort nodes by (default to unsorted) */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sortColumn</name><argument_list>{<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Order (ascending or descending) to sort nodes by */</comment>
    <decl_stmt><decl><type><name><name>Qt</name><operator>::</operator><name>SortOrder</name></name></type> <name>sortOrder</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Pull a full list of banned nodes from CNode into our cache */</comment>
    <function><type><name>void</name></type> <name>refreshBanlist</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>banmap_t</name></type> <name>banMap</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>getBanned</name></name><argument_list>(<argument><expr><name>banMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cachedBanlist</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cachedBanlist</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>banMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>banMap</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CCombinedBan</name></type> <name>banEntry</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>banEntry</name><operator>.</operator><name>subnet</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>banEntry</name><operator>.</operator><name>banEntry</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cachedBanlist</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>banEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>sortColumn</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <comment type="line">// sort cachedBanlist (use stable sort to prevent rows jumping around unnecessarily)</comment>
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>stable_sort</name></name><argument_list>(<argument><expr><call><name><name>cachedBanlist</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cachedBanlist</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>BannedNodeLessThan</name><argument_list>(<argument><expr><name>sortColumn</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>cachedBanlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>CCombinedBan</name> <modifier>*</modifier></type><name>index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <call><name><name>cachedBanlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>&amp;</operator><name><name>cachedBanlist</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<constructor><name><name>BanTableModel</name><operator>::</operator><name>BanTableModel</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>ClientModel</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QAbstractTableModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>,
    <call><name>clientModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><name>columns</name> <operator>&lt;&lt;</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"IP/Netmask"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Banned Until"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>priv</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BanTablePriv</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// load initial data</comment>
    <expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>BanTableModel</name><operator>::</operator><name>~BanTableModel</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Intentionally left empty</comment>
</block_content>}</block></destructor>

<function><type><name>int</name></type> <name><name>BanTableModel</name><operator>::</operator><name>rowCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BanTableModel</name><operator>::</operator><name>columnCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>columns</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>BanTableModel</name><operator>::</operator><name>data</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CCombinedBan</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>CCombinedBan</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>internalPointer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name></expr>)</condition> <block>{<block_content>
        <switch>switch<condition>(<expr><call><name><name>index</name><operator>.</operator><name>column</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name>Address</name></expr>:</case>
            <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>rec</name><operator>-&gt;</operator><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>Bantime</name></expr>:</case>
            <decl_stmt><decl><type><name>QDateTime</name></type> <name>date</name> <init>= <expr><call><name><name>QDateTime</name><operator>::</operator><name>fromMSecsSinceEpoch</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>date</name> <operator>=</operator> <call><name><name>date</name><operator>.</operator><name>addSecs</name></name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>banEntry</name><operator>.</operator><name>nBanUntil</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>date</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>SystemLocaleLongDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>BanTableModel</name><operator>::</operator><name>headerData</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>section</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>Orientation</name></name></type> <name>orientation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>orientation</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Horizontal</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>role</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name> <operator>&amp;&amp;</operator> <name>section</name> <operator>&lt;</operator> <call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name><name>columns</name><index>[<expr><name>section</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>Qt</name><operator>::</operator><name>ItemFlags</name></name></type> <name><name>BanTableModel</name><operator>::</operator><name>flags</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>Qt</name><operator>::</operator><name>NoItemFlags</name></name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>Qt</name><operator>::</operator><name>ItemFlags</name></name></type> <name>retval</name> <init>= <expr><name><name>Qt</name><operator>::</operator><name>ItemIsSelectable</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>ItemIsEnabled</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QModelIndex</name></type> <name><name>BanTableModel</name><operator>::</operator><name>index</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CCombinedBan</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name><name>priv</name><operator>-&gt;</operator><name>index</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>createIndex</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>QModelIndex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanTableModel</name><operator>::</operator><name>refresh</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>layoutAboutToBeChanged</name><argument_list>()</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>priv</name><operator>-&gt;</operator><name>refreshBanlist</name></name><argument_list>(<argument><expr><name>m_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>layoutChanged</name><argument_list>()</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>BanTableModel</name><operator>::</operator><name>sort</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>SortOrder</name></name></type> <name>order</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sortColumn</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sortOrder</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BanTableModel</name><operator>::</operator><name>shouldShow</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>priv</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
