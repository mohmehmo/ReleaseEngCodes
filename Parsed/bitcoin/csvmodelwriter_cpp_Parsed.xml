<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/csvmodelwriter.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/csvmodelwriter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractItemModel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFile&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextStream&gt;</cpp:file></cpp:include>

<constructor><name><name>CSVModelWriter</name><operator>::</operator><name>CSVModelWriter</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>_filename</name></decl></parameter>, <parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QObject</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>filename</name><argument_list>(<argument><expr><name>_filename</name></expr></argument>)</argument_list></call>, <call><name>model</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>CSVModelWriter</name><operator>::</operator><name>setModel</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QAbstractItemModel</name> <modifier>*</modifier></type><name>_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>model</name></name> <operator>=</operator> <name>_model</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CSVModelWriter</name><operator>::</operator><name>addColumn</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Column</name></type> <name>col</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>col</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>col</name><operator>.</operator><name>role</name></name> <operator>=</operator> <name>role</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>columns</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeValue</name><parameter_list>(<parameter><decl><type><name>QTextStream</name> <modifier>&amp;</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>escaped</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>escaped</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>, <argument><expr><literal type="string">"\"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="string">"\""</literal> <operator>&lt;&lt;</operator> <name>escaped</name> <operator>&lt;&lt;</operator> <literal type="string">"\""</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeSep</name><parameter_list>(<parameter><decl><type><name>QTextStream</name> <modifier>&amp;</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="string">","</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeNewline</name><parameter_list>(<parameter><decl><type><name>QTextStream</name> <modifier>&amp;</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>f</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CSVModelWriter</name><operator>::</operator><name>write</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QFile</name></type> <name>file</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>file</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name><name>QIODevice</name><operator>::</operator><name>WriteOnly</name></name> <operator>|</operator> <name><name>QIODevice</name><operator>::</operator><name>Text</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>QTextStream</name></type> <name>out</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>numRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>model</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>numRows</name> <operator>=</operator> <call><name><name>model</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Header row</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>writeSep</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>writeValue</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>writeNewline</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Data rows</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>numRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
    <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>columns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>writeSep</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>QVariant</name></type> <name>data</name> <init>= <expr><call><name><name>model</name><operator>-&gt;</operator><name>index</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>column</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>data</name><argument_list>(<argument><expr><name><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>role</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>writeValue</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>writeNewline</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>file</name><operator>.</operator><name>error</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QFile</name><operator>::</operator><name>NoError</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
