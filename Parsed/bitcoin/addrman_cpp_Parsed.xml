<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/addrman.cpp"><comment type="line">// Copyright (c) 2012 Pieter Wuille</comment>
<comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name><name>CAddrInfo</name><operator>::</operator><name>GetTriedBucket</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>nKey</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash1</name> <init>= <expr><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>nKey</name> <operator>&lt;&lt;</operator> <call><name>GetKey</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>GetCheapHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash2</name> <init>= <expr><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>nKey</name> <operator>&lt;&lt;</operator> <call><name>GetGroup</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>hash1</name> <operator>%</operator> <name>ADDRMAN_TRIED_BUCKETS_PER_GROUP</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>GetCheapHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>hash2</name> <operator>%</operator> <name>ADDRMAN_TRIED_BUCKET_COUNT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>CAddrInfo</name><operator>::</operator><name>GetNewBucket</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>nKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSourceGroupKey</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>GetGroup</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash1</name> <init>= <expr><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>nKey</name> <operator>&lt;&lt;</operator> <call><name>GetGroup</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>vchSourceGroupKey</name><operator>)</operator><operator>.</operator><call><name>GetCheapHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash2</name> <init>= <expr><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>nKey</name> <operator>&lt;&lt;</operator> <name>vchSourceGroupKey</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>hash1</name> <operator>%</operator> <name>ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>GetCheapHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>hash2</name> <operator>%</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>CAddrInfo</name><operator>::</operator><name>GetBucketPosition</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>nKey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fNew</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBucket</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hash1</name> <init>= <expr><operator>(</operator><call><name>CHashWriter</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>nKey</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>fNew</name></expr> ?</condition><then> <expr><literal type="char">'N'</literal></expr> </then><else>: <expr><literal type="char">'K'</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>nBucket</name> <operator>&lt;&lt;</operator> <call><name>GetKey</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>GetCheapHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>hash1</name> <operator>%</operator> <name>ADDRMAN_BUCKET_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CAddrInfo</name><operator>::</operator><name>IsTerrible</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nNow</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nLastTry</name> <operator>&amp;&amp;</operator> <name>nLastTry</name> <operator>&gt;=</operator> <name>nNow</name> <operator>-</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// never remove things tried in the last minute</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nTime</name> <operator>&gt;</operator> <name>nNow</name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// came in a flying DeLorean</comment>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nTime</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nNow</name> <operator>-</operator> <name>nTime</name> <operator>&gt;</operator> <name>ADDRMAN_HORIZON_DAYS</name> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// not seen in recent history</comment>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nLastSuccess</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nAttempts</name> <operator>&gt;=</operator> <name>ADDRMAN_RETRIES</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// tried N times and never a success</comment>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nNow</name> <operator>-</operator> <name>nLastSuccess</name> <operator>&gt;</operator> <name>ADDRMAN_MIN_FAIL_DAYS</name> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator> <name>nAttempts</name> <operator>&gt;=</operator> <name>ADDRMAN_MAX_FAILURES</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// N successive failures in the last week</comment>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name><name>CAddrInfo</name><operator>::</operator><name>GetChance</name></name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>nNow</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>fChance</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSinceLastTry</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nNow</name> <operator>-</operator> <name>nLastTry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// deprioritize very recent attempts away</comment>
    <if_stmt><if>if <condition>(<expr><name>nSinceLastTry</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fChance</name> <operator>*=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// deprioritize 66% after each failed attempt, but at most 1/28th to avoid the search taking forever or overly penalizing outages.</comment>
    <expr_stmt><expr><name>fChance</name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">0.66</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>nAttempts</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>fChance</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAddrInfo</name><modifier>*</modifier></type> <name><name>CAddrMan</name><operator>::</operator><name>Find</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pnId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>CNetAddr</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mapAddr</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>mapAddr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pnId</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>pnId</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>CAddrInfo</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it2</name> <init>= <expr><call><name><name>mapInfo</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it2</name> <operator>!=</operator> <call><name><name>mapInfo</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>it2</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAddrInfo</name><modifier>*</modifier></type> <name><name>CAddrMan</name><operator>::</operator><name>Create</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAddress</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>addrSource</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pnId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nId</name> <init>= <expr><name>nIdCount</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name> <operator>=</operator> <call><name>CAddrInfo</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>addrSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapAddr</name><index>[<expr><name>addr</name></expr>]</index></name> <operator>=</operator> <name>nId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name><operator>.</operator><name>nRandomPos</name> <operator>=</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vRandom</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pnId</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>pnId</name> <operator>=</operator> <name>nId</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>&amp;</operator><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>SwapRandom</name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nRndPos1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nRndPos2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nRndPos1</name> <operator>==</operator> <name>nRndPos2</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nRndPos1</name> <operator>&lt;</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>nRndPos2</name> <operator>&lt;</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nId1</name> <init>= <expr><name><name>vRandom</name><index>[<expr><name>nRndPos1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nId2</name> <init>= <expr><name><name>vRandom</name><index>[<expr><name>nRndPos2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nId1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nId2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>mapInfo</name><index>[<expr><name>nId1</name></expr>]</index></name><operator>.</operator><name>nRandomPos</name> <operator>=</operator> <name>nRndPos2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapInfo</name><index>[<expr><name>nId2</name></expr>]</index></name><operator>.</operator><name>nRandomPos</name> <operator>=</operator> <name>nRndPos1</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>vRandom</name><index>[<expr><name>nRndPos1</name></expr>]</index></name> <operator>=</operator> <name>nId2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vRandom</name><index>[<expr><name>nRndPos2</name></expr>]</index></name> <operator>=</operator> <name>nId1</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Delete</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>info</name><operator>.</operator><name>fInTried</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nRefCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SwapRandom</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nRandomPos</name></name></expr></argument>, <argument><expr><call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vRandom</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapAddr</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mapInfo</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nNew</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>ClearNew</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nUBucket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nUBucketPos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// if there is an entry in the specified bucket, delete it.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nIdDelete</name> <init>= <expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>infoDelete</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>nIdDelete</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>infoDelete</name><operator>.</operator><name>nRefCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>infoDelete</name><operator>.</operator><name>nRefCount</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>infoDelete</name><operator>.</operator><name>nRefCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>Delete</name><argument_list>(<argument><expr><name>nIdDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>MakeTried</name></name><parameter_list>(<parameter><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// remove the entry from all new buckets</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>bucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bucket</name> <operator>&lt;</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr>;</condition> <incr><expr><name>bucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vvNew</name><index>[<expr><name>bucket</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <name>nId</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>vvNew</name><index>[<expr><name>bucket</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nRefCount</name></name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>nNew</name><operator>--</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nRefCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// which tried bucket to move the entry to</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nKBucket</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nKBucketPos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>nKBucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// first make space to add it (the existing tried entry there is moved to new, deleting whatever is there).</comment>
    <if_stmt><if>if <condition>(<expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// find an item to evict</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nIdEvict</name> <init>= <expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nIdEvict</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>infoOld</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>nIdEvict</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Remove the to-be-evicted item from the tried set.</comment>
        <expr_stmt><expr><name><name>infoOld</name><operator>.</operator><name>fInTried</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTried</name><operator>--</operator></expr>;</expr_stmt>

        <comment type="line">// find which new bucket it belongs to</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nUBucket</name> <init>= <expr><call><name><name>infoOld</name><operator>.</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nUBucketPos</name> <init>= <expr><call><name><name>infoOld</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>nUBucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ClearNew</name><argument_list>(<argument><expr><name>nUBucket</name></expr></argument>, <argument><expr><name>nUBucketPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enter it into the new set again.</comment>
        <expr_stmt><expr><name><name>infoOld</name><operator>.</operator><name>nRefCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>=</operator> <name>nIdEvict</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNew</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name> <operator>=</operator> <name>nId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nTried</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>fInTried</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Good_</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>test_before_evict</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nLastGood</name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if not found, bail out</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pinfo</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><operator>*</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// check whether we are talking about the exact same CService (including same port)</comment>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// update info</comment>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nLastSuccess</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nLastTry</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nAttempts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">// nTime is not updated here, to avoid leaking information about</comment>
    <comment type="line">// currently-connected peers.</comment>

    <comment type="line">// if it is already in the tried set, don't do anything else</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>fInTried</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// find a bucket it is in now</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nRnd</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>ADDRMAN_NEW_BUCKET_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nUBucket</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nB</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>nRnd</name><operator>)</operator> <operator>%</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nBpos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>nB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>vvNew</name><index>[<expr><name>nB</name></expr>]</index><index>[<expr><name>nBpos</name></expr>]</index></name> <operator>==</operator> <name>nId</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nUBucket</name> <operator>=</operator> <name>nB</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// if no bucket is found, something bad happened;</comment>
    <comment type="line">// TODO: maybe re-add the node, but for now, just bail out</comment>
    <if_stmt><if>if <condition>(<expr><name>nUBucket</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// which tried bucket to move the entry to</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket_pos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>tried_bucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Will moving this address into tried evict another entry?</comment>
    <if_stmt><if>if <condition>(<expr><name>test_before_evict</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>vvTried</name><index>[<expr><name>tried_bucket</name></expr>]</index><index>[<expr><name>tried_bucket_pos</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// Output the entry we'd be colliding with, for debugging purposes</comment>
        <decl_stmt><decl><type><name>auto</name></type> <name>colliding_entry</name> <init>= <expr><call><name><name>mapInfo</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>vvTried</name><index>[<expr><name>tried_bucket</name></expr>]</index><index>[<expr><name>tried_bucket_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ADDRMAN</name></name></expr></argument>, <argument><expr><literal type="string">"Collision inserting element into tried table (%s), moving %s to m_tried_collisions=%d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>colliding_entry</name> <operator>!=</operator> <call><name><name>mapInfo</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>colliding_entry</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name><name>addr</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>ADDRMAN_SET_TRIED_COLLISION_SIZE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ADDRMAN</name></name></expr></argument>, <argument><expr><literal type="string">"Moving %s to tried\n"</literal></expr></argument>, <argument><expr><call><name><name>addr</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// move nId to the tried tables</comment>
        <expr_stmt><expr><call><name>MakeTried</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Add_</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAddress</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTimePenalty</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>addr</name><operator>.</operator><name>IsRoutable</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fNew</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Do not set a penalty for a source's self-announcement</comment>
    <if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>source</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nTimePenalty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pinfo</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// periodically update nTime</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>fCurrentlyOnline</name> <init>= <expr><operator>(</operator><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nUpdateInterval</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>fCurrentlyOnline</name></expr> ?</condition><then> <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr> </then><else>: <expr><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>||</operator> <name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>&lt;</operator> <name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>-</operator> <name>nUpdateInterval</name> <operator>-</operator> <name>nTimePenalty</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>-</operator> <name>nTimePenalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// add services</comment>
        <expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>nServices</name></name> <operator>=</operator> <call><name>ServiceFlags</name><argument_list>(<argument><expr><name><name>pinfo</name><operator>-&gt;</operator><name>nServices</name></name> <operator>|</operator> <name><name>addr</name><operator>.</operator><name>nServices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// do not update if no new information is present</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>||</operator> <operator>(</operator><name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>.</operator><name>nTime</name></name> <operator>&lt;=</operator> <name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// do not update if the entry was already in the "tried" table</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pinfo</name><operator>-&gt;</operator><name>fInTried</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// do not update if the max reference count is reached</comment>
        <if_stmt><if>if <condition>(<expr><name><name>pinfo</name><operator>-&gt;</operator><name>nRefCount</name></name> <operator>==</operator> <name>ADDRMAN_NEW_BUCKETS_PER_ADDRESS</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// stochastic test: previous nRefCount == N: 2^N times harder to increase it</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nFactor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>pinfo</name><operator>-&gt;</operator><name>nRefCount</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>nFactor</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><name>nFactor</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>nFactor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pinfo</name> <operator>=</operator> <call><name>Create</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pinfo</name><operator>-&gt;</operator><name>nTime</name></name> <operator>-</operator> <name>nTimePenalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNew</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>fNew</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nUBucket</name> <init>= <expr><call><name><name>pinfo</name><operator>-&gt;</operator><name>GetNewBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nUBucketPos</name> <init>= <expr><call><name><name>pinfo</name><operator>-&gt;</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>nUBucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>!=</operator> <name>nId</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>fInsert</name> <init>= <expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fInsert</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>infoExisting</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>infoExisting</name><operator>.</operator><name>IsTerrible</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>infoExisting</name><operator>.</operator><name>nRefCount</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pinfo</name><operator>-&gt;</operator><name>nRefCount</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <comment type="line">// Overwrite the existing new table entry.</comment>
                <expr_stmt><expr><name>fInsert</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fInsert</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>ClearNew</name><argument_list>(<argument><expr><name>nUBucket</name></expr></argument>, <argument><expr><name>nUBucketPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pinfo</name><operator>-&gt;</operator><name>nRefCount</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>=</operator> <name>nId</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>pinfo</name><operator>-&gt;</operator><name>nRefCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Delete</name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>fNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Attempt_</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fCountFailure</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if not found, bail out</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pinfo</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><operator>*</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// check whether we are talking about the exact same CService (including same port)</comment>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// update info</comment>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nLastTry</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fCountFailure</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>nLastCountAttempt</name></name> <operator>&lt;</operator> <name>nLastGood</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nLastCountAttempt</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nAttempts</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>CAddrInfo</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Select_</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>newOnly</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>CAddrInfo</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>newOnly</name> <operator>&amp;&amp;</operator> <name>nNew</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>CAddrInfo</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Use a 50% chance for choosing between tried and new table entries.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newOnly</name> <operator>&amp;&amp;</operator>
       <operator>(</operator><name>nTried</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nNew</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>insecure_rand</name><operator>.</operator><name>randbool</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// use a tried node</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>fChanceFactor</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nKBucket</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>ADDRMAN_TRIED_BUCKET_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nKBucketPos</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>ADDRMAN_BUCKET_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nKBucket</name> <operator>=</operator> <operator>(</operator><name>nKBucket</name> <operator>+</operator> <call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>ADDRMAN_TRIED_BUCKET_COUNT_LOG2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>ADDRMAN_TRIED_BUCKET_COUNT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>nKBucketPos</name> <operator>=</operator> <operator>(</operator><name>nKBucketPos</name> <operator>+</operator> <call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>ADDRMAN_BUCKET_SIZE_LOG2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>ADDRMAN_BUCKET_SIZE</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>nId</name> <init>= <expr><name><name>vvTried</name><index>[<expr><name>nKBucket</name></expr>]</index><index>[<expr><name>nKBucketPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>fChanceFactor</name> <operator>*</operator> <call><name><name>info</name><operator>.</operator><name>GetChance</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>info</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>fChanceFactor</name> <operator>*=</operator> <literal type="number">1.2</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// use a new node</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>fChanceFactor</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nUBucket</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>ADDRMAN_NEW_BUCKET_COUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nUBucketPos</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>ADDRMAN_BUCKET_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nUBucket</name> <operator>=</operator> <operator>(</operator><name>nUBucket</name> <operator>+</operator> <call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>ADDRMAN_NEW_BUCKET_COUNT_LOG2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>nUBucketPos</name> <operator>=</operator> <operator>(</operator><name>nUBucketPos</name> <operator>+</operator> <call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>ADDRMAN_BUCKET_SIZE_LOG2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>ADDRMAN_BUCKET_SIZE</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>nId</name> <init>= <expr><name><name>vvNew</name><index>[<expr><name>nUBucket</name></expr>]</index><index>[<expr><name>nUBucketPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nId</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>nId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>insecure_rand</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>fChanceFactor</name> <operator>*</operator> <call><name><name>info</name><operator>.</operator><name>GetChance</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>info</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>fChanceFactor</name> <operator>*=</operator> <literal type="number">1.2</literal></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_ADDRMAN</name></cpp:ifdef>
<function><type><name>int</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Check_</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>setTried</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mapNew</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nTried</name> <operator>+</operator> <name>nNew</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">7</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>mapInfo</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>fInTried</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>nLastSuccess</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>nRefCount</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>setTried</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>nRefCount</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>info</name><operator>.</operator><name>nRefCount</name></name></expr></argument> &gt;</argument_list></name> <name>ADDRMAN_NEW_BUCKETS_PER_ADDRESS</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>nRefCount</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>mapNew</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>nRefCount</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>mapAddr</name><index>[<expr><name>info</name></expr>]</index></name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>nRandomPos</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>info</name><operator>.</operator><name>nRandomPos</name></name> <operator>&gt;=</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>vRandom</name><index>[<expr><name><name>info</name><operator>.</operator><name>nRandomPos</name></name></expr>]</index></name> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">14</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>nLastTry</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>nLastSuccess</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">8</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>setTried</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nTried</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">9</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>mapNew</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>nNew</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>ADDRMAN_TRIED_BUCKET_COUNT</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ADDRMAN_BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><name><name>vvTried</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                 <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>setTried</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>vvTried</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                     <return>return <expr><operator>-</operator><literal type="number">11</literal></expr>;</return></block_content></block></if></if_stmt>
                 <if_stmt><if>if <condition>(<expr><name><name>mapInfo</name><index>[<expr><name><name>vvTried</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>GetTriedBucket</name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
                     <return>return <expr><operator>-</operator><literal type="number">17</literal></expr>;</return></block_content></block></if></if_stmt>
                 <if_stmt><if>if <condition>(<expr><name><name>mapInfo</name><index>[<expr><name><name>vvTried</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>GetBucketPosition</name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
                     <return>return <expr><operator>-</operator><literal type="number">18</literal></expr>;</return></block_content></block></if></if_stmt>
                 <expr_stmt><expr><call><name><name>setTried</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>vvTried</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>ADDRMAN_NEW_BUCKET_COUNT</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ADDRMAN_BUCKET_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>vvNew</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mapNew</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>vvNew</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">12</literal></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>mapInfo</name><index>[<expr><name><name>vvNew</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>GetBucketPosition</name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">19</literal></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>mapNew</name><index>[<expr><name><name>vvNew</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>mapNew</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>vvNew</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>setTried</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">13</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>mapNew</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">15</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>nKey</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">16</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>GetAddr_</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CAddress</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vAddr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nNodes</name> <init>= <expr><name>ADDRMAN_GETADDR_MAX_PCT</name> <operator>*</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nNodes</name> <operator>&gt;</operator> <name>ADDRMAN_GETADDR_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nNodes</name> <operator>=</operator> <name>ADDRMAN_GETADDR_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// gather a list of random nodes, skipping those of low quality</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>vAddr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>nNodes</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>nRndPos</name> <init>= <expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><call><name><name>vRandom</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SwapRandom</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nRndPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>vRandom</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>ai</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name><name>vRandom</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ai</name><operator>.</operator><name>IsTerrible</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>vAddr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>Connected_</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if not found, bail out</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pinfo</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><operator>*</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// check whether we are talking about the exact same CService (including same port)</comment>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// update info</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nUpdateInterval</name> <init>= <expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nTime</name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>nTime</name></name> <operator>&gt;</operator> <name>nUpdateInterval</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nTime</name></name> <operator>=</operator> <name>nTime</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>SetServices_</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CService</name><modifier>&amp;</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>ServiceFlags</name></type> <name>nServices</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>*</modifier></type> <name>pinfo</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if not found, bail out</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pinfo</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info</name> <init>= <expr><operator>*</operator><name>pinfo</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// check whether we are talking about the exact same CService (including same port)</comment>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// update info</comment>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>nServices</name></name> <operator>=</operator> <name>nServices</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CAddrMan</name><operator>::</operator><name>ResolveCollisions_</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>m_tried_collisions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>id_new</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>erase_collision</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If id_new not found in mapInfo remove it from m_tried_collisions</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>id_new</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info_new</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>id_new</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Which tried bucket to move the entry to.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket</name> <init>= <expr><call><name><name>info_new</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket_pos</name> <init>= <expr><call><name><name>info_new</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>tried_bucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>info_new</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="line">// id_new may no longer map to a valid address</comment>
                <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vvTried</name><index>[<expr><name>tried_bucket</name></expr>]</index><index>[<expr><name>tried_bucket_pos</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="line">// The position in the tried bucket is not empty</comment>

                <comment type="line">// Get the to-be-evicted address that is being tested</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>id_old</name> <init>= <expr><name><name>vvTried</name><index>[<expr><name>tried_bucket</name></expr>]</index><index>[<expr><name>tried_bucket_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>info_old</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>id_old</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <comment type="line">// Has successfully connected in last X hours</comment>
                <if_stmt><if>if <condition>(<expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>info_old</name><operator>.</operator><name>nLastSuccess</name></name> <operator>&lt;</operator> <name>ADDRMAN_REPLACEMENT_HOURS</name><operator>*</operator><operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>info_old</name><operator>.</operator><name>nLastTry</name></name> <operator>&lt;</operator> <name>ADDRMAN_REPLACEMENT_HOURS</name><operator>*</operator><operator>(</operator><literal type="number">60</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="line">// attempted to connect and failed in last X hours</comment>

                    <comment type="line">// Give address at least 60 seconds to successfully connect</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>info_old</name><operator>.</operator><name>nLastTry</name></name> <operator>&gt;</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ADDRMAN</name></name></expr></argument>, <argument><expr><literal type="string">"Replacing %s with %s in tried table\n"</literal></expr></argument>, <argument><expr><call><name><name>info_old</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>info_new</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Replaces an existing address already in the tried table with the new address</comment>
                        <expr_stmt><expr><call><name>Good_</name><argument_list>(<argument><expr><name>info_new</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>info_new</name><operator>.</operator><name>nLastSuccess</name></name> <operator>&gt;</operator> <name>ADDRMAN_TEST_WINDOW</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">// If the collision hasn't resolved in some reasonable amount of time,</comment>
                    <comment type="line">// just evict the old entry -- we must not be able to</comment>
                    <comment type="line">// connect to it for some reason.</comment>
                    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ADDRMAN</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to test; replacing %s with %s in tried table anyway\n"</literal></expr></argument>, <argument><expr><call><name><name>info_old</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>info_new</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>Good_</name><argument_list>(<argument><expr><name>info_new</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Collision is not actually a collision anymore</comment>
                <expr_stmt><expr><call><name>Good_</name><argument_list>(<argument><expr><name>info_new</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>GetAdjustedTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>erase_collision</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>erase_collision</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>CAddrInfo</name></type> <name><name>CAddrMan</name><operator>::</operator><name>SelectTriedCollision_</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>CAddrInfo</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Selects a random element from m_tried_collisions</comment>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>advance</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><call><name><name>insecure_rand</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id_new</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// If id_new not found in mapInfo remove it from m_tried_collisions</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>mapInfo</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>id_new</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_tried_collisions</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>CAddrInfo</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAddrInfo</name><modifier>&amp;</modifier></type> <name>newInfo</name> <init>= <expr><name><name>mapInfo</name><index>[<expr><name>id_new</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// which tried bucket to move the entry to</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket</name> <init>= <expr><call><name><name>newInfo</name><operator>.</operator><name>GetTriedBucket</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tried_bucket_pos</name> <init>= <expr><call><name><name>newInfo</name><operator>.</operator><name>GetBucketPosition</name></name><argument_list>(<argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>tried_bucket</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>id_old</name> <init>= <expr><name><name>vvTried</name><index>[<expr><name>tried_bucket</name></expr>]</index><index>[<expr><name>tried_bucket_pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name><name>mapInfo</name><index>[<expr><name>id_old</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
