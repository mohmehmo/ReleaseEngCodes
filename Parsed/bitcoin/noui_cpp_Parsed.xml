<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/noui.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;noui.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/connection.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/signal.hpp&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Store connections so we can disconnect them when suppressing output */</comment>
<decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>noui_ThreadSafeMessageBoxConn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>noui_ThreadSafeQuestionConn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>noui_InitMessageConn</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>noui_ThreadSafeMessageBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>fSecure</name> <init>= <expr><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>SECURE</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name><name>CClientUIInterface</name><operator>::</operator><name>SECURE</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>prefix</name> <init>= <expr><operator>!</operator><operator>(</operator><name>style</name> <operator>&amp;</operator> <name><name>CClientUIInterface</name><operator>::</operator><name>MSG_NOPREFIX</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>style</name> <operator>&amp;=</operator> <operator>~</operator><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_NOPREFIX</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strCaption</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>style</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr>:</case>
            <expr_stmt><expr><name>strCaption</name> <operator>=</operator> <literal type="string">"Error: "</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_WARNING</name></name></expr>:</case>
            <expr_stmt><expr><name>strCaption</name> <operator>=</operator> <literal type="string">"Warning: "</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_INFORMATION</name></name></expr>:</case>
            <expr_stmt><expr><name>strCaption</name> <operator>=</operator> <literal type="string">"Information: "</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>strCaption</name> <operator>=</operator> <name>caption</name> <operator>+</operator> <literal type="string">": "</literal></expr>;</expr_stmt> <comment type="line">// Use supplied caption (can be empty)</comment>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fSecure</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>strCaption</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>strCaption</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>noui_ThreadSafeQuestion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter> <comment type="block">/* ignored interactive message */</comment>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>noui_ThreadSafeMessageBox</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>noui_InitMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"init message: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>noui_connect</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>noui_ThreadSafeMessageBoxConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox_connect</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeMessageBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noui_ThreadSafeQuestionConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeQuestion_connect</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeQuestion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noui_InitMessageConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>InitMessage_connect</name></name><argument_list>(<argument><expr><name>noui_InitMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>noui_ThreadSafeMessageBoxRedirect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>noui_ThreadSafeQuestionRedirect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter> <comment type="block">/* ignored interactive message */</comment>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>noui_InitMessageRedirect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"init message: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>noui_test_redirect</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>noui_ThreadSafeMessageBoxConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>noui_ThreadSafeQuestionConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>noui_InitMessageConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noui_ThreadSafeMessageBoxConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox_connect</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeMessageBoxRedirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noui_ThreadSafeQuestionConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeQuestion_connect</name></name><argument_list>(<argument><expr><name>noui_ThreadSafeQuestionRedirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>noui_InitMessageConn</name> <operator>=</operator> <call><name><name>uiInterface</name><operator>.</operator><name>InitMessage_connect</name></name><argument_list>(<argument><expr><name>noui_InitMessageRedirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>noui_reconnect</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>noui_ThreadSafeMessageBoxConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>noui_ThreadSafeQuestionConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>noui_InitMessageConn</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>noui_connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
