<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/peertablemodel.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_PEERTABLEMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_PEERTABLEMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_processing.h&gt;</cpp:file></cpp:include> <comment type="line">// For CNodeStateStats</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractTableModel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PeerTablePriv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QTimer</name></decl>;</decl_stmt>
<macro><name>QT_END_NAMESPACE</name></macro>

<struct>struct <name>CNodeCombinedStats</name> <block>{
    <decl_stmt><decl><type><name>CNodeStats</name></type> <name>nodeStats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNodeStateStats</name></type> <name>nodeStateStats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fNodeStateStatsAvailable</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>class</name></type> <name>NodeLessThan</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>NodeLessThan</name><argument_list>(<argument>int nColumn</argument>, <argument>Qt::SortOrder fOrder</argument>)</argument_list></macro> :
        <expr_stmt><expr><call><name>column</name><argument_list>(<argument><expr><name>nColumn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>order</name><argument_list>(<argument>fOrder</argument>)</argument_list></macro> <expr><block>{}</block>
    <name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>CNodeCombinedStats</name> <operator>&amp;</operator><name>left</name><operator>,</operator> <specifier>const</specifier> <name>CNodeCombinedStats</name> <operator>&amp;</operator><name>right</name><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>Qt</name><operator>::</operator><name>SortOrder</name> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
   Qt model providing information about connected peers, similar to the
   "getpeerinfo" RPC call. Used by the rpc console UI.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>PeerTableModel</name> <range>: <expr><name>public</name> <name>QAbstractTableModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>PeerTableModel</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><name>ClientModel</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>PeerTableModel</name><argument_list>()</argument_list></call></expr>;
    <expr><specifier>const</specifier> <name>CNodeCombinedStats</name> <operator>*</operator><macro><name>getNodeStats</name><argument_list>(<argument>int idx</argument>)</argument_list></macro></expr>;
    <expr><name>int</name> <macro><name>getRowByNodeId</name><argument_list>(<argument>NodeId nodeid</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>startAutoRefresh</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>stopAutoRefresh</name><argument_list>()</argument_list></call></expr>;

    enum <expr><name>ColumnIndex</name> <block>{
        <expr><name>NetNodeId</name> <operator>=</operator> <literal type="number">0</literal></expr>,
        <expr><name>Address</name> <operator>=</operator> <literal type="number">1</literal></expr>,
        <expr><name>Ping</name> <operator>=</operator> <literal type="number">2</literal></expr>,
        <expr><name>Sent</name> <operator>=</operator> <literal type="number">3</literal></expr>,
        <expr><name>Received</name> <operator>=</operator> <literal type="number">4</literal></expr>,
        <expr><name>Subversion</name> <operator>=</operator> <literal type="number">5</literal></expr>
    }</block></expr>;

    <comment type="block" format="doxygen">/** @name Methods overridden from QAbstractTableModel
        @{*/</comment>
    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>int</name> <macro><name>columnCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>headerData</name><argument_list>(<argument>int section</argument>, <argument>Qt::Orientation orientation</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QModelIndex</name> <macro><name>index</name><argument_list>(<argument>int row</argument>, <argument>int column</argument>, <argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>Qt</name><operator>::</operator><name>ItemFlags</name> <macro><name>flags</name><argument_list>(<argument>const QModelIndex &amp;index</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>void</name> <macro><name>sort</name><argument_list>(<argument>int column</argument>, <argument>Qt::SortOrder order</argument>)</argument_list></macro></expr>;
    <comment type="block">/*@}*/</comment>

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>refresh</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr>;
    <expr><name>QStringList</name> <name>columns</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PeerTablePriv</name></expr></argument>&gt;</argument_list></name> <name>priv</name></expr>;
    <expr><name>QTimer</name> <operator>*</operator><name>timer</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_PEERTABLEMODEL_H</comment>
</unit>
