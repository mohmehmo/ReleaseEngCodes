<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/zmq/zmqnotificationinterface.cpp"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqnotificationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqpublishnotifier.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>zmqError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Error: %s, errno=%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>zmq_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>CZMQNotificationInterface</name><operator>::</operator><name>CZMQNotificationInterface</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>pcontext</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<destructor><name><name>CZMQNotificationInterface</name><operator>::</operator><name>~CZMQNotificationInterface</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><operator>*</operator></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>i</name><init>=<expr><call><name><name>notifiers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><operator>delete</operator> <operator>*</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></destructor>

<function><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CZMQAbstractNotifier</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>GetActiveNotifiers</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CZMQAbstractNotifier</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>*</modifier></type> <name>n</name> <range>: <expr><name>notifiers</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CZMQNotificationInterface</name><modifier>*</modifier></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>Create</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CZMQNotificationInterface</name><modifier>*</modifier></type> <name>notificationInterface</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>CZMQNotifierFactory</name></expr></argument>&gt;</argument_list></name></type> <name>factories</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>notifiers</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>factories</name><index>[<expr><literal type="string">"pubhashblock"</literal></expr>]</index></name> <operator>=</operator> <name><name>CZMQAbstractNotifier</name><operator>::</operator><name>Create</name><argument_list type="generic">&lt;<argument><expr><name>CZMQPublishHashBlockNotifier</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>factories</name><index>[<expr><literal type="string">"pubhashtx"</literal></expr>]</index></name> <operator>=</operator> <name><name>CZMQAbstractNotifier</name><operator>::</operator><name>Create</name><argument_list type="generic">&lt;<argument><expr><name>CZMQPublishHashTransactionNotifier</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>factories</name><index>[<expr><literal type="string">"pubrawblock"</literal></expr>]</index></name> <operator>=</operator> <name><name>CZMQAbstractNotifier</name><operator>::</operator><name>Create</name><argument_list type="generic">&lt;<argument><expr><name>CZMQPublishRawBlockNotifier</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>factories</name><index>[<expr><literal type="string">"pubrawtx"</literal></expr>]</index></name> <operator>=</operator> <name><name>CZMQAbstractNotifier</name><operator>::</operator><name>Create</name><argument_list type="generic">&lt;<argument><expr><name>CZMQPublishRawTransactionNotifier</name></expr></argument>&gt;</argument_list></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>entry</name> <range>: <expr><name>factories</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>arg</name><argument_list>(<argument><expr><literal type="string">"-zmq"</literal> <operator>+</operator> <name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CZMQNotifierFactory</name></type> <name>factory</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>address</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CZMQAbstractNotifier</name> <modifier>*</modifier></type><name>notifier</name> <init>= <expr><call><name>factory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>SetType</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>SetAddress</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>SetOutboundMessageHighWaterMark</name></name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><name>arg</name> <operator>+</operator> <literal type="string">"hwm"</literal></expr></argument>, <argument><expr><name><name>CZMQAbstractNotifier</name><operator>::</operator><name>DEFAULT_ZMQ_SNDHWM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notifiers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>notifiers</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>notificationInterface</name> <operator>=</operator> <operator>new</operator> <call><name>CZMQNotificationInterface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>notificationInterface</name><operator>-&gt;</operator><name>notifiers</name></name> <operator>=</operator> <name>notifiers</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>notificationInterface</name><operator>-&gt;</operator><name>Initialize</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>delete</operator> <name>notificationInterface</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>notificationInterface</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>notificationInterface</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Called at startup to conditionally set up ZMQ socket(s)</comment>
<function><type><name>bool</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>Initialize</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>major</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>minor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>patch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>zmq_version</name><argument_list>(<argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: version %d.%d.%d\n"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Initialize notification interface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pcontext</name> <operator>=</operator> <call><name>zmq_ctx_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pcontext</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>zmqError</name><argument_list>(<argument><expr><literal type="string">"Unable to initialize context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><modifier>*</modifier></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>i</name><init>=<expr><call><name><name>notifiers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CZMQAbstractNotifier</name> <modifier>*</modifier></type><name>notifier</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>notifier</name><operator>-&gt;</operator><name>Initialize</name></name><argument_list>(<argument><expr><name>pcontext</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Notifier %s ready (address = %s)\n"</literal></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Notifier %s failed (address = %s)\n"</literal></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Called during shutdown sequence</comment>
<function><type><name>void</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>Shutdown</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Shutdown notification interface\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pcontext</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><operator>*</operator></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>i</name><init>=<expr><call><name><name>notifiers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CZMQAbstractNotifier</name> <modifier>*</modifier></type><name>notifier</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name><name>BCLog</name><operator>::</operator><name>ZMQ</name></name></expr></argument>, <argument><expr><literal type="string">"zmq: Shutdown notifier %s at %s\n"</literal></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>GetAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>zmq_ctx_term</name><argument_list>(<argument><expr><name>pcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pcontext</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>UpdatedBlockTip</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindexNew</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name> <modifier>*</modifier></type><name>pindexFork</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fInitialDownload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fInitialDownload</name> <operator>||</operator> <name>pindexNew</name> <operator>==</operator> <name>pindexFork</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// In IBD or blocks were disconnected without any new ones</comment>
        <return>return;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><operator>*</operator></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>notifiers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CZMQAbstractNotifier</name> <modifier>*</modifier></type><name>notifier</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>notifier</name><operator>-&gt;</operator><name>NotifyBlock</name></name><argument_list>(<argument><expr><name>pindexNew</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name><name>notifiers</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>TransactionAddedToMempool</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>ptx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Used by BlockConnected and BlockDisconnected as well, because they're</comment>
    <comment type="line">// all the same external callback.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name> <init>= <expr><operator>*</operator><name>ptx</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>CZMQAbstractNotifier</name><operator>*</operator></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>i</name> <init>= <expr><call><name><name>notifiers</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><call><name><name>notifiers</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CZMQAbstractNotifier</name> <modifier>*</modifier></type><name>notifier</name> <init>= <expr><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>notifier</name><operator>-&gt;</operator><name>NotifyTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>notifier</name><operator>-&gt;</operator><name>Shutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name><name>notifiers</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>BlockConnected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pblock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexConnected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vtxConflicted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>ptx</name> <range>: <expr><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">// Do a normal notify for each transaction added in the block</comment>
        <expr_stmt><expr><call><name>TransactionAddedToMempool</name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CZMQNotificationInterface</name><operator>::</operator><name>BlockDisconnected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pblock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexDisconnected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>ptx</name> <range>: <expr><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <comment type="line">// Do a normal notify for each transaction removed in block disconnection</comment>
        <expr_stmt><expr><call><name>TransactionAddedToMempool</name><argument_list>(<argument><expr><name>ptx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><name>CZMQNotificationInterface</name><modifier>*</modifier></type> <name>g_zmq_notification_interface</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
</unit>
