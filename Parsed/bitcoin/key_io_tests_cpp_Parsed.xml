<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/key_io_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/key_io_invalid.json.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/key_io_valid.json.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>read_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>jsondata</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>key_io_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="line">// Goal: check that parsed keys match test payload</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_io_valid_parse</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>privkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destination</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content> <comment type="line">// Allow for extra stuff (useful for comments)</comment>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>exp_base58string</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>exp_payload</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>metadata</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>isPrivkey</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"isPrivkey"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"chain"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>try_case_flip</name> <init>= <expr><ternary><condition><expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"tryCaseFlip"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"tryCaseFlip"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isPrivkey</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>isCompressed</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"isCompressed"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Must be valid private key</comment>
            <expr_stmt><expr><name>privkey</name> <operator>=</operator> <call><name>DecodeSecret</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>privkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"!IsValid:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>privkey</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>isCompressed</name></expr></argument>, <argument><expr><literal type="string">"compressed mismatch:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>privkey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>exp_payload</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>std</name><operator>::</operator><name>equal</name></name><argument_list>(<argument><expr><call><name><name>privkey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>privkey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>exp_payload</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"key mismatch:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Private key must be invalid public key</comment>
            <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>DecodeDestination</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IsValid privkey as pubkey:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Must be valid public key</comment>
            <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>DecodeDestination</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CScript</name></type> <name>script</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"!IsValid:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>exp_payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Try flipped case version</comment>
            <for>for <control>(<init><decl><type><name>char</name><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>exp_base58string</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <literal type="char">'A'</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>DecodeDestination</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>try_case_flip</name></expr></argument>, <argument><expr><literal type="string">"!IsValid case flipped:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>exp_payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Public key must be invalid private key</comment>
            <expr_stmt><expr><name>privkey</name> <operator>=</operator> <call><name>DecodeSecret</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>privkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IsValid pubkey as privkey:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<comment type="line">// Goal: check that generated keys match test vectors</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_io_valid_gen</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_valid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <comment type="line">// Allow for extra stuff (useful for comments)</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>exp_base58string</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>exp_payload</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>metadata</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>isPrivkey</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"isPrivkey"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"chain"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isPrivkey</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>isCompressed</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="string">"isCompressed"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><call><name><name>exp_payload</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>exp_payload</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isCompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>EncodeSecret</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>exp_base58string</name></expr></argument>, <argument><expr><literal type="string">"result mismatch: "</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>dest</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CScript</name></type> <name>exp_script</name><argument_list>(<argument><expr><call><name><name>exp_payload</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>exp_payload</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>exp_script</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>address</name> <init>= <expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<comment type="line">// Goal: check that base58 parsing code is robust against a variety of corrupted data</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>key_io_invalid</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_invalid</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_invalid</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>key_io_invalid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Negative testcases</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>privkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destination</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <comment type="line">// Allow for extra stuff (useful for comments)</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>exp_base58string</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// must be invalid as public and as private key</comment>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>chain</name> <range>: <expr><block>{ <expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>, <expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr>, <expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr> }</block></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>SelectParams</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>DecodeDestination</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IsValid pubkey in mainnet:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>privkey</name> <operator>=</operator> <call><name>DecodeSecret</name><argument_list>(<argument><expr><name>exp_base58string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>privkey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"IsValid privkey in mainnet:"</literal> <operator>+</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
