<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/miner_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/tx_verify.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miner.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<namespace>namespace <name>miner_tests</name> <block>{
<struct>struct <name>MinerTestingSetup</name> <super_list>: <super><specifier>public</specifier> <name>TestingSetup</name></super></super_list> <block>{<public type="default">
    <decl_stmt><decl><type><name>void</name></type> <name>TestPackageSelection</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CChainParams</name><operator>&amp;</operator> <name>chainparams</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKey</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>txFirst</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>, <argument><expr><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>TestSequenceLocks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransaction</name><operator>&amp;</operator> <name>tx</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>, <argument><expr><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list>
    <argument_list>{
        return <argument><expr><call><name>CheckSequenceLocks</name><argument_list>(<argument><expr><operator>*</operator><name><name>m_node</name><operator>.</operator><name>mempool</name></name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>;
    }</argument_list></decl></decl_stmt>
</public>}</block>;</struct>
}</block></namespace> <comment type="line">// namespace miner_tests</comment>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>miner_tests</argument>, <argument>MinerTestingSetup</argument>)</argument_list></macro>

<comment type="line">// BOOST_CHECK_EXCEPTION predicates to check the specific validation error</comment>
<class>class <name>HasReason</name> <block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>HasReason</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>reason</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_reason</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>m_reason</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>;</return>
    </block_content>}</block></function><empty_stmt>;</empty_stmt>
</public><private>private:
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>m_reason</name></decl>;</decl_stmt>
</private>}</block>;</class>

<decl_stmt><decl><type><specifier>static</specifier> <name>CFeeRate</name></type> <name>blockMinFeeRate</name> <init>= <expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>DEFAULT_BLOCK_MIN_TX_FEE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>BlockAssembler</name></type> <name>AssemblerForTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CChainParams</name><modifier>&amp;</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>BlockAssembler</name><operator>::</operator><name>Options</name></name></type> <name>options</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>nBlockMaxWeight</name></name> <operator>=</operator> <name>MAX_BLOCK_WEIGHT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>blockMinFeeRate</name></name> <operator>=</operator> <name>blockMinFeeRate</name></expr>;</expr_stmt>
    <return>return <expr><call><name>BlockAssembler</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier>
struct <block>{<public type="default">
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>extranonce</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nonce</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>blockinfo</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0xa4a3e223</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x15c32f9e</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x0375b547</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x7004a8a5</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xce440296</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x52cfe198</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x77a72cd0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xbb5d6f84</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x83f30c2c</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x48a73d5b</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xef7dcd01</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x6809c6c4</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x0883ab3c</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x087bbbe2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x2104a814</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xdffb6daa</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xee8a0a08</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xba4237c1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xa70349dc</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x344722bb</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0xd6294733</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xec9f5c94</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xca2fbc28</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x6ba4f406</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x015d4532</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x6e119b7c</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x43e8f314</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x27962f38</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xb571b51b</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xb36bee23</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xd17924a8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x6bc212d9</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x630d4948</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x9a4c4ebb</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x554be537</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xd63ddfc7</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xa10acc11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x759a8363</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xfb73090d</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xe82c6a34</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xe33e92d7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0x658ef5cb</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xba32ff22</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x0227a10c</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xa9a70155</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0xd096d809</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x37176174</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x830b8d0f</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xc6e3910e</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x823f3ca8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x99850849</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x7521fb81</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xaacaabab</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xd645a2eb</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x7aea1781</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x9d6e4b78</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x4ce90fd8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xabdc832d</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">0x4a34f32a</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xf2524c1c</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x1bbeb08a</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xad47f480</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x9f026aeb</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x15a95049</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xd1cb95b2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xf84bbda5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x0fa62cd1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xe05f9169</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x78d194a9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x3e38147b</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x737ba0d4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x63378e10</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x6d5f91cf</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x88612eb8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xe9639484</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xb7fabc9d</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x19b01592</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x5a90dd31</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x5bd7e028</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x94d00323</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xa9b9c01a</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x3a40de61</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x56e7eec7</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x859f7ef6</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xfd8e5630</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x2b0c9f7f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xba700e26</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x7170a408</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x70de86a8</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x74d64cd5</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x49e738a1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x6910b602</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x643c565f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x54264b3f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x97ea6396</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x55174459</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0x03e8779a</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x98f34d8f</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xc07b2b07</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xdfe29668</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x3141c7c1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xb3b595f4</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x735abf08</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0x623bfbce</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xd351e722</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xf4ca48c9</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x5b19c670</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xa164bf0e</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xbbbeb305</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0xfe1c810a</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>CBlockIndex</name></type> <name>CreateBlockIndex</name><argument_list>(<argument><expr><name>int</name> <name>nHeight</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><name>CBlockIndex</name> <name>index</name></expr></argument>;
    <argument><expr><name><name>index</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <name>nHeight</name></expr></argument>;
    <argument><expr><name><name>index</name><operator>.</operator><name>pprev</name></name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></argument>;
    return <argument><expr><name>index</name></expr></argument>;
}</argument_list>

<comment type="line">// Test suite for ancestor feerate transaction selection.</comment>
<comment type="line">// Implemented as an additional function, rather than a separate test case,</comment>
<comment type="line">// to allow reusing the blockchain created in CreateNewBlock_validity.</comment>
<name>void</name> <name><name>MinerTestingSetup</name><operator>::</operator><name>TestPackageSelection</name></name><argument_list>(<argument><expr><specifier>const</specifier> <name>CChainParams</name><operator>&amp;</operator> <name>chainparams</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>scriptPubKey</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>txFirst</name></expr></argument>)</argument_list>
<argument_list>{
    <comment type="line">// Test the ancestor feerate transaction selection.</comment>
    <argument><expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr></argument>;

    <comment type="line">// Test that a medium fee transaction will be selected after a higher fee</comment>
    <comment type="line">// rate package with a low fee rate parent.</comment>
    <argument><expr><name>CMutableTransaction</name> <name>tx</name></expr></argument>;
    <argument><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
    <argument><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">1000</literal></expr></argument>;
    <comment type="line">// This tx has a low fee: 1000 satoshis</comment>
    <argument><expr><name>uint256</name> <name>hashParentTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>; <comment type="line">// save this txid for later use</comment>
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// This tx has a medium fee: 10000 satoshis</comment>
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">10000</literal></expr></argument>;
    <argument><expr><name>uint256</name> <name>hashMediumFeeTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// This tx has a high fee, but depends on the first transaction</comment>
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hashParentTx</name></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">1000</literal> <operator>-</operator> <literal type="number">50000</literal></expr></argument>; <comment type="line">// 50k satoshi fee</comment>
    <argument><expr><name>uint256</name> <name>hashHighFeeTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name> <name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashParentTx</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashHighFeeTx</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashMediumFeeTx</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Test that a package below the block min tx fee doesn't get included</comment>
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hashHighFeeTx</name></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">1000</literal> <operator>-</operator> <literal type="number">50000</literal></expr></argument>; <comment type="line">// 0 fee</comment>
    <argument><expr><name>uint256</name> <name>hashFreeTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>size_t</name> <name>freeTxSize</name> <operator>=</operator> <call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Calculate a fee on child transaction that will put the package just</comment>
    <comment type="line">// below the block min tx fee (assuming 1 child tx of the same size).</comment>
    <argument><expr><name>CAmount</name> <name>feeToUse</name> <operator>=</operator> <call><name><name>blockMinFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>freeTxSize</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>;

    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hashFreeTx</name></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">1000</literal> <operator>-</operator> <literal type="number">50000</literal> <operator>-</operator> <name>feeToUse</name></expr></argument>;
    <argument><expr><name>uint256</name> <name>hashLowFeeTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>feeToUse</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>;
    <comment type="line">// Verify that the free tx and the low fee tx didn't get selected</comment>
    for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name><operator>=</operator><literal type="number">0</literal>; <name>i</name><operator>&lt;</operator><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hashFreeTx</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hashLowFeeTx</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// Test that packages above the min relay fee do get included, even if one</comment>
    <comment type="line">// of the transactions is below the min relay fee</comment>
    <comment type="line">// Remove the low fee transaction and replace with a higher fee transaction</comment>
    <call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>removeRecursive</name></name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>MemPoolRemovalReason</name><operator>::</operator><name>REPLACED</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>-=</operator> <literal type="number">2</literal></expr></argument>; <comment type="line">// Now we should be just over the min relay fee</comment>
    <argument><expr><name>hashLowFeeTx</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>feeToUse</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashFreeTx</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashLowFeeTx</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Test that transaction selection properly updates ancestor fee</comment>
    <comment type="line">// calculations as ancestor transactions get included in a block.</comment>
    <comment type="line">// Add a 0-fee transaction that has 2 outputs.</comment>
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">100000000</literal></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">100000000</literal></expr></argument>; <comment type="line">// 1BTC output</comment>
    <argument><expr><name>uint256</name> <name>hashFreeTx2</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// This tx can't be mined by itself</comment>
    <argument><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hashFreeTx2</name></expr></argument>;
    <argument><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>feeToUse</name> <operator>=</operator> <call><name><name>blockMinFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>freeTxSize</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">5000000000LL</literal> <operator>-</operator> <literal type="number">100000000</literal> <operator>-</operator> <name>feeToUse</name></expr></argument>;
    <argument><expr><name>uint256</name> <name>hashLowFeeTx2</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>;
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>feeToUse</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// Verify that this tx isn't selected.</comment>
    for <argument><expr><operator>(</operator><name>size_t</name> <name>i</name><operator>=</operator><literal type="number">0</literal>; <name>i</name><operator>&lt;</operator><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hashFreeTx2</name></expr></argument>)</argument_list></call></expr>;
        <expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hashLowFeeTx2</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    <comment type="line">// This tx will be mineable, and should cause hashLowFeeTx2 to be selected</comment>
    <comment type="line">// as well.</comment>
    <name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
    <argument><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">100000000</literal> <operator>-</operator> <literal type="number">10000</literal></expr></argument>; <comment type="line">// 10k satoshi fee</comment>
    <argument><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call> <operator>==</operator> <name>hashLowFeeTx2</name></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

<comment type="line">// NOTE: These tests rely on CreateNewBlock doing its own self-validation!</comment>
<name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument><expr><name>CreateNewBlock_validity</name></expr></argument>)</argument_list>
<argument_list>{
    <comment type="line">// Note that by default, these tests run with size accounting enabled.</comment>
    <argument><expr><specifier>const</specifier> <name>auto</name> <name>chainParams</name> <operator>=</operator> <call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><specifier>const</specifier> <name>CChainParams</name><operator>&amp;</operator> <name>chainparams</name> <operator>=</operator> <operator>*</operator><name>chainParams</name></expr></argument>;
    <argument><expr><name>CScript</name> <name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name> <name>pblocktemplate</name></expr></argument>;
    <argument><expr><name>CMutableTransaction</name> <name>tx</name></expr></argument>;
    <argument><expr><name>CScript</name> <name>script</name></expr></argument>;
    <argument><expr><name>uint256</name> <name>hash</name></expr></argument>;
    <argument><expr><name>TestMemPoolEntryHelper</name> <name>entry</name></expr></argument>;
    <argument><expr><name><name>entry</name><operator>.</operator><name>nFee</name></name> <operator>=</operator> <literal type="number">11</literal></expr></argument>;
    <argument><expr><name><name>entry</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <literal type="number">11</literal></expr></argument>;

    <argument><expr><name>fCheckpointsEnabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr></argument>;

    <comment type="line">// Simple block creation, nothing special yet:</comment>
    <argument><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;

    <comment type="line">// We can't make transactions until we have inputs</comment>
    <comment type="line">// Therefore, load 100 blocks :)</comment>
    <argument><expr><name>int</name> <name>baseheight</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;
    <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name> <name>txFirst</name></expr></argument>;
    for <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>blockinfo</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>blockinfo</name></expr></argument>)</argument_list></sizeof>; <operator>++</operator><name>i</name><operator>)</operator>
    <block>{
        <expr><name>CBlock</name> <operator>*</operator><name>pblock</name> <operator>=</operator> <operator>&amp;</operator><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name></name></expr>; <comment type="line">// pointer for convenience</comment>
        <expr><block>{
            <expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;
            <expr><name><name>pblock</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
            <expr><name><name>pblock</name><operator>-&gt;</operator><name>nTime</name></name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;
            <expr><name>CMutableTransaction</name> <call><name>txCoinbase</name><argument_list>(<argument><expr><operator>*</operator><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;
            <expr><name><name>txCoinbase</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
            <expr><name><name>txCoinbase</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;
            <expr><name><name>txCoinbase</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>blockinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>extranonce</name></expr></argument>)</argument_list></call></expr>;
            <expr><name><name>txCoinbase</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>scriptSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <expr><call><name><name>txCoinbase</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>; <comment type="line">// Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)</comment>
            <expr><name><name>txCoinbase</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;
            <expr><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>txCoinbase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <if_stmt><if>if <condition>(<expr><call><name><name>txFirst</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>baseheight</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr>
            <if_stmt><if>if <condition>(<expr><call><name><name>txFirst</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>txFirst</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <name><name>pblock</name><operator>-&gt;</operator><name>hashMerkleRoot</name></name> <operator>=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><operator>*</operator><name>pblock</name></expr></argument>)</argument_list></call></block></expr></argument>;
            <argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>nNonce</name></name> <operator>=</operator> <name><name>blockinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nonce</name></expr></argument>;
        }</argument_list>
        <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name> <name>shared_pblock</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>pblock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>, <argument><expr><name>shared_pblock</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pblock</name><operator>-&gt;</operator><name>hashPrevBlock</name></name> <operator>=</operator> <call><name><name>pblock</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }

    LOCK<expr_stmt><expr><operator>(</operator><name>cs_main</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>cs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Just to make sure we can still make simple blocks</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>BLOCKSUBSIDY</name> <init>= <expr><literal type="number">50</literal><operator>*</operator><name>COIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>LOWFEE</name> <init>= <expr><name>CENT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>HIGHFEE</name> <init>= <expr><name>COIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>HIGHERFEE</name> <init>= <expr><literal type="number">4</literal><operator>*</operator><name>COIN</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// block sigops &gt; limit: 1000 CHECKMULTISIG + 1</comment>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_NOP</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1001</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>-=</operator> <name>LOWFEE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>spendsCoinbase</name> <init>= <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// only first tx spends coinbase</comment>
        <comment type="line">// If we don't set the # of sig ops in the CTxMemPoolEntry, template creation fails</comment>
        <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><name>spendsCoinbase</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>, <argument><expr><call><name>HasReason</name><argument_list>(<argument><expr><literal type="string">"bad-blk-sigops"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1001</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>-=</operator> <name>LOWFEE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>spendsCoinbase</name> <init>= <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// only first tx spends coinbase</comment>
        <comment type="line">// If we do set the # of sig ops in the CTxMemPoolEntry, template creation passes</comment>
        <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><name>spendsCoinbase</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>SigOpsCost</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// block size &gt; limit</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// 18 * (520char + DROP) + OP_1 = 9433 bytes</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchData</name><argument_list>(<argument><expr><literal type="number">520</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>vchData</name> <operator>&lt;&lt;</operator> <name>OP_DROP</name></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>-=</operator> <name>LOWFEE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>spendsCoinbase</name> <init>= <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// only first tx spends coinbase</comment>
        <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><name>spendsCoinbase</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// orphan in *m_node.mempool, template creation fails</comment>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>, <argument><expr><call><name>HasReason</name><argument_list>(<argument><expr><literal type="string">"bad-txns-inputs-missingorspent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// child with higher feerate than parent</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name><operator>-</operator><name>HIGHFEE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>HIGHFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name><operator>+</operator><name>BLOCKSUBSIDY</name><operator>-</operator><name>HIGHERFEE</name></expr>;</expr_stmt> <comment type="line">//First txn output + fresh coinbase - new txn fee</comment>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>HIGHERFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// coinbase in *m_node.mempool, template creation fails</comment>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>prevout</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// give it a fee so it'll get mined</comment>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Should throw bad-cb-multiple</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>, <argument><expr><call><name>HasReason</name><argument_list>(<argument><expr><literal type="string">"bad-cb-multiple"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// double spend txn pair in *m_node.mempool, template creation fails</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name><operator>-</operator><name>HIGHFEE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>HIGHFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>HIGHFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>, <argument><expr><call><name>HasReason</name><argument_list>(<argument><expr><literal type="string">"bad-txns-inputs-missingorspent"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// subsidy changing</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Create an actual 209999-long block chain (without valid blocks).</comment>
    <while>while <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>&lt;</operator> <literal type="number">209999</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><operator>new</operator> <call><name>CBlockIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>phashBlock</name></name> <operator>=</operator> <operator>new</operator> <call><name>uint256</name><argument_list>(<argument><expr><call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetBestBlock</name><argument_list>(<argument><expr><call><name><name>next</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>next</name><operator>-&gt;</operator><name>BuildSkip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetTip</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Extend to a 210000-long block chain.</comment>
    <while>while <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>&lt;</operator> <literal type="number">210000</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><operator>new</operator> <call><name>CBlockIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>phashBlock</name></name> <operator>=</operator> <operator>new</operator> <call><name>uint256</name><argument_list>(<argument><expr><call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetBestBlock</name><argument_list>(<argument><expr><call><name><name>next</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>pprev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>next</name><operator>-&gt;</operator><name>BuildSkip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetTip</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// invalid p2sh txn in *m_node.mempool, template creation fails</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name><operator>-</operator><name>LOWFEE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>-=</operator> <name>LOWFEE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>LOWFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Should throw block-validation-failed</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>, <argument><expr><call><name>HasReason</name><argument_list>(<argument><expr><literal type="string">"block-validation-failed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Delete the dummy blocks again.</comment>
    <while>while <condition>(<expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>&gt;</operator> <name>nHeight</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>del</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetTip</name><argument_list>(<argument><expr><name><name>del</name><operator>-&gt;</operator><name>pprev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>CoinsTip</name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetBestBlock</name><argument_list>(<argument><expr><call><name><name>del</name><operator>-&gt;</operator><name>pprev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator> <name><name>del</name><operator>-&gt;</operator><name>phashBlock</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator> <name>del</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// non-final txs in mempool</comment>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>LOCKTIME_VERIFY_SEQUENCE</name><operator>|</operator><name>LOCKTIME_MEDIAN_TIME_PAST</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// height map</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prevheights</name></decl>;</decl_stmt>

    <comment type="line">// relative height locked</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prevheights</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// only 1 transaction</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// txFirst[0] is the 2nd block</comment>
    <expr_stmt><expr><name><name>prevheights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>baseheight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>BLOCKSUBSIDY</name><operator>-</operator><name>HIGHFEE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Fee</name></name><argument_list>(<argument><expr><name>HIGHFEE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Time</name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>SpendsCoinbase</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime passes</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks fail</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevheights</name></expr></argument>, <argument><expr><call><name>CreateBlockIndex</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass on 2nd block</comment>

    <comment type="line">// relative time locked</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_LOCKTIME_TYPE_FLAG</name></name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>-</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_LOCKTIME_GRANULARITY</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt> <comment type="line">// txFirst[1] is the 3rd block</comment>
    <expr_stmt><expr><name><name>prevheights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>baseheight</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Time</name></name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime passes</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks fail</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>CBlockIndex</name><operator>::</operator><name>nMedianTimeSpan</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nTime</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></for> <comment type="line">//Trick the MedianTimePast</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prevheights</name></expr></argument>, <argument><expr><call><name>CreateBlockIndex</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass 512 seconds later</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>CBlockIndex</name><operator>::</operator><name>nMedianTimeSpan</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nTime</name> <operator>-=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></for> <comment type="line">//undo tricked MTP</comment>

    <comment type="line">// absolute height locked</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_FINAL</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prevheights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>baseheight</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Time</name></name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime fails</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime passes on 2nd block</comment>

    <comment type="line">// absolute time locked</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>txFirst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prevheights</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prevheights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>baseheight</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>addUnchecked</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>Time</name></name><argument_list>(<argument><expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>FromTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime fails</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>IsFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime passes 1 second later</comment>

    <comment type="line">// mempool-dependent transactions (not added)</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prevheights</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CheckFinalTx</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Locktime passes</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks fail</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_LOCKTIME_TYPE_FLAG</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks pass</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSequence</name> <operator>=</operator> <name><name>CTxIn</name><operator>::</operator><name>SEQUENCE_LOCKTIME_TYPE_FLAG</name></name> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>TestSequenceLocks</name><argument_list>(<argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sequence locks fail</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// None of the of the absolute height/time locked tx should have made</comment>
    <comment type="line">// it into the template because we still check IsFinalTx in CreateNewBlock,</comment>
    <comment type="line">// but relative locked txs will if inconsistently added to mempool.</comment>
    <comment type="line">// For now these will still generate a valid template until BIP68 soft fork</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// However if we advance height by 1 and time by 512, all of them should be mined</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>CBlockIndex</name><operator>::</operator><name>nMedianTimeSpan</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetAncestor</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nTime</name> <operator>+=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></for> <comment type="line">//Trick the MedianTimePast</comment>
    <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetMedianTimePast</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>AssemblerForTest</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>nHeight</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetMockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>mempool</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TestPackageSelection</name><argument_list>(<argument><expr><name>chainparams</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>txFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fCheckpointsEnabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
