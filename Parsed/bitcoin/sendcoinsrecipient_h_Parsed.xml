<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/sendcoinsrecipient.h"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_SENDCOINSRECIPIENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_SENDCOINSRECIPIENT_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>SendCoinsRecipient</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>amount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>fSubtractFeeFromAmount</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nVersion</name><argument_list>(<argument>SendCoinsRecipient::CURRENT_VERSION</argument>)</argument_list></macro> <expr><block>{ }</block>
    <name>explicit</name> <call><name>SendCoinsRecipient</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>_label</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CAmount</name><operator>&amp;</operator> <name>_amount</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>_message</name></expr></argument>)</argument_list></call><operator>:</operator>
        <call><name>address</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>label</name><argument_list>(<argument><expr><name>_label</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>amount</name><argument_list>(<argument><expr><name>_amount</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>message</name><argument_list>(<argument><expr><name>_message</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>fSubtractFeeFromAmount</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nVersion</name><argument_list>(<argument>SendCoinsRecipient::CURRENT_VERSION</argument>)</argument_list></macro> <expr><block>{}</block>

    <comment type="line">// If from an unauthenticated payment request, this is used for storing</comment>
    <comment type="line">// the addresses, e.g. address-A&lt;br /&gt;address-B&lt;br /&gt;address-C.</comment>
    <comment type="line">// Info: As we don't need to process addresses in here when using</comment>
    <comment type="line">// payment requests, we can abuse it for displaying an address list.</comment>
    <comment type="line">// Todo: This is a hack, should be replaced with a cleaner solution!</comment>
    <name>QString</name> <name>address</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>amount</name></decl>;</decl_stmt>
    <comment type="line">// If from a payment request, this is used for storing the memo</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>message</name></decl>;</decl_stmt>
    <comment type="line">// Keep the payment request around as a serialized string to ensure</comment>
    <comment type="line">// load/store is lossless.</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sPaymentRequest</name></expr>;</expr_stmt>
    <comment type="line">// Empty if no authentication or invalid signature/cert/etc.</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>authenticatedMerchant</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>fSubtractFeeFromAmount</name></decl>;</decl_stmt> <comment type="line">// memory only</comment>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CURRENT_VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sAddress</name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sLabel</name> <operator>=</operator> <call><name><name>label</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sMessage</name> <operator>=</operator> <call><name><name>message</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>sAuthenticatedMerchant</name> <operator>=</operator> <call><name><name>authenticatedMerchant</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>sAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>sLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>sMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>sPaymentRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>sAuthenticatedMerchant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>address</name> <operator>=</operator> <name>QString</name><operator>::</operator><call><name>fromStdString</name><argument_list>(<argument><expr><name>sAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>label</name> <operator>=</operator> <name>QString</name><operator>::</operator><call><name>fromStdString</name><argument_list>(<argument><expr><name>sLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <name>QString</name><operator>::</operator><call><name>fromStdString</name><argument_list>(<argument><expr><name>sMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>authenticatedMerchant</name> <operator>=</operator> <name>QString</name><operator>::</operator><call><name>fromStdString</name><argument_list>(<argument><expr><name>sAuthenticatedMerchant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_SENDCOINSRECIPIENT_H</comment>
</unit>
