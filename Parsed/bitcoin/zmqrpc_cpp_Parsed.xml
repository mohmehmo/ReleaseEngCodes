<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/zmq/zmqrpc.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqrpc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqabstractnotifier.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zmq/zmqnotificationinterface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<namespace>namespace <block>{

<function><type><name>UniValue</name></type> <name>getzmqnotifications</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getzmqnotifications"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns information about the active ZeroMQ notifications.\n"</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[\n"</literal>
            <literal type="string">"  {                        (json object)\n"</literal>
            <literal type="string">"    \"type\": \"pubhashtx\",   (string) Type of notification\n"</literal>
            <literal type="string">"    \"address\": \"...\",      (string) Address of the publisher\n"</literal>
            <literal type="string">"    \"hwm\": n                 (numeric) Outbound message high water mark\n"</literal>
            <literal type="string">"  },\n"</literal>
            <literal type="string">"  ...\n"</literal>
            <literal type="string">"]\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getzmqnotifications"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getzmqnotifications"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>g_zmq_notification_interface</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>*</modifier></type> <name>n</name> <range>: <expr><call><name><name>g_zmq_notification_interface</name><operator>-&gt;</operator><name>GetActiveNotifiers</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name><name>n</name><operator>-&gt;</operator><name>GetType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>n</name><operator>-&gt;</operator><name>GetAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hwm"</literal></expr></argument>, <argument><expr><call><name><name>n</name><operator>-&gt;</operator><name>GetOutboundMessageHighWaterMark</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>commands</name><index>[]</index></name> <init>=
<expr><block>{ <comment type="line">//  category              name                                actor (function)                argNames</comment>
  <comment type="line">//  -----------------     ------------------------            -----------------------         ----------</comment>
    <expr><block>{ <expr><literal type="string">"zmq"</literal></expr>,                <expr><literal type="string">"getzmqnotifications"</literal></expr>,              <expr><operator>&amp;</operator><name>getzmqnotifications</name></expr>,           <expr><block>{}</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

}</block></namespace> <comment type="line">// anonymous namespace</comment>

<function><type><name>void</name></type> <name>RegisterZMQRPCCommands</name><parameter_list>(<parameter><decl><type><name>CRPCTable</name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>c</name> <range>: <expr><name>commands</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>appendCommand</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>
</unit>
