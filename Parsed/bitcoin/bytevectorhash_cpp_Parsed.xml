<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/util/bytevectorhash.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/siphash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bytevectorhash.h&gt;</cpp:file></cpp:include>

<constructor><name><name>ByteVectorHash</name><operator>::</operator><name>ByteVectorHash</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>m_k0</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m_k0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>m_k1</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>m_k1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function type="operator"><type><name>size_t</name></type> <name><name>ByteVectorHash</name><operator>::</operator><name>operator<name>()</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>input</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>CSipHasher</name><argument_list>(<argument><expr><name>m_k0</name></expr></argument>, <argument><expr><name>m_k1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
