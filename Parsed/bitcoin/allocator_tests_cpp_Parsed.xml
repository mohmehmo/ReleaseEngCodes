<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/allocator_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>allocator_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>arena_tests</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Fake memory base address for testing</comment>
    <comment type="line">// without actually using memory.</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>synth_base</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x08000000</literal></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>synth_size</name> <init>= <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Arena</name></type> <name>b</name><argument_list>(<argument><expr><name>synth_base</name></expr></argument>, <argument><expr><name>synth_size</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>chunk</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">1008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Aligned to 16</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Nothing has disappeared?</comment>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content> <comment type="line">// Test exception on double-free</comment>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>runtime_error</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
    <block>{<block_content>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a0</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">896</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a3</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>chunks_used</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>chunks_free</name></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>void</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// allocating 0 always returns nullptr</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ARENA_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>walk</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Sweeping allocate all memory</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// memory is full, this must return nullptr</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now in the other direction...</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">1024</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr><literal type="number">1023</literal><operator>-</operator><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Now allocate in smaller unequal chunks, then deallocate haphazardly</comment>
    <comment type="line">// Not all the chunks will succeed allocating, but freeing nullptr is</comment>
    <comment type="line">// allowed so that is no problem.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2048</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2048</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr><operator>(</operator><operator>(</operator><name>x</name><operator>*</operator><literal type="number">23</literal><operator>)</operator><operator>%</operator><literal type="number">2048</literal><operator>)</operator><operator>^</operator><literal type="number">242</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Go entirely wild: free and alloc interleaved,</comment>
    <comment type="line">// generate targets and sizes using pseudo-randomness.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">2048</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>s</name> <init>= <expr><literal type="number">0x12345678</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">5000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>s</name> <operator>&amp;</operator> <operator>(</operator><call><name><name>addr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>addr</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name><name>b</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><operator>(</operator><name>s</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2047</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>lsb</name> <init>= <expr><name>s</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lsb</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>s</name> <operator>^=</operator> <literal type="number">0xf00f00f0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// LFSR period 0xf7ffffe0</comment>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name><range>: <expr><name>addr</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <name>synth_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block" format="doxygen">/** Mock LockedPageAllocator for testing */</comment>
<class>class <name>TestLockedPageAllocator</name><super_list>: <super><specifier>public</specifier> <name>LockedPageAllocator</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><name>TestLockedPageAllocator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lockedcount_in</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>count</name><argument_list>(<argument><expr><name>count_in</name></expr></argument>)</argument_list></call>, <call><name>lockedcount</name><argument_list>(<argument><expr><name>lockedcount_in</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>void</name><modifier>*</modifier></type> <name>AllocateLocked</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>lockingSuccess</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>lockingSuccess</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>--</operator><name>count</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>lockedcount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>--</operator><name>lockedcount</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>lockingSuccess</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name>uint64_t</name><argument_list>{<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x08000000</literal></expr></argument>)</argument_list></cast> <operator>+</operator> <operator>(</operator><name>count</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></argument>}</argument_list></call></expr></argument>)</argument_list></cast></expr>;</return> <comment type="line">// Fake address, do not actually use this memory</comment>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>FreeLocked</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
    </block_content>}</block></function>
    <function><type><name>size_t</name></type> <name>GetLimit</name><parameter_list>()</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lockedcount</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>lockedpool_tests_mock</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test over three virtual arenas, of which one will succeed being locked</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>LockedPageAllocator</name></expr></argument>&gt;</argument_list></name></type> <name>x</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>TestLockedPageAllocator</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockedPool</name></type> <name>pool</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>locked</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure unreasonable requests are refused without allocating anything</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>invalid_toosmall</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>invalid_toosmall</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>invalid_toobig</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>invalid_toobig</name> <operator>==</operator> <literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>free</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a0</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>locked</name> <operator>==</operator> <name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a3</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a4</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a5</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// We've passed a count of three arenas, so this allocation should fail</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a6</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>a6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>==</operator> <literal type="number">3</literal><operator>*</operator><name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>locked</name> <operator>==</operator> <name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// These tests used the live LockedPoolManager object, this is also used</comment>
<comment type="line">// by other tests so the conditions are somewhat less controllable and thus the</comment>
<comment type="line">// tests are somewhat more error-prone.</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>lockedpool_tests_live</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>LockedPoolManager</name> <modifier>&amp;</modifier></type><name>pool</name> <init>= <expr><call><name><name>LockedPoolManager</name><operator>::</operator><name>Instance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>LockedPool</name><operator>::</operator><name>Stats</name></name></type> <name>initial</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a0</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>alloc</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Test reading and writing the allocated memory</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>a0</name><operator>)</operator> <operator>=</operator> <literal type="number">0x1234</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>a0</name><operator>)</operator> <operator>==</operator> <literal type="number">0x1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{<block_content> <comment type="line">// Test exception on double-free</comment>
        <expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>a0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>runtime_error</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>
    <block>{<block_content>
    </block_content>}</block></catch></try>
    <comment type="line">// If more than one new arena was allocated for the above tests, something is wrong</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>total</name> <operator>&lt;=</operator> <operator>(</operator><name><name>initial</name><operator>.</operator><name>total</name></name> <operator>+</operator> <name><name>LockedPool</name><operator>::</operator><name>ARENA_SIZE</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Usage must be back to where it started</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>stats</name></name><argument_list>()</argument_list></call><operator>.</operator><name>used</name> <operator>==</operator> <name><name>initial</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
