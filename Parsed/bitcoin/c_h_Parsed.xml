<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/c.h"><comment type="block">/* Copyright (c) 2011 The LevelDB Authors. All rights reserved.
  Use of this source code is governed by a BSD-style license that can be
  found in the LICENSE file. See the AUTHORS file for names of contributors.

  C bindings for leveldb.  May be useful as a stable ABI that can be
  used by programs that keep leveldb in a shared library, or for
  a JNI api.

  Does not support:
  . getters for the option types
  . custom comparators that implement key shortening
  . custom iter, db, env, cache implementations using just the C bindings

  Some conventions:

  (1) We expose just opaque struct pointers and functions to clients.
  This allows us to change internal representations without having to
  recompile clients.

  (2) For simplicity, there is no equivalent to the Slice type.  Instead,
  the caller has to pass the pointer and length as separate
  arguments.

  (3) Errors are represented by a null-terminated c string.  NULL
  means no error.  All operations that can raise an error are passed
  a "char** errptr" as the last argument.  One of the following must
  be true on entry:
     *errptr == NULL
     *errptr points to a malloc()ed null-terminated error message
       (On Windows, *errptr must have been malloc()-ed by this library.)
  On success, a leveldb routine leaves *errptr unchanged.
  On failure, leveldb frees the old value of *errptr and
  set *errptr to a malloc()ed error message.

  (4) Bools have the type unsigned char (0 == false; rest == true)

  (5) All of the pointer arguments must be non-NULL.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_C_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_C_H_</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Exported types */</comment>

<typedef>typedef <type><name><name>struct</name> <name>leveldb_t</name></name></type>               <name>leveldb_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_cache_t</name></name></type>         <name>leveldb_cache_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_comparator_t</name></name></type>    <name>leveldb_comparator_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_env_t</name></name></type>           <name>leveldb_env_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_filelock_t</name></name></type>      <name>leveldb_filelock_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_filterpolicy_t</name></name></type>  <name>leveldb_filterpolicy_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_iterator_t</name></name></type>      <name>leveldb_iterator_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_logger_t</name></name></type>        <name>leveldb_logger_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_options_t</name></name></type>       <name>leveldb_options_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_randomfile_t</name></name></type>    <name>leveldb_randomfile_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_readoptions_t</name></name></type>   <name>leveldb_readoptions_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_seqfile_t</name></name></type>       <name>leveldb_seqfile_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_snapshot_t</name></name></type>      <name>leveldb_snapshot_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_writablefile_t</name></name></type>  <name>leveldb_writablefile_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_writebatch_t</name></name></type>    <name>leveldb_writebatch_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>leveldb_writeoptions_t</name></name></type>  <name>leveldb_writeoptions_t</name>;</typedef>

<comment type="block">/* DB operations */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_t</name><modifier>*</modifier></type> <name>leveldb_open</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_options_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_close</name><parameter_list>(<parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_put</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_writeoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vallen</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_delete</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_writeoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_write</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_writeoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type> <name>batch</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Returns NULL if not found.  A malloc()ed array otherwise.
   Stores the length of the array in *vallen. */</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>leveldb_get</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_readoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>vallen</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>leveldb_iterator_t</name><modifier>*</modifier></type> <name>leveldb_create_iterator</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_readoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>leveldb_snapshot_t</name><modifier>*</modifier></type> <name>leveldb_create_snapshot</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_release_snapshot</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_snapshot_t</name><modifier>*</modifier></type> <name>snapshot</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Returns NULL if property name is unknown.
   Else returns a pointer to a malloc()-ed null-terminated value. */</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>leveldb_property_value</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>propname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_approximate_sizes</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>num_ranges</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>range_start_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name><modifier>*</modifier></type> <name>range_start_key_len</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>range_limit_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name><modifier>*</modifier></type> <name>range_limit_key_len</name></decl></parameter>,
    <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>sizes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_compact_range</name><parameter_list>(
    <parameter><decl><type><name>leveldb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>start_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start_key_len</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>limit_key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit_key_len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Management operations */</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_destroy_db</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_options_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_repair_db</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_options_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
    <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Iterator */</comment>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>char</name></type> <name>leveldb_iter_valid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_seek_to_first</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_seek_to_last</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_seek</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_next</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_prev</name><parameter_list>(<parameter><decl><type><name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>leveldb_iter_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>klen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>leveldb_iter_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>vlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_iter_get_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>leveldb_iterator_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>errptr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Write batch */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_writebatch_t</name><modifier>*</modifier></type> <name>leveldb_writebatch_create</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writebatch_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writebatch_clear</name><parameter_list>(<parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writebatch_put</name><parameter_list>(
    <parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writebatch_delete</name><parameter_list>(
    <parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writebatch_iterate</name><parameter_list>(
    <parameter><decl><type><name>leveldb_writebatch_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>,
    <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>put</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>deleted</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Options */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_options_t</name><modifier>*</modifier></type> <name>leveldb_options_create</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_comparator</name><parameter_list>(
    <parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><name>leveldb_comparator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_filter_policy</name><parameter_list>(
    <parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><name>leveldb_filterpolicy_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_create_if_missing</name><parameter_list>(
    <parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_error_if_exists</name><parameter_list>(
    <parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_paranoid_checks</name><parameter_list>(
    <parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_env</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>leveldb_env_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_info_log</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>leveldb_logger_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_write_buffer_size</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_max_open_files</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_cache</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>leveldb_cache_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_block_size</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_block_restart_interval</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{
  <decl><name>leveldb_no_compression</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>leveldb_snappy_compression</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>
}</block>;</enum>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_options_set_compression</name><parameter_list>(<parameter><decl><type><name>leveldb_options_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Comparator */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_comparator_t</name><modifier>*</modifier></type> <name>leveldb_comparator_create</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>state</name></decl></parameter>,
    <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compare</name>)<parameter_list>(
        <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alen</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> (<modifier>*</modifier><name>name</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_comparator_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_comparator_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Filter policy */</comment>

<decl_stmt><decl><type><specifier>extern</specifier> <name>leveldb_filterpolicy_t</name><modifier>*</modifier></type> <name>leveldb_filterpolicy_create</name><argument_list>(
    <argument><expr><name>void</name><operator>*</operator> <name>state</name></expr></argument>,
    <argument><expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>destructor</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><name>char</name><operator>*</operator> <operator>(</operator><operator>*</operator><name>create_filter</name><operator>)</operator><operator>(</operator>
        <name>void</name><operator>*</operator><operator>,</operator>
        <specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier><operator>*</operator> <name>key_array</name><operator>,</operator> <specifier>const</specifier> <name>size_t</name><operator>*</operator> <name>key_length_array</name><operator>,</operator>
        <name>int</name> <name>num_keys</name><operator>,</operator>
        <name>size_t</name><operator>*</operator> <name>filter_length</name><operator>)</operator></expr></argument>,
    <argument><expr><name>unsigned</name> <macro><name>char</name> <argument_list>(<argument>*key_may_match</argument>)</argument_list></macro><operator>(</operator>
        <name>void</name><operator>*</operator><operator>,</operator>
        <specifier>const</specifier> <name>char</name><operator>*</operator> <name>key</name><operator>,</operator> <name>size_t</name> <name>length</name><operator>,</operator>
        <specifier>const</specifier> <name>char</name><operator>*</operator> <name>filter</name><operator>,</operator> <name>size_t</name> <name>filter_length</name><operator>)</operator></expr></argument>,
    <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <call>(<modifier>*</modifier><name>name</name>)<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_filterpolicy_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_filterpolicy_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>leveldb_filterpolicy_t</name><modifier>*</modifier></type> <name>leveldb_filterpolicy_create_bloom</name><parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>bits_per_key</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Read options */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_readoptions_t</name><modifier>*</modifier></type> <name>leveldb_readoptions_create</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_readoptions_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_readoptions_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_readoptions_set_verify_checksums</name><parameter_list>(
    <parameter><decl><type><name>leveldb_readoptions_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_readoptions_set_fill_cache</name><parameter_list>(
    <parameter><decl><type><name>leveldb_readoptions_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_readoptions_set_snapshot</name><parameter_list>(
    <parameter><decl><type><name>leveldb_readoptions_t</name><modifier>*</modifier></type></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>leveldb_snapshot_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Write options */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_writeoptions_t</name><modifier>*</modifier></type> <name>leveldb_writeoptions_create</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writeoptions_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_writeoptions_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_writeoptions_set_sync</name><parameter_list>(
    <parameter><decl><type><name>leveldb_writeoptions_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Cache */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_cache_t</name><modifier>*</modifier></type> <name>leveldb_cache_create_lru</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_cache_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_cache_t</name><modifier>*</modifier></type> <name>cache</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Env */</comment>

<function_decl><type><specifier>extern</specifier> <name>leveldb_env_t</name><modifier>*</modifier></type> <name>leveldb_create_default_env</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_env_destroy</name><parameter_list>(<parameter><decl><type><name>leveldb_env_t</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Utility */</comment>

<comment type="block">/* Calls free(ptr).
   REQUIRES: ptr was malloc()-ed and returned by one of the routines
   in this file.  Note that in certain cases (typically on Windows), you
   may need to call this routine instead of free(ptr) to dispose of
   malloc()-ed memory returned by this library. */</comment>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>leveldb_free</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Return the major version number for this release. */</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>leveldb_major_version</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block">/* Return the minor version number for this release. */</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>leveldb_minor_version</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>  <comment type="block">/* end extern "C" */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* STORAGE_LEVELDB_INCLUDE_C_H_ */</comment>
</unit>
