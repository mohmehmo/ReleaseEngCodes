<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/hash.cpp"><comment type="line">// Copyright (c) 2013-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/hmac_sha512.h&gt;</cpp:file></cpp:include>


<function><type><specifier>inline</specifier> <name>uint32_t</name></type> <name>ROTL32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>r</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>r</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>MurmurHash3</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nHashSeed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vDataToHash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>h1</name> <init>= <expr><name>nHashSeed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c1</name> <init>= <expr><literal type="number">0xcc9e2d51</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>c2</name> <init>= <expr><literal type="number">0x1b873593</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nblocks</name> <init>= <expr><call><name><name>vDataToHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//----------</comment>
    <comment type="line">// body</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>blocks</name> <init>= <expr><call><name><name>vDataToHash</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><call><name>ReadLE32</name><argument_list>(<argument><expr><name>blocks</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">0xe6546b64</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//----------</comment>
    <comment type="line">// tail</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>tail</name> <init>= <expr><call><name><name>vDataToHash</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name><name>vDataToHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>k1</name> <operator>^=</operator> <name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>ROTL32</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">//----------</comment>
    <comment type="line">// finalization</comment>
    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <call><name><name>vDataToHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>h1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>*=</operator> <literal type="number">0x85ebca6b</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>h1</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>*=</operator> <literal type="number">0xc2b2ae35</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h1</name> <operator>^=</operator> <name>h1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

    <return>return <expr><name>h1</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>BIP32Hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ChainCode</name> <modifier>&amp;</modifier></type><name>chainCode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nChild</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>nChild</name> <operator>&gt;&gt;</operator>  <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHMAC_SHA512</name><argument_list>(<argument><expr><call><name><name>chainCode</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chainCode</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
