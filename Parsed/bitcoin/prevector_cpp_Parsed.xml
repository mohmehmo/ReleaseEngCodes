<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/prevector.cpp"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prevector.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>

<comment type="line">// GCC 4.8 is missing some C++11 type_traits,</comment>
<comment type="line">// https://www.gnu.org/software/gcc/gcc-5/changes.html</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GNUC__</name> <operator>&lt;</operator> <literal type="number">5</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TRIVIALLY_CONSTRUCTIBLE</name></cpp:macro> <cpp:value>std::has_trivial_default_constructor</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TRIVIALLY_CONSTRUCTIBLE</name></cpp:macro> <cpp:value>std::is_trivially_default_constructible</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>nontrivial_t</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <constructor><name>nontrivial_t</name><parameter_list>()</parameter_list> <member_init_list>:<call><name>x</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    <function><type><name>ADD_SERIALIZE_METHODS</name>
    <specifier>template</specifier> <name/>&lt;<name><typename>typename</typename> <name>Stream</name></name></type><operator>,</operator> typename Operation&gt;
    <namespace><specifier>inline</specifier> void <name>SerializationOp</name>(<name>Stream</name><modifier>&amp;</modifier> <name>s</name><operator>,</operator> <name>Operation</name> <name>ser_action</name></namespace></function></public>)</block> <block>{<block_content><expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>
<decl/></struct>};
<assert type="static">static_assert<argument_list>(<argument><expr><operator>!</operator><name><name><name>IS_TRIVIALLY_CONSTRUCTIBLE</name><argument_list type="generic">&lt;<argument><expr><name>nontrivial_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>,
              <argument><expr><literal type="string">"expected nontrivial_t to not be trivially constructible"</literal></expr></argument>)</argument_list>;</assert>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>trivial_t</name>;</typedef>
<assert type="static">static_assert<argument_list>(<argument><expr><name><name><name>IS_TRIVIALLY_CONSTRUCTIBLE</name><argument_list type="generic">&lt;<argument><expr><name>trivial_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>,
              <argument><expr><literal type="string">"expected trivial_t to be trivially constructible"</literal></expr></argument>)</argument_list>;</assert>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>PrevectorDestructor</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t0</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t1</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>PrevectorClear</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t0</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t1</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>PrevectorResize</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t0</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t1</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>static</specifier> <name>void</name></type> <name>PrevectorDeserialize</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s0</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t0</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">900</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>s0</name> <operator>&lt;&lt;</operator> <name>t0</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>t0</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">101</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>s0</name> <operator>&lt;&lt;</operator> <name>t0</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>t1</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>s0</name> <operator>&gt;&gt;</operator> <name>t1</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>s0</name><operator>.</operator><name>Init</name></name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVECTOR_TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>nontrivops</name></type></parameter>, <parameter><type><name>trivops</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>static void Prevector ## name ## Nontrivial(benchmark::State&amp; state) { \
        Prevector ## name&lt;nontrivial_t&gt;(state);                         \
    }                                                                   \
    BENCHMARK(Prevector ## name ## Nontrivial, nontrivops);             \
    static void Prevector ## name ## Trivial(benchmark::State&amp; state) { \
        Prevector ## name&lt;trivial_t&gt;(state);                            \
    }                                                                   \
    BENCHMARK(Prevector ## name ## Trivial, trivops);</cpp:value></cpp:define>

<macro><name>PREVECTOR_TEST</name><argument_list>(<argument>Clear</argument>, <argument><literal type="number">28300</literal></argument>, <argument><literal type="number">88600</literal></argument>)</argument_list></macro>
<macro><name>PREVECTOR_TEST</name><argument_list>(<argument>Destructor</argument>, <argument><literal type="number">28800</literal></argument>, <argument><literal type="number">88900</literal></argument>)</argument_list></macro>
<macro><name>PREVECTOR_TEST</name><argument_list>(<argument>Resize</argument>, <argument><literal type="number">28900</literal></argument>, <argument><literal type="number">90300</literal></argument>)</argument_list></macro>
<macro><name>PREVECTOR_TEST</name><argument_list>(<argument>Deserialize</argument>, <argument><literal type="number">6800</literal></argument>, <argument><literal type="number">52000</literal></argument>)</argument_list></macro>
</unit>
