<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/testharness.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_TESTHARNESS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_TESTHARNESS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/random.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>test</name> <block>{<block_content>

<comment type="line">// Run some of the tests registered by the TEST() macro.  If the</comment>
<comment type="line">// environment variable "LEVELDB_TESTS" is not set, runs all tests.</comment>
<comment type="line">// Otherwise, runs only the tests whose name contains the value of</comment>
<comment type="line">// "LEVELDB_TESTS" as a substring.  E.g., suppose the tests are:</comment>
<comment type="line">//    TEST(Foo, Hello) { ... }</comment>
<comment type="line">//    TEST(Foo, World) { ... }</comment>
<comment type="line">// LEVELDB_TESTS=Hello will run the first test</comment>
<comment type="line">// LEVELDB_TESTS=o     will run both tests</comment>
<comment type="line">// LEVELDB_TESTS=Junk  will run no tests</comment>
<comment type="line">//</comment>
<comment type="line">// Returns 0 if all tests pass.</comment>
<comment type="line">// Dies or returns a non-zero value if some test fails.</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>RunAllTests</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// Return the directory to use for temporary storage.</comment>
<extern>extern std::string TmpDir(</extern>)</block_content></block></decl>;</decl_stmt>

<comment type="line">// Return a randomization seed for this run.  Typically returns the</comment>
<comment type="line">// same number on repeated invocations of this binary, but automated</comment>
<comment type="line">// runs may be able to vary the seed.</comment>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>RandomSeed</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// An instance of Tester is allocated to hold temporary state during</comment>
<comment type="line">// the execution of an assertion.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Tester</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>bool</name></type> <name>ok_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fname_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>line_</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>stringstream</name> <name>ss_</name></expr>;</expr_stmt>

 <label><name>public</name>:</label>
  <macro><name>Tester</name><argument_list>(<argument>const char* f</argument>, <argument>int l</argument>)</argument_list></macro>
      : <expr_stmt><expr><call><name>ok_</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>fname_</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>line_</name><argument_list>(<argument>l</argument>)</argument_list></macro> <expr><block>{
  }</block>

  <operator>~</operator><macro><name>Tester</name><argument_list>()</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d:%s\n"</literal></expr></argument>, <argument><expr><name>fname_</name></expr></argument>, <argument><expr><name>line_</name></expr></argument>, <argument><expr><call><name><name>ss_</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
  }

  Tester&amp; Is(bool b</block><operator>,</operator> <expr_stmt><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>msg</name></expr></expr_stmt></if></if_stmt>) <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ss_</name> <operator>&lt;&lt;</operator> <literal type="string">" Assertion failure "</literal> <operator>&lt;&lt;</operator> <name>msg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ok_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
  }</block>

  <name>Tester</name><operator>&amp;</operator> <macro><name>IsOk</name><argument_list>(<argument>const Status&amp; s</argument>)</argument_list></macro> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>ok</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ss_</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <call><name><name>s</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ok_</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
  }</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_OP</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro>                              \
  <cpp:value>template &lt;class X, class Y&gt;                           \
  Tester&amp; name(const X&amp; x, const Y&amp; y) {                \
    if (! (x op y)) {                                   \
      ss_ &lt;&lt; " failed: " &lt;&lt; x &lt;&lt; (" " #op " ") &lt;&lt; y;    \
      ok_ = false;                                      \
    }                                                   \
    return *this;                                       \
  }</cpp:value></cpp:define>

  <macro><name>BINARY_OP</name><argument_list>(<argument>IsEq</argument>, <argument>==</argument>)</argument_list></macro>
  <macro><name>BINARY_OP</name><argument_list>(<argument>IsNe</argument>, <argument>!=</argument>)</argument_list></macro>
  <macro><name>BINARY_OP</name><argument_list>(<argument>IsGe</argument>, <argument>&gt;=</argument>)</argument_list></macro>
  <macro><name>BINARY_OP</name><argument_list>(<argument>IsGt</argument>, <argument>&gt;</argument>)</argument_list></macro>
  <macro><name>BINARY_OP</name><argument_list>(<argument>IsLe</argument>, <argument>&lt;=</argument>)</argument_list></macro>
  <macro><name>BINARY_OP</name><argument_list>(<argument>IsLt</argument>, <argument>&lt;</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BINARY_OP</name></cpp:undef>

  <comment type="line">// Attach the specified value to the error message if an error has occurred</comment>
  <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>V</name></expr></argument>&gt;</argument_list></name>
  <name>Tester</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>V</name><operator>&amp;</operator> <name>value</name><operator>)</operator> <block>{
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ss_</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt/>}</block_content>
    return *this</block><empty_stmt>;</empty_stmt></if></if_stmt>
  }</block>
}</block></expr></expr_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_TRUE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).Is((c), #c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_OK</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsOk((s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_EQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsEq((a),(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_NE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsNe((a),(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_GE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsGe((a),(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_GT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsGt((a),(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsLe((a),(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>::leveldb::test::Tester(__FILE__, __LINE__).IsLt((a),(b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCONCAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TCONCAT1(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCONCAT1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a##b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>base</name></type></parameter>,<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro>                                                 \
<cpp:value>class TCONCAT(_Test_,name) : public base {                              \
 public:                                                                \
  void _Run();                                                          \
  static void _RunIt() {                                                \
    TCONCAT(_Test_,name) t;                                             \
    t._Run();                                                           \
  }                                                                     \
};                                                                      \
bool TCONCAT(_Test_ignored_,name) =                                     \
  ::leveldb::test::RegisterTest(#base, #name, &amp;TCONCAT(_Test_,name)::_RunIt); \
void TCONCAT(_Test_,name)::_Run()</cpp:value></cpp:define>

<comment type="line">// Register the specified test.  Typically not used directly, but</comment>
<comment type="line">// invoked via the macro expansion of TEST.</comment>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>RegisterTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>base</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>


</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace test</comment>
</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_TESTHARNESS_H_</comment>
</unit>
