<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/splashscreen.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/splashscreen.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/networkstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCloseEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPainter&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QRadialGradient&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScreen&gt;</cpp:file></cpp:include>


<constructor><name><name>SplashScreen</name><operator>::</operator><name>SplashScreen</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>Qt</name><operator>::</operator><name>WindowFlags</name></name></type> <name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>NetworkStyle</name> <modifier>*</modifier></type><name>networkStyle</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QWidget</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call>, <call><name>curAlignment</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <comment type="line">// set reference point, paddings</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>paddingRight</name>            <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>paddingTop</name>              <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>titleVersionVSpace</name>      <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>titleCopyrightVSpace</name>    <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>fontFactor</name>            <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>devicePixelRatio</name>      <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>devicePixelRatio</name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QGuiApplication</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><call><name><name>QCoreApplication</name><operator>::</operator><name>instance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></cast><operator>-&gt;</operator><call><name>devicePixelRatio</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// define text to place</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>titleText</name>       <init>= <expr><name>PACKAGE_NAME</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>versionText</name>     <init>= <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Version %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>FormatFullVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>copyrightText</name>   <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromUtf8</name></name><argument_list>(<argument><expr><call><name>CopyrightHolders</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"\xc2\xA9 %u-%u "</literal></expr></argument>, <argument><expr><literal type="number">2009</literal></expr></argument>, <argument><expr><name>COPYRIGHT_YEAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>titleAddText</name>    <init>= <expr><call><name><name>networkStyle</name><operator>-&gt;</operator><name>getTitleAddText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>font</name>            <init>= <expr><call><name><name>QApplication</name><operator>::</operator><name>font</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create a bitmap according to device pixelratio</comment>
    <decl_stmt><decl><type><name>QSize</name></type> <name>splashSize</name><argument_list>(<argument><expr><literal type="number">480</literal><operator>*</operator><name>devicePixelRatio</name></expr></argument>,<argument><expr><literal type="number">320</literal><operator>*</operator><name>devicePixelRatio</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>pixmap</name> <operator>=</operator> <call><name>QPixmap</name><argument_list>(<argument><expr><name>splashSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// change to HiDPI if it makes sense</comment>
    <expr_stmt><expr><call><name><name>pixmap</name><operator>.</operator><name>setDevicePixelRatio</name></name><argument_list>(<argument><expr><name>devicePixelRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>QPainter</name></type> <name>pixPaint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pixmap</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setPen</name></name><argument_list>(<argument><expr><call><name>QColor</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// draw a slightly radial gradient</comment>
    <decl_stmt><decl><type><name>QRadialGradient</name></type> <name>gradient</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>splashSize</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>gradient</name><operator>.</operator><name>setColorAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gradient</name><operator>.</operator><name>setColorAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>QColor</name><argument_list>(<argument><expr><literal type="number">247</literal></expr></argument>,<argument><expr><literal type="number">247</literal></expr></argument>,<argument><expr><literal type="number">247</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QRect</name></type> <name>rGradient</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>splashSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><name>rGradient</name></expr></argument>, <argument><expr><name>gradient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// draw the bitcoin icon, expected size of PNG: 1024x1024</comment>
    <decl_stmt><decl><type><name>QRect</name></type> <name>rectIcon</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">150</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">122</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QSize</name><argument_list>(<argument><expr><literal type="number">430</literal></expr></argument>,<argument><expr><literal type="number">430</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>QSize</name></type> <name>requiredSize</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>,<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QPixmap</name></type> <name>icon</name><argument_list>(<argument><expr><call><name><name>networkStyle</name><operator>-&gt;</operator><name>getAppIcon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pixmap</name><argument_list>(<argument><expr><name>requiredSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>drawPixmap</name></name><argument_list>(<argument><expr><name>rectIcon</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check font size and drawing with</comment>
    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">33</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QFontMetrics</name></type> <name>fm</name> <init>= <expr><call><name><name>pixPaint</name><operator>.</operator><name>fontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>titleTextWidth</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>titleTextWidth</name> <operator>&gt;</operator> <literal type="number">176</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fontFactor</name> <operator>=</operator> <name>fontFactor</name> <operator>*</operator> <literal type="number">176</literal> <operator>/</operator> <name>titleTextWidth</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">33</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fm</name> <operator>=</operator> <call><name><name>pixPaint</name><operator>.</operator><name>fontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>titleTextWidth</name>  <operator>=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name><operator>-</operator><name>titleTextWidth</name><operator>-</operator><name>paddingRight</name></expr></argument>,<argument><expr><name>paddingTop</name></expr></argument>,<argument><expr><name>titleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">15</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if the version string is too long, reduce size</comment>
    <expr_stmt><expr><name>fm</name> <operator>=</operator> <call><name><name>pixPaint</name><operator>.</operator><name>fontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>versionTextWidth</name>  <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>versionText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>versionTextWidth</name> <operator>&gt;</operator> <name>titleTextWidth</name><operator>+</operator><name>paddingRight</name><operator>-</operator><literal type="number">10</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>titleVersionVSpace</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name><operator>-</operator><name>titleTextWidth</name><operator>-</operator><name>paddingRight</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>paddingTop</name><operator>+</operator><name>titleVersionVSpace</name></expr></argument>,<argument><expr><name>versionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// draw copyright stuff</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name> <init>= <expr><call><name><name>pixmap</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name><operator>-</operator><name>titleTextWidth</name><operator>-</operator><name>paddingRight</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name> <init>= <expr><name>paddingTop</name><operator>+</operator><name>titleCopyrightVSpace</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QRect</name></type> <name>copyrightRect</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name><name>pixmap</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>x</name> <operator>-</operator> <name>paddingRight</name></expr></argument>, <argument><expr><call><name><name>pixmap</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>copyrightRect</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>AlignLeft</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>AlignTop</name></name> <operator>|</operator> <name><name>Qt</name><operator>::</operator><name>TextWordWrap</name></name></expr></argument>, <argument><expr><name>copyrightText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// draw additional text if special network</comment>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>titleAddText</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QFont</name></type> <name>boldFont</name> <init>= <expr><call><name>QFont</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><literal type="number">10</literal><operator>*</operator><name>fontFactor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>boldFont</name><operator>.</operator><name>setWeight</name></name><argument_list>(<argument><expr><name><name>QFont</name><operator>::</operator><name>Bold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>boldFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fm</name> <operator>=</operator> <call><name><name>pixPaint</name><operator>.</operator><name>fontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>titleAddTextWidth</name>  <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>TextWidth</name></name><argument_list>(<argument><expr><name>fm</name></expr></argument>, <argument><expr><name>titleAddText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name><operator>-</operator><name>titleAddTextWidth</name><operator>-</operator><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>,<argument><expr><name>titleAddText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pixPaint</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set window title</comment>
    <expr_stmt><expr><call><name>setWindowTitle</name><argument_list>(<argument><expr><name>titleText</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>titleAddText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Resize window and move to center of desktop, disallow resizing</comment>
    <decl_stmt><decl><type><name>QRect</name></type> <name>r</name><argument_list>(<argument><expr><call><name>QPoint</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>QSize</name><argument_list>(<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>width</name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name></expr></argument>,<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>height</name><argument_list>()</argument_list></call><operator>/</operator><name>devicePixelRatio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setFixedSize</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><call><name><name>QGuiApplication</name><operator>::</operator><name>primaryScreen</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>geometry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>r</name><operator>.</operator><name>center</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>installEventFilter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>SplashScreen</name><operator>::</operator><name>~SplashScreen</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>SplashScreen</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ev</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>keyEvent</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>keyEvent</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>startShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QObject</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>finish</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* If the window is minimized, hide() will be ignored. */</comment>
    <comment type="block">/* Make sure we de-minimize the splashscreen window before hiding */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isMinimized</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>showNormal</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>deleteLater</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// No more need for this</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InitMessage</name><parameter_list>(<parameter><decl><type><name>SplashScreen</name> <modifier>*</modifier></type><name>splash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>invoked</name> <init>= <expr><call><name><name>QMetaObject</name><operator>::</operator><name>invokeMethod</name></name><argument_list>(<argument><expr><name>splash</name></expr></argument>, <argument><expr><literal type="string">"showMessage"</literal></expr></argument>,
        <argument><expr><name><name>Qt</name><operator>::</operator><name>QueuedConnection</name></name></expr></argument>,
        <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>QString</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>AlignBottom</name></name><operator>|</operator><name><name>Qt</name><operator>::</operator><name>AlignHCenter</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>Q_ARG</name><argument_list>(<argument><expr><name>QColor</name></expr></argument>, <argument><expr><call><name>QColor</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>,<argument><expr><literal type="number">55</literal></expr></argument>,<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>invoked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShowProgress</name><parameter_list>(<parameter><decl><type><name>SplashScreen</name> <modifier>*</modifier></type><name>splash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nProgress</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>resume_possible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>InitMessage</name><argument_list>(<argument><expr><name>splash</name></expr></argument>, <argument><expr><name>title</name> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
            <operator>(</operator><ternary><condition><expr><name>resume_possible</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(press q to shutdown and continue later)"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr>
                                </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"press q to shutdown"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></else></ternary><operator>)</operator> <operator>+</operator>
            <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"\n%d"</literal></expr></argument>, <argument><expr><name>nProgress</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>ConnectWallet</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>m_connected_wallet_handlers</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>handleShowProgress</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><name>ShowProgress</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_connected_wallets</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>subscribeToCoreSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Connect signals to client</comment>
    <expr_stmt><expr><name>m_handler_init_message</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleInitMessage</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><name>InitMessage</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_handler_show_progress</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleShowProgress</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>bind</name></name><argument_list>(<argument><expr><name>ShowProgress</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_1</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_2</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>placeholders</name><operator>::</operator><name>_3</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr_stmt><expr><name>m_handler_load_wallet</name> <operator>=</operator> <call><name><name>m_node</name><operator>.</operator><name>handleLoadWallet</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>ConnectWallet</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>unsubscribeFromCoreSignals</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Disconnect signals from client</comment>
    <expr_stmt><expr><call><name><name>m_handler_init_message</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_handler_show_progress</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>handler</name> <range>: <expr><name>m_connected_wallet_handlers</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>handler</name><operator>-&gt;</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>m_connected_wallet_handlers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_connected_wallets</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>showMessage</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QColor</name> <modifier>&amp;</modifier></type><name>color</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>curMessage</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curAlignment</name> <operator>=</operator> <name>alignment</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curColor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>paintEvent</name></name><parameter_list>(<parameter><decl><type><name>QPaintEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QPainter</name></type> <name>painter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>drawPixmap</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QRect</name></type> <name>r</name> <init>= <expr><call><name>rect</name><argument_list>()</argument_list></call><operator>.</operator><call><name>adjusted</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>setPen</name></name><argument_list>(<argument><expr><name>curColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>painter</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>curAlignment</name></expr></argument>, <argument><expr><name>curMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>SplashScreen</name><operator>::</operator><name>closeEvent</name></name><parameter_list>(<parameter><decl><type><name>QCloseEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>startShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// allows an "emergency" shutdown during startup</comment>
    <expr_stmt><expr><call><name><name>event</name><operator>-&gt;</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
