<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bitcoin-cli.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/buffer.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event2/keyvalq_struct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/events.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/stdin.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name><operator>(</operator><specifier>const</specifier> <name>char</name><modifier>*</modifier><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>G_TRANSLATION_FUN</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_RPCCONNECT</name><index>[]</index></name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_HTTP_CLIENT_TIMEOUT</name><init>=<expr><literal type="number">900</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_NAMED</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>CONTINUE_EXECUTION</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupCliArgs</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SetupHelpOptions</name><argument_list>(<argument><expr><name>gArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>defaultBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>testnetBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>regtestBaseParams</name> <init>= <expr><call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>, <argument><expr><literal type="string">"Print version and exit"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-conf=&lt;file&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)"</literal></expr></argument>, <argument><expr><name>BITCOIN_CONF_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir=&lt;dir&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Specify data directory"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-getinfo"</literal></expr></argument>, <argument><expr><literal type="string">"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SetupChainParamsBaseOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-named"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Pass named instead of positional arguments (default: %s)"</literal></expr></argument>, <argument><expr><name>DEFAULT_NAMED</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcclienttimeout=&lt;n&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Timeout in seconds during HTTP requests, or 0 for no timeout. (default: %d)"</literal></expr></argument>, <argument><expr><name>DEFAULT_HTTP_CLIENT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcconnect=&lt;ip&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Send commands to node running on &lt;ip&gt; (default: %s)"</literal></expr></argument>, <argument><expr><name>DEFAULT_RPCCONNECT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpccookiefile=&lt;loc&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcpassword=&lt;pw&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Password for JSON-RPC connections"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcport=&lt;port&gt;"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Connect to JSON-RPC on &lt;port&gt; (default: %u, testnet: %u, regtest: %u)"</literal></expr></argument>, <argument><expr><call><name><name>defaultBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>testnetBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>regtestBaseParams</name><operator>-&gt;</operator><name>RPCPort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name> <operator>|</operator> <name><name>ArgsManager</name><operator>::</operator><name>NETWORK_ONLY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcuser=&lt;user&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Username for JSON-RPC connections"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcwait"</literal></expr></argument>, <argument><expr><literal type="string">"Wait for RPC server to start"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcwallet=&lt;walletname&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/&lt;walletname&gt;"</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdin"</literal></expr></argument>, <argument><expr><literal type="string">"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases). When combined with -stdinrpcpass, the first line from standard input is used for the RPC password."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdinrpcpass"</literal></expr></argument>, <argument><expr><literal type="string">"Read RPC password from standard input as a single line. When combined with -stdin, the first line from standard input is used for the RPC password. When combined with -stdinwalletpassphrase, -stdinrpcpass consumes the first line, and -stdinwalletpassphrase consumes the second."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>AddArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdinwalletpassphrase"</literal></expr></argument>, <argument><expr><literal type="string">"Read wallet passphrase from standard input as a single line. When combined with -stdin, the first line from standard input is used for the wallet passphrase."</literal></expr></argument>, <argument><expr><name><name>ArgsManager</name><operator>::</operator><name>ALLOW_ANY</name></name></expr></argument>, <argument><expr><name><name>OptionsCategory</name><operator>::</operator><name>OPTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** libevent event log callback */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>libevent_log_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>severity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EVENT_LOG_ERR</name></cpp:ifndef> <comment type="line">// EVENT_LOG_ERR was added in 2.0.19; but before then _EVENT_LOG_ERR existed.</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>EVENT_LOG_ERR</name></cpp:macro> <cpp:value>_EVENT_LOG_ERR</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Ignore everything other than errors</comment>
    <if_stmt><if>if <condition>(<expr><name>severity</name> <operator>&gt;=</operator> <name>EVENT_LOG_ERR</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"libevent error: %s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//</comment>
<comment type="line">// Start</comment>
<comment type="line">//</comment>

<comment type="line">//</comment>
<comment type="line">// Exception thrown on connection error.  This error is used to determine</comment>
<comment type="line">// when to wait if -rpcwait is given.</comment>
<comment type="line">//</comment>
<class>class <name>CConnectionFailed</name> <super_list>: <super><specifier>public</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name></super></super_list>
<block>{<private type="default">
</private><public>public:

    <constructor><specifier>explicit</specifier> <specifier>inline</specifier> <name>CConnectionFailed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <member_init_list>:
        <call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content/>}</block></constructor>

</public>}</block>;</class>

<comment type="line">//</comment>
<comment type="line">// This function returns either one of EXIT_ codes when it's expected to stop the process or</comment>
<comment type="line">// CONTINUE_EXECUTION when it's expected to continue further.</comment>
<comment type="line">//</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>AppInitRPC</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">//</comment>
    <comment type="line">// Parameters</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><call><name>SetupCliArgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>ParseParameters</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing command line arguments: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>HelpRequested</name><argument_list>(<argument><expr><name>gArgs</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strUsage</name> <init>= <expr><name>PACKAGE_NAME</name> <literal type="string">" RPC client version "</literal> <operator>+</operator> <call><name>FormatFullVersion</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-version"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>strUsage</name> <operator>+=</operator> <literal type="string">"\n"</literal>
                <literal type="string">"Usage:  bitcoin-cli [options] &lt;command&gt; [params]  Send command to "</literal> <name>PACKAGE_NAME</name> <literal type="string">"\n"</literal>
                <literal type="string">"or:     bitcoin-cli [options] -named &lt;command&gt; [name=value]...  Send command to "</literal> <name>PACKAGE_NAME</name> <literal type="string">" (with named arguments)\n"</literal>
                <literal type="string">"or:     bitcoin-cli [options] help                List commands\n"</literal>
                <literal type="string">"or:     bitcoin-cli [options] help &lt;command&gt;      Get help for a command\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>strUsage</name> <operator>+=</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetHelpMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>strUsage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: too few parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CheckDataDirOption</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: Specified data directory \"%s\" does not exist.\n"</literal></expr></argument>, <argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-datadir"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>ReadConfigFiles</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error reading configuration file: %s\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)</comment>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name>SelectBaseParams</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetChainName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></catch></try>
    <return>return <expr><name>CONTINUE_EXECUTION</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/** Reply structure for request_done to fill in */</comment>
<struct>struct <name>HTTPReply</name>
<block>{<public type="default">
    <constructor><name>HTTPReply</name><parameter_list>()</parameter_list><member_init_list>: <call><name>status</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>error</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>body</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http_errorstring</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBEVENT_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02010300</literal></expr></cpp:if>
    <case>case <expr><name>EVREQ_HTTP_TIMEOUT</name></expr>:</case>
        <return>return <expr><literal type="string">"timeout reached"</literal></expr>;</return>
    <case>case <expr><name>EVREQ_HTTP_EOF</name></expr>:</case>
        <return>return <expr><literal type="string">"EOF reached"</literal></expr>;</return>
    <case>case <expr><name>EVREQ_HTTP_INVALID_HEADER</name></expr>:</case>
        <return>return <expr><literal type="string">"error while reading header, or invalid header"</literal></expr>;</return>
    <case>case <expr><name>EVREQ_HTTP_BUFFER_ERROR</name></expr>:</case>
        <return>return <expr><literal type="string">"error encountered while reading or writing"</literal></expr>;</return>
    <case>case <expr><name>EVREQ_HTTP_REQUEST_CANCEL</name></expr>:</case>
        <return>return <expr><literal type="string">"request was canceled"</literal></expr>;</return>
    <case>case <expr><name>EVREQ_HTTP_DATA_TOO_LONG</name></expr>:</case>
        <return>return <expr><literal type="string">"response body is larger than allowed"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default>
        <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>http_request_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HTTPReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>HTTPReply</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* If req is nullptr, it means an error occurred while connecting: the
         * error code will have been passed to http_error_cb.
         */</comment>
        <expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>evhttp_request_get_response_code</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>evhttp_request_get_input_buffer</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>evbuffer_get_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>evbuffer_pullup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>body</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>evbuffer_drain</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBEVENT_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02010300</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_error_cb</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>evhttp_request_error</name></name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HTTPReply</name> <modifier>*</modifier></type><name>reply</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>HTTPReply</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>reply</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Class that handles the conversion from a command-line to a JSON-RPC request,
 * as well as converting back to a JSON object that can be shown as result.
 */</comment>
<class>class <name>BaseRequestHandler</name>
<block>{<private type="default">
</private><public>public:
    <destructor><specifier>virtual</specifier> <name>~BaseRequestHandler</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></destructor>
    <function_decl><type><specifier>virtual</specifier> <name>UniValue</name></type> <name>PrepareRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> = <literal type="number">0</literal>;</function_decl>
    <function_decl><type><specifier>virtual</specifier> <name>UniValue</name></type> <name>ProcessReply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>batch_in</name></decl></parameter>)</parameter_list> = <literal type="number">0</literal>;</function_decl>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** Process getinfo requests */</comment>
<class>class <name>GetinfoRequestHandler</name><super_list>: <super><specifier>public</specifier> <name>BaseRequestHandler</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ID_NETWORKINFO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ID_BLOCKCHAININFO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ID_WALLETINFO</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Create a simulated `getinfo` request. */</comment>
    <function><type><name>UniValue</name></type> <name>PrepareRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>args</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"-getinfo takes no arguments"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>JSONRPCRequestObj</name><argument_list>(<argument><expr><literal type="string">"getnetworkinfo"</literal></expr></argument>, <argument><expr><name>NullUniValue</name></expr></argument>, <argument><expr><name>ID_NETWORKINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>JSONRPCRequestObj</name><argument_list>(<argument><expr><literal type="string">"getblockchaininfo"</literal></expr></argument>, <argument><expr><name>NullUniValue</name></expr></argument>, <argument><expr><name>ID_BLOCKCHAININFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>JSONRPCRequestObj</name><argument_list>(<argument><expr><literal type="string">"getwalletinfo"</literal></expr></argument>, <argument><expr><name>NullUniValue</name></expr></argument>, <argument><expr><name>ID_WALLETINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="doxygen">/** Collect values from the batch and form a simulated `getinfo` reply. */</comment>
    <function><type><name>UniValue</name></type> <name>ProcessReply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>batch_in</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name></type> <name>batch</name> <init>= <expr><call><name>JSONRPCProcessBatchReply</name><argument_list>(<argument><expr><name>batch_in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Errors in getnetworkinfo() and getblockchaininfo() are fatal, pass them on</comment>
        <comment type="line">// getwalletinfo() is allowed to fail in case there is no wallet.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"error"</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"error"</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"version"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"blocks"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"headers"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"headers"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"verificationprogress"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"verificationprogress"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"timeoffset"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"timeoffset"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"connections"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"connections"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"proxy"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"networks"</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="string">"proxy"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"difficulty"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"difficulty"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chain"</literal></expr></argument>, <argument><expr><call><name>UniValue</name><argument_list>(<argument><expr><name><name>batch</name><index>[<expr><name>ID_BLOCKCHAININFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"chain"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"balance"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"balance"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"keypoolsize"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"keypoolsize"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"unlocked_until"</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"unlocked_until"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"unlocked_until"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"paytxfee"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_WALLETINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"paytxfee"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"relayfee"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"relayfee"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warnings"</literal></expr></argument>, <argument><expr><name><name>batch</name><index>[<expr><name>ID_NETWORKINFO</name></expr>]</index><index>[<expr><literal type="string">"result"</literal></expr>]</index><index>[<expr><literal type="string">"warnings"</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>JSONRPCReplyObj</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NullUniValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/** Process default single requests */</comment>
<class>class <name>DefaultRequestHandler</name><super_list>: <super><specifier>public</specifier> <name>BaseRequestHandler</name></super></super_list> <block>{<private type="default">
</private><public>public:
    <function><type><name>UniValue</name></type> <name>PrepareRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>method</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>params</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-named"</literal></expr></argument>, <argument><expr><name>DEFAULT_NAMED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>RPCConvertNamedValues</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>params</name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><call><name>JSONRPCRequestObj</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>UniValue</name></type> <name>ProcessReply</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name> <modifier>&amp;</modifier></type><name>reply</name></decl></parameter>)</parameter_list> <specifier>override</specifier>
    <block>{<block_content>
        <return>return <expr><call><name><name>reply</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>CallRPC</name><parameter_list>(<parameter><decl><type><name>BaseRequestHandler</name> <modifier>*</modifier></type><name>rh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strMethod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>host</name></decl>;</decl_stmt>
    <comment type="line">// In preference order, we choose the following for the port:</comment>
    <comment type="line">//     1. -rpcport</comment>
    <comment type="line">//     2. port in -rpcconnect (ie following : in ipv4 or ]: in ipv6)</comment>
    <comment type="line">//     3. default port for chain</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>BaseParams</name><argument_list>()</argument_list></call><operator>.</operator><call><name>RPCPort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SplitHostPort</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcconnect"</literal></expr></argument>, <argument><expr><name>DEFAULT_RPCCONNECT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcport"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Obtain event base</comment>
    <decl_stmt><decl><type><name>raii_event_base</name></type> <name>base</name> <init>= <expr><call><name>obtain_event_base</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Synchronously look up hostname</comment>
    <decl_stmt><decl><type><name>raii_evhttp_connection</name></type> <name>evcon</name> <init>= <expr><call><name>obtain_evhttp_connection_base</name><argument_list>(<argument><expr><call><name><name>base</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Set connection timeout</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>timeout</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcclienttimeout"</literal></expr></argument>, <argument><expr><name>DEFAULT_HTTP_CLIENT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><call><name><name>evcon</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Indefinite request timeouts are not possible in libevent-http, so we</comment>
            <comment type="line">// set the timeout to a very long time period instead.</comment>

            <decl_stmt><decl><type><specifier>constexpr</specifier> <name>int</name></type> <name>YEAR_IN_SECONDS</name> <init>= <expr><literal type="number">31556952</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Average length of year in Gregorian calendar</comment>
            <expr_stmt><expr><call><name>evhttp_connection_set_timeout</name><argument_list>(<argument><expr><call><name><name>evcon</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>YEAR_IN_SECONDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>HTTPReply</name></type> <name>response</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>raii_evhttp_request</name></type> <name>req</name> <init>= <expr><call><name>obtain_evhttp_request</name><argument_list>(<argument><expr><name>http_request_done</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>response</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>req</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"create http request failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBEVENT_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x02010300</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>evhttp_request_set_error_cb</name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>http_error_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Get credentials</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strRPCUserColonPass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>failedToGetAuthCookie</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcpassword"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Try fall back to cookie-based authentication if no password is provided</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetAuthCookie</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strRPCUserColonPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>failedToGetAuthCookie</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>strRPCUserColonPass</name> <operator>=</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcuser"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcpassword"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>evkeyvalq</name></name><modifier>*</modifier></type> <name>output_headers</name> <init>= <expr><call><name>evhttp_request_get_output_headers</name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>output_headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>output_headers</name></expr></argument>, <argument><expr><literal type="string">"Host"</literal></expr></argument>, <argument><expr><call><name><name>host</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>output_headers</name></expr></argument>, <argument><expr><literal type="string">"Connection"</literal></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>evhttp_add_header</name><argument_list>(<argument><expr><name>output_headers</name></expr></argument>, <argument><expr><literal type="string">"Authorization"</literal></expr></argument>, <argument><expr><operator>(</operator><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"Basic "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>EncodeBase64</name><argument_list>(<argument><expr><name>strRPCUserColonPass</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Attach request data</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strRequest</name> <init>= <expr><call><name><name>rh</name><operator>-&gt;</operator><name>PrepareRequest</name></name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>evbuffer</name></name><modifier>*</modifier></type> <name>output_buffer</name> <init>= <expr><call><name>evhttp_request_get_output_buffer</name><argument_list>(<argument><expr><call><name><name>req</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>evbuffer_add</name><argument_list>(<argument><expr><name>output_buffer</name></expr></argument>, <argument><expr><call><name><name>strRequest</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strRequest</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check if we should use a special wallet endpoint</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>endpoint</name> <init>= <expr><literal type="string">"/"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>gArgs</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-rpcwallet"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>walletName</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcwallet"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encodedURI</name> <init>= <expr><call><name>evhttp_uriencode</name><argument_list>(<argument><expr><call><name><name>walletName</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>walletName</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>encodedURI</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>endpoint</name> <operator>=</operator> <literal type="string">"/wallet/"</literal><operator>+</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>encodedURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>encodedURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <throw>throw <expr><call><name>CConnectionFailed</name><argument_list>(<argument><expr><literal type="string">"uri-encode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>evhttp_make_request</name><argument_list>(<argument><expr><call><name><name>evcon</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>req</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>EVHTTP_REQ_POST</name></expr></argument>, <argument><expr><call><name><name>endpoint</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>req</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// ownership moved to evcon in above call</comment>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>CConnectionFailed</name><argument_list>(<argument><expr><literal type="string">"send http request failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>event_base_dispatch</name><argument_list>(<argument><expr><call><name><name>base</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>responseErrorMessage</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>response</name><operator>.</operator><name>error</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>responseErrorMessage</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">" (error code %d - \"%s\")"</literal></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><call><name>http_errorstring</name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>error</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <throw>throw <expr><call><name>CConnectionFailed</name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Could not connect to the server %s:%d%s\n\nMake sure the bitcoind server is running and that you are connecting to the correct RPC port."</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>responseErrorMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>response</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>HTTP_UNAUTHORIZED</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>failedToGetAuthCookie</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(
                <argument><expr><literal type="string">"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)"</literal></expr></argument>,
                <argument><expr><call><name>GetConfigFile</name><argument_list>(<argument><expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-conf"</literal></expr></argument>, <argument><expr><name>BITCOIN_CONF_FILENAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Authorization failed: Incorrect rpcuser or rpcpassword"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>response</name><operator>.</operator><name>status</name></name> <operator>&gt;=</operator> <literal type="number">400</literal> <operator>&amp;&amp;</operator> <name><name>response</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>HTTP_BAD_REQUEST</name> <operator>&amp;&amp;</operator> <name><name>response</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>HTTP_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name><name>response</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"server returned HTTP error %d"</literal></expr></argument>, <argument><expr><name><name>response</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>body</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"no response from server"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <comment type="line">// Parse reply</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>valReply</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>valReply</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"couldn't parse reply from server"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name></type> <name>reply</name> <init>= <expr><call><name><name>rh</name><operator>-&gt;</operator><name>ProcessReply</name></name><argument_list>(<argument><expr><name>valReply</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>reply</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"expected reply to have result, error and id properties"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <return>return <expr><name>reply</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CommandLineRPC</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strPrint</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <comment type="line">// Skip switches</comment>
        <while>while <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>IsSwitchChar</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rpcPass</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdinrpcpass"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>NO_STDIN_ECHO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>StdinReady</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"RPC password&gt; "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>std</name><operator>::</operator><name>getline</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>rpcPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"-stdinrpcpass specified but failed to read from standard input"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>StdinTerminal</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>gArgs</name><operator>.</operator><name>ForceSetArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcpassword"</literal></expr></argument>, <argument><expr><name>rpcPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>args</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdinwalletpassphrase"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>NO_STDIN_ECHO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>walletPass</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="string">"walletpassphrase"</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"-stdinwalletpassphrase is only applicable for walletpassphrase(change)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>StdinReady</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Wallet passphrase&gt; "</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>std</name><operator>::</operator><name>getline</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>walletPass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"-stdinwalletpassphrase specified but failed to read from standard input"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>StdinTerminal</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>walletPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-stdin"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// Read one arg per line from stdin and append</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>std</name><operator>::</operator><name>getline</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><call><name>StdinTerminal</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BaseRequestHandler</name></expr></argument>&gt;</argument_list></name></type> <name>rh</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>method</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-getinfo"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>rh</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GetinfoRequestHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>method</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>rh</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultRequestHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>args</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"too few parameters (need at least command)"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>method</name> <operator>=</operator> <name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>args</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Remove trailing method name from arguments vector</comment>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Execute and handle connection failures with -rpcwait</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fWait</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetBoolArg</name></name><argument_list>(<argument><expr><literal type="string">"-rpcwait"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name></type> <name>reply</name> <init>= <expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>rh</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Parse reply</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>result</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>error</name>  <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>error</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Error</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>error</name><index>[<expr><literal type="string">"code"</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fWait</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <name>RPC_IN_WARMUP</name></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><call><name>CConnectionFailed</name><argument_list>(<argument><expr><literal type="string">"server in warmup"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <literal type="string">"error: "</literal> <operator>+</operator> <call><name><name>error</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nRet</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>error</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>UniValue</name></type> <name>errCode</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>UniValue</name></type> <name>errMsg</name>  <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <ternary><condition><expr><call><name><name>errCode</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"error code: "</literal><operator>+</operator><call><name><name>errCode</name><operator>.</operator><name>getValStr</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"\n"</literal></expr></else></ternary></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name><name>errMsg</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>strPrint</name> <operator>+=</operator> <literal type="string">"error message:\n"</literal><operator>+</operator><call><name><name>errMsg</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name><name>errCode</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>errCode</name><operator>.</operator><name>get_int</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>RPC_WALLET_NOT_SPECIFIED</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>strPrint</name> <operator>+=</operator> <literal type="string">"\nTry adding \"-rpcwallet=&lt;filename&gt;\" option to bitcoin-cli command line."</literal></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// Result</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
                <comment type="line">// Connection succeeded, no need to retry.</comment>
                <break>break;</break>
            </block_content>}</block>
            <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CConnectionFailed</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>fWait</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>MilliSleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <throw>throw;</throw></block_content></block></else></if_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block> while <condition>(<expr><name>fWait</name></expr>)</condition>;</do>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>strPrint</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"error: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nRet</name> <operator>=</operator> <name>EXIT_FAILURE</name></expr>;</expr_stmt>
    </block_content>}</block></catch>
    <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"CommandLineRPC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw;</throw>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><name>strPrint</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>nRet</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr> </then><else>: <expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>strPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>nRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>WinCmdLineArgs</name></name></type> <name>winArgs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>tie</name></name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>winArgs</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>SetupEnvironment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetupNetworking</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: Initializing networking failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>event_set_log_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>libevent_log_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AppInitRPC</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>CONTINUE_EXECUTION</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="string">"AppInitRPC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"AppInitRPC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></catch></try>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>EXIT_FAILURE</name></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CommandLineRPC</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="string">"CommandLineRPC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>PrintExceptionContinue</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="string">"CommandLineRPC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></catch></try>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
