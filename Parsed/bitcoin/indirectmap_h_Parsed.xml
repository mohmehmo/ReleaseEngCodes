<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/indirectmap.h"><comment type="line">// Copyright (c) 2016 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INDIRECTMAP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INDIRECTMAP_H</name></cpp:macro></cpp:define>

<macro><name>template</name></macro> <expr_stmt><expr><operator>&lt;</operator><name>class</name> <name>T</name><operator>&gt;</operator>
struct <name>DereferencingComparator</name> <block>{ <expr><name>bool</name> <macro><name>operator</name><argument_list>()</argument_list></macro><operator>(</operator><specifier>const</specifier> <name>T</name> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>T</name> <name>b</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>a</name> <operator>&lt;</operator> <operator>*</operator><name>b</name></expr>;</return></block></expr> }</block></expr></expr_stmt> };

<comment type="block">/* Map whose keys are pointers, but are compared by their dereferenced values.
 *
 * Differs from a plain std::map&lt;const K*, T, DereferencingComparator&lt;K*&gt; &gt; in
 * that methods that take a key for comparison take a K rather than taking a K*
 * (taking a K* would be confusing, since it's the value rather than the address
 * of the object for comparison that matters due to the dereferencing comparator).
 *
 * Objects pointed to by keys must not be modified in any way that changes the
 * result of DereferencingComparator.
 */</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>class</name> <name>K</name></expr></argument>, <argument><expr><name>class</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>indirectmap</name> <block>{<block_content>
<label><name>private</name>:</label>
    <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>K</name><operator>*</operator></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>DereferencingComparator</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>K</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>base</name></expr>;</expr_stmt></typedef>
    <decl_stmt><decl><type><name>base</name></type> <name>m</name></decl>;</decl_stmt>
<label><name>public</name>:</label>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>iterator</name> <name>iterator</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>const_iterator</name> <name>const_iterator</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>size_type</name> <name>size_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>

    <comment type="line">// passthrough (pointer interface)</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>insert</name><argument_list>(<argument>const value_type&amp; value</argument>)</argument_list></macro> <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line">// pass address (value interface)</comment>
    <function><type><name>iterator</name></type> <name>find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>                     <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><name>const_iterator</name></type> <name>find</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const         <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <function><type><name>iterator</name></type> <name>lower_bound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>              <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><name>const_iterator</name></type> <name>lower_bound</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const  <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <function><type><name>size_type</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>K</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>                   <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><name>size_type</name></type> <name>count</name><argument_list>(<argument><expr><specifier>const</specifier> <name>K</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list> const             <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <comment type="line">// passthrough</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier>              <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>          <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>size_type</name> <macro><name>max_size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>      <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>max_size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>                    <block>{<block_content> <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list>                <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list>                  <block>{<block_content> <return>return <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>    <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>      <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>cbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>   <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>cbegin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>cend</name><argument_list>()</argument_list></macro> <specifier>const</specifier>     <block>{ <return>return <expr><call><name><name>m</name><operator>.</operator><name>cend</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INDIRECTMAP_H</comment>
</unit>
