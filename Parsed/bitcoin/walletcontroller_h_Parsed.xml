<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/walletcontroller.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_WALLETCONTROLLER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_WALLETCONTROLLER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsrecipient.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMutex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QProgressDialog&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QThread&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<decl_stmt><decl><type><name>class</name></type> <name>AskPassphraseDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CreateWalletActivity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CreateWalletDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OpenWalletActivity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletControllerActivity</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Controller between interfaces::Node, WalletModel instances and the GUI.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>WalletController</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

    <name>void</name> <call><name>removeAndDeleteWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name><operator>:</operator>
    <call><name>WalletController</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PlatformStyle</name><operator>*</operator> <name>platform_style</name></expr></argument>, <argument><expr><name>OptionsModel</name><operator>*</operator> <name>options_model</name></expr></argument>, <argument><expr><name>QObject</name><operator>*</operator> <name>parent</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>WalletController</name><argument_list>()</argument_list></call></expr>;

    <comment type="line" format="doxygen">//! Returns wallet models currently open.</comment>
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <macro><name>getOpenWallets</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>WalletModel</name><operator>*</operator> <call><name>getOrCreateWallet</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name> <name>wallet</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line" format="doxygen">//! Returns all wallet names in the wallet dir mapped to whether the wallet</comment>
    <comment type="line" format="doxygen">//! is loaded.</comment>
    <expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <macro><name>listWalletDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>void</name> <call><name>closeWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>, <argument><expr><name>QWidget</name><operator>*</operator> <name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>walletAdded</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>walletRemoved</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <macro><name>coinsSent</name><argument_list>(<argument>WalletModel* wallet_model</argument>, <argument>SendCoinsRecipient recipient</argument>, <argument>QByteArray transaction</argument>)</argument_list></macro></expr>;

<expr><name>private</name><operator>:</operator>
    <name>QThread</name><operator>*</operator> <specifier>const</specifier> <name>m_activity_thread</name></expr>;
    <expr><name>QObject</name><operator>*</operator> <specifier>const</specifier> <name>m_activity_worker</name></expr>;
    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name><operator>*</operator> <specifier>const</specifier> <name>m_platform_style</name></expr>;
    <expr><name>OptionsModel</name><operator>*</operator> <specifier>const</specifier> <name>m_options_model</name></expr>;
    <expr><name>mutable</name> <name>QMutex</name> <name>m_mutex</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>m_wallets</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_load_wallet</name></expr>;

    <expr><name>friend</name> <name>class</name> <name>WalletControllerActivity</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>WalletControllerActivity</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <call><name>WalletControllerActivity</name><argument_list>(<argument><expr><name>WalletController</name><operator>*</operator> <name>wallet_controller</name></expr></argument>, <argument><expr><name>QWidget</name><operator>*</operator> <name>parent_widget</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <operator>~</operator><call><name>WalletControllerActivity</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>finished</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <macro><name>node</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>m_node</name></name></expr>;</return> }</block>
    <name>QObject</name><operator>*</operator> <macro><name>worker</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name><name>m_wallet_controller</name><operator>-&gt;</operator><name>m_activity_worker</name></name></expr>;</return> }</block>

    <name>void</name> <call><name>showProgressDialog</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>label_text</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>WalletController</name><operator>*</operator> <specifier>const</specifier> <name>m_wallet_controller</name></expr>;
    <expr><name>QWidget</name><operator>*</operator> <specifier>const</specifier> <name>m_parent_widget</name></expr>;
    <expr><name>QProgressDialog</name><operator>*</operator> <name>m_progress_dialog</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>WalletModel</name><operator>*</operator> <name>m_wallet_model</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>std</name><operator>::</operator><name>string</name> <name>m_error_message</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>m_warning_message</name></expr>;
}</block></expr></range></decl>;</decl_stmt>


<decl_stmt><decl><type><name>class</name></type> <name>CreateWalletActivity</name> <range>: <expr><name>public</name> <name>WalletControllerActivity</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <call><name>CreateWalletActivity</name><argument_list>(<argument><expr><name>WalletController</name><operator>*</operator> <name>wallet_controller</name></expr></argument>, <argument><expr><name>QWidget</name><operator>*</operator> <name>parent_widget</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>virtual</name> <operator>~</operator><call><name>CreateWalletActivity</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>create</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>created</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>askPassphrase</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>createWallet</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>finish</name><argument_list>()</argument_list></call></expr>;

    <expr><name>SecureString</name> <name>m_passphrase</name></expr>;
    <expr><name>CreateWalletDialog</name><operator>*</operator> <name>m_create_wallet_dialog</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>AskPassphraseDialog</name><operator>*</operator> <name>m_passphrase_dialog</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>OpenWalletActivity</name> <range>: <expr><name>public</name> <name>WalletControllerActivity</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <call><name>OpenWalletActivity</name><argument_list>(<argument><expr><name>WalletController</name><operator>*</operator> <name>wallet_controller</name></expr></argument>, <argument><expr><name>QWidget</name><operator>*</operator> <name>parent_widget</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <call><name>open</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>path</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>opened</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>void</name> <call><name>finish</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_WALLETCONTROLLER_H</comment>
</unit>
