<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoinunits.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>

<constructor><name><name>BitcoinUnits</name><operator>::</operator><name>BitcoinUnits</name></name><parameter_list>(<parameter><decl><type><name>QObject</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>QAbstractListModel</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
        <call><name>unitlist</name><argument_list>(<argument><expr><call><name>availableUnits</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
</block_content>}</block></constructor>

<function><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></expr></argument>&gt;</argument_list></name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>availableUnits</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>Unit</name></name></expr></argument>&gt;</argument_list></name></type> <name>unitlist</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>unitlist</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>BTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unitlist</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>mBTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unitlist</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>uBTC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unitlist</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>SAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>unitlist</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>valid</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>BTC</name></expr>:</case>
    <case>case <expr><name>mBTC</name></expr>:</case>
    <case>case <expr><name>uBTC</name></expr>:</case>
    <case>case <expr><name>SAT</name></expr>:</case>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <default>default:</default>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>longName</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>BTC</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"BTC"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>mBTC</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"mBTC"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>uBTC</name></expr>:</case> <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromUtf8</name></name><argument_list>(<argument><expr><literal type="string">"ÂµBTC (bits)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SAT</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Satoshi (sat)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>shortName</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>uBTC</name></expr>:</case> <return>return <expr><call><name><name>QString</name><operator>::</operator><name>fromUtf8</name></name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SAT</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"sat"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <return>return <expr><call><name>longName</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>description</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>BTC</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Bitcoins"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>mBTC</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Milli-Bitcoins (1 / 1"</literal> <name>THIN_SP_UTF8</name> <literal type="string">"000)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>uBTC</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Micro-Bitcoins (bits) (1 / 1"</literal> <name>THIN_SP_UTF8</name> <literal type="string">"000"</literal> <name>THIN_SP_UTF8</name> <literal type="string">"000)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SAT</name></expr>:</case> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Satoshi (sat) (1 / 100"</literal> <name>THIN_SP_UTF8</name> <literal type="string">"000"</literal> <name>THIN_SP_UTF8</name> <literal type="string">"000)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default> <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>qint64</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>factor</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>BTC</name></expr>:</case> <return>return <expr><literal type="number">100000000</literal></expr>;</return>
    <case>case <expr><name>mBTC</name></expr>:</case> <return>return <expr><literal type="number">100000</literal></expr>;</return>
    <case>case <expr><name>uBTC</name></expr>:</case> <return>return <expr><literal type="number">100</literal></expr>;</return>
    <case>case <expr><name>SAT</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="number">100000000</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>decimals</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>unit</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>BTC</name></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
    <case>case <expr><name>mBTC</name></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>
    <case>case <expr><name>uBTC</name></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
    <case>case <expr><name>SAT</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>format</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nIn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fPlus</name></decl></parameter>, <parameter><decl><type><name>SeparatorStyle</name></type> <name>separators</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Note: not using straight sprintf here because we do NOT want</comment>
    <comment type="line">// localized number formatting.</comment>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>valid</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>QString</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Refuse to format invalid unit</comment>
    <decl_stmt><decl><type><name>qint64</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>qint64</name><operator>)</operator><name>nIn</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>coin</name> <init>= <expr><call><name>factor</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_decimals</name> <init>= <expr><call><name>decimals</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>n_abs</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><name>n</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>qint64</name></type> <name>quotient</name> <init>= <expr><name>n_abs</name> <operator>/</operator> <name>coin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>quotient_str</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>quotient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Use SI-style thin space separators as these are locale independent and can't be</comment>
    <comment type="line">// confused with the decimal marker.</comment>
    <decl_stmt><decl><type><name>QChar</name></type> <name>thin_sp</name><argument_list>(<argument><expr><name>THIN_SP_CP</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>q_size</name> <init>= <expr><call><name><name>quotient_str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>separators</name> <operator>==</operator> <name>separatorAlways</name> <operator>||</operator> <operator>(</operator><name>separators</name> <operator>==</operator> <name>separatorStandard</name> <operator>&amp;&amp;</operator> <name>q_size</name> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>quotient_str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>q_size</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>thin_sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>quotient_str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>fPlus</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>quotient_str</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_decimals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>qint64</name></type> <name>remainder</name> <init>= <expr><name>n_abs</name> <operator>%</operator> <name>coin</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>remainder_str</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>rightJustified</name><argument_list>(<argument><expr><name>num_decimals</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>quotient_str</name> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>remainder_str</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>quotient_str</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="line">// NOTE: Using formatWithUnit in an HTML context risks wrapping</comment>
<comment type="line">// quantities at the thousands separator. More subtly, it also results</comment>
<comment type="line">// in a standard space rather than a thin space, due to a bug in Qt's</comment>
<comment type="line">// XML whitespace canonicalisation</comment>
<comment type="line">//</comment>
<comment type="line">// Please take care to use formatHtmlWithUnit instead, when</comment>
<comment type="line">// appropriate.</comment>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>plussign</name></decl></parameter>, <parameter><decl><type><name>SeparatorStyle</name></type> <name>separators</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>format</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>plussign</name></expr></argument>, <argument><expr><name>separators</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>QString</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>shortName</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>formatHtmlWithUnit</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>plussign</name></decl></parameter>, <parameter><decl><type><name>SeparatorStyle</name></type> <name>separators</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>str</name><argument_list>(<argument><expr><call><name>formatWithUnit</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>plussign</name></expr></argument>, <argument><expr><name>separators</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name>QChar</name><argument_list>(<argument><expr><name>THIN_SP_CP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><name>THIN_SP_HTML</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"&lt;span style='white-space: nowrap;'&gt;%1&lt;/span&gt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>parse</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>CAmount</name> <modifier>*</modifier></type><name>val_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>valid</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// Refuse to parse invalid unit or empty string</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_decimals</name> <init>= <expr><call><name>decimals</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Ignore spaces and thin spaces when parsing</comment>
    <decl_stmt><decl><type><name>QStringList</name></type> <name>parts</name> <init>= <expr><call><name>removeSpaces</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>parts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// More than one dot</comment>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>whole</name> <init>= <expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>decimals</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>parts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>decimals</name> <operator>=</operator> <name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>decimals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>num_decimals</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// Exceeds max precision</comment>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>str</name> <init>= <expr><name>whole</name> <operator>+</operator> <call><name><name>decimals</name><operator>.</operator><name>leftJustified</name></name><argument_list>(<argument><expr><name>num_decimals</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">18</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return> <comment type="line">// Longer numbers will exceed 63 bits</comment>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>retvalue</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>toLongLong</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>val_out</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>val_out</name> <operator>=</operator> <name>retvalue</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>getAmountColumnTitle</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>amountTitle</name> <init>= <expr><call><name><name>QObject</name><operator>::</operator><name>tr</name></name><argument_list>(<argument><expr><literal type="string">"Amount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>valid</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>amountTitle</name> <operator>+=</operator> <literal type="string">" ("</literal><operator>+</operator><call><name><name>BitcoinUnits</name><operator>::</operator><name>shortName</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>amountTitle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>rowCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>unitlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QVariant</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>data</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QModelIndex</name> <modifier>&amp;</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>role</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><call><name><name>index</name><operator>.</operator><name>row</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>&lt;</operator> <call><name><name>unitlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Unit</name></type> <name>unit</name> <init>= <expr><call><name><name>unitlist</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch<condition>(<expr><name>role</name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>EditRole</name></name></expr>:</case>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>DisplayRole</name></name></expr>:</case>
            <return>return <expr><call><name>QVariant</name><argument_list>(<argument><expr><call><name>longName</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>ToolTipRole</name></name></expr>:</case>
            <return>return <expr><call><name>QVariant</name><argument_list>(<argument><expr><call><name>description</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>UnitRole</name></expr>:</case>
            <return>return <expr><call><name>QVariant</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>QVariant</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>CAmount</name></type> <name><name>BitcoinUnits</name><operator>::</operator><name>maxMoney</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>MAX_MONEY</name></expr>;</return>
</block_content>}</block></function>
</unit>
