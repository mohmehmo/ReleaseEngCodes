<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/cache.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// A Cache is an interface that maps keys to values.  It has internal</comment>
<comment type="line">// synchronization and may be safely accessed concurrently from</comment>
<comment type="line">// multiple threads.  It may automatically evict entries to make room</comment>
<comment type="line">// for new entries.  Values have a specified charge against the cache</comment>
<comment type="line">// capacity.  For example, a cache where the values are variable</comment>
<comment type="line">// length strings, may use the length of the string as the charge for</comment>
<comment type="line">// the string.</comment>
<comment type="line">//</comment>
<comment type="line">// A builtin cache implementation with a least-recently-used eviction</comment>
<comment type="line">// policy is provided.  Clients may use their own implementations if</comment>
<comment type="line">// they want something more sophisticated (like scan-resistance, a</comment>
<comment type="line">// custom eviction policy, variable cache sizing, etc.)</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_CACHE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_CACHE_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Cache</name></decl>;</decl_stmt>

<comment type="line">// Create a new cache with a fixed size capacity.  This implementation</comment>
<comment type="line">// of Cache uses a least-recently-used eviction policy.</comment>
<function_decl><type><specifier>extern</specifier> <name>Cache</name><modifier>*</modifier></type> <name>NewLRUCache</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>class</name></type> <name>Cache</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <macro><name>Cache</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>

  <comment type="line">// Destroys all existing entries by calling the "deleter"</comment>
  <comment type="line">// function that was passed to the constructor.</comment>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Opaque handle to an entry stored in the cache.</comment>
  <struct>struct <name>Handle</name> <block>{ }</block>;</struct>

  <comment type="line">// Insert a mapping from key-&gt;value into the cache and assign it</comment>
  <comment type="line">// the specified charge against the total cache capacity.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Returns a handle that corresponds to the mapping.  The caller</comment>
  <comment type="line">// must call this-&gt;Release(handle) when the returned mapping is no</comment>
  <comment type="line">// longer needed.</comment>
  <comment type="line">//</comment>
  <comment type="line">// When the inserted entry is no longer needed, the key and</comment>
  <comment type="line">// value will be passed to "deleter".</comment>
  <function_decl><type><name>virtual</name> <name>Handle</name><modifier>*</modifier></type> <name>Insert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>charge</name></decl></parameter>,
                         <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>deleter</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// If the cache has no mapping for "key", returns NULL.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Else return a handle that corresponds to the mapping.  The caller</comment>
  <comment type="line">// must call this-&gt;Release(handle) when the returned mapping is no</comment>
  <comment type="line">// longer needed.</comment>
  <function_decl><type><name>virtual</name> <name>Handle</name><modifier>*</modifier></type> <name>Lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Release a mapping returned by a previous Lookup().</comment>
  <comment type="line">// REQUIRES: handle must not have been released yet.</comment>
  <comment type="line">// REQUIRES: handle must have been returned by a method on *this.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Release</name><parameter_list>(<parameter><decl><type><name>Handle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Return the value encapsulated in a handle returned by a</comment>
  <comment type="line">// successful Lookup().</comment>
  <comment type="line">// REQUIRES: handle must not have been released yet.</comment>
  <comment type="line">// REQUIRES: handle must have been returned by a method on *this.</comment>
  <function_decl><type><name>virtual</name> <name>void</name><modifier>*</modifier></type> <name>Value</name><parameter_list>(<parameter><decl><type><name>Handle</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// If the cache contains entry for key, erase it.  Note that the</comment>
  <comment type="line">// underlying entry will be kept around until all existing handles</comment>
  <comment type="line">// to it have been released.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Erase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Return a new numeric id.  May be used by multiple clients who are</comment>
  <comment type="line">// sharing the same cache to partition the key space.  Typically the</comment>
  <comment type="line">// client will allocate a new id at startup and prepend the id to</comment>
  <comment type="line">// its cache keys.</comment>
  <function_decl><type><name>virtual</name> <name>uint64_t</name></type> <name>NewId</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Remove all cache entries that are not actively in use.  Memory-constrained</comment>
  <comment type="line">// applications may wish to call this method to reduce memory usage.</comment>
  <comment type="line">// Default implementation of Prune() does nothing.  Subclasses are strongly</comment>
  <comment type="line">// encouraged to override the default implementation.  A future release of</comment>
  <comment type="line">// leveldb may change Prune() to a pure abstract method.</comment>
  <function><type><name>virtual</name> <name>void</name></type> <name>Prune</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

  <comment type="line">// Return an estimate of the combined charges of all elements stored in the</comment>
  <comment type="line">// cache.</comment>
  <expr_stmt><expr><name>virtual</name> <name>size_t</name> <macro><name>TotalCharge</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <function_decl><type><name>void</name></type> <name>LRU_Remove</name><parameter_list>(<parameter><decl><type><name>Handle</name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>LRU_Append</name><parameter_list>(<parameter><decl><type><name>Handle</name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Unref</name><parameter_list>(<parameter><decl><type><name>Handle</name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>;</function_decl>

  <struct_decl>struct <name>Rep</name>;</struct_decl>
  <decl_stmt><decl><type><name>Rep</name><modifier>*</modifier></type> <name>rep_</name></decl>;</decl_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Cache</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Cache</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Cache</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_CACHE_H_</comment>
</unit>
