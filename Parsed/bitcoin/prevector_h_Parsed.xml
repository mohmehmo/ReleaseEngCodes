<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/prevector.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_PREVECTOR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_PREVECTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<comment type="block" format="doxygen">/** Implements a drop-in replacement for std::vector&lt;T&gt; which stores up to N
 *  elements directly (without heap allocation). The types Size and Diff are
 *  used to store element counts, and can be any unsigned + signed type.
 *
 *  Storage layout is either:
 *  - Direct allocation:
 *    - Size _size: the number of used elements (between 0 and N)
 *    - T direct[N]: an array of N elements of type T
 *      (only the first _size are initialized).
 *  - Indirect allocation:
 *    - Size _size: the number of used elements plus N + 1
 *    - Size capacity: the number of allocated elements
 *    - T* indirect: a pointer to an array of capacity elements of type T
 *      (only the first _size are initialized).
 *
 *  The data type T must be movable by memmove/realloc(). Once we switch to C++,
 *  move constructors can be used instead.
 */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name> <name>N</name></expr></argument>, <argument><expr><name>typename</name> <name>T</name></expr></argument>, <argument><expr><name>typename</name> <name>Size</name> <operator>=</operator> <name>uint32_t</name></expr></argument>, <argument><expr><name>typename</name> <name>Diff</name> <operator>=</operator> <name>int32_t</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>prevector</name> <block>{<block_content>
<label><name>public</name>:</label>
    <typedef>typedef <type><name>Size</name></type> <name>size_type</name>;</typedef>
    <typedef>typedef <type><name>Diff</name></type> <name>difference_type</name>;</typedef>
    <typedef>typedef <type><name>T</name></type> <name>value_type</name>;</typedef>
    <typedef>typedef <type><name>value_type</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
    <typedef>typedef <type><specifier>const</specifier> <name>value_type</name><modifier>&amp;</modifier></type> <name>const_reference</name>;</typedef>
    <typedef>typedef <type><name>value_type</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
    <typedef>typedef <type><specifier>const</specifier> <name>value_type</name><modifier>*</modifier></type> <name>const_pointer</name>;</typedef>

    <decl_stmt><decl><type><name>class</name></type> <name>iterator</name> <block>{<block_content>
        <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
    <label><name>public</name>:</label>
        <typedef>typedef <type><name>Diff</name></type> <name>difference_type</name>;</typedef>
        <typedef>typedef <type><name>T</name></type> <name>value_type</name>;</typedef>
        <typedef>typedef <type><name>T</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
        <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
        <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
        <expr_stmt><expr><call><name>iterator</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>ptr_</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>ptr_</argument>)</argument_list></macro> <block>{}</block>
        <name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ptr</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>ptr</name></expr>;</return> </block_content>}</block>
        T&amp; operator[](size_type pos</block></decl>) <block>{<block_content> <return>return <expr><name><name>ptr</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_type</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><name><name>ptr</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
        <expr_stmt><expr><name>iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>++</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>--</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>difference_type</name> <name>friend</name> <name>operator</name><operator>-</operator><operator>(</operator><name>iterator</name> <name>a</name><operator>,</operator> <name>iterator</name> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <expr><name>ptr</name> <operator>+=</operator> <name>n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name> <name>operator</name><operator>-</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>iterator</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <expr><name>ptr</name> <operator>-=</operator> <name>n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>==</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>!=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&gt;=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&lt;=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&gt;</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&lt;</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
    </block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>class</name></type> <name>reverse_iterator</name> <block>{<block_content>
        <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
    <label><name>public</name>:</label>
        <typedef>typedef <type><name>Diff</name></type> <name>difference_type</name>;</typedef>
        <typedef>typedef <type><name>T</name></type> <name>value_type</name>;</typedef>
        <typedef>typedef <type><name>T</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
        <typedef>typedef <type><name>T</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
        <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>bidirectional_iterator_tag</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
        <expr_stmt><expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>ptr_</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>ptr_</argument>)</argument_list></macro> <block>{}</block>
        <name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <block>{ <return>return <expr><operator>*</operator><name>ptr</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ptr</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> <block>{<block_content> <return>return <expr><name>ptr</name></expr>;</return> </block_content>}</block>
        const T* operator-&gt;(</block></decl>) const <block>{<block_content> <return>return <expr><name>ptr</name></expr>;</return> </block_content>}</block></decl_stmt>
        <expr_stmt><expr><name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>++</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>--</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>reverse_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>reverse_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>reverse_iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>reverse_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>reverse_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>==</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>reverse_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>!=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
    };

    <decl_stmt><decl><type><name>class</name></type> <name>const_iterator</name> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
    <label><name>public</name>:</label>
        <typedef>typedef <type><name>Diff</name></type> <name>difference_type</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name></type> <name>value_type</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
        <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>random_access_iterator_tag</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
        <expr_stmt><expr><call><name>const_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <name>ptr_</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>ptr_</argument>)</argument_list></macro> <block>{}</block>
        <macro><name>const_iterator</name><argument_list>(<argument>iterator x</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>&amp;(*x)</argument>)</argument_list></macro> <block>{}</block>
        <specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ptr</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>ptr</name></expr>;</return> </block_content>}</block>
        const T&amp; operator[](size_type pos</block></decl>) const <block>{<block_content> <return>return <expr><name><name>ptr</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl_stmt>
        <expr_stmt><expr><name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>++</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>--</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>--</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>const_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>const_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>difference_type</name> <name>friend</name> <name>operator</name><operator>-</operator><operator>(</operator><name>const_iterator</name> <name>a</name><operator>,</operator> <name>const_iterator</name> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>(</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>a</name><operator>)</operator> <operator>-</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name> <name>operator</name><operator>+</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <expr><name>ptr</name> <operator>+=</operator> <name>n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name> <name>operator</name><operator>-</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><name>ptr</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_iterator</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator><name>size_type</name> <name>n</name><operator>)</operator> <block>{ <expr><name>ptr</name> <operator>-=</operator> <name>n</name></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>==</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>!=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&gt;=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&lt;=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&gt;</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><name>const_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>&lt;</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
    };

    <decl_stmt><decl><type><name>class</name></type> <name>const_reverse_iterator</name> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
    <label><name>public</name>:</label>
        <typedef>typedef <type><name>Diff</name></type> <name>difference_type</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name></type> <name>value_type</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>pointer</name>;</typedef>
        <typedef>typedef <type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>reference</name>;</typedef>
        <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name>bidirectional_iterator_tag</name> <name>iterator_category</name></expr>;</expr_stmt></typedef>
        <expr_stmt><expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <name>ptr_</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>ptr_</argument>)</argument_list></macro> <block>{}</block>
        <macro><name>const_reverse_iterator</name><argument_list>(<argument>reverse_iterator x</argument>)</argument_list></macro> <operator>:</operator> <macro><name>ptr</name><argument_list>(<argument>&amp;(*x)</argument>)</argument_list></macro> <block>{}</block>
        <specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>operator</name><operator>*</operator><operator>(</operator><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><operator>*</operator><name>ptr</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>*</operator> <name><name>operator</name><operator>-&gt;</operator><name/></name>(</expr></expr_stmt>)</block_content> const <block>{<block_content> <return>return <expr><name>ptr</name></expr>;</return> </block_content>}</block>
        const_reverse_iterator&amp; operator--(</block></decl>) <block>{<block_content> <expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> </block_content>}</block></decl_stmt>
        <expr_stmt><expr><name>const_reverse_iterator</name><operator>&amp;</operator> <name>operator</name><operator>++</operator><operator>(</operator><operator>)</operator> <block>{ <expr><name>ptr</name><operator>--</operator></expr>; <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_reverse_iterator</name> <name>operator</name><operator>++</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>const_reverse_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>const_reverse_iterator</name> <name>operator</name><operator>--</operator><operator>(</operator><name>int</name><operator>)</operator> <block>{ <expr><name>const_reverse_iterator</name> <call><name>copy</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>; <expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>; <return>return <expr><name>copy</name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><name>const_reverse_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>==</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><name>const_reverse_iterator</name> <name>x</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>ptr</name> <operator>!=</operator> <name><name>x</name><operator>.</operator><name>ptr</name></name></expr>;</return> }</block></expr></expr_stmt>
    };

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>size_type</name></type> <name>_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <union>union <name>direct_or_indirect</name> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>direct</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>N</name></expr>]</index></name></decl>;</decl_stmt>
        <struct>struct <block>{
            <decl_stmt><decl><type><name>size_type</name></type> <name>capacity</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>indirect</name></decl>;</decl_stmt>
        }</block>;</struct>
    }</block> <decl><name>_union</name> <init>= <expr><block>{}</block></expr></init></decl>;</union>

    <function><type><name>T</name><modifier>*</modifier></type> <name>direct_ptr</name><parameter_list>(<parameter><decl><type><name>difference_type</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>direct</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>direct_ptr</name><argument_list>(<argument><expr><name>difference_type</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>direct</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <function><type><name>T</name><modifier>*</modifier></type> <name>indirect_ptr</name><parameter_list>(<parameter><decl><type><name>difference_type</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>indirect_ptr</name><argument_list>(<argument><expr><name>difference_type</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>is_direct</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>_size</name> <operator>&lt;=</operator> <name>N</name></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>change_capacity</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>new_capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&lt;=</operator> <name>N</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_direct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>indirect</name> <init>= <expr><call><name>indirect_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><name>indirect</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>direct_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>indirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>_size</name> <operator>-=</operator> <name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_direct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="block">/* FIXME: Because malloc/realloc here won't call new_handler if allocation fails, assert
                    success. These should instead use an allocator or new/delete so that handlers
                    are called as necessary, but performance would be slightly degraded by doing so. */</comment>
                <expr_stmt><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <name>new_capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>_union</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>new_indirect</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>*</operator> <name>new_capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>new_indirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>src</name> <init>= <expr><call><name>direct_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>new_indirect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name> <operator>=</operator> <name>new_indirect</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>_union</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>new_capacity</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>T</name><modifier>*</modifier></type> <name>item_ptr</name><parameter_list>(<parameter><decl><type><name>difference_type</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>is_direct</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>direct_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>indirect_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> </block_content>}</block></function>
    <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>*</modifier></type> <name>item_ptr</name><argument_list>(<argument><expr><name>difference_type</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>is_direct</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>direct_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>indirect_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>fill</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>dst</name></expr></argument>, <argument><expr><name>ptrdiff_t</name> <name>count</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>value</name> <operator>=</operator> <name>T</name><block>{}</block></expr></argument>)</argument_list> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><call><name>fill_n</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <while>while <condition>(<expr><name>first</name> <operator>!=</operator> <name>last</name></expr>)</condition> <block>{<block_content>
            <macro><name>new</name><argument_list>(<argument>static_cast&lt;void*&gt;(dst)</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><operator>*</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>first</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

<label><name>public</name>:</label>
    <function><type><name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>InputIterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>n</name> <init>= <expr><name>last</name> <operator>-</operator> <name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <macro><name>prevector</name><argument_list>()</argument_list></macro> <block>{<block_content/>}</block>

    <function><type><name>explicit</name></type> <name>prevector</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>explicit</name></type> <name>prevector</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>&gt;</argument_list></name></type>
    <name>prevector</name><parameter_list>(<parameter><decl><type><name>InputIterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>n</name> <init>= <expr><name>last</name> <operator>-</operator> <name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <macro><name>prevector</name><argument_list>(<argument>const prevector&lt;N</argument>, <argument>T</argument>, <argument>Size</argument>, <argument>Diff&gt;&amp; other</argument>)</argument_list></macro> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>n</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><call><name><name>other</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>prevector</name><argument_list>(<argument>prevector&lt;N</argument>, <argument>T</argument>, <argument>Size</argument>, <argument>Diff&gt;&amp;&amp; other</argument>)</argument_list></macro> <block>{<block_content>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>prevector</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>other</name><operator>)</operator> <block>{
        <if_stmt><if>if <condition>(<expr><operator>&amp;</operator><name>other</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
        <expr_stmt/>}</block_content>
        assign(other.begin(</block></if></if_stmt>), <call><name><name>other</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>)</block></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }

    prevector<expr_stmt><expr><operator>&amp;</operator> <name>operator</name><operator>=</operator><operator>(</operator><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><operator>&amp;&amp;</operator> <name>other</name><operator>)</operator> <block>{
        <expr><call><name>swap</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>is_direct</name><argument_list>()</argument_list></call> <operator>?</operator> <name>_size</name> <operator>:</operator> <name>_size</name> <operator>-</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>reverse_iterator</name></type> <name>rbegin</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rbegin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>reverse_iterator</name></type> <name>rend</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>reverse_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_reverse_iterator</name> <macro><name>rend</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>const_reverse_iterator</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>size_t</name> <macro><name>capacity</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <if_stmt><if>if <condition>(<expr><call><name>is_direct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>N</name></expr>;</return>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
            <return>return <expr><name><name>_union</name><operator>.</operator><name>capacity</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    }

    T<expr_stmt><expr><operator>&amp;</operator> <name><name>operator</name><index>[]</index></name><operator>(</operator><name>size_type</name> <name>pos</name><operator>)</operator> <block>{
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_type</name> <name>pos</name></expr></argument>)</argument_list> const <block>{<block_content>
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>new_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>cur_size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cur_size</name> <operator>==</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>cur_size</name> <operator>&gt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&gt;</operator> <call><name>capacity</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>increase</name> <init>= <expr><name>new_size</name> <operator>-</operator> <name>cur_size</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>cur_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>increase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>increase</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>new_capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&gt;</operator> <call><name>capacity</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>shrink_to_fit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>resize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>iterator</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>p</name> <init>= <expr><name>pos</name> <operator>-</operator> <call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_type</name></type> <name>new_size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name> <operator>+</operator> <operator>(</operator><name>new_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name><operator>++</operator></expr>;</expr_stmt>
        <macro><name>new</name><argument_list>(<argument>static_cast&lt;void*&gt;(ptr)</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>iterator</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>p</name> <init>= <expr><name>pos</name> <operator>-</operator> <call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_type</name></type> <name>new_size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name> <operator>+</operator> <operator>(</operator><name>new_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>InputIterator</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>InputIterator</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>p</name> <init>= <expr><name>pos</name> <operator>-</operator> <call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>difference_type</name></type> <name>count</name> <init>= <expr><name>last</name> <operator>-</operator> <name>first</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_type</name></type> <name>new_size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name> <operator>+</operator> <operator>(</operator><name>new_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>T</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>inline</specifier> <name>void</name></type> <name>resize_uninitialized</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>new_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// resize_uninitialized changes the size of the prevector but does not initialize it.</comment>
        <comment type="line">// If size &lt; new_size, the added elements must be initialized explicitly.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>new_size</name> <operator>-</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>new_size</name> <operator>&lt;</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><call><name>item_ptr</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>_size</name> <operator>+=</operator> <name>new_size</name> <operator>-</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>iterator</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>erase</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>iterator</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Erase is not allowed to the change the object's capacity. That means</comment>
        <comment type="line">// that when starting with an indirectly allocated prevector with</comment>
        <comment type="line">// size and capacity &gt; N, the result may be a still indirectly allocated</comment>
        <comment type="line">// prevector with size &lt;= N and capacity &gt; N. A shrink_to_fit() call is</comment>
        <comment type="line">// necessary to switch to the (more efficient) directly allocated</comment>
        <comment type="line">// representation (with capacity N and size &lt;= N).</comment>
        <decl_stmt><decl><type><name>iterator</name></type> <name>p</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>endp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><call><name>end</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>std</name><operator>::</operator><name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
            <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>last</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>.</operator><name/></name>~<call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>_size</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>_size</name> <operator>-=</operator> <name>last</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>first</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator></expr></argument>, <argument><expr><name>endp</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>first</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_type</name></type> <name>new_size</name> <init>= <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>capacity</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>new_size</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>change_capacity</name><argument_list>(<argument><expr><name>new_size</name> <operator>+</operator> <operator>(</operator><name>new_size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <macro><name>new</name><argument_list>(<argument>item_ptr(size())</argument>)</argument_list></macro> <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>_size</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>pop_back</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><call><name>end</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>T</name><modifier>&amp;</modifier></type> <name>front</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <macro><name>front</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>T</name><modifier>&amp;</modifier></type> <name>back</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <macro><name>back</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><operator>*</operator><call><name>item_ptr</name><argument_list>(<argument><expr><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>_union</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>_union</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><call><name>swap</name><argument_list>(<argument><expr><name>_size</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><operator>~</operator><macro><name>prevector</name><argument_list>()</argument_list></macro> <block>{
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>std</name><operator>::</operator><name><name>is_trivially_destructible</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_direct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>_union</name><operator>.</operator><name>indirect</name></name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    }

    bool <expr_stmt><expr><name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
        <if_stmt><if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        <expr_stmt/></block_content></block></if></if_stmt>}</block>
        <name>const_iterator</name> <name>b1</name> <operator>=</operator> <call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>const_iterator</name></type> <name>b2</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>const_iterator</name></type> <name>e1</name> <init>= <expr><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>b1</name> <operator>!=</operator> <name>e1</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>b1</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>*</operator><name>b2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>b1</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>b2</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>true</name></expr>;</return>
    }

    bool <expr_stmt><expr><name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
        <return>return <expr><operator>!</operator><operator>(</operator><operator>*</operator><name>this</name> <operator>==</operator> <name>other</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Size</name></expr></argument>, <argument><expr><name>Diff</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>other</name><operator>)</operator> <specifier>const</specifier> <block>{
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>other</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>other</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>const_iterator</name></type> <name>b1</name> <init>= <expr><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>const_iterator</name></type> <name>b2</name> <init>= <expr><call><name><name>other</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>const_iterator</name></type> <name>e1</name> <init>= <expr><call><name>end</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>b1</name> <operator>!=</operator> <name>e1</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>b1</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>b2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>b2</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><operator>*</operator><name>b1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>false</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>b1</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>b2</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>false</name></expr>;</return>
    }

    size_t <macro><name>allocated_memory</name><argument_list>()</argument_list></macro> <expr_stmt><expr><specifier>const</specifier> <block>{
        <if_stmt><if>if <condition>(<expr><call><name>is_direct</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt> <if_stmt><else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>_union</name><operator>.</operator><name>capacity</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    }

    value_type<expr_stmt><expr><operator>*</operator> <macro><name>data</name><argument_list>()</argument_list></macro> <block>{
        <return>return <expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>const</specifier> <name>value_type</name><operator>*</operator> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>item_ptr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>
};
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_PREVECTOR_H</comment>
</unit>
