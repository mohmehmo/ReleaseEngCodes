<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/ui_interface.h"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2012-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UI_INTERFACE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UI_INTERFACE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>boost</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>signals2</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>connection</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace boost</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<comment type="block" format="doxygen">/** General change type (added, updated, removed). */</comment>
<enum>enum <name>ChangeType</name>
<block>{
    <decl><name>CT_NEW</name></decl>,
    <decl><name>CT_UPDATED</name></decl>,
    <decl><name>CT_DELETED</name></decl>
}</block>;</enum>

<comment type="block" format="doxygen">/** Signals for UI communication. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CClientUIInterface</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/** Flags for CClientUIInterface::ThreadSafeMessageBox */</comment>
    <enum>enum <name>MessageBoxFlags</name>
    <block>{
        <decl><name>ICON_INFORMATION</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>,
        <decl><name>ICON_WARNING</name>        <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
        <decl><name>ICON_ERROR</name>          <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
        <comment type="block" format="doxygen">/**
         * Mask of all available icons in CClientUIInterface::MessageBoxFlags
         * This needs to be updated, when icons are changed there!
         */</comment>
        <decl><name>ICON_MASK</name> <init>= <expr><operator>(</operator><name>ICON_INFORMATION</name> <operator>|</operator> <name>ICON_WARNING</name> <operator>|</operator> <name>ICON_ERROR</name><operator>)</operator></expr></init></decl>,

        <comment type="block" format="doxygen">/** These values are taken from qmessagebox.h "enum StandardButton" to be directly usable */</comment>
        <decl><name>BTN_OK</name>      <init>= <expr><literal type="number">0x00000400U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Ok</comment>
        <decl><name>BTN_YES</name>     <init>= <expr><literal type="number">0x00004000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Yes</comment>
        <decl><name>BTN_NO</name>      <init>= <expr><literal type="number">0x00010000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::No</comment>
        <decl><name>BTN_ABORT</name>   <init>= <expr><literal type="number">0x00040000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Abort</comment>
        <decl><name>BTN_RETRY</name>   <init>= <expr><literal type="number">0x00080000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Retry</comment>
        <decl><name>BTN_IGNORE</name>  <init>= <expr><literal type="number">0x00100000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Ignore</comment>
        <decl><name>BTN_CLOSE</name>   <init>= <expr><literal type="number">0x00200000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Close</comment>
        <decl><name>BTN_CANCEL</name>  <init>= <expr><literal type="number">0x00400000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Cancel</comment>
        <decl><name>BTN_DISCARD</name> <init>= <expr><literal type="number">0x00800000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Discard</comment>
        <decl><name>BTN_HELP</name>    <init>= <expr><literal type="number">0x01000000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Help</comment>
        <decl><name>BTN_APPLY</name>   <init>= <expr><literal type="number">0x02000000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Apply</comment>
        <decl><name>BTN_RESET</name>   <init>= <expr><literal type="number">0x04000000U</literal></expr></init></decl>, <comment type="line">// QMessageBox::Reset</comment>
        <comment type="block" format="doxygen">/**
         * Mask of all available buttons in CClientUIInterface::MessageBoxFlags
         * This needs to be updated, when buttons are changed there!
         */</comment>
        <decl><name>BTN_MASK</name> <init>= <expr><operator>(</operator><name>BTN_OK</name> <operator>|</operator> <name>BTN_YES</name> <operator>|</operator> <name>BTN_NO</name> <operator>|</operator> <name>BTN_ABORT</name> <operator>|</operator> <name>BTN_RETRY</name> <operator>|</operator> <name>BTN_IGNORE</name> <operator>|</operator>
                    <name>BTN_CLOSE</name> <operator>|</operator> <name>BTN_CANCEL</name> <operator>|</operator> <name>BTN_DISCARD</name> <operator>|</operator> <name>BTN_HELP</name> <operator>|</operator> <name>BTN_APPLY</name> <operator>|</operator> <name>BTN_RESET</name><operator>)</operator></expr></init></decl>,

        <comment type="block" format="doxygen">/** Force blocking, modal message box dialog (not just OS notification) */</comment>
        <decl><name>MODAL</name>               <init>= <expr><literal type="number">0x10000000U</literal></expr></init></decl>,

        <comment type="block" format="doxygen">/** Do not prepend error/warning prefix */</comment>
        <decl><name>MSG_NOPREFIX</name>        <init>= <expr><literal type="number">0x20000000U</literal></expr></init></decl>,

        <comment type="block" format="doxygen">/** Do not print contents of message to debug log */</comment>
        <decl><name>SECURE</name>              <init>= <expr><literal type="number">0x40000000U</literal></expr></init></decl>,

        <comment type="block" format="doxygen">/** Predefined combinations for certain default usage cases */</comment>
        <decl><name>MSG_INFORMATION</name> <init>= <expr><name>ICON_INFORMATION</name></expr></init></decl>,
        <decl><name>MSG_WARNING</name> <init>= <expr><operator>(</operator><name>ICON_WARNING</name> <operator>|</operator> <name>BTN_OK</name> <operator>|</operator> <name>MODAL</name><operator>)</operator></expr></init></decl>,
        <decl><name>MSG_ERROR</name> <init>= <expr><operator>(</operator><name>ICON_ERROR</name> <operator>|</operator> <name>BTN_OK</name> <operator>|</operator> <name>MODAL</name><operator>)</operator></expr></init></decl>
    }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SIGNALS_DECL_WRAPPER</name><parameter_list>(<parameter><type><name>signal_name</name></type></parameter>, <parameter><type><name>rtype</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                  \
    <cpp:value>rtype signal_name(__VA_ARGS__);                                                        \
    using signal_name##Sig = rtype(__VA_ARGS__);                                           \
    boost::signals2::connection signal_name##_connect(std::function&lt;signal_name##Sig&gt; fn);</cpp:value></cpp:define>

    <comment type="block" format="doxygen">/** Show message box. */</comment>
    <macro><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument>ThreadSafeMessageBox</argument>, <argument>bool</argument>, <argument>const std::string&amp; message</argument>, <argument>const std::string&amp; caption</argument>, <argument>unsigned int style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/** If possible, ask the user a question. If not, falls back to ThreadSafeMessageBox(noninteractive_message, caption, style) and returns false. */</comment>
    <macro><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument>ThreadSafeQuestion</argument>, <argument>bool</argument>, <argument>const std::string&amp; message</argument>, <argument>const std::string&amp; noninteractive_message</argument>, <argument>const std::string&amp; caption</argument>, <argument>unsigned int style</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/** Progress message during initialization. */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>InitMessage</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Number of network connections changed. */</comment>
    <macro><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument>NotifyNumConnectionsChanged</argument>, <argument>void</argument>, <argument>int newNumConnections</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/** Network activity state changed. */</comment>
    <macro><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument>NotifyNetworkActiveChanged</argument>, <argument>void</argument>, <argument>bool networkActive</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/**
     * Status bar alerts changed.
     */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyAlertChanged</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, )</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** A wallet has been loaded. */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>LoadWallet</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Show progress e.g. for verifychain.
     * resume_possible indicates shutting down now will result in the current progress action resuming upon restart.
     */</comment>
    <macro><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument>ShowProgress</argument>, <argument>void</argument>, <argument>const std::string&amp; title</argument>, <argument>int nProgress</argument>, <argument>bool resume_possible</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="block" format="doxygen">/** New block has been accepted */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyBlockTip</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Best header has changed */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyHeaderTip</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Banlist did change. */</comment>
    <expr_stmt><expr><call><name>ADD_SIGNALS_DECL_WRAPPER</name><argument_list>(<argument><expr><name>BannedListChanged</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Show warning message **/</comment>
<decl_stmt><decl><type><name>void</name></type> <name>InitWarning</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Show error message **/</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>InitError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CClientUIInterface</name></type> <name>uiInterface</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UI_INTERFACE_H</comment>
</unit>
