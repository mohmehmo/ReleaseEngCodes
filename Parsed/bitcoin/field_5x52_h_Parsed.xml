<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/field_5x52.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_FIELD_REPR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FIELD_REPR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* X = sum(i=0..4, n[i]*2^(i*52)) mod p
     * where p = 2^256 - 0x1000003D1
     */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>n</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>magnitude</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>normalized</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>secp256k1_fe</name>;</typedef>

<comment type="block">/* Unpacks a constant into a overlapping multi-limbed FE element. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FE_CONST_INNER</name><parameter_list>(<parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ \
    (d0) | (((uint64_t)(d1) &amp; 0xFFFFFUL) &lt;&lt; 32), \
    ((uint64_t)(d1) &gt;&gt; 20) | (((uint64_t)(d2)) &lt;&lt; 12) | (((uint64_t)(d3) &amp; 0xFFUL) &lt;&lt; 44), \
    ((uint64_t)(d3) &gt;&gt; 8) | (((uint64_t)(d4) &amp; 0xFFFFFFFUL) &lt;&lt; 24), \
    ((uint64_t)(d4) &gt;&gt; 28) | (((uint64_t)(d5)) &lt;&lt; 4) | (((uint64_t)(d6) &amp; 0xFFFFUL) &lt;&lt; 36), \
    ((uint64_t)(d6) &gt;&gt; 16) | (((uint64_t)(d7)) &lt;&lt; 16) \
}</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FE_CONST</name><parameter_list>(<parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0)), 1, 1}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FE_CONST</name><parameter_list>(<parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{SECP256K1_FE_CONST_INNER((d7), (d6), (d5), (d4), (d3), (d2), (d1), (d0))}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>secp256k1_fe_storage</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FE_STORAGE_CONST</name><parameter_list>(<parameter><type><name>d7</name></type></parameter>, <parameter><type><name>d6</name></type></parameter>, <parameter><type><name>d5</name></type></parameter>, <parameter><type><name>d4</name></type></parameter>, <parameter><type><name>d3</name></type></parameter>, <parameter><type><name>d2</name></type></parameter>, <parameter><type><name>d1</name></type></parameter>, <parameter><type><name>d0</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{{ \
    (d0) | (((uint64_t)(d1)) &lt;&lt; 32), \
    (d2) | (((uint64_t)(d3)) &lt;&lt; 32), \
    (d4) | (((uint64_t)(d5)) &lt;&lt; 32), \
    (d6) | (((uint64_t)(d7)) &lt;&lt; 32) \
}}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_FIELD_REPR_H */</comment>
</unit>
