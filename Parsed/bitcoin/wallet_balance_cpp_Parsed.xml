<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/wallet_balance.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletBalance</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>set_dirty</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>add_watchonly</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>add_mine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>ADDRESS_WATCHONLY</name> <init>= <expr><name>ADDRESS_BCRT1_UNSPENDABLE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Chain</name></name></expr></argument>&gt;</argument_list></name></type> <name>chain</name> <init>= <expr><call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CWallet</name></type> <name>wallet</name><argument_list>{<argument><expr><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><macro><name>WalletDatabase</name></macro><name><operator>::</operator><name>CreateMock</name></name><operator>(</operator><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>first_run</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>first_run</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>DBErrors</name><operator>::</operator><name>LOAD_OK</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>handleNotifications</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>


    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>address_mine</name><argument_list>{<argument><expr><ternary><condition><expr><name>add_mine</name></expr> ?</condition><then> <expr><call><name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>{<argument><expr><macro><name>getnewaddress</name><argument_list>(<argument>wallet</argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr> </then><else>: <expr><name>nullopt</name></expr></else></ternary></expr></argument>}</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>add_watchonly</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>importaddress</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>ADDRESS_WATCHONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>generatetoaddress</name><argument_list>(<argument><expr><call><name><name>address_mine</name><operator>.</operator><name>get_value_or</name></name><argument_list>(<argument><expr><name>ADDRESS_WATCHONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generatetoaddress</name><argument_list>(<argument><expr><name>ADDRESS_WATCHONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>SyncWithValidationInterfaceQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>bal</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Cache</comment>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>set_dirty</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>MarkDirty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>bal</name> <operator>=</operator> <call><name><name>wallet</name><operator>.</operator><name>GetBalance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>add_mine</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_mine_trusted</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>add_watchonly</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>bal</name><operator>.</operator><name>m_watchonly_trusted</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletBalanceDirty</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>WalletBalance</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <comment type="block">/* set_dirty */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/* add_watchonly */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/* add_mine */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletBalanceClean</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>WalletBalance</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <comment type="block">/* set_dirty */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/* add_watchonly */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/* add_mine */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletBalanceMine</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>WalletBalance</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <comment type="block">/* set_dirty */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/* add_watchonly */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/* add_mine */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletBalanceWatch</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>WalletBalance</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <comment type="block">/* set_dirty */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>, <comment type="block">/* add_watchonly */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/* add_mine */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>WalletBalanceDirty</name></expr></argument>, <argument><expr><literal type="number">2500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>WalletBalanceClean</name></expr></argument>, <argument><expr><literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>WalletBalanceMine</name></expr></argument>, <argument><expr><literal type="number">16000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>WalletBalanceWatch</name></expr></argument>, <argument><expr><literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
