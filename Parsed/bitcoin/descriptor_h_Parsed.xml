<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/script/descriptor.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SCRIPT_DESCRIPTOR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SCRIPT_DESCRIPTOR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<comment type="block" format="doxygen">/** \brief Interface for parsed descriptor objects.
 *
 * Descriptors are strings that describe a set of scriptPubKeys, together with
 * all information necessary to solve them. By combining all information into
 * one, they avoid the need to separately import keys and scripts.
 *
 * Descriptors may be ranged, which occurs when the public keys inside are
 * specified in the form of HD chains (xpubs).
 *
 * Descriptors always represent public information - public keys and scripts -
 * but in cases where private keys need to be conveyed along with a descriptor,
 * they can be included inside by changing public keys to private keys (WIF
 * format), and changing xpubs by xprvs.
 *
 * Reference documentation about the descriptor language can be found in
 * doc/descriptors.md.
 */</comment>
<struct>struct <name>Descriptor</name> <block>{
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Descriptor</name><argument_list>()</argument_list></call> <operator>=</operator> default</expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Whether the expansion of this descriptor depends on the position. */</comment>
    <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsRange</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Whether this descriptor has all information about signing ignoring lack of private keys.
     *  This is true for all descriptors except ones that use `raw` or `addr` constructions. */</comment>
    <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>IsSolvable</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Convert the descriptor back to a string, undoing parsing. */</comment>
    <expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ToPrivateString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>&amp;</operator> <name>provider</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Expand a descriptor at a specified position.
     *
     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.
     * @param[in] provider: The provider to query for private keys in case of hardened derivation.
     * @param[out] output_scripts: The expanded scriptPubKeys.
     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).
     * @param[out] cache: Cache data necessary to evaluate the descriptor at this point without access to private keys.
     */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>Expand</name><argument_list>(<argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>&amp;</operator> <name>provider</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>output_scripts</name></expr></argument>, <argument><expr><name>FlatSigningProvider</name><operator>&amp;</operator> <name>out</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>cache</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Expand a descriptor at a specified position using cached expansion data.
     *
     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.
     * @param[in] cache: Cached expansion data.
     * @param[out] output_scripts: The expanded scriptPubKeys.
     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).
     */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>ExpandFromCache</name><argument_list>(<argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>cache</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>output_scripts</name></expr></argument>, <argument><expr><name>FlatSigningProvider</name><operator>&amp;</operator> <name>out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Expand the private key for a descriptor at a specified position, if possible.
     *
     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.
     * @param[in] provider: The provider to query for the private keys.
     * @param[out] out: Any private keys available for the specified `pos`.
     */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>ExpandPrivate</name><argument_list>(<argument><expr><name>int</name> <name>pos</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>&amp;</operator> <name>provider</name></expr></argument>, <argument><expr><name>FlatSigningProvider</name><operator>&amp;</operator> <name>out</name></expr></argument>)</argument_list> const <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/** Parse a `descriptor` string. Included private keys are put in `out`.
 *
 * If the descriptor has a checksum, it must be valid. If `require_checksum`
 * is set, the checksum is mandatory - otherwise it is optional.
 *
 * If a parse error occurs, or the checksum is missing/invalid, or anything
 * else is wrong, `nullptr` is returned.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name> <macro><name>Parse</name><argument_list>(<argument>const std::string&amp; descriptor</argument>, <argument>FlatSigningProvider&amp; out</argument>, <argument>std::string&amp; error</argument>, <argument>bool require_checksum = false</argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Get the checksum for a `descriptor`.
 *
 * - If it already has one, and it is correct, return the checksum in the input.
 * - If it already has one that is wrong, return "".
 * - If it does not already have one, return the checksum that would need to be added.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>GetDescriptorChecksum</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** Find a descriptor for the specified `script`, using information from `provider` where possible.
 *
 * A non-ranged descriptor which only generates the specified script will be returned in all
 * circumstances.
 *
 * For public keys with key origin information, this information will be preserved in the returned
 * descriptor.
 *
 * - If all information for solving `script` is present in `provider`, a descriptor will be returned
 *   which is IsSolvable() and encapsulates said information.
 * - Failing that, if `script` corresponds to a known address type, an "addr()" descriptor will be
 *   returned (which is not IsSolvable()).
 * - Failing that, a "raw()" descriptor is returned.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Descriptor</name></expr></argument>&gt;</argument_list></name> <call><name>InferDescriptor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CScript</name><operator>&amp;</operator> <name>script</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>SigningProvider</name><operator>&amp;</operator> <name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SCRIPT_DESCRIPTOR_H</comment>
</unit>
