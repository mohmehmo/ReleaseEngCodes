<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/strencodings.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<comment type="block" format="doxygen">/**
 * Utilities for converting data from/to strings.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_STRENCODINGS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_STRENCODINGS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;attributes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARRAYLEN</name><parameter_list>(<parameter><type><name>array</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(sizeof(array)/sizeof((array)[0]))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/** Used by SanitizeString() */</comment>
<enum>enum <name>SafeChars</name>
<block>{
    <decl><name>SAFE_CHARS_DEFAULT</name></decl>, <comment type="line" format="doxygen">//!&lt; The full set of allowed chars</comment>
    <decl><name>SAFE_CHARS_UA_COMMENT</name></decl>, <comment type="line" format="doxygen">//!&lt; BIP-0014 subset</comment>
    <decl><name>SAFE_CHARS_FILENAME</name></decl>, <comment type="line" format="doxygen">//!&lt; Chars allowed in filenames</comment>
    <decl><name>SAFE_CHARS_URI</name></decl>, <comment type="line" format="doxygen">//!&lt; Chars allowed in URIs (RFC 3986)</comment>
}</block>;</enum>

<comment type="block" format="doxygen">/**
* Remove unsafe chars. Safe chars chosen to allow simple messages/URLs/email
* addresses, but avoid anything even possibly remotely dangerous like &amp; or &gt;
* @param[in] str    The string to sanitize
* @param[in] rule   The set of safe chars to choose (default: least restrictive)
* @return           A new string without unsafe chars
*/</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>SanitizeString</name><argument_list>(<argument>const std::string&amp; str</argument>, <argument>int rule = SAFE_CHARS_DEFAULT</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>ParseHex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>ParseHex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>signed</name> <name>char</name></type> <name>HexDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* Returns true if each character in str is a hex character, and has an even
 * number of hex digits.*/</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>IsHex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
* Return true if the string is a hex number, optionally prefixed with "0x"
*/</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>IsHexNumber</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>DecodeBase64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>pf_invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>DecodeBase64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>pf_invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeBase64</name><argument_list>(<argument>const unsigned char* pch</argument>, <argument>size_t len</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>EncodeBase64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <call><name>DecodeBase32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>pf_invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>DecodeBase32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator> <name>pf_invalid</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>EncodeBase32</name><argument_list>(<argument>const unsigned char* pch</argument>, <argument>size_t len</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>EncodeBase32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>SplitHostPort</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <name>in</name></expr></argument>, <argument><expr><name>int</name> <operator>&amp;</operator><name>portOut</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>hostOut</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>i64tostr</name><argument_list>(<argument>int64_t n</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>itostr</name><argument_list>(<argument>int n</argument>)</argument_list></macro></expr>;</expr_stmt>
<function_decl><type><name>int64_t</name></type> <name>atoi64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int64_t</name></type> <name>atoi64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atoi</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Tests if the given character is a decimal digit.
 * @param[in] c     character to test
 * @return          true if the argument is a decimal digit; otherwise false.
 */</comment>
<function><type><name>constexpr</name> <name>bool</name></type> <name>IsDigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Tests if the given character is a whitespace character. The whitespace characters
 * are: space, form-feed ('\f'), newline ('\n'), carriage return ('\r'), horizontal
 * tab ('\t'), and vertical tab ('\v').
 *
 * This function is locale independent. Under the C locale this function gives the
 * same result as std::isspace.
 *
 * @param[in] c     character to test
 * @return          true if the argument is a whitespace character; otherwise false
 */</comment>
<function><type><name>constexpr</name> <specifier>inline</specifier> <name>bool</name></type> <name>IsSpace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> noexcept <block>{<block_content>
    <return>return <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\v'</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Convert string to signed 32-bit integer with strict parse error feedback.
 * @returns true if the entire string could be parsed as valid integer,
 *   false if not the entire string could be parsed or when overflow or underflow occurred.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseInt32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>int32_t</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Convert string to signed 64-bit integer with strict parse error feedback.
 * @returns true if the entire string could be parsed as valid integer,
 *   false if not the entire string could be parsed or when overflow or underflow occurred.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.
 * @returns true if the entire string could be parsed as valid integer,
 *   false if not the entire string could be parsed or when overflow or underflow occurred.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseUInt32</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>uint32_t</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Convert decimal string to unsigned 64-bit integer with strict parse error feedback.
 * @returns true if the entire string could be parsed as valid integer,
 *   false if not the entire string could be parsed or when overflow or underflow occurred.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseUInt64</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Convert string to double with strict parse error feedback.
 * @returns true if the entire string could be parsed as valid double,
 *   false if not the entire string could be parsed or when overflow or underflow occurred.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseDouble</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>std</name><operator>::</operator><name>string</name> <macro><name>HexStr</name><argument_list>(<argument>const T itbegin</argument>, <argument>const T itend</argument>)</argument_list></macro>
<block>{
    <expr><name>std</name><operator>::</operator><name>string</name> <name>rv</name></expr>;
    <expr><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <name><name>hexmap</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <block>{ <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>,
                                     <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr> }</block></expr>;
    <expr><call><name><name>rv</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>distance</name><argument_list>(<argument><expr><name>itbegin</name></expr></argument>, <argument><expr><name>itend</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
    <for>for<control>(<init><decl><type><name>T</name></type> <name>it</name> <init>= <expr><name>itbegin</name></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>&lt;</operator> <name>itend</name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>hexmap</name><index>[<expr><name>val</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>hexmap</name><index>[<expr><name>val</name><operator>&amp;</operator><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}

template<expr_stmt><expr><operator>&lt;</operator><name>typename</name> <name>T</name><operator>&gt;</operator>
<specifier>inline</specifier> <name>std</name><operator>::</operator><name>string</name> <macro><name>HexStr</name><argument_list>(<argument>const T&amp; vch</argument>)</argument_list></macro>
<block>{
    <return>return <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block" format="doxygen">/**
 * Format a paragraph of text to a fixed width, adding spaces for
 * indentation to any added line.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>FormatParagraph</name><argument_list>(<argument>const std::string&amp; in</argument>, <argument>size_t width = <literal type="number">79</literal></argument>, <argument>size_t indent = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Timing-attack-resistant comparison.
 * Takes time proportional to length
 * of first argument.
 */</comment>
<function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>TimingResistantEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>accumulator</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>^</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>accumulator</name> <operator>|=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>b</name><index>[<expr><name>i</name><operator>%</operator><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>accumulator</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Parse number as fixed point according to JSON number syntax.
 * See http://json.org/number.gif
 * @returns true on success, false on error.
 * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.
 */</comment>
<decl_stmt><decl><type><name>NODISCARD</name> <name>bool</name></type> <name>ParseFixedPoint</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>int</name> <name>decimals</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator><name>amount_out</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Convert from one power-of-2 number base to another. */</comment>
<function><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>int</name> <name>frombits</name></expr></argument>, <argument><expr><name>int</name> <name>tobits</name></expr></argument>, <argument><expr><name>bool</name> <name>pad</name></expr></argument>, <argument><expr><name>typename</name> <name>O</name></expr></argument>, <argument><expr><name>typename</name> <name>I</name></expr></argument>&gt;</argument_list></name>
<name>bool</name></type> <name>ConvertBits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>O</name><modifier>&amp;</modifier></type> <name>outfn</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name>size_t</name></type> <name>maxv</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tobits</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name>size_t</name></type> <name>max_acc</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>frombits</name> <operator>+</operator> <name>tobits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>it</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>acc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <name>frombits</name><operator>)</operator> <operator>|</operator> <operator>*</operator><name>it</name><operator>)</operator> <operator>&amp;</operator> <name>max_acc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bits</name> <operator>+=</operator> <name>frombits</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name>tobits</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>bits</name> <operator>-=</operator> <name>tobits</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>outfn</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&gt;&gt;</operator> <name>bits</name><operator>)</operator> <operator>&amp;</operator> <name>maxv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>pad</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>outfn</name><argument_list>(<argument><expr><operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>tobits</name> <operator>-</operator> <name>bits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>maxv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <name>frombits</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name>acc</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>tobits</name> <operator>-</operator> <name>bits</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>maxv</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Converts the given character to its lowercase equivalent.
 * This function is locale independent. It only converts uppercase
 * characters in the standard 7-bit ASCII range.
 * This is a feature, not a limitation.
 *
 * @param[in] c     the character to convert to lowercase.
 * @return          the lowercase equivalent of c; or the argument
 *                  if no conversion is possible.
 */</comment>
<function><type><name>constexpr</name> <name>char</name></type> <name>ToLower</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr> ?</condition><then> <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="char">'a'</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Returns the lowercase equivalent of the given string.
 * This function is locale independent. It only converts uppercase
 * characters in the standard 7-bit ASCII range.
 * This is a feature, not a limitation.
 *
 * @param[in] str   the string to convert to lowercase.
 * @returns         lowercased equivalent of str
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ToLower</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Converts the given character to its uppercase equivalent.
 * This function is locale independent. It only converts lowercase
 * characters in the standard 7-bit ASCII range.
 * This is a feature, not a limitation.
 *
 * @param[in] c     the character to convert to uppercase.
 * @return          the uppercase equivalent of c; or the argument
 *                  if no conversion is possible.
 */</comment>
<function><type><name>constexpr</name> <name>char</name></type> <name>ToUpper</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr> ?</condition><then> <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <literal type="char">'A'</literal></expr> </then><else>: <expr><name>c</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Returns the uppercase equivalent of the given string.
 * This function is locale independent. It only converts lowercase
 * characters in the standard 7-bit ASCII range.
 * This is a feature, not a limitation.
 *
 * @param[in] str   the string to convert to uppercase.
 * @returns         UPPERCASED EQUIVALENT OF str
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ToUpper</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 * Capitalizes the first character of the given string.
 * This function is locale independent. It only converts lowercase
 * characters in the standard 7-bit ASCII range.
 * This is a feature, not a limitation.
 *
 * @param[in] str   the string to capitalize.
 * @returns         string with the first letter capitalized.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>Capitalize</name><argument_list>(<argument>std::string str</argument>)</argument_list></macro></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_STRENCODINGS_H</comment>
</unit>
