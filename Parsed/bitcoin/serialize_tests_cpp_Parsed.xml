<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/serialize_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>serialize_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<class>class <name>CSerializeMethodsTestSingle</name>
<block>{<private type="default">
</private><protected>protected:
    <decl_stmt><decl><type><name>int</name></type> <name>intval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>boolval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>stringval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>charstrval</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>txval</name></decl>;</decl_stmt>
</protected><public>public:
    <constructor_decl><name>CSerializeMethodsTestSingle</name><parameter_list>()</parameter_list> = <specifier>default</specifier>;</constructor_decl>
    <constructor><name>CSerializeMethodsTestSingle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>intvalin</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>boolvalin</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>stringvalin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>charstrvalin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransactionRef</name><modifier>&amp;</modifier></type> <name>txvalin</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>intval</name><argument_list>(<argument><expr><name>intvalin</name></expr></argument>)</argument_list></call>, <call><name>boolval</name><argument_list>(<argument><expr><name>boolvalin</name></expr></argument>)</argument_list></call>, <call><name>stringval</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>stringvalin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>txval</name><argument_list>(<argument><expr><name>txvalin</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>charstrval</name></expr></argument>, <argument><expr><name>charstrvalin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>charstrval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <macro><name>ADD_SERIALIZE_METHODS</name></macro><empty_stmt>;</empty_stmt>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>, <parameter><type><name>typename</name></type> <name>Operation</name></parameter>&gt;</parameter_list></template>
    <type><specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>intval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>boolval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>stringval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>charstrval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>txval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSerializeMethodsTestSingle</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return  <expr><name>intval</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>intval</name></name> <operator>&amp;&amp;</operator> \
                <name>boolval</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>boolval</name></name> <operator>&amp;&amp;</operator> \
                <name>stringval</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>stringval</name></name> <operator>&amp;&amp;</operator> \
                <call><name>strcmp</name><argument_list>(<argument><expr><name>charstrval</name></expr></argument>, <argument><expr><name><name>rhs</name><operator>.</operator><name>charstrval</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> \
                <operator>*</operator><name>txval</name> <operator>==</operator> <operator>*</operator><name><name>rhs</name><operator>.</operator><name>txval</name></name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<class>class <name>CSerializeMethodsTestMany</name> <super_list>: <super><specifier>public</specifier> <name>CSerializeMethodsTestSingle</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <using>using <name><name>CSerializeMethodsTestSingle</name><operator>::</operator><name>CSerializeMethodsTestSingle</name></name>;</using>
    <macro><name>ADD_SERIALIZE_METHODS</name></macro><empty_stmt>;</empty_stmt>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Stream</name></parameter>, <parameter><type><name>typename</name></type> <name>Operation</name></parameter>&gt;</parameter_list></template>
    <type><specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>intval</name></expr></argument>, <argument><expr><name>boolval</name></expr></argument>, <argument><expr><name>stringval</name></expr></argument>, <argument><expr><name>charstrval</name></expr></argument>, <argument><expr><name>txval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>sizes</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>char</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int8_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint8_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int16_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint16_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int64_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>float</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>double</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Bool is serialized as char</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>bool</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Sanity-check GetSerializeSize and c++ type matching</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>char</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int8_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint8_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int16_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint16_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int32_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint32_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>int64_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>float</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>double</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetSerializeSize</name><argument_list>(<argument><expr><call><name>bool</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>floats_conversion</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Choose values that map unambiguously to binary floating point to avoid</comment>
    <comment type="line">// rounding issues at the compiler side.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x00000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x3f000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x3f800000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x40800000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint32_to_float</name><argument_list>(<argument><expr><literal type="number">0x44444444</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">785.066650390625F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00000000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">0.5F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x3f000000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x3f800000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">2.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x40000000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">4.0F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x40800000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_float_to_uint32</name><argument_list>(<argument><expr><literal type="number">785.066650390625F</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x44444444U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>doubles_conversion</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Choose values that map unambiguously to binary floating point to avoid</comment>
    <comment type="line">// rounding issues at the compiler side.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x0000000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x3fe0000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x3ff0000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x4000000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x4010000000000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_uint64_to_double</name><argument_list>(<argument><expr><literal type="number">0x4088888880000000ULL</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">785.066650390625</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0000000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x3fe0000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x3ff0000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4000000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">4.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4010000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ser_double_to_uint64</name><argument_list>(<argument><expr><literal type="number">785.066650390625</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x4088888880000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<comment type="block">/*
Python code to generate the below hashes:

    def reversed_hex(x):
        return binascii.hexlify(''.join(reversed(x)))
    def dsha256(x):
        return hashlib.sha256(hashlib.sha256(x).digest()).digest()

    reversed_hex(dsha256(''.join(struct.pack('&lt;f', x) for x in range(0,1000)))) == '8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c'
    reversed_hex(dsha256(''.join(struct.pack('&lt;d', x) for x in range(0,1000)))) == '43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96'
*/</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>floats</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// encode</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>float</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ss</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"8e8b4cf3e4df8b332057e3e23af42ebc663b61e0495d5e7e32d85099d7f3fe0c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// decode</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>doubles</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// encode</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>double</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ss</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"43d0c82591953c4eafe114590d392676a01585d25b25d433557f0d7878b23f96"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// decode</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>varints</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// encode</comment>

    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CDataStream</name><operator>::</operator><name>size_type</name></name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100000000000ULL</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">999999937</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// decode</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100000000000ULL</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">999999937</literal></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>j</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>varints_bitpatterns</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><literal type="number">0x7f</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x1234</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a334"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><literal type="number">0x1234</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a334"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0xffff</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"82fe7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"82fe7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x123456</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c7e756"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">0x123456</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c7e756"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x80123456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"86ffc7e756"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0x80123456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"86ffc7e756"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8efefefe7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0x7fffffffffffffffLL</literal></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fefefefefefefefe7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"80fefefefefefefefe7f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>compactsize</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list><operator>::</operator><name>size_type</name></name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>WriteCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAX_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>j</name></expr></argument>, <argument><expr><literal type="string">"decoded:"</literal> <operator>&lt;&lt;</operator> <name>j</name> <operator>&lt;&lt;</operator> <literal type="string">" expected:"</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCanonicalException</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type> <name>ex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></type> <name>expectedException</name><argument_list>(<argument><expr><literal type="string">"non-canonical ReadCompactSize()"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// The string returned by what() can be different for different platforms.</comment>
    <comment type="line">// Instead of directly comparing the ex.what() with an expected string,</comment>
    <comment type="line">// create an instance of exception to see if ex.what() matches</comment>
    <comment type="line">// the expected explanatory string returned by the exception instance.</comment>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name><name>expectedException</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ex</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>vector_bool</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name></type> <name>vec1</name><argument_list>{<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vec2</name><argument_list>{<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>}</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>vec1</name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vec2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SerializeHash</name><argument_list>(<argument><expr><name>vec1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>SerializeHash</name><argument_list>(<argument><expr><name>vec2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>noncanonical</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Write some non-canonical CompactSize encodings, and</comment>
    <comment type="line">// make sure an exception is thrown when read back.</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list><operator>::</operator><name>size_type</name></name></type> <name>n</name></decl>;</decl_stmt>

    <comment type="line">// zero encoded with three bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xfd\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 0xfc encoded with three bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xfd\xfc\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 0xfd encoded with three bytes is OK:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xfd\xfd\x00"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0xfd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// zero encoded with five bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xfe\x00\x00\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 0xffff encoded with five bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xfe\xff\xff\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// zero encoded with nine bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xff\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 0x01ffffff encoded with nine bytes:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\xff\xff\xff\xff\x01\x00\x00\x00\x00"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EXCEPTION</name><argument_list>(<argument><expr><call><name>ReadCompactSize</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>, <argument><expr><name>isCanonicalException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>insert_delete</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test inserting/deleting bytes.</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="string">"\x00\x01\x02\xff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Inserting at beginning/end/middle:</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">7U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Delete at beginning/end/middle</comment>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">6U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>ss</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure GetAndClear does the right thing:</comment>
    <decl_stmt><decl><type><name>CSerializeData</name></type> <name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>GetAndClear</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>class_methods</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>intval</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>boolval</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>stringval</name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>charstrval</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"testing charstr"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx_ref</name><argument_list>{<argument><expr><macro><name>MakeTransactionRef</name><argument_list>(<argument>txval</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>CSerializeMethodsTestSingle</name></type> <name>methodtest1</name><parameter_list>(<parameter><decl><type><name>intval</name></type></decl></parameter>, <parameter><decl><type><name>boolval</name></type></decl></parameter>, <parameter><decl><type><name>stringval</name></type></decl></parameter>, <parameter><decl><type><name>charstrval</name></type></decl></parameter>, <parameter><decl><type><name>tx_ref</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>CSerializeMethodsTestMany</name></type> <name>methodtest2</name><parameter_list>(<parameter><decl><type><name>intval</name></type></decl></parameter>, <parameter><decl><type><name>boolval</name></type></decl></parameter>, <parameter><decl><type><name>stringval</name></type></decl></parameter>, <parameter><decl><type><name>charstrval</name></type></decl></parameter>, <parameter><decl><type><name>tx_ref</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>CSerializeMethodsTestSingle</name></type> <name>methodtest3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CSerializeMethodsTestMany</name></type> <name>methodtest4</name></decl>;</decl_stmt>
    <function_decl><type><name>CDataStream</name></type> <name>ss</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>methodtest1</name> <operator>==</operator> <name>methodtest2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>methodtest1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>methodtest4</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>methodtest2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>methodtest3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>methodtest1</name> <operator>==</operator> <name>methodtest2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>methodtest2</name> <operator>==</operator> <name>methodtest3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>methodtest3</name> <operator>==</operator> <name>methodtest4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>ss2</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>, <parameter><decl><type><name>intval</name></type></decl></parameter>, <parameter><decl><type><name>boolval</name></type></decl></parameter>, <parameter><decl><type><name>stringval</name></type></decl></parameter>, <parameter><decl><type><name>charstrval</name></type></decl></parameter>, <parameter><decl><type><name>txval</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>ss2</name> <operator>&gt;&gt;</operator> <name>methodtest3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>methodtest3</name> <operator>==</operator> <name>methodtest4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
