<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/status.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// A Status encapsulates the result of an operation.  It may indicate success,</comment>
<comment type="line">// or it may indicate an error with an associated error message.</comment>
<comment type="line">//</comment>
<comment type="line">// Multiple threads can invoke const methods on a Status without</comment>
<comment type="line">// external synchronization, but if any of the threads may call a</comment>
<comment type="line">// non-const method, all threads accessing the same Status must use</comment>
<comment type="line">// external synchronization.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_STATUS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_STATUS_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Status</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Create a success status.</comment>
  <expr_stmt><expr><call><name>Status</name><argument_list>()</argument_list></call> <operator>:</operator> <macro><name>state_</name><argument_list>(<argument>NULL</argument>)</argument_list></macro> <block>{ }</block>
  <operator>~</operator><macro><name>Status</name><argument_list>()</argument_list></macro> <block>{ <expr><name><name>delete</name><index>[]</index></name> <name>state_</name></expr>; }</block>

  <comment type="line">// Copy the specified status.</comment>
  <call><name>Status</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Status</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Status</name><operator>&amp;</operator> <name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="line">// Return a success status.</comment>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>OK</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>Status</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

  <comment type="line">// Return error status of an appropriate type.</comment>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>NotFound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg2</name> <init>= <expr><call><name>Slice</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><name>kNotFound</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>Corruption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg2</name> <init>= <expr><call><name>Slice</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><name>kCorruption</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>NotSupported</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg2</name> <init>= <expr><call><name>Slice</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><name>kNotSupported</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>InvalidArgument</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg2</name> <init>= <expr><call><name>Slice</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><name>kInvalidArgument</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  <function><type><specifier>static</specifier> <name>Status</name></type> <name>IOError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>msg2</name> <init>= <expr><call><name>Slice</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>Status</name><argument_list>(<argument><expr><name>kIOError</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="line">// Returns true iff the status indicates success.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>ok</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>state_</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Returns true iff the status indicates a NotFound error.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsNotFound</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>code</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kNotFound</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Returns true iff the status indicates a Corruption error.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsCorruption</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>code</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kCorruption</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Returns true iff the status indicates an IOError.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsIOError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>code</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kIOError</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Returns true iff the status indicates a NotSupportedError.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsNotSupportedError</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>code</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kNotSupported</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Returns true iff the status indicates an InvalidArgument.</comment>
  <expr_stmt><expr><name>bool</name> <macro><name>IsInvalidArgument</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>code</name><argument_list>()</argument_list></call> <operator>==</operator> <name>kInvalidArgument</name></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return a string representation of this status suitable for printing.</comment>
  <comment type="line">// Returns the string "OK" for success.</comment>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// OK status has a NULL state_.  Otherwise, state_ is a new[] array</comment>
  <comment type="line">// of the following form:</comment>
  <comment type="line">//    state_[0..3] == length of message</comment>
  <comment type="line">//    state_[4]    == code</comment>
  <comment type="line">//    state_[5..]  == message</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>state_</name></decl>;</decl_stmt>

  <enum>enum <name>Code</name> <block>{
    <decl><name>kOk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>kNotFound</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>kCorruption</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <decl><name>kNotSupported</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
    <decl><name>kInvalidArgument</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
    <decl><name>kIOError</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
  }</block>;</enum>

  <expr_stmt><expr><name>Code</name> <macro><name>code</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><operator>(</operator><name>state_</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>?</operator> <name>kOk</name> <operator>:</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>Code</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>state_</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></expr></expr_stmt>

  <macro><name>Status</name><argument_list>(<argument>Code code</argument>, <argument>const Slice&amp; msg</argument>, <argument>const Slice&amp; msg2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CopyState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>Status</name><operator>::</operator><macro><name>Status</name><argument_list>(<argument>const Status&amp; s</argument>)</argument_list></macro> <block>{
  <expr><name>state_</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>.</operator><name>state_</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>CopyState</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>state_</name></name></expr></argument>)</argument_list></call></expr>;
}</block>
<specifier>inline</specifier> <name>void</name> <name>Status</name><operator>::</operator><name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>Status</name><operator>&amp;</operator> <name>s</name><operator>)</operator> <block>{
  <comment type="line">// The following condition catches both aliasing (when this == &amp;s),</comment>
  <comment type="line">// and the common case where both s and *this are ok.</comment>
  <if_stmt><if>if <condition>(<expr><name>state_</name> <operator>!=</operator> <name><name>s</name><operator>.</operator><name>state_</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>delete</name><index>[]</index></name></type> <name>state_</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>state_</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>.</operator><name>state_</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>CopyState</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>state_</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt/>}</block_content>
}

}</block></if></if_stmt></block></expr></expr_stmt></block_content></block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_STATUS_H_</comment>
</unit>
