<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/blockfilter_tests.cpp"><comment type="line">// Copyright (c) 2018-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/blockfilters.json.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_AUTO_TEST_SUITE</name><argument_list>(<argument>blockfilter_tests</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>gcsfilter_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>GCSFilter</name><operator>::</operator><name>ElementSet</name></name></type> <name>included_elements</name></decl>, <decl><type ref="prev"/><name>excluded_elements</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>GCSFilter</name><operator>::</operator><name>Element</name></name></type> <name>element1</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>element1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>included_elements</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>element1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>GCSFilter</name><operator>::</operator><name>Element</name></name></type> <name>element2</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>element2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>excluded_elements</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>element2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>GCSFilter</name></type> <name>filter</name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>}</block></expr></argument>, <argument><expr><name>included_elements</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>element</name> <range>: <expr><name>included_elements</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>Match</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>auto</name></type> <name>insertion</name> <init>= <expr><call><name><name>excluded_elements</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>MatchAny</name></name><argument_list>(<argument><expr><name>excluded_elements</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>excluded_elements</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>insertion</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>gcsfilter_default_constructor</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>GCSFilter</name></type> <name>filter</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetN</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>GetEncoded</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>GCSFilter</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>params</name> <init>= <expr><call><name><name>filter</name><operator>.</operator><name>GetParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>m_siphash_k0</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>m_siphash_k1</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>m_P</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>m_M</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>blockfilter_basic_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name><name>included_scripts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>excluded_scripts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// First two are outputs on a single transaction.</comment>
    <expr_stmt><expr><name><name>included_scripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>included_scripts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>

    <comment type="line">// Third is an output on in a second transaction.</comment>
    <expr_stmt><expr><name><name>included_scripts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>

    <comment type="line">// Last two are spent by a single transaction.</comment>
    <expr_stmt><expr><name><name>included_scripts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>included_scripts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_ADD</name> <operator>&lt;&lt;</operator> <name>OP_8</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>

    <comment type="line">// OP_RETURN output is an output on the second transaction.</comment>
    <expr_stmt><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This script is not related to the block at all.</comment>
    <expr_stmt><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>

    <comment type="line">// OP_RETURN is non-standard since it's not followed by a data push, but is still excluded from</comment>
    <comment type="line">// filter.</comment>
    <expr_stmt><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>OP_RETURN</name> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_ADD</name> <operator>&lt;&lt;</operator> <name>OP_8</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx_1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx_1</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name><name>included_scripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx_1</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name><name>included_scripts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx_1</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx_2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>tx_2</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name><name>included_scripts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx_2</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tx_2</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Script is empty</comment>

    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx_1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx_2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlockUndo</name></type> <name>block_undo</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>vprevout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CTxOut</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><name><name>included_scripts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>vprevout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CTxOut</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><name><name>included_scripts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>vprevout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>CTxOut</name><argument_list>(<argument><expr><literal type="number">700</literal></expr></argument>, <argument><expr><name><name>excluded_scripts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name>BlockFilter</name></type> <name>block_filter</name><parameter_list>(<parameter><decl><type><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></type></decl></parameter>, <parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>block_undo</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GCSFilter</name><modifier>&amp;</modifier></type> <name>filter</name> <init>= <expr><call><name><name>block_filter</name><operator>.</operator><name>GetFilter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name> <range>: <expr><name>included_scripts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>Match</name></name><argument_list>(<argument><expr><call><name><name>GCSFilter</name><operator>::</operator><name>Element</name></name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name> <range>: <expr><name>excluded_scripts</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>filter</name><operator>.</operator><name>Match</name></name><argument_list>(<argument><expr><call><name><name>GCSFilter</name><operator>::</operator><name>Element</name></name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Test serialization/unserialization.</comment>
    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>block_filter2</name></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>block_filter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block_filter2</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block_filter</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block_filter2</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>block_filter</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>block_filter2</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>block_filter</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>block_filter2</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>default_ctor_block_filter_1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BlockFilter</name></type> <name>default_ctor_block_filter_2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>default_ctor_block_filter_1</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>default_ctor_block_filter_2</name><operator>.</operator><name>GetFilterType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>default_ctor_block_filter_1</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>default_ctor_block_filter_2</name><operator>.</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>default_ctor_block_filter_1</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>default_ctor_block_filter_2</name><operator>.</operator><name>GetEncodedFilter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>blockfilters_json_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>json</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>json_data</name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>blockfilters</name></name></expr></argument>,
                          <argument><expr><name><name>json_tests</name><operator>::</operator><name>blockfilters</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>blockfilters</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>json</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>json_data</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>json</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Parse error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>tests</name> <init>= <expr><call><name><name>json</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/*int block_height =*/</comment> <expr_stmt><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>block_hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHashStr</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>DecodeHexBlk</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CBlockUndo</name></type> <name>block_undo</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>emplace_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CTxUndo</name><modifier>&amp;</modifier></type> <name>tx_undo</name> <init>= <expr><call><name><name>block_undo</name><operator>.</operator><name>vtxundo</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>prev_scripts</name> <init>= <expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_array</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <call><name><name>prev_scripts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>raw_script</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>prev_scripts</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CTxOut</name></type> <name>txout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>raw_script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>raw_script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tx_undo</name><operator>.</operator><name>vprevout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>txout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>uint256</name></type> <name>prev_filter_header_basic</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHashStr</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>prev_filter_header_basic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>filter_basic</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>filter_header_basic</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHashStr</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>filter_header_basic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <function_decl><type><name>BlockFilter</name></type> <name>computed_filter_basic</name><parameter_list>(<parameter><decl><type><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></type></decl></parameter>, <parameter><decl><type><name>block</name></type></decl></parameter>, <parameter><decl><type><name>block_undo</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>computed_filter_basic</name><operator>.</operator><name>GetFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetEncoded</name><argument_list>()</argument_list></call> <operator>==</operator> <name>filter_basic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint256</name></type> <name>computed_header_basic</name> <init>= <expr><call><name><name>computed_filter_basic</name><operator>.</operator><name>ComputeHeader</name></name><argument_list>(<argument><expr><name>prev_filter_header_basic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>computed_header_basic</name> <operator>==</operator> <name>filter_header_basic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>blockfilter_type_names</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>BlockFilterTypeName</name><argument_list>(<argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"basic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>BlockFilterTypeName</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>BlockFilterType</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>BlockFilterTypeByName</name><argument_list>(<argument><expr><literal type="string">"basic"</literal></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>, <argument><expr><name><name>BlockFilterType</name><operator>::</operator><name>BASIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>BlockFilterTypeByName</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
