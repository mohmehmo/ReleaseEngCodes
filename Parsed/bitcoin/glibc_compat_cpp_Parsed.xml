<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/compat/glibc_compat.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Prior to GLIBC_2.14, memcpy was aliased to memmove.</comment>
<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>void</name><modifier>*</modifier></type> <name>memmove</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<extern>extern <literal type="string">"C"</literal> <function><type><name>void</name><modifier>*</modifier></type> <name>memcpy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>memmove</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></extern>

<extern>extern <literal type="string">"C"</literal> <decl_stmt><decl><type><name>void</name></type> <name>__chk_fail</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__noreturn__</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt></extern>
<extern>extern <literal type="string">"C"</literal> <function><type><name>FDELT_TYPE</name></type> <name>__fdelt_warn</name><parameter_list>(<parameter><decl><type><name>FDELT_TYPE</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>FD_SETSIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>__chk_fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>a</name> <operator>/</operator> <name>__NFDBITS</name></expr>;</return>
</block_content>}</block></function></extern>
<extern>extern <literal type="string">"C"</literal> <decl_stmt><decl><type><name>FDELT_TYPE</name></type> <name>__fdelt_chk</name><argument_list>(<argument><expr><name>FDELT_TYPE</name></expr></argument>)</argument_list> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>weak</name><operator>,</operator> <call><name>alias</name><argument_list>(<argument><expr><literal type="string">"__fdelt_warn"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt></extern>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>int64_t</name></type> <name>__udivmoddi4</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list>;</function_decl></extern>

<extern>extern <literal type="string">"C"</literal> <function><type><name>int64_t</name></type> <name>__wrap___divmoddi4</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>uu</name> <init>= <expr><name>u</name></expr></init></decl>, <decl><type ref="prev"/><name>vv</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>r</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>uu</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>~</operator><name>c1</name></expr><operator>,</operator> <expr><name>c2</name> <operator>=</operator> <operator>~</operator><name>c2</name></expr><operator>,</operator> <expr><name>uu</name> <operator>=</operator> <operator>-</operator><name>uu</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>vv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>~</operator><name>c1</name></expr><operator>,</operator> <expr><name>vv</name> <operator>=</operator> <operator>-</operator><name>vv</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>__udivmoddi4</name><argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><name>vv</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c1</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <operator>-</operator><name>w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>rp</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<extern>extern <literal type="string">"C"</literal> <function_decl><type><name>float</name></type> <name>log2f_old</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl></extern>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__i386__</name></cpp:ifdef>
<asm>__asm(".symver log2f_old,log2f@GLIBC_2.1");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__amd64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm(".symver log2f_old,log2f@GLIBC_2.2.5");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm(".symver log2f_old,log2f@GLIBC_2.4");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aarch64__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm(".symver log2f_old,log2f@GLIBC_2.17");</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__riscv</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm(".symver log2f_old,log2f@GLIBC_2.27");</asm>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<extern>extern <literal type="string">"C"</literal> <function><type><name>float</name></type> <name>__wrap_log2f</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>log2f_old</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></extern>
</unit>
