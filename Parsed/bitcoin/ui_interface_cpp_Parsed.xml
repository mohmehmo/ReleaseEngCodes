<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/ui_interface.cpp"><comment type="line">// Copyright (c) 2010-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ui_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/last_value.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/signal.hpp&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>CClientUIInterface</name></type> <name>uiInterface</name></decl>;</decl_stmt>

<struct>struct <name>UISignals</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ThreadSafeMessageBoxSig</name></name></expr></argument>, <argument><expr><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>last_value</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ThreadSafeMessageBox</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ThreadSafeQuestionSig</name></name></expr></argument>, <argument><expr><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>last_value</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ThreadSafeQuestion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>InitMessageSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>InitMessage</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>NotifyNumConnectionsChangedSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>NotifyNumConnectionsChanged</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>NotifyNetworkActiveChangedSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>NotifyNetworkActiveChanged</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>NotifyAlertChangedSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>NotifyAlertChanged</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>LoadWalletSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>LoadWallet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>ShowProgressSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>ShowProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>NotifyBlockTipSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>NotifyBlockTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>NotifyHeaderTipSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>NotifyHeaderTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>BannedListChangedSig</name></name></expr></argument>&gt;</argument_list></name></type> <name>BannedListChanged</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>UISignals</name></type> <name>g_ui_signals</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SIGNALS_IMPL_WRAPPER</name><parameter_list>(<parameter><type><name>signal_name</name></type></parameter>)</parameter_list></cpp:macro>                                                                 \
    <cpp:value>boost::signals2::connection CClientUIInterface::signal_name##_connect(std::function&lt;signal_name##Sig&gt; fn) \
    {                                                                                                         \
        return g_ui_signals.signal_name.connect(fn);                                                          \
    }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>ThreadSafeMessageBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>ThreadSafeQuestion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>InitMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyNumConnectionsChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyNetworkActiveChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyAlertChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>LoadWallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>ShowProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyBlockTip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>NotifyHeaderTip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ADD_SIGNALS_IMPL_WRAPPER</name><argument_list>(<argument><expr><name>BannedListChanged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>bool</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>ThreadSafeMessageBox</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>ThreadSafeMessageBox</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>bool</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>ThreadSafeQuestion</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>non_interactive_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>caption</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>ThreadSafeQuestion</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>non_interactive_message</name></expr></argument>, <argument><expr><name>caption</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>InitMessage</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>InitMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>NotifyNumConnectionsChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newNumConnections</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>NotifyNumConnectionsChanged</name></name><argument_list>(<argument><expr><name>newNumConnections</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>NotifyNetworkActiveChanged</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>networkActive</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>NotifyNetworkActiveChanged</name></name><argument_list>(<argument><expr><name>networkActive</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>NotifyAlertChanged</name></name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>NotifyAlertChanged</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>LoadWallet</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name><name>interfaces</name><operator>::</operator><name>Wallet</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>ShowProgress</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nProgress</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>resume_possible</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>ShowProgress</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>nProgress</name></expr></argument>, <argument><expr><name>resume_possible</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>NotifyBlockTip</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>NotifyBlockTip</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>NotifyHeaderTip</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>NotifyHeaderTip</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type> <name><name>CClientUIInterface</name><operator>::</operator><name>BannedListChanged</name></name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>g_ui_signals</name><operator>.</operator><name>BannedListChanged</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>


<function><type><name>bool</name></type> <name>InitError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_ERROR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>InitWarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>uiInterface</name><operator>.</operator><name>ThreadSafeMessageBox</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>CClientUIInterface</name><operator>::</operator><name>MSG_WARNING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
