<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/fuzz/spanparsing.cpp"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/fuzz/FuzzedDataProvider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/fuzz/fuzz.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/spanparsing.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>test_one_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FuzzedDataProvider</name></type> <name>fuzzed_data_provider</name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>query_size</name> <init>= <expr><call><name><name>fuzzed_data_provider</name><operator>.</operator><name>ConsumeIntegral</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>query</name> <init>= <expr><call><name><name>fuzzed_data_provider</name><operator>.</operator><name>ConsumeBytesAsString</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>query_size</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>span_str</name> <init>= <expr><call><name><name>fuzzed_data_provider</name><operator>.</operator><name>ConsumeRemainingBytesAsString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>const_span</name> <init>= <expr><call><name>MakeSpan</name><argument_list>(<argument><expr><name>span_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>mut_span</name> <init>= <expr><name>const_span</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>spanparsing</name><operator>::</operator><name>Const</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>mut_span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mut_span</name> <operator>=</operator> <name>const_span</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>spanparsing</name><operator>::</operator><name>Func</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>mut_span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mut_span</name> <operator>=</operator> <name>const_span</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>spanparsing</name><operator>::</operator><name>Expr</name></name><argument_list>(<argument><expr><name>mut_span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>query</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mut_span</name> <operator>=</operator> <name>const_span</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>spanparsing</name><operator>::</operator><name>Split</name></name><argument_list>(<argument><expr><name>mut_span</name></expr></argument>, <argument><expr><call><name><name>query</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
