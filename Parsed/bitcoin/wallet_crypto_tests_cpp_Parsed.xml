<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/test/wallet_crypto_tests.cpp"><comment type="line">// Copyright (c) 2014-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/crypter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>wallet_crypto_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<class>class <name>TestCrypter</name>
<block>{<private type="default">
</private><public>public:
<function><type><specifier>static</specifier> <name>void</name></type> <name>TestPassphraseSingle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSalt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rounds</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>correctKey</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>correctIV</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CCrypter</name></type> <name>crypt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>crypt</name><operator>.</operator><name>SetKeyFromPassphrase</name></name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>correctKey</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>correctKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, \
            <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">" != "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>correctKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>correctKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>correctIV</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>correctIV</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchIV</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchIV</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>crypt</name><operator>.</operator><name>vchIV</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">" != "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>correctIV</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>correctIV</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestPassphrase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSalt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SecureString</name><modifier>&amp;</modifier></type> <name>passphrase</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>rounds</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>correctKey</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>correctIV</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestPassphraseSingle</name><argument_list>(<argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>, <argument><expr><name>correctKey</name></expr></argument>, <argument><expr><name>correctIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name><name>SecureString</name><operator>::</operator><name>const_iterator</name></name></type> <name>i</name><argument_list>(<argument><expr><call><name><name>passphrase</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>passphrase</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TestPassphraseSingle</name><argument_list>(<argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><call><name>SecureString</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>passphrase</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestDecrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCrypter</name><modifier>&amp;</modifier></type> <name>crypt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCiphertext</name></decl></parameter>, \
                        <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchPlaintext</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CKeyingMaterial</name></type> <name>vchDecrypted</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>crypt</name><operator>.</operator><name>Decrypt</name></name><argument_list>(<argument><expr><name>vchCiphertext</name></expr></argument>, <argument><expr><name>vchDecrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>vchPlaintext</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CKeyingMaterial</name><argument_list>(<argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>vchDecrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestEncryptSingle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCrypter</name><modifier>&amp;</modifier></type> <name>crypt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKeyingMaterial</name><modifier>&amp;</modifier></type> <name>vchPlaintext</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCiphertextCorrect</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchCiphertext</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>crypt</name><operator>.</operator><name>Encrypt</name></name><argument_list>(<argument><expr><name>vchPlaintext</name></expr></argument>, <argument><expr><name>vchCiphertext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>vchCiphertextCorrect</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>vchCiphertext</name> <operator>==</operator> <name>vchCiphertextCorrect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchPlaintext2</name><argument_list>(<argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchPlaintext</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TestDecrypt</name><argument_list>(<argument><expr><name>crypt</name></expr></argument>, <argument><expr><name>vchCiphertext</name></expr></argument>, <argument><expr><name>vchPlaintext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestEncrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CCrypter</name><modifier>&amp;</modifier></type> <name>crypt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchPlaintextIn</name></decl></parameter>, \
                       <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchCiphertextCorrect</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>TestEncryptSingle</name><argument_list>(<argument><expr><name>crypt</name></expr></argument>, <argument><expr><call><name>CKeyingMaterial</name><argument_list>(<argument><expr><call><name><name>vchPlaintextIn</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchPlaintextIn</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vchCiphertextCorrect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><operator>::</operator><name>const_iterator</name></name></type> <name>i</name><argument_list>(<argument><expr><call><name><name>vchPlaintextIn</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>vchPlaintextIn</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TestEncryptSingle</name><argument_list>(<argument><expr><name>crypt</name></expr></argument>, <argument><expr><call><name>CKeyingMaterial</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>vchPlaintextIn</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

</public>}</block>;</class>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>passphrase</argument>)</argument_list></macro> <block>{<block_content>
    <comment type="line">// These are expensive.</comment>

    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestPassphrase</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0000deadbeef0000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>, \
                                <argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"fc7aba077ad5f4c3a0988d8daa4810d0d4a0e3bcb53af662998898f33df0556a"</literal></expr></argument>)</argument_list></call></expr></argument>, \
                                <argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"cf2f2691526dd1aa220896fb8bf7c369"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>hash</name><argument_list>(<argument><expr><call><name>GetRandHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSalt</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>GetRandBytes</name><argument_list>(<argument><expr><call><name><name>vchSalt</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vchSalt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>rounds</name> <init>= <expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rounds</name> <operator>&gt;</operator> <literal type="number">30000</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestPassphrase</name></name><argument_list>(<argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><call><name>SecureString</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>encrypt</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSalt</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0000deadbeef0000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vchSalt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>WALLET_CRYPTO_SALT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CCrypter</name></type> <name>crypt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>crypt</name><operator>.</operator><name>SetKeyFromPassphrase</name></name><argument_list>(<argument><expr><literal type="string">"passphrase"</literal></expr></argument>, <argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestEncrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>, <argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"22bcade09ac03ff6386914359cfe885cfeb5f77ff0d670f102f619687453b29d"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>GetRandHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>TestCrypter</name></macro><expr_stmt><expr><name><operator>::</operator><name>TestEncrypt</name></name><operator>(</operator><name>crypt</name><operator>,</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>decrypt</argument>)</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSalt</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0000deadbeef0000"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>vchSalt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>WALLET_CRYPTO_SALT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CCrypter</name></type> <name>crypt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>crypt</name><operator>.</operator><name>SetKeyFromPassphrase</name></name><argument_list>(<argument><expr><literal type="string">"passphrase"</literal></expr></argument>, <argument><expr><name>vchSalt</name></expr></argument>, <argument><expr><literal type="number">25000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Some corner cases the came up while testing</comment>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"795643ce39d736088367822cdc50535ec6f103715e3e48f4f3b1a60a08ef59ca"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"de096f4a8f9bd97db012aa9d90d74de8cdea779c3ee8bc7633d8b5d6da703486"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"32d0a8974e3afd9c6c3ebf4d66aa4e6419f8c173de25947f98cf8b7ace49449c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"e7c055cca2faa78cb9ac22c9357a90b4778ded9b2cc220a14cea49f931e596ea"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"b88efddd668a6801d19516d6830da4ae9811988ccbaf40df8fbb72f3f4d335fd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TestCrypter</name><operator>::</operator><name>TestDecrypt</name></name><argument_list>(<argument><expr><name>crypt</name></expr></argument>,<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"8cae76aa6a43694e961ebcb28c8ca8f8540b84153d72865e8561ddd93fa7bfa9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>GetRandHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>TestCrypter</name></macro><expr_stmt><expr><name><operator>::</operator><name>TestDecrypt</name></name><operator>(</operator><name>crypt</name><operator>,</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
