<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/port/port_posix.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// See port_example.h for documentation for the following types/functions.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_PORT_PORT_POSIX_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_PORT_PORT_POSIX_H_</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;machine/endian.h&gt;</cpp:file></cpp:include>
  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DARWIN_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DARWIN_BYTE_ORDER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> \
        <cpp:value>(__DARWIN_BYTE_ORDER == __DARWIN_LITTLE_ENDIAN)</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_SOLARIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/isa_defs.h&gt;</cpp:file></cpp:include>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LITTLE_ENDIAN</name></cpp:ifdef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>true</cpp:value></cpp:define>
  <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_FREEBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_OPENBSD</name></expr></argument>)</argument_list></call> <operator>||</operator>\
      <call><name>defined</name><argument_list>(<argument><expr><name>OS_NETBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_DRAGONFLYBSD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>(_BYTE_ORDER == _LITTLE_ENDIAN)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_HPUX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <comment type="line">// Due to a bug in the NDK x86 &lt;sys/endian.h&gt; definition,</comment>
  <comment type="line">// _BYTE_ORDER must be used instead of __BYTE_ORDER on Android.</comment>
  <comment type="line">// See http://code.google.com/p/android/issues/detail?id=39824</comment>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro>  <cpp:value>(_BYTE_ORDER == _LITTLE_ENDIAN)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;endian.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;snappy.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomic_pointer.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>(__BYTE_ORDER == __LITTLE_ENDIAN)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_SOLARIS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_FREEBSD</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>OS_NETBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_OPENBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_DRAGONFLYBSD</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_HPUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CYGWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// Use fread/fwrite/fflush on platforms without _unlocked variants</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fread_unlocked</name></cpp:macro> <cpp:value>fread</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fwrite_unlocked</name></cpp:macro> <cpp:value>fwrite</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fflush_unlocked</name></cpp:macro> <cpp:value>fflush</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_FREEBSD</name></expr></argument>)</argument_list></call> <operator>||</operator>\
    <call><name>defined</name><argument_list>(<argument><expr><name>OS_OPENBSD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OS_DRAGONFLYBSD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// Use fsync() on platforms without fdatasync()</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdatasync</name></cpp:macro> <cpp:value>fsync</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_MACOSX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdatasync</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fcntl(fd, F_FULLFSYNC, 0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS_ANDROID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__ANDROID_API__</name> <operator>&lt;</operator> <literal type="number">9</literal></expr></cpp:if>
<comment type="line">// fdatasync() was only introduced in API level 9 on Android. Use fsync()</comment>
<comment type="line">// when targetting older platforms.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fdatasync</name></cpp:macro> <cpp:value>fsync</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>
<decl_stmt><decl><type><name>namespace</name></type> <name>port</name> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>kLittleEndian</name> <init>= <expr><name>PLATFORM_IS_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLATFORM_IS_LITTLE_ENDIAN</name></cpp:undef>

<decl_stmt><decl><type><name>class</name></type> <name>CondVar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Mutex</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>~</operator><call><name>Mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <function_decl><type><name>void</name></type> <name>Lock</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Unlock</name><parameter_list>()</parameter_list>;</function_decl>
  <function><type><name>void</name></type> <name>AssertHeld</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CondVar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mu_</name></decl>;</decl_stmt>

  <comment type="line">// No copying</comment>
  <expr_stmt><expr><call><name>Mutex</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Mutex</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Mutex</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CondVar</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <function_decl><type><name>explicit</name></type> <name>CondVar</name><parameter_list>(<parameter><decl><type><name>Mutex</name><modifier>*</modifier></type> <name>mu</name></decl></parameter>)</parameter_list>;</function_decl>
  <expr_stmt><expr><operator>~</operator><call><name>CondVar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> <name>Wait</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>Signal</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>SignalAll</name><parameter_list>()</parameter_list>;</function_decl>
 <label><name>private</name>:</label>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>cv_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Mutex</name><modifier>*</modifier></type> <name>mu_</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<typedef>typedef <type><name>pthread_once_t</name></type> <name>OnceType</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVELDB_ONCE_INIT</name></cpp:macro> <cpp:value>PTHREAD_ONCE_INIT</cpp:value></cpp:define>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>InitOnce</name><parameter_list>(<parameter><decl><type><name>OnceType</name><modifier>*</modifier></type> <name>once</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>initializer</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_Compress</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>input</name></expr></argument>, <argument><expr><name>size_t</name> <name>length</name></expr></argument>,
                            <argument><expr><operator>::</operator><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>output</name></expr></argument>)</argument_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>snappy</name><operator>::</operator><call><name>MaxCompressedLength</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>snappy</name><operator>::</operator><call><name>RawCompress</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>output</name><operator>-&gt;</operator><name>resize</name></name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_GetUncompressedLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                                         <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <return>return <expr><name>snappy</name><operator>::</operator><call><name>GetUncompressedLength</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>Snappy_Uncompress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
                              <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>output</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SNAPPY</name></cpp:ifdef>
  <return>return <expr><name>snappy</name><operator>::</operator><call><name>RawUncompress</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>GetHeapProfile</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>HasAcceleratedCRC32C</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>AcceleratedCRC32C</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace port</comment>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_PORT_PORT_POSIX_H_</comment>
</unit>
