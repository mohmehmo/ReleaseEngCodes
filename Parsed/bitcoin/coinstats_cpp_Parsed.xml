<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/node/coinstats.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/coinstats.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ApplyStats</name><parameter_list>(<parameter><decl><type><name>CCoinsStats</name> <modifier>&amp;</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>CHashWriter</name><modifier>&amp;</modifier></type> <name>ss</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>outputs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>outputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>hash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>outputs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>nHeight</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name><name>outputs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name><name>second</name><operator>.</operator><name>fCoinBase</name></name></expr> ?</condition><then> <expr><literal type="number">1u</literal></expr> </then><else>: <expr><literal type="number">0u</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nTransactions</name></name><operator>++</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>output</name> <range>: <expr><name>outputs</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name><name>output</name><operator>.</operator><name>second</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>second</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr></argument>, <argument><expr><name><name>VarIntMode</name><operator>::</operator><name>NONNEGATIVE_SIGNED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nTransactionOutputs</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nTotalAmount</name></name> <operator>+=</operator> <name><name>output</name><operator>.</operator><name>second</name><operator>.</operator><name>out</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nBogoSize</name></name> <operator>+=</operator> <literal type="number">32</literal> <comment type="block">/* txid */</comment> <operator>+</operator> <literal type="number">4</literal> <comment type="block">/* vout index */</comment> <operator>+</operator> <literal type="number">4</literal> <comment type="block">/* height + coinbase */</comment> <operator>+</operator> <literal type="number">8</literal> <comment type="block">/* amount */</comment> <operator>+</operator>
                           <literal type="number">2</literal> <comment type="block">/* scriptPubKey len */</comment> <operator>+</operator> <call><name><name>output</name><operator>.</operator><name>second</name><operator>.</operator><name>out</name><operator>.</operator><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> <comment type="block">/* scriptPubKey */</comment>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">0u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Calculate statistics about the unspent transaction output set</comment>
<function><type><name>bool</name></type> <name>GetUTXOStats</name><parameter_list>(<parameter><decl><type><name>CCoinsView</name> <modifier>*</modifier></type><name>view</name></decl></parameter>, <parameter><decl><type><name>CCoinsStats</name> <modifier>&amp;</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>CCoinsStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CCoinsViewCursor</name></expr></argument>&gt;</argument_list></name></type> <name>pcursor</name><argument_list>(<argument><expr><call><name><name>view</name><operator>-&gt;</operator><name>Cursor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CHashWriter</name></type> <name>ss</name><argument_list>(<argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>hashBlock</name></name> <operator>=</operator> <call><name><name>pcursor</name><operator>-&gt;</operator><name>GetBestBlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nHeight</name></name> <operator>=</operator> <call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>hashBlock</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>nHeight</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name><name>stats</name><operator>.</operator><name>hashBlock</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>prevkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>Coin</name></expr></argument>&gt;</argument_list></name></type> <name>outputs</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>Valid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>COutPoint</name></type> <name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>GetKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pcursor</name><operator>-&gt;</operator><name>GetValue</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>outputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>hash</name></name> <operator>!=</operator> <name>prevkey</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ApplyStats</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>prevkey</name></expr></argument>, <argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>outputs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>prevkey</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>hash</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>outputs</name><index>[<expr><name><name>key</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>coin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>coins_count</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: unable to read value"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>pcursor</name><operator>-&gt;</operator><name>Next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>outputs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ApplyStats</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>prevkey</name></expr></argument>, <argument><expr><name>outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>hashSerialized</name></name> <operator>=</operator> <call><name><name>ss</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stats</name><operator>.</operator><name>nDiskSize</name></name> <operator>=</operator> <call><name><name>view</name><operator>-&gt;</operator><name>EstimateSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
