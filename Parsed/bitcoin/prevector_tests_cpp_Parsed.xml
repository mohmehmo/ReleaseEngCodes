<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/prevector_tests.cpp"><comment type="line">// Copyright (c) 2015-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;prevector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;reverse_iterator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>prevector_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<class><template>template<parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>N</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
class <name>prevector_tester</name> <block>{<private type="default">
    <typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>realtype</name>;</typedef>
    <decl_stmt><decl><type><name>realtype</name></type> <name>real_vector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>realtype</name></type> <name>real_vector_alt</name></decl>;</decl_stmt>

    <typedef>typedef <type><name><name>prevector</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>pretype</name>;</typedef>
    <decl_stmt><decl><type><name>pretype</name></type> <name>pre_vector</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pretype</name></type> <name>pre_vector_alt</name></decl>;</decl_stmt>

    <typedef>typedef <type><name><typename>typename</typename> <name>pretype</name><operator>::</operator><name>size_type</name></name></type> <name>Size</name>;</typedef>
    <decl_stmt><decl><type><name>bool</name></type> <name>passed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>rand_cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>rand_seed</name></decl>;</decl_stmt>


    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template>
        <type><name>void</name></type> <name>local_check_equal</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>b</name></decl></parameter>)</parameter_list>
        <block>{<block_content>
            <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name>a</name> <operator>==</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    <function><type><name>void</name></type> <name>local_check</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>passed</name> <operator>&amp;=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>pretype</name><modifier>&amp;</modifier></type> <name>const_pre_vector</name> <init>= <expr><name>pre_vector</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Size</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name><name>real_vector</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name><name>pre_vector</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pre_vector</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><index>[<expr><name>s</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pre_vector</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><operator>*</operator><operator>(</operator><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pre_vector</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <operator>&amp;</operator><operator>*</operator><operator>(</operator><operator>(</operator><call><name><name>pre_vector</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>s</name><operator>)</operator> <operator>-</operator> <call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// local_check(realtype(pre_vector) == real_vector);</comment>
        <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><call><name>pretype</name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>real_vector</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>pre_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><call><name>pretype</name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>pre_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><name>pre_vector</name></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name><name>real_vector</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><call><name>reverse_iterate</name><argument_list>(<argument><expr><name>pre_vector</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name><name>real_vector</name><index>[<expr><operator>--</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><name>const_pre_vector</name></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name><name>real_vector</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name> <range>: <expr><call><name>reverse_iterate</name><argument_list>(<argument><expr><name>const_pre_vector</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
             <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><name>v</name> <operator>==</operator> <name><name>real_vector</name><index>[<expr><operator>--</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss1</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CDataStream</name></type> <name>ss2</name><argument_list>(<argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ss1</name> <operator>&lt;&lt;</operator> <name>real_vector</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ss2</name> <operator>&lt;&lt;</operator> <name>pre_vector</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><call><name><name>ss1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ss2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Size</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <call><name><name>ss1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><name><name>ss1</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ss2</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

</private><public>public:
    <function><type><name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check_equal</name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>local_check</name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>I</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>insert_range</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>first</name></expr></argument>, <argument><expr><call><name><name>real_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>first</name></expr></argument>, <argument><expr><call><name><name>pre_vector</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>real_vector</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pre_vector</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>push_back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>pop_back</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>Size</name></type> <name>size</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <return>return <expr><call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>Size</name></type> <name>capacity</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <return>return <expr><call><name><name>pre_vector</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>shrink_to_fit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>shrink_to_fit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>swap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>real_vector_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>pre_vector_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>move</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>real_vector</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>real_vector_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>real_vector_alt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pre_vector</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>pre_vector_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector_alt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>copy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>real_vector</name> <operator>=</operator> <name>real_vector_alt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pre_vector</name> <operator>=</operator> <name>pre_vector_alt</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>resize_uninitialized</name><parameter_list>(<parameter><decl><type><name>realtype</name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name><name>real_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>real_vector</name><operator>.</operator><name>capacity</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>s</name> <operator>+</operator> <name>r</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>resize_uninitialized</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>real_vector</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>auto</name></type> <name>p</name> <init>= <expr><call><name><name>pre_vector</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pre_vector</name><operator>.</operator><name>resize_uninitialized</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>pre_vector</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <destructor><name>~prevector_tester</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>passed</name></expr></argument>, <argument><expr><literal type="string">"insecure_rand: "</literal> <operator>+</operator> <call><name><name>rand_seed</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></destructor>

    <constructor><name>prevector_tester</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>SeedInsecureRand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rand_seed</name> <operator>=</operator> <call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rand_cache</name> <operator>=</operator> <call><name>FastRandomContext</name><argument_list>(<argument><expr><name>rand_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</class>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>PrevectorTestInt</argument>)</argument_list></macro>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>prevector_tester</name><argument_list type="generic">&lt;<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>test</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>InsecureRandRange</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name>InsecureRandBool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>del</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>InsecureRandBool</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>beg</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>del</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>insert_range</name></name><argument_list>(<argument><expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>values</name> <operator>+</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>del</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>beg</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>del</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>beg</name> <operator>+</operator> <name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>shrink_to_fit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>swap</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>copy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>move</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">19</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <function_decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>values</name><parameter_list>(<parameter><decl><type><name>num</name></type></decl></parameter>)</parameter_list>;</function_decl>
                <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>v</name> <operator>:</operator> <name>values</name></expr></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>InsecureRand32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>resize_uninitialized</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
