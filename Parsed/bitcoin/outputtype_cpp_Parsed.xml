<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/outputtype.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;outputtype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/vector.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>OUTPUT_TYPE_STRING_LEGACY</name> <init>= <expr><literal type="string">"legacy"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>OUTPUT_TYPE_STRING_P2SH_SEGWIT</name> <init>= <expr><literal type="string">"p2sh-segwit"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>OUTPUT_TYPE_STRING_BECH32</name> <init>= <expr><literal type="string">"bech32"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ParseOutputType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>OutputType</name><modifier>&amp;</modifier></type> <name>output_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OUTPUT_TYPE_STRING_LEGACY</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>output_type</name> <operator>=</operator> <name><name>OutputType</name><operator>::</operator><name>LEGACY</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OUTPUT_TYPE_STRING_P2SH_SEGWIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>output_type</name> <operator>=</operator> <name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>OUTPUT_TYPE_STRING_BECH32</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>output_type</name> <operator>=</operator> <name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>FormatOutputType</name><parameter_list>(<parameter><decl><type><name>OutputType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>LEGACY</name></name></expr>:</case> <return>return <expr><name>OUTPUT_TYPE_STRING_LEGACY</name></expr>;</return>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr>:</case> <return>return <expr><name>OUTPUT_TYPE_STRING_P2SH_SEGWIT</name></expr>;</return>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr>:</case> <return>return <expr><name>OUTPUT_TYPE_STRING_BECH32</name></expr>;</return>
    <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>CTxDestination</name></type> <name>GetDestinationForKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>OutputType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>LEGACY</name></name></expr>:</case> <return>return <expr><call><name>PKHash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr>:</case>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>PKHash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>witdest</name> <init>= <expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witprog</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>witdest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>witdest</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name></type> <name>GetAllDestinationsForKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PKHash</name></type> <name>keyid</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>p2pkh</name><argument_list>{<argument><expr><name>keyid</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>IsCompressed</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>segwit</name> <init>= <expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>p2sh</name> <init>= <expr><call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>segwit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>p2pkh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>p2sh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>segwit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>p2pkh</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>CTxDestination</name></type> <name>AddAndGetDestinationForScript</name><parameter_list>(<parameter><decl><type><name>FillableSigningProvider</name><modifier>&amp;</modifier></type> <name>keystore</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>OutputType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Add script to keystore</comment>
    <expr_stmt><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Note that scripts over 520 bytes are not yet supported.</comment>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>LEGACY</name></name></expr>:</case>
        <return>return <expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>P2SH_SEGWIT</name></name></expr>:</case>
    <case>case <expr><name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>witdest</name> <init>= <expr><call><name>WitnessV0ScriptHash</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witprog</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>witdest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSolvable</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// Add the redeemscript, so that P2WSH and P2SH-P2WSH outputs are recognized as ours.</comment>
        <expr_stmt><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>OutputType</name><operator>::</operator><name>BECH32</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>witdest</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>witprog</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
