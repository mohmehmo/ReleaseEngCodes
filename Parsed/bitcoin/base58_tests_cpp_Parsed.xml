<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/base58_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/base58_encode_decode.json.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;base58.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>


<function_decl><type><specifier>extern</specifier> <name>UniValue</name></type> <name>read_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>jsondata</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>base58_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="line">// Goal: test low-level base58 encoding functionality</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>base58_EncodeBase58</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <comment type="line">// Allow for extra stuff (useful for comments)</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sourcedata</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>base58string</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(
                    <argument><expr><call><name>EncodeBase58</name><argument_list>(<argument><expr><call><name><name>sourcedata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sourcedata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>sourcedata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>base58string</name></expr></argument>,
                    <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<comment type="line">// Goal: test low-level base58 decoding functionality</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>base58_DecodeBase58</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>base58_encode_decode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <comment type="line">// Allow for extra stuff (useful for comments)</comment>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>base58string</name> <init>= <expr><name><name>test</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>DecodeBase58</name><argument_list>(<argument><expr><name>base58string</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>expected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>std</name><operator>::</operator><name>equal</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>DecodeBase58</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check that DecodeBase58 skips whitespace, but still fails with unexpected non-whitespace at the end.</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>DecodeBase58</name><argument_list>(<argument><expr><literal type="string">" \t\n\v\f\r skip \r\f\v\n\t a"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><call><name>DecodeBase58</name><argument_list>(<argument><expr><literal type="string">" \t\n\v\f\r skip \r\f\v\n\t "</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>expected</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"971a55"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL_COLLECTIONS</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>expected</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
