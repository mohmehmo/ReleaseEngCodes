<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/netaddress.h"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NETADDRESS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NETADDRESS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<enum>enum <name>Network</name>
<block>{
    <decl><name>NET_UNROUTABLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>NET_IPV4</name></decl>,
    <decl><name>NET_IPV6</name></decl>,
    <decl><name>NET_ONION</name></decl>,
    <decl><name>NET_INTERNAL</name></decl>,

    <decl><name>NET_MAX</name></decl>,
}</block>;</enum>

<comment type="block" format="doxygen">/** IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CNetAddr</name>
<block>{<block_content>
    <label><name>protected</name>:</label>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ip</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// in network byte order</comment>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>scopeId</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt> <comment type="line">// for scoped/link-local ipv6 addresses</comment>

    <label><name>public</name>:</label>
        <expr_stmt><expr><call><name>CNetAddr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>explicit</name></type> <name>CNetAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in_addr</name></name><modifier>&amp;</modifier> <name>ipv4Addr</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name>void</name></type> <name>SetIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>ip</name></decl></parameter>)</parameter_list>;</function_decl>

    <label><name>private</name>:</label>
        <comment type="block" format="doxygen">/**
         * Set raw IPv4 or IPv6 address (in network byte order)
         * @note Only NET_IPV4 and NET_IPV6 are allowed for network.
         */</comment>
        <function_decl><type><name>void</name></type> <name>SetRaw</name><parameter_list>(<parameter><decl><type><name>Network</name></type> <name>network</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

    <label><name>public</name>:</label>
        <decl_stmt><decl><type><name>bool</name></type> <name>SetInternal</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>SetSpecial</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>strName</name></expr></argument>)</argument_list></decl>;</decl_stmt> <comment type="line">// for Tor addresses</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsBindAny</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// INADDR_ANY equivalent</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsIPv4</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>    <comment type="line">// IPv4 mapped address (::FFFF:0:0/96, 0.0.0.0/0)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsIPv6</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>    <comment type="line">// IPv6 address (not mapped IPv4, not Tor)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC1918</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv4 private networks (10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC2544</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv4 inter-network communications (192.18.0.0/15)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC6598</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv4 ISP-level NAT (100.64.0.0/10)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC5737</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv4 documentation addresses (192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC3849</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 documentation address (2001:0DB8::/32)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC3927</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv4 autoconfig (169.254.0.0/16)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC3964</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 6to4 tunnelling (2002::/16)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC4193</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 unique local (FC00::/7)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC4380</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 Teredo tunnelling (2001::/32)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC4843</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 ORCHID (deprecated) (2001:10::/28)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC7343</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 ORCHIDv2 (2001:20::/28)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC4862</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 autoconfig (FE80::/64)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC6052</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 well-known prefix for IPv4-embedded address (64:FF9B::/96)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRFC6145</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> <comment type="line">// IPv6 IPv4-translated address (::FFFF:0:0:0/96) (actually defined in RFC2765)</comment>
        <expr_stmt><expr><name>bool</name> <macro><name>IsTor</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>bool</name> <macro><name>IsLocal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>bool</name> <macro><name>IsRoutable</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>bool</name> <macro><name>IsInternal</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        enum <expr_stmt><expr><name>Network</name> <macro><name>GetNetwork</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToStringIP</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>GetByte</name><argument_list>(<argument><expr><name>int</name> <name>n</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
        <expr_stmt><expr><name>uint64_t</name> <macro><name>GetHash</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>GetInAddr</name><argument_list>(<argument><expr>struct <name>in_addr</name><operator>*</operator> <name>pipv4Addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <macro><name>GetGroup</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>GetReachabilityFrom</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CNetAddr</name> <operator>*</operator><name>paddrPartner</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

        <function_decl><type><name>explicit</name></type> <name>CNetAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>in6_addr</name></name><modifier>&amp;</modifier> <name>pipv6Addr</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>scope</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>;</function_decl>
        <decl_stmt><decl><type><name>bool</name></type> <name>GetIn6Addr</name><argument_list>(<argument><expr>struct <name>in6_addr</name><operator>*</operator> <name>pipv6Addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CNetAddr</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

        <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
        <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <decl_stmt><decl><type><name>friend</name> <name>class</name></type> <name>CSubNet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CSubNet</name>
<block>{<block_content>
    <label><name>protected</name>:</label>
        <comment type="line" format="doxygen">/// Network (base) address</comment>
        <decl_stmt><decl><type><name>CNetAddr</name></type> <name>network</name></decl>;</decl_stmt>
        <comment type="line" format="doxygen">/// Netmask, in network byte order</comment>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>netmask</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <comment type="line" format="doxygen">/// Is this value valid? (only used to signal parse errors)</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>

    <label><name>public</name>:</label>
        <expr_stmt><expr><call><name>CSubNet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <macro><name>CSubNet</name><argument_list>(<argument>const CNetAddr &amp;addr</argument>, <argument>int32_t mask</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>CSubNet</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CNetAddr</name> <operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CNetAddr</name> <operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//constructor for single ip subnet (&lt;ipv4&gt;/32 or &lt;ipv6&gt;/128)</comment>
        <function_decl><type><name>explicit</name></type> <name>CSubNet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name> <modifier>&amp;</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>

        <decl_stmt><decl><type><name>bool</name></type> <name>Match</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CNetAddr</name> <operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

        <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
        <expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
        <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CSubNet</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

        <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
        <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** A combination of a network address (CNetAddr) and a (TCP) port */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CService</name> <range>: <expr><name>public</name> <name>CNetAddr</name>
<block>{
    <expr><name>protected</name><operator>:</operator>
        <name>uint16_t</name> <name>port</name></expr>; <comment type="line">// host order</comment>

    <expr><name>public</name><operator>:</operator>
        <call><name>CService</name><argument_list>()</argument_list></call></expr>;
        <macro><name>CService</name><argument_list>(<argument>const CNetAddr&amp; ip</argument>, <argument>unsigned short port</argument>)</argument_list></macro>;
        <macro><name>CService</name><argument_list>(<argument>const struct in_addr&amp; ipv4Addr</argument>, <argument>unsigned short port</argument>)</argument_list></macro>;
        <expr><name>explicit</name> <call><name>CService</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_in</name><operator>&amp;</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>unsigned</name> <name>short</name> <macro><name>GetPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
        <expr><name>bool</name> <macro><name>GetSockAddr</name><argument_list>(<argument>struct sockaddr* paddr</argument>, <argument>socklen_t *addrlen</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
        <expr><name>bool</name> <call><name>SetSockAddr</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator> <name>paddr</name></expr></argument>)</argument_list></call></expr>;
        <expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>a</name>, <specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;
        <expr><name>friend</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>a</name>, <specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block>
        <name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>a</name>, <specifier>const</specifier> <name>CService</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;
        <expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <macro><name>GetKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
        <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
        <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToStringPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
        <expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToStringIPPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

        <macro><name>CService</name><argument_list>(<argument>const struct in6_addr&amp; ipv6Addr</argument>, <argument>unsigned short port</argument>)</argument_list></macro>;
        <expr><name>explicit</name> <call><name>CService</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_in6</name><operator>&amp;</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;

        <expr><name>ADD_SERIALIZE_METHODS</name></expr>;

        <expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
        <specifier>inline</specifier> <name>void</name> <macro><name>SerializationOp</name><argument_list>(<argument>Stream&amp; s</argument>, <argument>Operation ser_action</argument>)</argument_list></macro> <block>{
            <expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>READWRITE</name><argument_list>(<argument><expr><call><name>WrapBigEndian</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        }</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NETADDRESS_H</comment>
</unit>
