<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/test/wallettests.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/wallettests.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinamountfield.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/qvalidatedlineedit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsentry.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/transactiontablemodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/transactionview.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/overviewpage.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/receivecoinsdialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/recentrequeststablemodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/receiverequestdialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractButton&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAction&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QCheckBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPushButton&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVBoxLayout&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTextEdit&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QListView&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDialogButtonBox&gt;</cpp:file></cpp:include>

<namespace>namespace
<block>{
<comment type="line" format="doxygen">//! Press "Yes" or "Cancel" buttons in modal send confirmation dialog.</comment>
<function><type><name>void</name></type> <name>ConfirmSend</name><parameter_list>(<parameter><decl><type><name>QString</name><modifier>*</modifier></type> <name>text</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cancel</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QTimer</name><operator>::</operator><name>singleShot</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><lambda><capture>[<argument><name>text</name></argument>, <argument><name>cancel</name></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>QWidget</name><modifier>*</modifier> <name>widget</name> : <name><name>QApplication</name><operator>::</operator><name>topLevelWidgets</name></name>(</type></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></lambda></expr></argument>)</argument_list></call> <block>{
            <if_stmt><if>if <condition>(<expr><call><name><name>widget</name><operator>-&gt;</operator><name>inherits</name></name><argument_list>(<argument><expr><literal type="string">"SendConfirmationDialog"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>SendConfirmationDialog</name><modifier>*</modifier></type> <name>dialog</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendConfirmationDialog</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>text</name> <operator>=</operator> <call><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>QAbstractButton</name><modifier>*</modifier></type> <name>button</name> <init>= <expr><call><name><name>dialog</name><operator>-&gt;</operator><name>button</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>cancel</name></expr> ?</condition><then> <expr><name><name>QMessageBox</name><operator>::</operator><name>Cancel</name></name></expr> </then><else>: <expr><name><name>QMessageBox</name><operator>::</operator><name>Yes</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>button</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>button</name><operator>-&gt;</operator><name>click</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
        </block_content>}</block></function>
    }</block></namespace>)<empty_stmt>;</empty_stmt>
}

<comment type="line" format="doxygen">//! Send coins to address and return txid.</comment>
uint256 <macro><name>SendCoins</name><argument_list>(<argument>CWallet&amp; wallet</argument>, <argument>SendCoinsDialog&amp; sendCoinsDialog</argument>, <argument>const CTxDestination&amp; address</argument>, <argument>CAmount amount</argument>, <argument>bool rbf</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>QVBoxLayout</name><modifier>*</modifier></type> <name>entries</name> <init>= <expr><call><name><name>sendCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QVBoxLayout</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"entries"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SendCoinsEntry</name><modifier>*</modifier></type> <name>entry</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>SendCoinsEntry</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>entries</name><operator>-&gt;</operator><name>itemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>widget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QValidatedLineEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"payTo"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setText</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>EncodeDestination</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entry</name><operator>-&gt;</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>BitcoinAmountField</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"payAmount"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>setValue</name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QFrame</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"frameFee"</literal></expr></argument>)</argument_list></call>
        <operator>-&gt;</operator><call><name><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QFrame</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"frameFeeSelection"</literal></expr></argument>)</argument_list></call>
        <operator>-&gt;</operator><call><name><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QCheckBox</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"optInRBF"</literal></expr></argument>)</argument_list></call>
        <operator>-&gt;</operator><call><name>setCheckState</name><argument_list>(<argument><expr><ternary><condition><expr><name>rbf</name></expr> ?</condition><then> <expr><name><name>Qt</name><operator>::</operator><name>Checked</name></name></expr> </then><else>: <expr><name><name>Qt</name><operator>::</operator><name>Unchecked</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>c</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>NotifyTransactionChanged</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier><name>txid</name></argument>]</capture><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>ChangeType</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>CT_NEW</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>txid</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ConfirmSend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>invoked</name> <init>= <expr><call><name><name>QMetaObject</name><operator>::</operator><name>invokeMethod</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>sendCoinsDialog</name></expr></argument>, <argument><expr><literal type="string">"on_sendButton_clicked"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>invoked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>txid</name></expr>;</return>
</block_content>}</block>

<comment type="line" format="doxygen">//! Find index of txid in transaction list.</comment>
<function><type><name>QModelIndex</name></type> <name>FindTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QAbstractItemModel</name><modifier>&amp;</modifier></type> <name>model</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>hash</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>txid</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>QModelIndex</name></type> <name>index</name> <init>= <expr><call><name><name>model</name><operator>.</operator><name>index</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>model</name><operator>.</operator><name>data</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>TransactionTableModel</name><operator>::</operator><name>TxHashRole</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>index</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><block>{}</block></expr>;</return>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Invoke bumpfee on txid and check results.</comment>
<function><type><name>void</name></type> <name>BumpFee</name><parameter_list>(<parameter><decl><type><name>TransactionView</name><modifier>&amp;</modifier></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>expectDisabled</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>expectError</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>cancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QTableView</name><modifier>*</modifier></type> <name>table</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QTableView</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"transactionView"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QModelIndex</name></type> <name>index</name> <init>= <expr><call><name>FindTx</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>table</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>model</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QVERIFY2</name><argument_list>(<argument><expr><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Could not find BumpFee txid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select row in table, invoke context menu, and make sure bumpfee action is</comment>
    <comment type="line">// enabled or disabled as expected.</comment>
    <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>action</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QAction</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"bumpFeeAction"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>select</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>QItemSelectionModel</name><operator>::</operator><name>ClearAndSelect</name></name> <operator>|</operator> <name><name>QItemSelectionModel</name><operator>::</operator><name>Rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>expectDisabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>customContextMenuRequested</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>action</name><operator>-&gt;</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>expectDisabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>text</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>expectError</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ConfirmSend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ConfirmMessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>action</name><operator>-&gt;</operator><name>trigger</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>text</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>expectError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line" format="doxygen">//! Simple qt wallet tests.</comment>
<comment type="line">//</comment>
<comment type="line">// Test widgets can be debugged interactively calling show() on them and</comment>
<comment type="line">// manually running the event loop, e.g.:</comment>
<comment type="line">//</comment>
<comment type="line">//     sendCoinsDialog.show();</comment>
<comment type="line">//     QEventLoop().exec();</comment>
<comment type="line">//</comment>
<comment type="line">// This also requires overriding the default minimal Qt platform:</comment>
<comment type="line">//</comment>
<comment type="line">//     QT_QPA_PLATFORM=xcb     src/qt/test/test_bitcoin-qt  # Linux</comment>
<comment type="line">//     QT_QPA_PLATFORM=windows src/qt/test/test_bitcoin-qt  # Windows</comment>
<comment type="line">//     QT_QPA_PLATFORM=cocoa   src/qt/test/test_bitcoin-qt  # macOS</comment>
<function><type><name>void</name></type> <name>TestGUI</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set up wallet and chain with 105 blocks (5 mature blocks for spending).</comment>
    <decl_stmt><decl><type><name>TestChain100Setup</name></type> <name>test</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>CreateAndProcessBlock</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>, <argument><expr><call><name>GetScriptForRawPubKey</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>context</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>connman</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>m_node</name><operator>.</operator><name>connman</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>context</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name><name>chain</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>WalletLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>CreateMock</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>firstRun</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>firstRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>AssertLockHeld</name><argument_list>(<argument><expr><name><name>spk_man</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetAddressBook</name></name><argument_list>(<argument><expr><call><name>GetDestinationForKey</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>m_default_address_type</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"receive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddKeyPubKey</name></name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>coinbaseKey</name></name></expr></argument>, <argument><expr><call><name><name>test</name><operator>.</operator><name>coinbaseKey</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetLastBlockProcessed</name></name><argument_list>(<argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LockAssertion</name></type> <name>lock</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>WalletRescanReserver</name></type> <name>reserver</name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reserver</name><operator>.</operator><name>reserve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>CWallet</name><operator>::</operator><name>ScanResult</name></name></type> <name>result</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>ScanForWalletTransactions</name></name><argument_list>(<argument><expr><call><name><name>locked_chain</name><operator>-&gt;</operator><name>getBlockHash</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><block>{}</block></expr></argument> <comment type="block">/* stop_block */</comment>, <argument><expr><name>reserver</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* fUpdate */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>CWallet</name><operator>::</operator><name>ScanResult</name><operator>::</operator><name>SUCCESS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>last_scanned_block</name></name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>last_failed_block</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>SetBroadcastTransactions</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create widgets for sending coins and listing transactions.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>PlatformStyle</name></expr></argument>&gt;</argument_list></name></type> <name>platformStyle</name><argument_list>(<argument><expr><call><name><name>PlatformStyle</name><operator>::</operator><name>instantiate</name></name><argument_list>(<argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SendCoinsDialog</name></type> <name>sendCoinsDialog</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransactionView</name></type> <name>transactionView</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OptionsModel</name></type> <name>optionsModel</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>AddWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>WalletModel</name></type> <name>walletModel</name><argument_list>(<argument><expr><call><name><name>interfaces</name><operator>::</operator><name>MakeWallet</name></name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><call><name><name>platformStyle</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>optionsModel</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RemoveWallet</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendCoinsDialog</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>transactionView</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <comment type="line">// Check balance in send dialog</comment>
        <decl_stmt><decl><type><name>QLabel</name><modifier>*</modifier></type> <name>balanceLabel</name> <init>= <expr><call><name><name>sendCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelBalance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>balanceText</name> <init>= <expr><call><name><name>balanceLabel</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>unit</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>balance</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QString</name></type> <name>balanceComparison</name> <init>= <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name>balanceText</name></expr></argument>, <argument><expr><name>balanceComparison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Send two transactions, and verify they are added to transaction list.</comment>
    <decl_stmt><decl><type><name>TransactionTableModel</name><modifier>*</modifier></type> <name>transactionTableModel</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>getTransactionTableModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>transactionTableModel</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txid1</name> <init>= <expr><call><name>SendCoins</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sendCoinsDialog</name></expr></argument>, <argument><expr><call><name>PKHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* rbf */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>txid2</name> <init>= <expr><call><name>SendCoins</name><argument_list>(<argument><expr><operator>*</operator><call><name><name>wallet</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sendCoinsDialog</name></expr></argument>, <argument><expr><call><name>PKHash</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>COIN</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* rbf */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>transactionTableModel</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">107</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name>FindTx</name><argument_list>(<argument><expr><operator>*</operator><name>transactionTableModel</name></expr></argument>, <argument><expr><name>txid1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name>FindTx</name><argument_list>(<argument><expr><operator>*</operator><name>transactionTableModel</name></expr></argument>, <argument><expr><name>txid2</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Call bumpfee. Test disabled, canceled, enabled, then failing cases.</comment>
    <expr_stmt><expr><call><name>BumpFee</name><argument_list>(<argument><expr><name>transactionView</name></expr></argument>, <argument><expr><name>txid1</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* expect disabled */</comment>, <argument><expr><literal type="string">"not BIP 125 replaceable"</literal></expr></argument> <comment type="block">/* expected error */</comment>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* cancel */</comment>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BumpFee</name><argument_list>(<argument><expr><name>transactionView</name></expr></argument>, <argument><expr><name>txid2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* expect disabled */</comment>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt> <comment type="block">/* expected error */</comment><operator>,</operator> <expr_stmt><expr><literal type="boolean">true</literal></expr></expr_stmt> <comment type="block">/* cancel */</comment>)</block_content></block>;</function>
    <expr_stmt><expr><call><name>BumpFee</name><argument_list>(<argument><expr><name>transactionView</name></expr></argument>, <argument><expr><name>txid2</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* expect disabled */</comment>, <block>{<block_content/>}</block></argument_list></call></expr></expr_stmt> <comment type="block">/* expected error */</comment><operator>,</operator> <expr_stmt><expr><literal type="boolean">false</literal></expr></expr_stmt> <comment type="block">/* cancel */</comment>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BumpFee</name><argument_list>(<argument><expr><name>transactionView</name></expr></argument>, <argument><expr><name>txid2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument> <comment type="block">/* expect disabled */</comment>, <argument><expr><literal type="string">"already bumped"</literal></expr></argument> <comment type="block">/* expected error */</comment>, <argument><expr><literal type="boolean">false</literal></expr></argument> <comment type="block">/* cancel */</comment>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check current balance on OverviewPage</comment>
    <decl_stmt><decl><type><name>OverviewPage</name></type> <name>overviewPage</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>overviewPage</name><operator>.</operator><name>setWalletModel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QLabel</name><modifier>*</modifier></type> <name>balanceLabel</name> <init>= <expr><call><name><name>overviewPage</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLabel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"labelBalance"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>balanceText</name> <init>= <expr><call><name><name>balanceLabel</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>unit</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>getOptionsModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getDisplayUnit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>balance</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>wallet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBalance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>balanceComparison</name> <init>= <expr><call><name><name>BitcoinUnits</name><operator>::</operator><name>formatWithUnit</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>balance</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>BitcoinUnits</name><operator>::</operator><name>separatorAlways</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name>balanceText</name></expr></argument>, <argument><expr><name>balanceComparison</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check Request Payment button</comment>
    <decl_stmt><decl><type><name>ReceiveCoinsDialog</name></type> <name>receiveCoinsDialog</name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>setModel</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>walletModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>RecentRequestsTableModel</name><modifier>*</modifier></type> <name>requestTableModel</name> <init>= <expr><call><name><name>walletModel</name><operator>.</operator><name>getRecentRequestsTableModel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Label input</comment>
    <decl_stmt><decl><type><name>QLineEdit</name><modifier>*</modifier></type> <name>labelInput</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLineEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"reqLabel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>labelInput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"TEST_LABEL_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Amount input</comment>
    <decl_stmt><decl><type><name>BitcoinAmountField</name><modifier>*</modifier></type> <name>amountInput</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>BitcoinAmountField</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"reqAmount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>amountInput</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Message input</comment>
    <decl_stmt><decl><type><name>QLineEdit</name><modifier>*</modifier></type> <name>messageInput</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QLineEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"reqMessage"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>messageInput</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"TEST_MESSAGE_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>initialRowCount</name> <init>= <expr><call><name><name>requestTableModel</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QPushButton</name><modifier>*</modifier></type> <name>requestPaymentButton</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QPushButton</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"receiveButton"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>requestPaymentButton</name><operator>-&gt;</operator><name>click</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>QWidget</name><modifier>*</modifier></type> <name>widget</name> <range>: <expr><call><name><name>QApplication</name><operator>::</operator><name>topLevelWidgets</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>widget</name><operator>-&gt;</operator><name>inherits</name></name><argument_list>(<argument><expr><literal type="string">"ReceiveRequestDialog"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ReceiveRequestDialog</name><modifier>*</modifier></type> <name>receiveRequestDialog</name> <init>= <expr><call><name><name>qobject_cast</name><argument_list type="generic">&lt;<argument><expr><name>ReceiveRequestDialog</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>widget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QTextEdit</name><modifier>*</modifier></type> <name>rlist</name> <init>= <expr><call><name><name>receiveRequestDialog</name><operator>-&gt;</operator><name>QObject</name><operator>::</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QTextEdit</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"outUri"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QString</name></type> <name>paymentText</name> <init>= <expr><call><name><name>rlist</name><operator>-&gt;</operator><name>toPlainText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>QStringList</name></type> <name>paymentTextList</name> <init>= <expr><call><name><name>paymentText</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Payment information"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"URI: bitcoin:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Address:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Amount: 0.00000001 "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>CURRENCY_UNIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Label: TEST_LABEL_1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>paymentTextList</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Message: TEST_MESSAGE_1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Clear button</comment>
    <decl_stmt><decl><type><name>QPushButton</name><modifier>*</modifier></type> <name>clearButton</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QPushButton</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"clearButton"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clearButton</name><operator>-&gt;</operator><name>click</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>labelInput</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>amountInput</name><operator>-&gt;</operator><name>value</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>messageInput</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check addition to history</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>currentRowCount</name> <init>= <expr><call><name><name>requestTableModel</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><name>currentRowCount</name></expr></argument>, <argument><expr><name>initialRowCount</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check Remove button</comment>
    <decl_stmt><decl><type><name>QTableView</name><modifier>*</modifier></type> <name>table</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QTableView</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"recentRequestsView"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>table</name><operator>-&gt;</operator><name>selectRow</name></name><argument_list>(<argument><expr><name>currentRowCount</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QPushButton</name><modifier>*</modifier></type> <name>removeRequestButton</name> <init>= <expr><call><name><name>receiveCoinsDialog</name><operator>.</operator><name>findChild</name><argument_list type="generic">&lt;<argument><expr><name>QPushButton</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="string">"removeRequestButton"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>removeRequestButton</name><operator>-&gt;</operator><name>click</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QCOMPARE</name><argument_list>(<argument><expr><call><name><name>requestTableModel</name><operator>-&gt;</operator><name>rowCount</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>currentRowCount</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

} <comment type="line">// namespace</comment>

<function><type><name>void</name></type> <name><name>WalletTests</name><operator>::</operator><name>walletTests</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><call><name><name>QApplication</name><operator>::</operator><name>platformName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"minimal"</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// Disable for mac on "minimal" platform to avoid crashes inside the Qt</comment>
        <comment type="line">// framework when it tries to look up unimplemented cocoa functions,</comment>
        <comment type="line">// and fails to handle returned nulls</comment>
        <comment type="line">// (https://bugreports.qt.io/browse/QTBUG-49686).</comment>
        <expr_stmt><expr><call><name>QWARN</name><argument_list>(<argument><expr><literal type="string">"Skipping WalletTests on mac build with 'minimal' platform set due to Qt bugs. To run AppTests, invoke "</literal>
              <literal type="string">"with 'QT_QPA_PLATFORM=cocoa test_bitcoin-qt' on mac, or else use a linux or windows build."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>TestGUI</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
