<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/qvalidatedlineedit.cpp"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/qvalidatedlineedit.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinaddressvalidator.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>

<constructor><name><name>QValidatedLineEdit</name><operator>::</operator><name>QValidatedLineEdit</name></name><parameter_list>(<parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QLineEdit</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>valid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>,
    <call><name>checkValidator</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QValidatedLineEdit</name><operator>::</operator><name>textChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QValidatedLineEdit</name><operator>::</operator><name>markValid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>setValid</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>_valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>_valid</name> <operator>==</operator> <name><name>this</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>_valid</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setStyleSheet</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>setStyleSheet</name><argument_list>(<argument><expr><name>STYLE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>_valid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>focusInEvent</name></name><parameter_list>(<parameter><decl><type><name>QFocusEvent</name> <modifier>*</modifier></type><name>evt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Clear invalid flag on focus</comment>
    <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>QLineEdit</name><operator>::</operator><name>focusInEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>focusOutEvent</name></name><parameter_list>(<parameter><decl><type><name>QFocusEvent</name> <modifier>*</modifier></type><name>evt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>checkValidity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>QLineEdit</name><operator>::</operator><name>focusOutEvent</name></name><argument_list>(<argument><expr><name>evt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>markValid</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// As long as a user is typing ensure we display state as valid</comment>
    <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>clear</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>QLineEdit</name><operator>::</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>setEnabled</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enabled</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A disabled QValidatedLineEdit should be marked valid</comment>
        <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// Recheck validity when QValidatedLineEdit gets enabled</comment>
        <expr_stmt><expr><call><name>checkValidity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>QLineEdit</name><operator>::</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>checkValidity</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>text</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>hasAcceptableInput</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check contents on focus out</comment>
        <if_stmt><if>if <condition>(<expr><name>checkValidator</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>QString</name></type> <name>address</name> <init>= <expr><call><name>text</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>checkValidator</name><operator>-&gt;</operator><name>validate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>QValidator</name><operator>::</operator><name>Acceptable</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>setValid</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>validationDidChange</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>setCheckValidator</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QValidator</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>checkValidator</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>QValidatedLineEdit</name><operator>::</operator><name>isValid</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// use checkValidator in case the QValidatedLineEdit is disabled</comment>
    <if_stmt><if>if <condition>(<expr><name>checkValidator</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QString</name></type> <name>address</name> <init>= <expr><call><name>text</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>checkValidator</name><operator>-&gt;</operator><name>validate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>QValidator</name><operator>::</operator><name>Acceptable</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>valid</name></expr>;</return>
</block_content>}</block></function>
</unit>
