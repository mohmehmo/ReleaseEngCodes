<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/validation_tests.cpp"><comment type="line">// Copyright (c) 2014-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/signal.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>validation_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestBlockSubsidyHalvings</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>consensusParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>maxHalvings</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nInitialSubsidy</name> <init>= <expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>nPreviousSubsidy</name> <init>= <expr><name>nInitialSubsidy</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="line">// for height == 0</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nPreviousSubsidy</name></expr></argument>, <argument><expr><name>nInitialSubsidy</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>nHalvings</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nHalvings</name> <operator>&lt;</operator> <name>maxHalvings</name></expr>;</condition> <incr><expr><name>nHalvings</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><name>nHalvings</name> <operator>*</operator> <name><name>consensusParams</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nSubsidy</name> <init>= <expr><call><name>GetBlockSubsidy</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>, <argument><expr><name>consensusParams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>nSubsidy</name> <operator>&lt;=</operator> <name>nInitialSubsidy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nSubsidy</name></expr></argument>, <argument><expr><name>nPreviousSubsidy</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPreviousSubsidy</name> <operator>=</operator> <name>nSubsidy</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetBlockSubsidy</name><argument_list>(<argument><expr><name>maxHalvings</name> <operator>*</operator> <name><name>consensusParams</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name></expr></argument>, <argument><expr><name>consensusParams</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TestBlockSubsidyHalvings</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nSubsidyHalvingInterval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>Consensus</name><operator>::</operator><name>Params</name></name></type> <name>consensusParams</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>consensusParams</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name> <operator>=</operator> <name>nSubsidyHalvingInterval</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TestBlockSubsidyHalvings</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>block_subsidy_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TestBlockSubsidyHalvings</name><argument_list>(<argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// As in main</comment>
    <expr_stmt><expr><call><name>TestBlockSubsidyHalvings</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// As in regtest</comment>
    <expr_stmt><expr><call><name>TestBlockSubsidyHalvings</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Just another interval</comment>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>subsidy_limit_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>chainParams</name> <init>= <expr><call><name>CreateChainParams</name><argument_list>(<argument><expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nHeight</name> <operator>&lt;</operator> <literal type="number">14000000</literal></expr>;</condition> <incr><expr><name>nHeight</name> <operator>+=</operator> <literal type="number">1000</literal></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nSubsidy</name> <init>= <expr><call><name>GetBlockSubsidy</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>, <argument><expr><call><name><name>chainParams</name><operator>-&gt;</operator><name>GetConsensus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>nSubsidy</name> <operator>&lt;=</operator> <literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSum</name> <operator>+=</operator> <name>nSubsidy</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>MoneyRange</name><argument_list>(<argument><expr><name>nSum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>nSum</name></expr></argument>, <argument><expr><call><name>CAmount</name><argument_list>{<argument><expr><literal type="number">2099999997690000</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ReturnFalse</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ReturnTrue</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return> </block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>test_combiner_all</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>signal</name><argument_list type="generic">&lt;<argument><expr><name>bool</name> <operator>(</operator><operator>)</operator></expr></argument>, <argument><expr><name>CombinerAll</name></expr></argument>&gt;</argument_list></name></type> <name>Test</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Test</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReturnFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>Test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Test</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReturnTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>Test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Test</name><operator>.</operator><name>disconnect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReturnFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Test</name><operator>.</operator><name>disconnect</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ReturnTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
