<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/compilerbug_tests.cpp"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>compilerbug_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// This block will also be built under clang, which is fine (as it supports noinline)</comment>
<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>noinline</name><operator>)</operator></expr></argument>)</argument_list> <name>set_one</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>ptr</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;
}</argument_list>

<name>int</name> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>noinline</name><operator>)</operator></expr></argument>)</argument_list> <name>check_zero</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <specifier>const</specifier><operator>*</operator> <name>in</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>len</name></expr></argument>)</argument_list>
<argument_list>{
    for <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <name>len</name>; <operator>++</operator><name>i</name><operator>)</operator> <block>{
        <if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    }</block></expr></argument>
    <return>return <expr><literal type="number">1</literal></expr>;</return></argument_list></decl></decl_stmt>
}

void <macro><name>set_one_on_stack</name><argument_list>()</argument_list></macro> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>set_one</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>gccbug_90348</argument>)</argument_list></macro> <block>{<block_content>
    <comment type="line">// Test for GCC bug 90348. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90348</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>set_one_on_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Apparently modifies in[0]</comment>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>check_zero</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
