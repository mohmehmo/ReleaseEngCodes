<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/wallettool.cpp"><comment type="line">// Copyright (c) 2016-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/walletutil.h&gt;</cpp:file></cpp:include>

<namespace>namespace <name>WalletTool</name> <block>{

<comment type="line">// The standard wallet deleter function blocks on the validation interface</comment>
<comment type="line">// queue, which doesn't exist for the bitcoin-wallet. Define our own</comment>
<comment type="line">// deleter here.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletToolReleaseWallet</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type> <name>wallet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>WalletLogPrintf</name></name><argument_list>(<argument><expr><literal type="string">"Releasing wallet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>Flush</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>wallet</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>CreateWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: File exists already\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// dummy chain interface</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet_instance</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CWallet</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* chain */</comment>, <argument><expr><call><name>WalletLocation</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>Create</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WalletToolReleaseWallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>first_run</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBErrors</name></type> <name>load_wallet_ret</name> <init>= <expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>first_run</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>load_wallet_ret</name> <operator>!=</operator> <name><name>DBErrors</name><operator>::</operator><name>LOAD_OK</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error creating %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>SetMinVersion</name></name><argument_list>(<argument><expr><name>FEATURE_HD_SPLIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// generate a new HD seed</comment>
    <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>seed</name> <init>= <expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>GenerateNewSeed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>SetHDSeed</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Topping up keypool...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>TopUpKeyPool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>wallet_instance</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>LoadWallet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: Wallet files does not exist\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// dummy chain interface</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet_instance</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CWallet</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument> <comment type="block">/* chain */</comment>, <argument><expr><call><name>WalletLocation</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>WalletDatabase</name><operator>::</operator><name>Create</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WalletToolReleaseWallet</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DBErrors</name></type> <name>load_wallet_ret</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>first_run</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>load_wallet_ret</name> <operator>=</operator> <call><name><name>wallet_instance</name><operator>-&gt;</operator><name>LoadWallet</name></name><argument_list>(<argument><expr><name>first_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading %s. Is wallet being used by another process?\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
    </block_content>}</block></catch></try>

    <if_stmt><if>if <condition>(<expr><name>load_wallet_ret</name> <operator>!=</operator> <name><name>DBErrors</name><operator>::</operator><name>LOAD_OK</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>wallet_instance</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>load_wallet_ret</name> <operator>==</operator> <name><name>DBErrors</name><operator>::</operator><name>CORRUPT</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading %s: Wallet corrupted"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>load_wallet_ret</name> <operator>==</operator> <name><name>DBErrors</name><operator>::</operator><name>NONCRITICAL_ERROR</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error reading %s! All keys read correctly, but transaction data"</literal>
                            <literal type="string">" or address book entries might be missing or incorrect."</literal></expr></argument>,
                <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>load_wallet_ret</name> <operator>==</operator> <name><name>DBErrors</name><operator>::</operator><name>TOO_NEW</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading %s: Wallet requires newer version of %s"</literal></expr></argument>,
                <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>load_wallet_ret</name> <operator>==</operator> <name><name>DBErrors</name><operator>::</operator><name>NEED_REWRITE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Wallet needed to be rewritten: restart %s to complete"</literal></expr></argument>, <argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>wallet_instance</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WalletShowInfo</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>*</modifier></type> <name>wallet_instance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet_instance</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Wallet info\n===========\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Encrypted: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>IsCrypted</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"HD (hd seed available): %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>IsHDEnabled</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Keypool Size: %u\n"</literal></expr></argument>, <argument><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>GetKeyPoolSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Transactions: %zu\n"</literal></expr></argument>, <argument><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>, <argument><expr><literal type="string">"Address Book: %zu\n"</literal></expr></argument>, <argument><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>mapAddressBook</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ExecuteWalletToolFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>fs</name><operator>::</operator><name>path</name></name></type> <name>path</name> <init>= <expr><call><name><name>fs</name><operator>::</operator><name>absolute</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>GetWalletDir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <literal type="string">"create"</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet_instance</name> <init>= <expr><call><name>CreateWallet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>wallet_instance</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WalletShowInfo</name><argument_list>(<argument><expr><call><name><name>wallet_instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>Flush</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>command</name> <operator>==</operator> <literal type="string">"info"</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fs</name><operator>::</operator><name>exists</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error: no wallet file at %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>WalletBatch</name><operator>::</operator><name>VerifyEnvironment</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Error loading %s. Is wallet being used by other process?\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CWallet</name></expr></argument>&gt;</argument_list></name></type> <name>wallet_instance</name> <init>= <expr><call><name>LoadWallet</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>wallet_instance</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>WalletShowInfo</name><argument_list>(<argument><expr><call><name><name>wallet_instance</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wallet_instance</name><operator>-&gt;</operator><name>Flush</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>tfm</name><operator>::</operator><name>format</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument>, <argument><expr><literal type="string">"Invalid command: %s\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
}</block></namespace> <comment type="line">// namespace WalletTool</comment>
</unit>
