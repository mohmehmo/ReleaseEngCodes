<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/rpc/request.h"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_RPC_REQUEST_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_RPC_REQUEST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>UniValue</name></type> <name>JSONRPCRequestObj</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strMethod</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>params</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>id</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>UniValue</name></type> <name>JSONRPCReplyObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>JSONRPCReply</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>result</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>error</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>UniValue</name></type> <name>JSONRPCError</name><argument_list>(<argument><expr><name>int</name> <name>code</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>message</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Generate a new RPC authentication cookie and write it to disk */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>GenerateAuthCookie</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>cookie_out</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Read the RPC authentication cookie from disk */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>GetAuthCookie</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>cookie_out</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Delete RPC authentication cookie from disk */</comment>
<function_decl><type><name>void</name></type> <name>DeleteAuthCookie</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Parse JSON-RPC batch reply into a vector */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name> <macro><name>JSONRPCProcessBatchReply</name><argument_list>(<argument>const UniValue &amp;in</argument>, <argument>size_t num</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>JSONRPCRequest</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>id</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>strMethod</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>params</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fHelp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>URI</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>authUser</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>peerAddr</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JSONRPCRequest</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>id</name><argument_list>(<argument><expr><name>NullUniValue</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>params</name><argument_list>(<argument><expr><name>NullUniValue</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>fHelp</name><argument_list>(<argument>false</argument>)</argument_list></macro> <expr><block>{}</block>
    <name>void</name> <call><name>parse</name><argument_list>(<argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>valRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_RPC_REQUEST_H</comment>
</unit>
