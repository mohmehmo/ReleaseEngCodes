<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/streams.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_STREAMS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_STREAMS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/zeroafterfree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ios&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>OverrideStream</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>Stream</name><modifier>*</modifier></type> <name>stream</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <macro><name>OverrideStream</name><argument_list>(<argument>Stream* stream_</argument>, <argument>int nType_</argument>, <argument>int nVersion_</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>stream</name><argument_list>(<argument><expr><name>stream_</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nType</name><argument_list>(<argument><expr><name>nType_</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nVersion</name><argument_list>(<argument>nVersion_</argument>)</argument_list></macro> <expr><block>{}</block>

    <name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name><name>OverrideStream</name><argument_list type="generic">&lt;<argument><expr><name>Stream</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Serialize to this stream</comment>
        <expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name><name>OverrideStream</name><argument_list type="generic">&lt;<argument><expr><name>Stream</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name>T</name><operator>&amp;&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Unserialize from this stream</comment>
        <expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>stream</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nVersion</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nType</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>stream</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block">/* Minimal stream for overwriting and/or appending to an existing byte vector
 *
 * The referenced vector will grow as necessary
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CVectorWriter</name>
<block>{<block_content>
 <label><name>public</name>:</label>

<comment type="block">/*
 * @param[in]  nTypeIn Serialization Type
 * @param[in]  nVersionIn Serialization Version (including any flags)
 * @param[in]  vchDataIn  Referenced byte vector to overwrite/append
 * @param[in]  nPosIn Starting position. Vector index where writes should start. The vector will initially
 *                    grow as necessary to max(nPosIn, vec.size()). So to append, use vec.size().
*/</comment>
    <macro><name>CVectorWriter</name><argument_list>(<argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>, <argument>std::vector&lt;unsigned char&gt;&amp; vchDataIn</argument>, <argument>size_t nPosIn</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>nType</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nVersion</name><argument_list>(<argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>vchData</name><argument_list>(<argument><expr><name>vchDataIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nPos</name><argument_list>(<argument>nPosIn</argument>)</argument_list></macro>
    <expr><block>{
        <if_stmt><if>if<condition>(<expr><name>nPos</name> <operator>&gt;</operator> <call><name><name>vchData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>vchData</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    }</block></expr></expr_stmt>
<comment type="block">/*
 * (other params same as above)
 * @param[in]  args  A list of items to serialize starting at nPosIn.
*/</comment>
    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name></type>
    <name>CVectorWriter</name><argument_list>(<argument><expr><name>int</name> <name>nTypeIn</name></expr></argument>, <argument><expr><name>int</name> <name>nVersionIn</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchDataIn</name></expr></argument>, <argument><expr><name>size_t</name> <name>nPosIn</name></expr></argument>, <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list> <range>: <macro><name>CVectorWriter</name><argument_list>(<argument>nTypeIn</argument>, <argument>nVersionIn</argument>, <argument>vchDataIn</argument>, <argument>nPosIn</argument>)</argument_list></macro>
    <expr><block>{
        <expr><operator>::</operator><call><name>SerializeMany</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
    }</block>
    <name>void</name> <macro><name>write</name><argument_list>(<argument>const char* pch</argument>, <argument>size_t nSize</argument>)</argument_list></macro>
    <block>{
        <expr><call><name>assert</name><argument_list>(<argument><expr><name>nPos</name> <operator>&lt;=</operator> <call><name><name>vchData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><name>size_t</name> <name>nOverwrite</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><name>nSize</name></expr></argument>, <argument><expr><call><name><name>vchData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>nPos</name></expr></argument>)</argument_list></call></expr>;
        <if_stmt><if>if <condition>(<expr><name>nOverwrite</name></expr>)</condition> <block>{<block_content>
            <macro><name>memcpy</name><argument_list>(<argument>vchData.data() + nPos</argument>, <argument>reinterpret_cast&lt;const unsigned char*&gt;(pch)</argument>, <argument>nOverwrite</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt/>}</block_content>
        if (nOverwrite &lt; nSize</block></if></if_stmt>) <block>{
            <macro><name>vchData</name></macro><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>vchData.end()</argument>, <argument>reinterpret_cast&lt;const unsigned char*&gt;(pch) + nOverwrite</argument>, <argument>reinterpret_cast&lt;const unsigned char*&gt;(pch) + nSize</argument>)</argument_list></macro></expr>;
        }</block></block>
        <name>nPos</name> <operator>+=</operator> <name>nSize</name></expr></range></decl>;</decl_stmt>
    </block_content>}</block></decl></decl_stmt>
    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CVectorWriter</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Serialize to this stream</comment>
        <expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>nVersion</name></expr>;</return>
    }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>nType</name></expr>;</return>
    }</block></expr></expr_stmt>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchData</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nPos</name></decl>;</decl_stmt>
};

<comment type="block" format="doxygen">/** Minimal stream for reading from an existing vector by reference
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>VectorReader</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m_version</name></decl>;</decl_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>m_data</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>m_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<label><name>public</name>:</label>

    <comment type="block" format="doxygen">/**
     * @param[in]  type Serialization Type
     * @param[in]  version Serialization Version (including any flags)
     * @param[in]  data Referenced byte vector to overwrite/append
     * @param[in]  pos Starting position. Vector index where reads should start.
     */</comment>
    <macro><name>VectorReader</name><argument_list>(<argument>int type</argument>, <argument>int version</argument>, <argument>const std::vector&lt;unsigned char&gt;&amp; data</argument>, <argument>size_t pos</argument>)</argument_list></macro>
        : <expr_stmt><expr><call><name>m_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_version</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>m_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_pos</name><argument_list>(<argument>pos</argument>)</argument_list></macro>
    <expr><block>{
        <if_stmt><if>if <condition>(<expr><name>m_pos</name> <operator>&gt;</operator> <call><name><name>m_data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"VectorReader(...): end of data (m_pos &gt; m_data.size())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
    }

    <comment type="block" format="doxygen">/**
     * (other params same as above)
     * @param[in]  args  A list of items to deserialize starting at pos.
     */</comment>
    template &lt;typename... Args&gt;
    VectorReader(int type</block><operator>,</operator> <decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, const <decl><type ref="prev"/><name>std</name>::<name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier> <name>data</name></decl>, <decl><type ref="prev"/><name>size_t</name> <name>pos</name></decl>,
                  <decl><type ref="prev"/><name>Args</name>&amp;&amp;<modifier>...</modifier> <name>args</name></decl>)
        : VectorReader(type<operator>,</operator> version<operator>,</operator> data<operator>,</operator> pos</decl_stmt></if></if_stmt>)
    <block>{
        <expr><operator>::</operator><call><name>UnserializeMany</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;
    }</block></block>

    <name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>VectorReader</name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name>T</name><operator>&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Unserialize from this stream</comment>
        <expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_version</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_type</name></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><name>size_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>m_pos</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>m_data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>m_pos</name></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Read from the beginning of the buffer</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>pos_next</name> <init>= <expr><name>m_pos</name> <operator>+</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos_next</name> <operator>&gt;</operator> <call><name><name>m_data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"VectorReader::read(): end of data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name><name>m_data</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>m_pos</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_pos</name> <operator>=</operator> <name>pos_next</name></expr>;</expr_stmt>
    </block_content>}</block></function>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Double ended buffer combining vector and stream-like interfaces.
 *
 * &gt;&gt; and &lt;&lt; read and write unformatted data using the above serialization templates.
 * Fills with data in linear time; some stringstream implementations take N^2 time.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CDataStream</name>
<block>{<block_content>
<label><name>protected</name>:</label>
    <typedef>typedef <type><name>CSerializeData</name></type> <name>vector_type</name>;</typedef>
    <decl_stmt><decl><type><name>vector_type</name></type> <name>vch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nReadPos</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>
<label><name>public</name>:</label>

    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>allocator_type</name>   <name>allocator_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>size_type</name>        <name>size_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>difference_type</name>  <name>difference_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>reference</name>        <name>reference</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>const_reference</name>  <name>const_reference</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>value_type</name>       <name>value_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>iterator</name>         <name>iterator</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>const_iterator</name>   <name>const_iterator</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>vector_type</name><operator>::</operator><name>reverse_iterator</name> <name>reverse_iterator</name></expr>;</expr_stmt></typedef>

    <function><type><name>explicit</name></type> <name>CDataStream</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nTypeIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVersionIn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <macro><name>CDataStream</name><argument_list>(<argument>const_iterator pbegin</argument>, <argument>const_iterator pend</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>vch</name><argument_list>(<argument>pbegin</argument>, <argument>pend</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>CDataStream</name><argument_list>(<argument>const char* pbegin</argument>, <argument>const char* pend</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>vch</name><argument_list>(<argument>pbegin</argument>, <argument>pend</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>CDataStream</name><argument_list>(<argument>const vector_type&amp; vchIn</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>vch</name><argument_list>(<argument>vchIn.begin()</argument>, <argument>vchIn.end()</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>CDataStream</name><argument_list>(<argument>const std::vector&lt;char&gt;&amp; vchIn</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>vch</name><argument_list>(<argument>vchIn.begin()</argument>, <argument>vchIn.end()</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <macro><name>CDataStream</name><argument_list>(<argument>const std::vector&lt;unsigned char&gt;&amp; vchIn</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <macro><name>vch</name><argument_list>(<argument>vchIn.begin()</argument>, <argument>vchIn.end()</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name><modifier>...</modifier> <name>Args</name></expr></argument>&gt;</argument_list></name></type>
    <name>CDataStream</name><argument_list>(<argument><expr><name>int</name> <name>nTypeIn</name></expr></argument>, <argument><expr><name>int</name> <name>nVersionIn</name></expr></argument>, <argument><expr><name>Args</name><operator>&amp;&amp;</operator><operator>...</operator> <name>args</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>Init</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>, <argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>::</operator><call><name>SerializeMany</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>Args</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>Init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nTypeIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVersionIn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nType</name> <operator>=</operator> <name>nTypeIn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nVersion</name> <operator>=</operator> <name>nVersionIn</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>CDataStream</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator><specifier>const</specifier> <name>CDataStream</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>friend</name> <name>CDataStream</name> <name>operator</name><operator>+</operator><operator>(</operator><specifier>const</specifier> <name>CDataStream</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CDataStream</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <expr><name>CDataStream</name> <name>ret</name> <operator>=</operator> <name>a</name></expr>;
        <expr><name>ret</name> <operator>+=</operator> <name>b</name></expr>;
        <return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>str</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>(</operator><name>std</name><operator>::</operator><call><name>string</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>


    <comment type="line">//</comment>
    <comment type="line">// Vector subset</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier>                     <block>{ <return>return <expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>iterator</name></type> <name>begin</name><parameter_list>()</parameter_list>                                 <block>{<block_content> <return>return <expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>const_iterator</name> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier>                       <block>{ <return>return <expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>iterator</name></type> <name>end</name><parameter_list>()</parameter_list>                                   <block>{<block_content> <return>return <expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>size_type</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier>                           <block>{ <return>return <expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>nReadPos</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>bool</name> <macro><name>empty</name><argument_list>()</argument_list></macro> <specifier>const</specifier>                               <block>{ <return>return <expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>nReadPos</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>void</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>value_type</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>         <block>{<block_content> <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <name>nReadPos</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>reserve</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>)</parameter_list>                        <block>{<block_content> <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <name>nReadPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <decl_stmt><decl><type><name>const_reference</name></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>size_type</name> <name>pos</name></expr></argument>)</argument_list> const  <block>{<block_content> <return>return <expr><name><name>vch</name><index>[<expr><name>pos</name> <operator>+</operator> <name>nReadPos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <function><type><name>reference</name></type> <name>operator</name>[]<parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>pos</name></decl></parameter>)</parameter_list>              <block>{<block_content> <return>return <expr><name><name>vch</name><index>[<expr><name>pos</name> <operator>+</operator> <name>nReadPos</name></expr>]</index></name></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>                                     <block>{<block_content> <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>iterator</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>x</name><init>=<expr><call><name>char</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><name>value_type</name><modifier>*</modifier></type> <name>data</name><parameter_list>()</parameter_list>                               <block>{<block_content> <return>return <expr><call><name><name>vch</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><specifier>const</specifier> <name>value_type</name><operator>*</operator> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier>                   <block>{ <return>return <expr><call><name><name>vch</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>;</return> }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>insert</name><argument_list>(<argument><expr><name>iterator</name> <name>it</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>first</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name> <name>last</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>nReadPos</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// special case for inserting at the front when there's room</comment>
            <expr_stmt><expr><name>nReadPos</name> <operator>-=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><name>nReadPos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></decl></decl_stmt>

    <function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>last</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>first</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last</name> <operator>-</operator> <name>first</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>&lt;=</operator> <name>nReadPos</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// special case for inserting at the front when there's room</comment>
            <expr_stmt><expr><name>nReadPos</name> <operator>-=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <name>first</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><name>nReadPos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>first</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>last</name> <operator>-</operator> <name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>iterator</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>it</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// special case for erasing from the front</comment>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>nReadPos</name> <operator>&gt;=</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// whenever we reach the end, we take the opportunity to clear the buffer</comment>
                <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <return>return <expr><call><name><name>vch</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>;</return>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>vch</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><name>iterator</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>iterator</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>iterator</name></type> <name>last</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// special case for erasing from the front</comment>
            <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <return>return <expr><call><name><name>vch</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <operator>(</operator><name>last</name> <operator>-</operator> <call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                <return>return <expr><name>last</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name><name>vch</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>inline</specifier> <name>void</name></type> <name>Compact</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nReadPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>Rewind</name><parameter_list>(<parameter><decl><type><name>size_type</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Rewind by n characters if the buffer hasn't been compacted yet</comment>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>nReadPos</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>


    <comment type="line">//</comment>
    <comment type="line">// Stream subset</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>eof</name><argument_list>()</argument_list></macro> <specifier>const</specifier>             <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>CDataStream</name><modifier>*</modifier></type> <name>rdbuf</name><parameter_list>()</parameter_list>         <block>{<block_content> <return>return <expr><name>this</name></expr>;</return> </block_content>}</block></function>
    <expr_stmt><expr><name>int</name> <macro><name>in_avail</name><argument_list>()</argument_list></macro> <specifier>const</specifier>         <block>{ <return>return <expr><call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>SetType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>          <block>{<block_content> <expr_stmt><expr><name>nType</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> </block_content>}</block></function>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier>          <block>{ <return>return <expr><name>nType</name></expr>;</return> }</block></expr></expr_stmt>
    <function><type><name>void</name></type> <name>SetVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>       <block>{<block_content> <expr_stmt><expr><name>nVersion</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> </block_content>}</block></function>
    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier>       <block>{ <return>return <expr><name>nVersion</name></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Read from the beginning of the buffer</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nReadPosNext</name> <init>= <expr><name>nReadPos</name> <operator>+</operator> <name>nSize</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nReadPosNext</name> <operator>&gt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CDataStream::read(): end of data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vch</name><index>[<expr><name>nReadPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nReadPosNext</name> <operator>==</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nReadPosNext</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>ignore</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Ignore from the beginning of the buffer</comment>
        <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CDataStream::ignore(): nSize negative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nReadPosNext</name> <init>= <expr><name>nReadPos</name> <operator>+</operator> <name>nSize</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nReadPosNext</name> <operator>&gt;=</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nReadPosNext</name> <operator>&gt;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CDataStream::ignore(): end of data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nReadPosNext</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">// Write to the end of the buffer</comment>
        <expr_stmt><expr><call><name><name>vch</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>vch</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pch</name></expr></argument>, <argument><expr><name>pch</name> <operator>+</operator> <name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Serialize</name><argument_list>(<argument><expr><name>Stream</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list> const
    <block>{<block_content>
        <comment type="line">// Special case: stream &lt;&lt; stream concatenates like stream += stream</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>vch</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name><name>vch</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>value_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CDataStream</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Serialize to this stream</comment>
        <expr><operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CDataStream</name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name>T</name><operator>&amp;&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Unserialize from this stream</comment>
        <expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>GetAndClear</name><parameter_list>(<parameter><decl><type><name>CSerializeData</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="doxygen">/**
     * XOR the contents of this stream with a certain key.
     *
     * @param[in] key    The key used to XOR the data in this stream.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>Xor</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>size_type</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>key</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">// This potentially acts on very many bytes of data, so it's</comment>
            <comment type="line">// important that we calculate `j`, i.e. the `key` index in this</comment>
            <comment type="line">// way instead of doing a %, which would effectively be a division</comment>
            <comment type="line">// for each byte Xor'd -- much slower than need be.</comment>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <call><name><name>key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>IStream</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BitStreamReader</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>IStream</name><modifier>&amp;</modifier></type> <name>m_istream</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">/// Buffered byte read in from the input stream. A new byte is read into the</comment>
    <comment type="line" format="doxygen">/// buffer when m_offset reaches 8.</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>m_buffer</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <comment type="line" format="doxygen">/// Number of high order bits in m_buffer already returned by previous</comment>
    <comment type="line" format="doxygen">/// Read() calls. The next bit to be returned is at this offset from the</comment>
    <comment type="line" format="doxygen">/// most significant bit position.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m_offset</name><block>{<block_content><expr><literal type="number">8</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>BitStreamReader</name><argument_list>(<argument><expr><name>IStream</name><operator>&amp;</operator> <name>istream</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_istream</name><argument_list>(<argument>istream</argument>)</argument_list></macro> <block>{}</block>

    <comment type="block" format="doxygen">/** Read the specified number of bits from the stream. The data is returned
     * in the nbits least significant bits of a 64-bit uint.
     */</comment>
    <name>uint64_t</name> <macro><name>Read</name><argument_list>(<argument>int nbits</argument>)</argument_list></macro> <block>{
        <if_stmt><if>if <condition>(<expr><name><name>nbits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nbits</name></expr></argument> &gt;</argument_list></name> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>out_of_range</name><argument_list>(<argument><expr><literal type="string">"nbits must be between 0 and 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>

        uint64_t data = 0</block><empty_stmt>;</empty_stmt></if></if_stmt></block></expr></expr_stmt>
        <while>while <condition>(<expr><name>nbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>m_offset</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>m_istream</name> <operator>&gt;&gt;</operator> <name>m_buffer</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>m_offset</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>data</name> <operator>&lt;&lt;=</operator> <name>bits</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>|=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_buffer</name> <operator>&lt;&lt;</operator> <name>m_offset</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>m_offset</name> <operator>+=</operator> <name>bits</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nbits</name> <operator>-=</operator> <name>bits</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>
};

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>OStream</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>BitStreamWriter</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>OStream</name><modifier>&amp;</modifier></type> <name>m_ostream</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">/// Buffered byte waiting to be written to the output stream. The byte is</comment>
    <comment type="line" format="doxygen">/// written buffer when m_offset reaches 8 or Flush() is called.</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>m_buffer</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <comment type="line" format="doxygen">/// Number of high order bits in m_buffer already written by previous</comment>
    <comment type="line" format="doxygen">/// Write() calls and not yet flushed to the stream. The next bit to be</comment>
    <comment type="line" format="doxygen">/// written to is at this offset from the most significant bit position.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m_offset</name><block>{<block_content><expr><literal type="number">0</literal></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<label><name>public</name>:</label>
    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>BitStreamWriter</name><argument_list>(<argument><expr><name>OStream</name><operator>&amp;</operator> <name>ostream</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>m_ostream</name><argument_list>(<argument>ostream</argument>)</argument_list></macro> <block>{}</block>

    <operator>~</operator><macro><name>BitStreamWriter</name><argument_list>()</argument_list></macro>
    <block>{
        <expr><call><name>Flush</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <comment type="block" format="doxygen">/** Write the nbits least significant bits of a 64-bit int to the output
     * stream. Data is buffered until it completes an octet.
     */</comment>
    <name>void</name> <macro><name>Write</name><argument_list>(<argument>uint64_t data</argument>, <argument>int nbits</argument>)</argument_list></macro> <block>{
        <if_stmt><if>if <condition>(<expr><name><name>nbits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nbits</name></expr></argument> &gt;</argument_list></name> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><call><name>out_of_range</name><argument_list>(<argument><expr><literal type="string">"nbits must be between 0 and 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>

        while (nbits &gt; 0</block></if></if_stmt>) <block>{
            <expr><name>int</name> <name>bits</name> <operator>=</operator> <name>std</name><operator>::</operator><call><name>min</name><argument_list>(<argument><expr><literal type="number">8</literal> <operator>-</operator> <name>m_offset</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>)</argument_list></call></expr>;
            <expr><name>m_buffer</name> <operator>|=</operator> <operator>(</operator><name>data</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <name>nbits</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <literal type="number">8</literal> <operator>+</operator> <name>m_offset</name><operator>)</operator></expr>;
            <expr><name>m_offset</name> <operator>+=</operator> <name>bits</name></expr>;
            <expr><name>nbits</name> <operator>-=</operator> <name>bits</name></expr>;

            <if_stmt><if>if <condition>(<expr><name>m_offset</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>Flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt/>}</block_content>
        }
    }

    <comment type="block" format="doxygen">/** Flush any unwritten bits to the output stream, padding with 0's to the
     * next byte boundary.
     */</comment>
    void Flush(</block></if></if_stmt>) <block>{
        <if_stmt><if>if <condition>(<expr><name>m_offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        <expr_stmt/>}</block_content>

        m_ostream &lt;&lt; m_buffer</block><empty_stmt>;</empty_stmt></if></if_stmt>
        <name>m_buffer</name> <operator>=</operator> <literal type="number">0</literal></block></block></block></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
};



<comment type="block" format="doxygen">/** Non-refcounted RAII wrapper for FILE*
 *
 * Will automatically close the file when it goes out of scope if not null.
 * If you're returning the file pointer, return file.release().
 * If you need to close the file early, use file.fclose() instead of fclose(file).
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CAutoFile</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <macro><name>CAutoFile</name><argument_list>(<argument>FILE* filenew</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>nType</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>nVersion</name><argument_list>(<argument>nVersionIn</argument>)</argument_list></macro>
    <expr><block>{
        <expr><name>file</name> <operator>=</operator> <name>filenew</name></expr>;
    }</block>

    <operator>~</operator><macro><name>CAutoFile</name><argument_list>()</argument_list></macro>
    <block>{
        <expr><call><name>fclose</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <comment type="line">// Disallow copies</comment>
    <call><name>CAutoFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CAutoFile</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAutoFile</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CAutoFile</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>fclose</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>::</operator><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>file</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="doxygen">/** Get wrapped FILE* with transfer of ownership.
     * @note This will invalidate the CAutoFile object, and makes it the responsibility of the caller
     * of this function to clean up the returned FILE*.
     */</comment>
    <function><type><name>FILE</name><modifier>*</modifier></type> <name>release</name><parameter_list>()</parameter_list>             <block>{<block_content> <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><name>file</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>file</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt> <return>return <expr><name>ret</name></expr>;</return> </block_content>}</block></function>

    <comment type="block" format="doxygen">/** Get wrapped FILE* without transfer of ownership.
     * @note Ownership of the FILE* will remain with this class. Use this only if the scope of the
     * CAutoFile outlives use of the passed pointer.
     */</comment>
    <expr_stmt><expr><name>FILE</name><operator>*</operator> <macro><name>Get</name><argument_list>()</argument_list></macro> <specifier>const</specifier>           <block>{ <return>return <expr><name>file</name></expr>;</return> }</block></expr></expr_stmt>

    <comment type="block" format="doxygen">/** Return true if the wrapped FILE* is nullptr, false otherwise.
     */</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>IsNull</name><argument_list>()</argument_list></macro> <specifier>const</specifier>         <block>{ <return>return <expr><operator>(</operator><name>file</name> <operator>==</operator> <name>nullptr</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line">//</comment>
    <comment type="line">// Stream subset</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier>          <block>{ <return>return <expr><name>nType</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier>       <block>{ <return>return <expr><name>nVersion</name></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::read: file handle is nullptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nSize</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"CAutoFile::read: end of file"</literal></expr> </then><else>: <expr><literal type="string">"CAutoFile::read: fread failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>ignore</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::ignore: file handle is nullptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>nNow</name> <init>= <expr><name>std</name><operator>::</operator><call><name><name>min</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nSize</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nNow</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nNow</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>feof</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"CAutoFile::ignore: end of file"</literal></expr> </then><else>: <expr><literal type="string">"CAutoFile::read: fread failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nNow</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::write: file handle is nullptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSize</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nSize</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::write: write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CAutoFile</name><operator>&amp;</operator> <name>operator</name><operator>&lt;&lt;</operator><operator>(</operator><specifier>const</specifier> <name>T</name><operator>&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Serialize to this stream</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::operator&lt;&lt;: file handle is nullptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <operator>::</operator><call><name>Serialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CAutoFile</name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name>T</name><operator>&amp;&amp;</operator> <name>obj</name><operator>)</operator>
    <block>{
        <comment type="line">// Unserialize from this stream</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"CAutoFile::operator&gt;&gt;: file handle is nullptr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }
}<empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to
 *  deserialize from. It guarantees the ability to rewind a given number of bytes.
 *
 *  Will automatically close the file when it goes out of scope if not null.
 *  If you need to close the file early, use file.fclose() instead of fclose(file).
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CBufferedFile</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>            <comment type="line" format="doxygen">//!&lt; source file</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nSrcPos</name></decl>;</decl_stmt>     <comment type="line" format="doxygen">//!&lt; how many bytes have been read from source</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nReadPos</name></decl>;</decl_stmt>    <comment type="line" format="doxygen">//!&lt; how many bytes have been read from this</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nReadLimit</name></decl>;</decl_stmt>  <comment type="line" format="doxygen">//!&lt; up to which position we're allowed to read</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nRewind</name></decl>;</decl_stmt>     <comment type="line" format="doxygen">//!&lt; how many bytes we guarantee to rewind</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>vchBuf</name></expr>;</expr_stmt> <comment type="line" format="doxygen">//!&lt; the buffer</comment>

<label><name>protected</name>:</label>
    <comment type="line" format="doxygen">//! read data from the source to fill the buffer</comment>
    <function><type><name>bool</name></type> <name>Fill</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><name>nSrcPos</name> <operator>%</operator> <call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>readNow</name> <init>= <expr><call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nAvail</name> <init>= <expr><call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>nSrcPos</name> <operator>-</operator> <name>nReadPos</name><operator>)</operator> <operator>-</operator> <name>nRewind</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nAvail</name> <operator>&lt;</operator> <name>readNow</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>readNow</name> <operator>=</operator> <name>nAvail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>readNow</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>nBytes</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vchBuf</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>readNow</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>feof</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"CBufferedFile::Fill: end of file"</literal></expr> </then><else>: <expr><literal type="string">"CBufferedFile::Fill: fread failed"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nSrcPos</name> <operator>+=</operator> <name>nBytes</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

<label><name>public</name>:</label>
    <macro><name>CBufferedFile</name><argument_list>(<argument>FILE *fileIn</argument>, <argument>uint64_t nBufSize</argument>, <argument>uint64_t nRewindIn</argument>, <argument>int nTypeIn</argument>, <argument>int nVersionIn</argument>)</argument_list></macro> :
        <expr_stmt><expr><call><name>nType</name><argument_list>(<argument><expr><name>nTypeIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nVersion</name><argument_list>(<argument><expr><name>nVersionIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nSrcPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nReadPos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nReadLimit</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>nRewind</name><argument_list>(<argument><expr><name>nRewindIn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>vchBuf</name><argument_list>(<argument>nBufSize</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
    <expr><block>{
        <if_stmt><if>if <condition>(<expr><name>nRewindIn</name> <operator>&gt;=</operator> <name>nBufSize</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Rewind limit must be less than buffer size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <name>src</name> <operator>=</operator> <name>fileIn</name></block></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><operator>~</operator><macro><name>CBufferedFile</name><argument_list>()</argument_list></macro>
    <block>{
        <expr><call><name>fclose</name><argument_list>()</argument_list></call></expr>;
    }</block>

    <comment type="line">// Disallow copies</comment>
    <call><name>CBufferedFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBufferedFile</name><operator>&amp;</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBufferedFile</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>CBufferedFile</name><operator>&amp;</operator><operator>)</operator> <operator>=</operator> <name>delete</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>int</name> <macro><name>GetVersion</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nVersion</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>GetType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nType</name></expr>;</return> }</block></expr></expr_stmt>

    <function><type><name>void</name></type> <name>fclose</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>::</operator><call><name>fclose</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>src</name> <operator>=</operator> <name>nullptr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">//! check whether we're at the end of the source file</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>eof</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><name>nReadPos</name> <operator>==</operator> <name>nSrcPos</name> <operator>&amp;&amp;</operator> <call><name>feof</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! read a number of bytes</comment>
    <function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pch</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>+</operator> <name>nReadPos</name> <operator>&gt;</operator> <name>nReadLimit</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>throw</name> <name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><call><name>failure</name><argument_list>(<argument><expr><literal type="string">"Read attempted past buffer limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <while>while <condition>(<expr><name>nSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nReadPos</name> <operator>==</operator> <name>nSrcPos</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>Fill</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><name>nReadPos</name> <operator>%</operator> <call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>nNow</name> <init>= <expr><name>nSize</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nNow</name> <operator>+</operator> <name>pos</name> <operator>&gt;</operator> <call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>nNow</name> <operator>=</operator> <call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>nNow</name> <operator>+</operator> <name>nReadPos</name> <operator>&gt;</operator> <name>nSrcPos</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>nNow</name> <operator>=</operator> <name>nSrcPos</name> <operator>-</operator> <name>nReadPos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vchBuf</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>nNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nReadPos</name> <operator>+=</operator> <name>nNow</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pch</name> <operator>+=</operator> <name>nNow</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nSize</name> <operator>-=</operator> <name>nNow</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">//! return the current reading position</comment>
    <expr_stmt><expr><name>uint64_t</name> <macro><name>GetPos</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
        <return>return <expr><name>nReadPos</name></expr>;</return>
    }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! rewind to a given reading position</comment>
    <function><type><name>bool</name></type> <name>SetPos</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>nPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name> <init>= <expr><call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nPos</name> <operator>+</operator> <name>bufsize</name> <operator>&lt;</operator> <name>nSrcPos</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// rewinding too far, rewind as far as possible</comment>
            <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nSrcPos</name> <operator>-</operator> <name>bufsize</name></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nPos</name> <operator>&gt;</operator> <name>nSrcPos</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// can't go this far forward, go as far as possible</comment>
            <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nSrcPos</name></expr>;</expr_stmt>
            <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nPos</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>bool</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>nPos</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>nLongPos</name> <init>= <expr><name>nPos</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nPos</name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>nLongPos</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>nLongPos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nLongPos</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSrcPos</name> <operator>=</operator> <name>nLongPos</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nReadPos</name> <operator>=</operator> <name>nLongPos</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">//! prevent reading beyond a certain position</comment>
    <comment type="line" format="doxygen">//! no argument removes the limit</comment>
    <function><type><name>bool</name></type> <name>SetLimit</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>nPos</name> <init>= <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr></init></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nPos</name> <operator>&lt;</operator> <name>nReadPos</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nReadLimit</name> <operator>=</operator> <name>nPos</name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></function>

    <expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>CBufferedFile</name><operator>&amp;</operator> <name>operator</name><operator>&gt;&gt;</operator><operator>(</operator><name>T</name><operator>&amp;&amp;</operator> <name>obj</name><operator>)</operator> <block>{
        <comment type="line">// Unserialize from this stream</comment>
        <expr><operator>::</operator><call><name>Unserialize</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</return>
    }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! search for a given byte in the stream, and remain positioned on it</comment>
    <function><type><name>void</name></type> <name>FindByte</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nReadPos</name> <operator>==</operator> <name>nSrcPos</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>Fill</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>vchBuf</name><index>[<expr><name>nReadPos</name> <operator>%</operator> <call><name><name>vchBuf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nReadPos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>
};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_STREAMS_H</comment>
</unit>
