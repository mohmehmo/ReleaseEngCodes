<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/rpc_blockchain.cpp"><comment type="line">// Copyright (c) 2016-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/data.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BlockToJsonVerbose</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name><name>benchmark</name><operator>::</operator><name>data</name><operator>::</operator><name>block413567</name></name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>a</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Prevent compaction</comment>

    <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name></type> <name>blockindex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name></type> <name>blockHash</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>blockindex</name><operator>.</operator><name>phashBlock</name></name> <operator>=</operator> <operator>&amp;</operator><name>blockHash</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blockindex</name><operator>.</operator><name>nBits</name></name> <operator>=</operator> <literal type="number">403014710</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>blockToJSON</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockindex</name></expr></argument>, <comment type="block">/*verbose*/</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>BlockToJsonVerbose</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
