<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/chainparamsbase.h"><comment type="line">// Copyright (c) 2014-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CHAINPARAMSBASE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CHAINPARAMSBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)
 * of a given instance of the Bitcoin system.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CBaseChainParams</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line" format="doxygen">///@{</comment>
    <comment type="block" format="doxygen">/** Chain name strings */</comment>
    <expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>MAIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>TESTNET</name></expr>;</expr_stmt>
    <expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>REGTEST</name></expr>;</expr_stmt>
    <comment type="line" format="doxygen">///@}</comment>

    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <macro><name>DataDir</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>strDataDir</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>int</name> <macro><name>RPCPort</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nRPCPort</name></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><call><name>CBaseChainParams</name><argument_list>()</argument_list></call> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
    <macro><name>CBaseChainParams</name><argument_list>(<argument>const std::string&amp; data_dir</argument>, <argument>int rpc_port</argument>)</argument_list></macro> : <expr_stmt><expr><call><name>nRPCPort</name><argument_list>(<argument><expr><name>rpc_port</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>strDataDir</name><argument_list>(<argument>data_dir</argument>)</argument_list></macro> <expr><block>{}</block>

<name>private</name><operator>:</operator>
    <name>int</name> <name>nRPCPort</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>strDataDir</name></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
 * Creates and returns a std::unique_ptr&lt;CBaseChainParams&gt; of the chosen chain.
 * @returns a CBaseChainParams* of the chosen chain.
 * @throws a std::runtime_error if the chain is not supported.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBaseChainParams</name></expr></argument>&gt;</argument_list></name> <call><name>CreateBaseChainParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/**
 *Set the arguments for chainparams
 */</comment>
<function_decl><type><name>void</name></type> <name>SetupChainParamsBaseOptions</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Return the currently selected parameters. This won't change after app
 * startup, except for unit tests.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>CBaseChainParams</name><modifier>&amp;</modifier></type> <name>BaseParams</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Sets the params returned by Params() to those for the given network. */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SelectBaseParams</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>chain</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CHAINPARAMSBASE_H</comment>
</unit>
