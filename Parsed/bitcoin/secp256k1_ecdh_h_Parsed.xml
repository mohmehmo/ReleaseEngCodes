<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/include/secp256k1_ecdh.h"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_ECDH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_ECDH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"secp256k1.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** A pointer to a function that applies hash function to a point
 *
 *  Returns: 1 if a point was successfully hashed. 0 will cause ecdh to fail
 *  Out:    output:     pointer to an array to be filled by the function
 *  In:     x:          pointer to a 32-byte x coordinate
 *          y:          pointer to a 32-byte y coordinate
 *          data:       Arbitrary data pointer that is passed through
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>secp256k1_ecdh_hash_function</name>)<parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>
)</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen">/** An implementation of SHA256 hash function that applies to compressed public key. */</comment>
<decl_stmt><decl><type><name>SECP256K1_API</name> <specifier>extern</specifier> <specifier>const</specifier> <name>secp256k1_ecdh_hash_function</name></type> <name>secp256k1_ecdh_hash_function_sha256</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** A default ecdh hash function (currently equal to secp256k1_ecdh_hash_function_sha256). */</comment>
<decl_stmt><decl><type><name>SECP256K1_API</name> <specifier>extern</specifier> <specifier>const</specifier> <name>secp256k1_ecdh_hash_function</name></type> <name>secp256k1_ecdh_hash_function_default</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Compute an EC Diffie-Hellman secret in constant time
 *  Returns: 1: exponentiation was successful
 *           0: scalar was invalid (zero or overflow)
 *  Args:    ctx:        pointer to a context object (cannot be NULL)
 *  Out:     output:     pointer to an array to be filled by the function
 *  In:      pubkey:     a pointer to a secp256k1_pubkey containing an
 *                       initialized public key
 *           privkey:    a 32-byte scalar with which to multiply the point
 *           hashfp:     pointer to a hash function. If NULL, secp256k1_ecdh_hash_function_sha256 is used
 *           data:       Arbitrary data pointer that is passed through
 */</comment>
<function_decl><type><name>SECP256K1_API</name> <name>SECP256K1_WARN_UNUSED_RESULT</name> <name>int</name></type> <name>secp256k1_ecdh</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>secp256k1_context</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>secp256k1_pubkey</name> <modifier>*</modifier></type><name>pubkey</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>privkey</name></decl></parameter>,
  <parameter><decl><type><name>secp256k1_ecdh_hash_function</name></type> <name>hashfp</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>
)</parameter_list> SECP256K1_ARG_NONNULL<parameter_list>(</parameter_list>1</function_decl>)</block_content> SECP256K1_ARG_NONNULL(2</block></extern>) <macro><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>SECP256K1_ARG_NONNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_ECDH_H */</comment>
</unit>
