<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/optional.h"><comment type="line">// Copyright (c) 2017 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_OPTIONAL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_OPTIONAL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/optional.hpp&gt;</cpp:file></cpp:include>

<comment type="line" format="doxygen">//! Substitute for C++17 std::optional</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name>using</name></type> <name>Optional</name> <init>= <expr><name>boost</name><operator>::</operator><name><name>optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">//! Substitute for C++17 std::make_optional</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
<name><name>Optional</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>MakeOptional</name><argument_list>(<argument><expr><name>bool</name> <name>condition</name></expr></argument>, <argument><expr><name>T</name><operator>&amp;&amp;</operator> <name>value</name></expr></argument>)</argument_list>
<block>{<block_content>
    <return>return <expr><name>boost</name><operator>::</operator><call><name>make_optional</name><argument_list>(<argument><expr><name>condition</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><call><name><name>forward</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="line" format="doxygen">//! Substitute for C++17 std::nullopt</comment>
<expr_stmt><expr><specifier>static</specifier> <name>auto</name><operator>&amp;</operator> <name>nullopt</name> <operator>=</operator> <name>boost</name><operator>::</operator><name>none</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_OPTIONAL_H</comment>
</unit>
