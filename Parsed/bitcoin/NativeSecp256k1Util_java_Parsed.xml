<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/java/org/bitcoin/NativeSecp256k1Util.java"><comment type="block">/*
 * Copyright 2014-2016 the libsecp256k1 contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>bitcoin</name></name>;</package>

<class><specifier>public</specifier> class <name>NativeSecp256k1Util</name><block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>val</name> <operator>!=</operator> <name>val2</name></expr> )</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AssertFailException</name><argument_list>(<argument><expr><literal type="string">"FAIL: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>( <parameter><decl><type><name>boolean</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>val</name> <operator>!=</operator> <name>val2</name></expr> )</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AssertFailException</name><argument_list>(<argument><expr><literal type="string">"FAIL: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"PASS: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>assertEquals</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>AssertFailException</name></expr></argument></throws><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>val</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
        <throw>throw <expr><operator>new</operator> <call><name>AssertFailException</name><argument_list>(<argument><expr><literal type="string">"FAIL: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"PASS: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>AssertFailException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{
      <constructor><specifier>public</specifier> <name>AssertFailException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>message</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></constructor>
    }</block></class>
}</block></class>
</unit>
