<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/chainparams.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsseeds.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;versionbitsinfo.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/classification.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string/split.hpp&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>CBlock</name></type> <name>CreateGenesisBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pszTimestamp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>genesisOutputScript</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nNonce</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nBits</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>genesisReward</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>txNew</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txNew</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>txNew</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txNew</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">486604799</literal> <operator>&lt;&lt;</operator> <call><name>CScriptNum</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pszTimestamp</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pszTimestamp</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pszTimestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txNew</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <name>genesisReward</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txNew</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <name>genesisOutputScript</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlock</name></type> <name>genesis</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>genesis</name><operator>.</operator><name>nTime</name></name>    <operator>=</operator> <name>nTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>genesis</name><operator>.</operator><name>nBits</name></name>    <operator>=</operator> <name>nBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>genesis</name><operator>.</operator><name>nNonce</name></name>   <operator>=</operator> <name>nNonce</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>genesis</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <name>nVersion</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>genesis</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>txNew</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>genesis</name><operator>.</operator><name>hashPrevBlock</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>genesis</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>=</operator> <call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>genesis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>genesis</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Build the genesis block. Note that the output of its generation
 * transaction cannot be spent since it did not originally exist in the
 * database.
 *
 * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)
 *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)
 *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)
 *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)
 *   vMerkleTree: 4a5e1e
 */</comment>
<function><type><specifier>static</specifier> <name>CBlock</name></type> <name>CreateGenesisBlock</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nTime</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nNonce</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nBits</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>genesisReward</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pszTimestamp</name> <init>= <expr><literal type="string">"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CScript</name></type> <name>genesisOutputScript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>CreateGenesisBlock</name><argument_list>(<argument><expr><name>pszTimestamp</name></expr></argument>, <argument><expr><name>genesisOutputScript</name></expr></argument>, <argument><expr><name>nTime</name></expr></argument>, <argument><expr><name>nNonce</name></expr></argument>, <argument><expr><name>nBits</name></expr></argument>, <argument><expr><name>nVersion</name></expr></argument>, <argument><expr><name>genesisReward</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Main network
 */</comment>
<class>class <name>CMainParams</name> <super_list>: <super><specifier>public</specifier> <name>CChainParams</name></super></super_list> <block>{<private type="default">
</private><public>public:
    <constructor><name>CMainParams</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>strNetworkID</name> <operator>=</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name> <operator>=</operator> <literal type="number">210000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP16Exception</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00000000000002dc756eebf4f49723ed8d30cc28a5f108eb94b1ba88ac4f9c22"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Height</name></name> <operator>=</operator> <literal type="number">227931</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Hash</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP65Height</name></name> <operator>=</operator> <literal type="number">388381</literal></expr>;</expr_stmt> <comment type="line">// 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP66Height</name></name> <operator>=</operator> <literal type="number">363725</literal></expr>;</expr_stmt> <comment type="line">// 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>CSVHeight</name></name> <operator>=</operator> <literal type="number">419328</literal></expr>;</expr_stmt> <comment type="line">// 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>SegwitHeight</name></name> <operator>=</operator> <literal type="number">481824</literal></expr>;</expr_stmt> <comment type="line">// 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>MinBIP9WarningHeight</name></name> <operator>=</operator> <literal type="number">483840</literal></expr>;</expr_stmt> <comment type="line">// segwit activation height + miner confirmation window</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetTimespan</name></name> <operator>=</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt> <comment type="line">// two weeks</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetSpacing</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowAllowMinDifficultyBlocks</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowNoRetargeting</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nRuleChangeActivationThreshold</name></name> <operator>=</operator> <literal type="number">1916</literal></expr>;</expr_stmt> <comment type="line">// 95% of 2016</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>=</operator> <literal type="number">2016</literal></expr>;</expr_stmt> <comment type="line">// nPowTargetTimespan / nPowTargetSpacing</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>bit</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>=</operator> <literal type="number">1199145601</literal></expr>;</expr_stmt> <comment type="line">// January 1, 2008</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>=</operator> <literal type="number">1230767999</literal></expr>;</expr_stmt> <comment type="line">// December 31, 2008</comment>

        <comment type="line">// The best chain should have at least this much work.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinimumChainWork</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x000000000000000000000000000000000000000008ea3cf107ae0dec57f03fe8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// By default assume that the signatures in ancestors of this block are valid.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>defaultAssumeValid</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00000000000000000005f8920febd3925f8272a6a71237563d78c2edfdd09ddf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 597379</comment>

        <comment type="block" format="doxygen">/**
         * The message start string is designed to be unlikely to occur in normal data.
         * The characters are rarely used upper ASCII, not valid as UTF-8, and produce
         * a large 32-bit integer with any alignment.
         */</comment>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf9</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xbe</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xb4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xd9</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nDefaultPort</name> <operator>=</operator> <literal type="number">8333</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPruneAfterHeight</name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_blockchain_size</name> <operator>=</operator> <literal type="number">280</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_chain_state_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>genesis</name> <operator>=</operator> <call><name>CreateGenesisBlock</name><argument_list>(<argument><expr><literal type="number">1231006505</literal></expr></argument>, <argument><expr><literal type="number">2083236893</literal></expr></argument>, <argument><expr><literal type="number">0x1d00ffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>=</operator> <call><name><name>genesis</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>genesis</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Note that of those which support the service bits prefix, most only support a subset of</comment>
        <comment type="line">// possible options.</comment>
        <comment type="line">// This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the</comment>
        <comment type="line">// service bits we want, but we should get them updated to support all service bits wanted by any</comment>
        <comment type="line">// release ASAP to avoid it where possible.</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.bitcoin.sipa.be"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Pieter Wuille, only supports x1, x5, x9, and xd</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"dnsseed.bluematt.me"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Matt Corallo, only supports x9</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"dnsseed.bitcoin.dashjr.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Luke Dashjr</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.bitcoinstats.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Christian Decker, supports x1 - xf</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.bitcoin.jonasschnelli.ch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Jonas Schnelli, only supports x1, x5, x9, and xd</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.btc.petertodd.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Peter Todd, only supports x1, x5, x9, and xd</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.bitcoin.sprovoost.nl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Sjors Provoost</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"dnsseed.emzy.de"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Stephan Oeste</comment>

        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>PUBKEY_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SCRIPT_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SECRET_KEY</name></expr>]</index></name> <operator>=</operator>     <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_PUBLIC_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x1E</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_SECRET_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xE4</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>bech32_hrp</name> <operator>=</operator> <literal type="string">"bc"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>vFixedSeeds</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SeedSpec6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pnSeed6_main</name></expr></argument>, <argument><expr><name>pnSeed6_main</name> <operator>+</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>pnSeed6_main</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fDefaultConsistencyChecks</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fRequireStandard</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_is_test_chain</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>checkpointData</name> <operator>=</operator> <block>{
            <expr><block>{
                <expr><block>{ <expr><literal type="number">11111</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{ <expr><literal type="number">33333</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{ <expr><literal type="number">74000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">105000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">134444</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">168000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">193000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">210000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">216116</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">225430</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">250000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">279000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40"</literal></argument>)</argument_list></macro>}</block></expr>,
                <expr><block>{<expr><literal type="number">295000</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983"</literal></argument>)</argument_list></macro>}</block></expr>,
            }</block></expr>
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>chainTxData</name> <operator>=</operator> <call><name>ChainTxData</name><argument_list>{
            <comment type="line">// Data from RPC: getchaintxstats 4096 00000000000000000005f8920febd3925f8272a6a71237563d78c2edfdd09ddf</comment>
            <comment type="block">/* nTime    */</comment> <argument><expr><literal type="number">1569926786</literal></expr></argument>,
            <comment type="block">/* nTxCount */</comment> <argument><expr><literal type="number">460596047</literal></expr></argument>,
            <comment type="block">/* dTxRate  */</comment> <argument><expr><literal type="number">3.77848885073875</literal></expr></argument>,
        }</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/**
 * Testnet (v3)
 */</comment>
<class>class <name>CTestNetParams</name> <super_list>: <super><specifier>public</specifier> <name>CChainParams</name></super></super_list> <block>{<private type="default">
</private><public>public:
    <constructor><name>CTestNetParams</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>strNetworkID</name> <operator>=</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name> <operator>=</operator> <literal type="number">210000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP16Exception</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00000000dd30457c001f4095d208cc1296b0eed002427aa599874af7a432b105"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Height</name></name> <operator>=</operator> <literal type="number">21111</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Hash</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP65Height</name></name> <operator>=</operator> <literal type="number">581885</literal></expr>;</expr_stmt> <comment type="line">// 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP66Height</name></name> <operator>=</operator> <literal type="number">330776</literal></expr>;</expr_stmt> <comment type="line">// 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>CSVHeight</name></name> <operator>=</operator> <literal type="number">770112</literal></expr>;</expr_stmt> <comment type="line">// 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>SegwitHeight</name></name> <operator>=</operator> <literal type="number">834624</literal></expr>;</expr_stmt> <comment type="line">// 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>MinBIP9WarningHeight</name></name> <operator>=</operator> <literal type="number">836640</literal></expr>;</expr_stmt> <comment type="line">// segwit activation height + miner confirmation window</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetTimespan</name></name> <operator>=</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt> <comment type="line">// two weeks</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetSpacing</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowAllowMinDifficultyBlocks</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowNoRetargeting</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nRuleChangeActivationThreshold</name></name> <operator>=</operator> <literal type="number">1512</literal></expr>;</expr_stmt> <comment type="line">// 75% for testchains</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>=</operator> <literal type="number">2016</literal></expr>;</expr_stmt> <comment type="line">// nPowTargetTimespan / nPowTargetSpacing</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>bit</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>=</operator> <literal type="number">1199145601</literal></expr>;</expr_stmt> <comment type="line">// January 1, 2008</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>=</operator> <literal type="number">1230767999</literal></expr>;</expr_stmt> <comment type="line">// December 31, 2008</comment>

        <comment type="line">// The best chain should have at least this much work.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinimumChainWork</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00000000000000000000000000000000000000000000012b2a3a62424f21c918"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// By default assume that the signatures in ancestors of this block are valid.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>defaultAssumeValid</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00000000000000b7ab6ce61eb6d571003fbe5fe892da4c9b740c49a07542462d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1580000</comment>

        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0b</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x09</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nDefaultPort</name> <operator>=</operator> <literal type="number">18333</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPruneAfterHeight</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_blockchain_size</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_chain_state_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>genesis</name> <operator>=</operator> <call><name>CreateGenesisBlock</name><argument_list>(<argument><expr><literal type="number">1296688602</literal></expr></argument>, <argument><expr><literal type="number">414098458</literal></expr></argument>, <argument><expr><literal type="number">0x1d00ffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>=</operator> <call><name><name>genesis</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>genesis</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>vFixedSeeds</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// nodes with support for servicebits filtering should be at the top</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"testnet-seed.bitcoin.jonasschnelli.ch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.tbtc.petertodd.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"seed.testnet.bitcoin.sprovoost.nl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="string">"testnet-seed.bluematt.me"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Just a static list of stable node(s), only supports x9</comment>

        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>PUBKEY_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SCRIPT_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">196</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SECRET_KEY</name></expr>]</index></name> <operator>=</operator>     <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">239</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_PUBLIC_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xCF</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_SECRET_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x94</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>bech32_hrp</name> <operator>=</operator> <literal type="string">"tb"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>vFixedSeeds</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SeedSpec6</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>pnSeed6_test</name></expr></argument>, <argument><expr><name>pnSeed6_test</name> <operator>+</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>pnSeed6_test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fDefaultConsistencyChecks</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fRequireStandard</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_is_test_chain</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>


        <expr_stmt><expr><name>checkpointData</name> <operator>=</operator> <block>{
            <expr><block>{
                <expr><block>{<expr><literal type="number">546</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70"</literal></argument>)</argument_list></macro>}</block></expr>,
            }</block></expr>
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>chainTxData</name> <operator>=</operator> <call><name>ChainTxData</name><argument_list>{
            <comment type="line">// Data from RPC: getchaintxstats 4096 00000000000000b7ab6ce61eb6d571003fbe5fe892da4c9b740c49a07542462d</comment>
            <comment type="block">/* nTime    */</comment> <argument><expr><literal type="number">1569741320</literal></expr></argument>,
            <comment type="block">/* nTxCount */</comment> <argument><expr><literal type="number">52318009</literal></expr></argument>,
            <comment type="block">/* dTxRate  */</comment> <argument><expr><literal type="number">0.1517002392872353</literal></expr></argument>,
        }</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</class>

<comment type="block" format="doxygen">/**
 * Regression test
 */</comment>
<class>class <name>CRegTestParams</name> <super_list>: <super><specifier>public</specifier> <name>CChainParams</name></super></super_list> <block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>CRegTestParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgsManager</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>strNetworkID</name> <operator>=</operator>  <name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nSubsidyHalvingInterval</name></name> <operator>=</operator> <literal type="number">150</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP16Exception</name></name> <operator>=</operator> <call><name>uint256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Height</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt> <comment type="line">// BIP34 activated on regtest (Used in functional tests)</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP34Hash</name></name> <operator>=</operator> <call><name>uint256</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP65Height</name></name> <operator>=</operator> <literal type="number">1351</literal></expr>;</expr_stmt> <comment type="line">// BIP65 activated on regtest (Used in functional tests)</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>BIP66Height</name></name> <operator>=</operator> <literal type="number">1251</literal></expr>;</expr_stmt> <comment type="line">// BIP66 activated on regtest (Used in functional tests)</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>CSVHeight</name></name> <operator>=</operator> <literal type="number">432</literal></expr>;</expr_stmt> <comment type="line">// CSV activated on regtest (Used in rpc activation tests)</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>SegwitHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// SEGWIT is always activated on regtest unless overridden</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>MinBIP9WarningHeight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>powLimit</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetTimespan</name></name> <operator>=</operator> <literal type="number">14</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt> <comment type="line">// two weeks</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nPowTargetSpacing</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowAllowMinDifficultyBlocks</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>fPowNoRetargeting</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nRuleChangeActivationThreshold</name></name> <operator>=</operator> <literal type="number">108</literal></expr>;</expr_stmt> <comment type="line">// 75% for testchains</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinerConfirmationWindow</name></name> <operator>=</operator> <literal type="number">144</literal></expr>;</expr_stmt> <comment type="line">// Faster than normal for regtest (144 instead of 2016)</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>bit</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name><name>Consensus</name><operator>::</operator><name>DEPLOYMENT_TESTDUMMY</name></name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>=</operator> <name><name>Consensus</name><operator>::</operator><name>BIP9Deployment</name><operator>::</operator><name>NO_TIMEOUT</name></name></expr>;</expr_stmt>

        <comment type="line">// The best chain should have at least this much work.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>nMinimumChainWork</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// By default assume that the signatures in ancestors of this block are valid.</comment>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>defaultAssumeValid</name></name> <operator>=</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xfa</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xbf</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xb5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pchMessageStart</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xda</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nDefaultPort</name> <operator>=</operator> <literal type="number">18444</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPruneAfterHeight</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_blockchain_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_assumed_chain_state_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>UpdateActivationParametersFromArgs</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>genesis</name> <operator>=</operator> <call><name>CreateGenesisBlock</name><argument_list>(<argument><expr><literal type="number">1296688602</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0x207fffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>=</operator> <call><name><name>genesis</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>consensus</name><operator>.</operator><name>hashGenesisBlock</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>genesis</name><operator>.</operator><name>hashMerkleRoot</name></name> <operator>==</operator> <call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>vFixedSeeds</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line" format="doxygen">//!&lt; Regtest mode doesn't have any fixed seeds.</comment>
        <expr_stmt><expr><call><name><name>vSeeds</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line" format="doxygen">//!&lt; Regtest mode doesn't have any DNS seeds.</comment>

        <expr_stmt><expr><name>fDefaultConsistencyChecks</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>fRequireStandard</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m_is_test_chain</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>checkpointData</name> <operator>=</operator> <block>{
            <expr><block>{
                <expr><block>{<expr><literal type="number">0</literal></expr>, <macro><name>uint256S</name><argument_list>(<argument><literal type="string">"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206"</literal></argument>)</argument_list></macro>}</block></expr>,
            }</block></expr>
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>chainTxData</name> <operator>=</operator> <call><name>ChainTxData</name><argument_list>{
            <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><literal type="number">0</literal></expr></argument>,
            <argument><expr><literal type="number">0</literal></expr></argument>
        }</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>PUBKEY_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">111</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SCRIPT_ADDRESS</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">196</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>SECRET_KEY</name></expr>]</index></name> <operator>=</operator>     <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">239</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_PUBLIC_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xCF</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>base58Prefixes</name><index>[<expr><name>EXT_SECRET_KEY</name></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x94</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>bech32_hrp</name> <operator>=</operator> <literal type="string">"bcrt"</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="doxygen">/**
     * Allows modifying the Version Bits regtest parameters.
     */</comment>
    <function><type><name>void</name></type> <name>UpdateVersionBitsParameters</name><parameter_list>(<parameter><decl><type><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nStartTime</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nTimeout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>nStartTime</name> <operator>=</operator> <name>nStartTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>nTimeout</name> <operator>=</operator> <name>nTimeout</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    <function_decl><type><name>void</name></type> <name>UpdateActivationParametersFromArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgsManager</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name>void</name></type> <name><name>CRegTestParams</name><operator>::</operator><name>UpdateActivationParametersFromArgs</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArgsManager</name><modifier>&amp;</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>gArgs</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-segwitheight"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>height</name> <init>= <expr><call><name><name>gArgs</name><operator>.</operator><name>GetArg</name></name><argument_list>(<argument><expr><literal type="string">"-segwitheight"</literal></expr></argument>, <argument><expr><name><name>consensus</name><operator>.</operator><name>SegwitHeight</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>height</name> <operator>&gt;=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit."</literal></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>height</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Segwit disabled for testing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>consensus</name><operator>.</operator><name>SegwitHeight</name></name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>args</name><operator>.</operator><name>IsArgSet</name></name><argument_list>(<argument><expr><literal type="string">"-vbparams"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strDeployment</name> <range>: <expr><call><name><name>args</name><operator>.</operator><name>GetArgs</name></name><argument_list>(<argument><expr><literal type="string">"-vbparams"</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>vDeploymentParams</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>split</name></name><argument_list>(<argument><expr><name>vDeploymentParams</name></expr></argument>, <argument><expr><name>strDeployment</name></expr></argument>, <argument><expr><call><name><name>boost</name><operator>::</operator><name>is_any_of</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>vDeploymentParams</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Version bits parameters malformed, expecting deployment:start:end"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nStartTime</name></decl>, <decl><type ref="prev"/><name>nTimeout</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseInt64</name><argument_list>(<argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nStartTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid nStartTime (%s)"</literal></expr></argument>, <argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseInt64</name><argument_list>(<argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTimeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid nTimeout (%s)"</literal></expr></argument>, <argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>Consensus</name><operator>::</operator><name>MAX_VERSION_BITS_DEPLOYMENTS</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>VersionBitsDeploymentInfo</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>UpdateVersionBitsParameters</name><argument_list>(<argument><expr><call><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nStartTime</name></expr></argument>, <argument><expr><name>nTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\n"</literal></expr></argument>, <argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nStartTime</name></expr></argument>, <argument><expr><name>nTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Invalid deployment (%s)"</literal></expr></argument>, <argument><expr><name><name>vDeploymentParams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CChainParams</name></expr></argument>&gt;</argument_list></name></type> <name>globalChainParams</name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>CChainParams</name> <modifier>&amp;</modifier></type><name>Params</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>globalChainParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>globalChainParams</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CChainParams</name></expr></argument>&gt;</argument_list></name></type> <name>CreateChainParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CMainParams</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>TESTNET</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CTestNetParams</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>chain</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>REGTEST</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CChainParams</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CRegTestParams</name><argument_list>(<argument><expr><name>gArgs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s: Unknown chain %s."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SelectParams</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>network</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SelectBaseParams</name><argument_list>(<argument><expr><name>network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>globalChainParams</name> <operator>=</operator> <call><name>CreateChainParams</name><argument_list>(<argument><expr><name>network</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
