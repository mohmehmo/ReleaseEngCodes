<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/index/blockfilterindex.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_INDEX_BLOCKFILTERINDEX_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_INDEX_BLOCKFILTERINDEX_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flatfile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;index/base.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of
 * blocks by height. An index is constructed for each supported filter type with its own database
 * (ie. filter data for different types are stored in separate databases).
 *
 * This index is used to serve BIP 157 net requests.
 */</comment>
<decl_stmt><decl><type><name>class</name> <name>BlockFilterIndex</name></type> <name>final</name> <range>: <expr><name>public</name> <name>BaseIndex</name>
<block>{
<expr><name>private</name><operator>:</operator>
    <name>BlockFilterType</name> <name>m_filter_type</name></expr>;
    <expr><name>std</name><operator>::</operator><name>string</name> <name>m_name</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BaseIndex</name><operator>::</operator><name>DB</name></expr></argument>&gt;</argument_list></name> <name>m_db</name></expr>;

    <expr><name>FlatFilePos</name> <name>m_next_filter_pos</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>FlatFileSeq</name></expr></argument>&gt;</argument_list></name> <name>m_filter_fileseq</name></expr>;

    <expr><name>bool</name> <macro><name>ReadFilterFromDisk</name><argument_list>(<argument>const FlatFilePos&amp; pos</argument>, <argument>BlockFilter&amp; filter</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>size_t</name> <call><name>WriteFilterToDisk</name><argument_list>(<argument><expr><name>FlatFilePos</name><operator>&amp;</operator> <name>pos</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>BlockFilter</name><operator>&amp;</operator> <name>filter</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>bool</name> <macro><name>Init</name><argument_list>()</argument_list></macro> <name>override</name></expr>;

    <expr><name>bool</name> <macro><name>CommitInternal</name><argument_list>(<argument>CDBBatch&amp; batch</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>bool</name> <macro><name>WriteBlock</name><argument_list>(<argument>const CBlock&amp; block</argument>, <argument>const CBlockIndex* pindex</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>bool</name> <macro><name>Rewind</name><argument_list>(<argument>const CBlockIndex* current_tip</argument>, <argument>const CBlockIndex* new_tip</argument>)</argument_list></macro> <name>override</name></expr>;

    <expr><name>BaseIndex</name><operator>::</operator><name>DB</name><operator>&amp;</operator> <macro><name>GetDB</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><operator>*</operator><name>m_db</name></expr>;</return> }</block>

    <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>GetName</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>override</name> <block>{ <return>return <expr><call><name><name>m_name</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block>

<name>public</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Constructs the index, which becomes available to be queried. */</comment>
    <name>explicit</name> <macro><name>BlockFilterIndex</name><argument_list>(<argument>BlockFilterType filter_type</argument>,
                              <argument>size_t n_cache_size</argument>, <argument>bool f_memory = false</argument>, <argument>bool f_wipe = false</argument>)</argument_list></macro></expr>;

    <expr><name>BlockFilterType</name> <macro><name>GetFilterType</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_filter_type</name></expr>;</return> }</block>

    <comment type="block" format="doxygen">/** Get a single filter by block. */</comment>
    <name>bool</name> <macro><name>LookupFilter</name><argument_list>(<argument>const CBlockIndex* block_index</argument>, <argument>BlockFilter&amp; filter_out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block" format="doxygen">/** Get a single filter header by block. */</comment>
    <expr><name>bool</name> <macro><name>LookupFilterHeader</name><argument_list>(<argument>const CBlockIndex* block_index</argument>, <argument>uint256&amp; header_out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block" format="doxygen">/** Get a range of filters between two heights on a chain. */</comment>
    <expr><name>bool</name> <macro><name>LookupFilterRange</name><argument_list>(<argument>int start_height</argument>, <argument>const CBlockIndex* stop_index</argument>,
                           <argument>std::vector&lt;BlockFilter&gt;&amp; filters_out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="block" format="doxygen">/** Get a range of filter hashes between two heights on a chain. */</comment>
    <expr><name>bool</name> <macro><name>LookupFilterHashRange</name><argument_list>(<argument>int start_height</argument>, <argument>const CBlockIndex* stop_index</argument>,
                               <argument>std::vector&lt;uint256&gt;&amp; hashes_out</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Get a block filter index by type. Returns nullptr if index has not been initialized or was
 * already destroyed.
 */</comment>
<function_decl><type><name>BlockFilterIndex</name><modifier>*</modifier></type> <name>GetBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Iterate over all running block filter indexes, invoking fn on each. */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>ForEachBlockFilterIndex</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><name>BlockFilterIndex</name><operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>fn</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * Initialize a block filter index for the given type if one does not already exist. Returns true if
 * a new index is created and false if one has already been initialized.
 */</comment>
<function_decl><type><name>bool</name></type> <name>InitBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>,
                          <parameter><decl><type><name>size_t</name></type> <name>n_cache_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_memory</name> <init>= <expr><name>false</name></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>f_wipe</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Destroy the block filter index with the given type. Returns false if no such index exists. This
 * just releases the allocated memory and closes the database connection, it does not delete the
 * index data.
 */</comment>
<function_decl><type><name>bool</name></type> <name>DestroyBlockFilterIndex</name><parameter_list>(<parameter><decl><type><name>BlockFilterType</name></type> <name>filter_type</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Destroy all open block filter indexes. */</comment>
<function_decl><type><name>void</name></type> <name>DestroyAllBlockFilterIndexes</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_INDEX_BLOCKFILTERINDEX_H</comment>
</unit>
