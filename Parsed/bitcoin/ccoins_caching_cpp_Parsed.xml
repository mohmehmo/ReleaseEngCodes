<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/ccoins_caching.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<comment type="line">// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.</comment>
<comment type="line">//</comment>
<comment type="line">// Helper: create two dummy transactions, each with</comment>
<comment type="line">// two outputs.  The first has 11 and 50 COIN outputs</comment>
<comment type="line">// paid to a TX_PUBKEY, the second 21 and 22 COIN outputs</comment>
<comment type="line">// paid to a TX_PUBKEYHASH.</comment>
<comment type="line">//</comment>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type>
<name>SetupDummyInputs</name><parameter_list>(<parameter><decl><type><name>FillableSigningProvider</name><modifier>&amp;</modifier></type> <name>keystoreRet</name></decl></parameter>, <parameter><decl><type><name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>coinsRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>dummyTransactions</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dummyTransactions</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add some keys to the keystore:</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>MakeNewKey</name><argument_list>(<argument><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keystoreRet</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Create some dummy input transactions</comment>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">11</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">50</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coinsRet</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">21</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">22</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>vout</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddCoins</name><argument_list>(<argument><expr><name>coinsRet</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>dummyTransactions</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from</comment>
<comment type="line">// laanwj, "replicating the actual usage patterns of the client is hard though,</comment>
<comment type="line">// many times micro-benchmarks of the database showed completely different</comment>
<comment type="line">// characteristics than e.g. reindex timings. But that's not a requirement of</comment>
<comment type="line">// every benchmark."</comment>
<comment type="line">// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CCoinsCaching</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsView</name></type> <name>coinsDummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CCoinsViewCache</name></type> <name>coins</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coinsDummy</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CMutableTransaction</name></expr></argument>&gt;</argument_list></name></type> <name>dummyTransactions</name> <init>= <expr><call><name>SetupDummyInputs</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>t1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>vin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name><name>dummyTransactions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>prevout</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>t1</name><operator>.</operator><name>vout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">90</literal> <operator>*</operator> <name>COIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>

    <comment type="line">// Benchmark.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name></type> <name>tx_1</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>AreInputsStandard</name><argument_list>(<argument><expr><name>tx_1</name></expr></argument>, <argument><expr><name>coins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>value</name> <init>= <expr><call><name><name>coins</name><operator>.</operator><name>GetValueIn</name></name><argument_list>(<argument><expr><name>tx_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <operator>(</operator><literal type="number">50</literal> <operator>+</operator> <literal type="number">21</literal> <operator>+</operator> <literal type="number">22</literal><operator>)</operator> <operator>*</operator> <name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>CCoinsCaching</name></expr></argument>, <argument><expr><literal type="number">170</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
