<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/node/utxo_snapshot.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NODE_UTXO_SNAPSHOT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NODE_UTXO_SNAPSHOT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>

<comment type="line" format="doxygen">//! Metadata describing a serialized version of a UTXO set from which an</comment>
<comment type="line" format="doxygen">//! assumeutxo CChainState can be constructed.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SnapshotMetadata</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line" format="doxygen">//! The hash of the block that reflects the tip of the chain for the</comment>
    <comment type="line" format="doxygen">//! UTXO set contained in this snapshot.</comment>
    <decl_stmt><decl><type><name>uint256</name></type> <name>m_base_blockhash</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! The number of coins in the UTXO set contained in this snapshot. Used</comment>
    <comment type="line" format="doxygen">//! during snapshot load to estimate progress of UTXO set reconstruction.</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m_coins_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Necessary to "fake" the base nChainTx so that we can estimate progress during</comment>
    <comment type="line" format="doxygen">//! initial block download for the assumeutxo chainstate.</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>m_nchaintx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>SnapshotMetadata</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>
    <macro><name>SnapshotMetadata</name><argument_list>(
        <argument>const uint256&amp; base_blockhash</argument>,
        <argument>uint64_t coins_count</argument>,
        <argument>unsigned int nchaintx</argument>)</argument_list></macro> :
            <expr_stmt><expr><call><name>m_base_blockhash</name><argument_list>(<argument><expr><name>base_blockhash</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <expr><call><name>m_coins_count</name><argument_list>(<argument><expr><name>coins_count</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <macro><name>m_nchaintx</name><argument_list>(<argument>nchaintx</argument>)</argument_list></macro> <expr><block>{ }</block>

    <name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>m_base_blockhash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>m_coins_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>m_nchaintx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NODE_UTXO_SNAPSHOT_H</comment>
</unit>
