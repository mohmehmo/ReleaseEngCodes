<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/rpc/server.h"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_RPC_SERVER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_RPC_SERVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/request.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_RPC_SERIALIZE_VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CRPCCommand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>RPCServer</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name></type> <name>OnStarted</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>slot</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>OnStopped</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name> <operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>slot</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/** Query whether RPC is running */</comment>
<function_decl><type><name>bool</name></type> <name>IsRPCRunning</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Set the RPC warmup status.  When this is done, all RPC calls will error out
 * immediately with RPC_IN_WARMUP.
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>SetRPCWarmupStatus</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>newStatus</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block">/* Mark warmup as done.  RPC calls will be processed from now on.  */</comment>
<function_decl><type><name>void</name></type> <name>SetRPCWarmupFinished</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block">/* returns the current warmup state.  */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>RPCIsInWarmup</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name> <operator>*</operator><name>outStatus</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Opaque base class for timers returned by NewTimerFunc.
 * This provides no methods at the moment, but makes sure that delete
 * cleans up the whole state.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>RPCTimerBase</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>RPCTimerBase</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
 * RPC timer "driver".
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>RPCTimerInterface</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>RPCTimerInterface</name><argument_list>()</argument_list></macro> <block>{}</block>
    <comment type="block" format="doxygen">/** Implementation name */</comment>
    <name>virtual</name> <specifier>const</specifier> <name>char</name> <operator>*</operator><call><name>Name</name><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block" format="doxygen">/** Factory function for timers.
     * RPC will call the function to create a timer that will call func in *millis* milliseconds.
     * @note As the RPC mechanism is backend-neutral, it can use different implementations of timers.
     * This is needed to cope with the case in which there is no HTTP server, but
     * only GUI RPC console, and to break the dependency of pcserver on httprpc.
     */</comment>
    <decl_stmt><decl><type><name>virtual</name> <name>RPCTimerBase</name><modifier>*</modifier></type> <name>NewTimer</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>func</name></expr></argument>, <argument><expr><name>int64_t</name> <name>millis</name></expr></argument>)</argument_list> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Set the factory function for timers */</comment>
<function_decl><type><name>void</name></type> <name>RPCSetTimerInterface</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Set the factory function for timer, but only, if unset */</comment>
<function_decl><type><name>void</name></type> <name>RPCSetTimerInterfaceIfUnset</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Unset factory function for timers */</comment>
<function_decl><type><name>void</name></type> <name>RPCUnsetTimerInterface</name><parameter_list>(<parameter><decl><type><name>RPCTimerInterface</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Run func nSeconds from now.
 * Overrides previous timer &lt;name&gt; (if any).
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>RPCRunLater</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>func</name></expr></argument>, <argument><expr><name>int64_t</name> <name>nSeconds</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>UniValue</name></type>(<modifier>*</modifier><name>rpcfn_type</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>jsonRequest</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>class</name></type> <name>CRPCCommand</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line" format="doxygen">//! RPC method handler reading request and assigning result. Should return</comment>
    <comment type="line" format="doxygen">//! true if request is fully handled, false if it should be passed on to</comment>
    <comment type="line" format="doxygen">//! subsequent handlers.</comment>
    <decl_stmt><decl><type><name>using</name></type> <name>Actor</name> <init>= <expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><specifier>const</specifier> <name>JSONRPCRequest</name><operator>&amp;</operator> <name>request</name>, <name>UniValue</name><operator>&amp;</operator> <name>result</name>, <name>bool</name> <name>last_handler</name><operator>)</operator></expr></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Constructor taking Actor callback supporting multiple handlers.</comment>
    <macro><name>CRPCCommand</name><argument_list>(<argument>std::string category</argument>, <argument>std::string name</argument>, <argument>Actor actor</argument>, <argument>std::vector&lt;std::string&gt; args</argument>, <argument>intptr_t unique_id</argument>)</argument_list></macro>
        : <expr_stmt><expr><call><name>category</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>name</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>actor</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>actor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>argNames</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
          <macro><name>unique_id</name><argument_list>(<argument>unique_id</argument>)</argument_list></macro>
    <expr><block>{
    }</block>

    <comment type="line" format="doxygen">//! Simplified constructor taking plain rpcfn_type function pointer.</comment>
    <macro><name>CRPCCommand</name><argument_list>(<argument>const char* category</argument>, <argument>const char* name</argument>, <argument>rpcfn_type fn</argument>, <argument>std::initializer_list&lt;const char*&gt; args</argument>)</argument_list></macro>
        <operator>:</operator> <macro><name>CRPCCommand</name><argument_list>(<argument>category</argument>, <argument>name</argument>,
                      <argument>[fn](const JSONRPCRequest&amp; request, UniValue&amp; result, bool) { result = fn(request); return true; }</argument>,
                      <argument>{args.begin()</argument>, <argument>args.end()}</argument>, <argument>intptr_t(fn)</argument>)</argument_list></macro>
    <block>{
    }</block>

    <name>std</name><operator>::</operator><name>string</name> <name>category</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>name</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Actor</name></type> <name>actor</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>argNames</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>intptr_t</name></type> <name>unique_id</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
 * Bitcoin RPC command dispatcher.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CRPCTable</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CRPCCommand</name><operator>*</operator></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>mapCommands</name></expr>;</expr_stmt>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>CRPCTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>help</name><argument_list>(<argument>const std::string&amp; name</argument>, <argument>const JSONRPCRequest&amp; helpreq</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Execute a method.
     * @param request The JSONRPCRequest to execute
     * @returns Result of the call.
     * @throws an exception (UniValue) when an error happens.
     */</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>execute</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JSONRPCRequest</name> <operator>&amp;</operator><name>request</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
    * Returns a list of registered commands
    * @returns List of registered commands.
    */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>listCommands</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>


    <comment type="block" format="doxygen">/**
     * Appends a CRPCCommand to the dispatch table.
     *
     * Returns false if RPC server is already running (dump concurrency protection).
     *
     * Commands with different method names but the same unique_id will
     * be considered aliases, and only the first registered method name will
     * show up in the help text command listing. Aliased commands do not have
     * to have the same behavior. Server and client code can distinguish
     * between calls based on method name, and aliased commands can also
     * register different names, types, and numbers of parameters.
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>appendCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CRPCCommand</name><operator>*</operator> <name>pcmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>removeCommand</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>name</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CRPCCommand</name><operator>*</operator> <name>pcmd</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>IsDeprecatedRPCEnabled</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>method</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CRPCTable</name></type> <name>tableRPC</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>StartRPC</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>InterruptRPC</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>StopRPC</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>JSONRPCExecBatch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>JSONRPCRequest</name><operator>&amp;</operator> <name>jreq</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>UniValue</name><operator>&amp;</operator> <name>vReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Retrieves any serialization flags requested in command line argument</comment>
<function_decl><type><name>int</name></type> <name>RPCSerializationFlags</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_RPC_SERVER_H</comment>
</unit>
