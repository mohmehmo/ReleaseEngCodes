<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/bip32_tests.cpp"><comment type="line">// Copyright (c) 2013-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<struct>struct <name>TestDerivation</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>prv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nChild</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>TestVector</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHexMaster</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TestDerivation</name></expr></argument>&gt;</argument_list></name></type> <name>vDerive</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>TestVector</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strHexMasterIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>strHexMaster</name><argument_list>(<argument><expr><name>strHexMasterIn</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function type="operator"><type><name>TestVector</name><modifier>&amp;</modifier></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pub</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>prv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nChild</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>vDerive</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestDerivation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TestDerivation</name> <modifier>&amp;</modifier></type><name>der</name> <init>= <expr><call><name><name>vDerive</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>der</name><operator>.</operator><name>pub</name></name> <operator>=</operator> <name>pub</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>der</name><operator>.</operator><name>prv</name></name> <operator>=</operator> <name>prv</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>der</name><operator>.</operator><name>nChild</name></name> <operator>=</operator> <name>nChild</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>TestVector</name></type> <name>test1</name> <init>=
  <expr><call><call><call><call><call><call><call><name>TestVector</name><argument_list>(<argument><expr><literal type="string">"000102030405060708090a0b0c0d0e0f"</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi"</literal></expr></argument>,
     <argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9uHRZZhk6KAJC1avXpDAp4MDc3sQKNxDiPvvkX8Br5ngLNv1TxvUxt4cV1rGL5hj6KCesnDYUhd7oWgT11eZG7XnxHrnYeSvkzY7d2bhkJ7"</literal></expr></argument>,
     <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6ASuArnXKPbfEwhqN6e3mwBcDTgzisQN1wXN9BJcM47sSikHjJf3UFHKkNAWbWMiGj7Wf5uMash7SyYq527Hqck2AxYysAA7xmALppuCkwQ"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9wTYmMFdV23N2TdNG573QoEsfRrWKQgWeibmLntzniatZvR9BmLnvSxqu53Kw1UmYPxLgboyZQaXwTCg8MSY3H2EU4pWcQDnRnrVA1xe8fs"</literal></expr></argument>,
     <argument><expr><literal type="number">0x80000002</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6D4BDPcP2GT577Vvch3R8wDkScZWzQzMMUm3PWbmWvVJrZwQY4VUNgqFJPMM3No2dFDFGTsxxpG5uJh7n7epu4trkrX7x7DogT5Uv6fcLW5"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9z4pot5VBttmtdRTWfWQmoH1taj2axGVzFqSb8C9xaxKymcFzXBDptWmT7FwuEzG3ryjH4ktypQSAewRiNMjANTtpgP4mLTj34bhnZX7UiM"</literal></expr></argument>,
     <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334"</literal></expr></argument>,
     <argument><expr><literal type="number">1000000000</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6H1LXWLaKsWFhvm6RVpEL9P4KfRZSW7abD2ttkWP3SSQvnyA8FSVqNTEcYFgJS2UaFcxupHiYkro49S8yGasTvXEYBVPamhGW6cFJodrTHy"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprvA41z7zogVVwxVSgdKUHDy1SKmdb533PjDz7J6N6mV6uS3ze1ai8FHa8kmHScGpWmj4WggLyQjgPie1rFSruoUihUZREPSL39UNdE3BBDu76"</literal></expr></argument>,
     <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestVector</name></type> <name>test2</name> <init>=
  <expr><call><call><call><call><call><call><call><name>TestVector</name><argument_list>(<argument><expr><literal type="string">"fffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542"</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U"</literal></expr></argument>,
     <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt"</literal></expr></argument>,
     <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6ASAVgeehLbnwdqV6UKMHVzgqAG8Gr6riv3Fxxpj8ksbH9ebxaEyBLZ85ySDhKiLDBrQSARLq1uNRts8RuJiHjaDMBU4Zn9h8LZNnBC5y4a"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9wSp6B7kry3Vj9m1zSnLvN3xH8RdsPP1Mh7fAaR7aRLcQMKTR2vidYEeEg2mUCTAwCd6vnxVrcjfy2kRgVsFawNzmjuHc2YmYRmagcEPdU9"</literal></expr></argument>,
     <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6DF8uhdarytz3FWdA8TvFSvvAh8dP3283MY7p2V4SeE2wyWmG5mg5EwVvmdMVCQcoNJxGoWaU9DCWh89LojfZ537wTfunKau47EL2dhHKon"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9zFnWC6h2cLgpmSA46vutJzBcfJ8yaJGg8cX1e5StJh45BBciYTRXSd25UEPVuesF9yog62tGAQtHjXajPPdbRCHuWS6T8XA2ECKADdw4Ef"</literal></expr></argument>,
     <argument><expr><literal type="number">0xFFFFFFFE</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc"</literal></expr></argument>,
     <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub6FnCn6nSzZAw5Tw7cgR9bi15UV96gLZhjDstkXXxvCLsUXBGXPdSnLFbdpq8p9HmGsApME5hQTZ3emM2rnY5agb9rXpVGyy3bdW6EEgAtqt"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprvA2nrNbFZABcdryreWet9Ea4LvTJcGsqrMzxHx98MMrotbir7yrKCEXw7nadnHM8Dq38EGfSh6dqA9QWTyefMLEcBYJUuekgW4BYPJcr9E7j"</literal></expr></argument>,
     <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestVector</name></type> <name>test3</name> <init>=
  <expr><call><call><call><name>TestVector</name><argument_list>(<argument><expr><literal type="string">"4b381541583be4423346c643850da4b320e46a87ae3d2a4e6da11eba819cd4acba45d239319ac14f863b8d5ab5a0d0c64d2e8a1e7d1457df2e5a3c51c73235be"</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub661MyMwAqRbcEZVB4dScxMAdx6d4nFc9nvyvH3v4gJL378CSRZiYmhRoP7mBy6gSPSCYk6SzXPTf3ND1cZAceL7SfJ1Z3GC8vBgp2epUt13"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9s21ZrQH143K25QhxbucbDDuQ4naNntJRi4KUfWT7xo4EKsHt2QJDu7KXp1A3u7Bi1j8ph3EGsZ9Xvz9dGuVrtHHs7pXeTzjuxBrCmmhgC6"</literal></expr></argument>,
      <argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></call>
    <argument_list>(<argument><expr><literal type="string">"xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y"</literal></expr></argument>,
     <argument><expr><literal type="string">"xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L"</literal></expr></argument>,
      <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RunTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TestVector</name> <modifier>&amp;</modifier></type><name>test</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>seed</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><operator>.</operator><name>strHexMaster</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CExtKey</name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>pubkey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>SetSeed</name></name><argument_list>(<argument><expr><call><name><name>seed</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>seed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>Neuter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>TestDerivation</name> <modifier>&amp;</modifier></type><name>derive</name> <range>: <expr><name><name>test</name><operator>.</operator><name>vDerive</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">74</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Encode</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pubkey</name><operator>.</operator><name>Encode</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test private key</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EncodeExtKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>derive</name><operator>.</operator><name>prv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeExtKey</name><argument_list>(<argument><expr><name><name>derive</name><operator>.</operator><name>prv</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//ensure a base58 decoded key also matches</comment>

        <comment type="line">// Test public key</comment>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EncodeExtPubKey</name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>derive</name><operator>.</operator><name>pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>DecodeExtPubKey</name><argument_list>(<argument><expr><name><name>derive</name><operator>.</operator><name>pub</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//ensure a base58 decoded pubkey also matches</comment>

        <comment type="line">// Derive new keys</comment>
        <decl_stmt><decl><type><name>CExtKey</name></type> <name>keyNew</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>keyNew</name></expr></argument>, <argument><expr><name><name>derive</name><operator>.</operator><name>nChild</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>pubkeyNew</name> <init>= <expr><call><name><name>keyNew</name><operator>.</operator><name>Neuter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>derive</name><operator>.</operator><name>nChild</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// Compare with public derivation</comment>
            <decl_stmt><decl><type><name>CExtPubKey</name></type> <name>pubkeyNew2</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>Derive</name></name><argument_list>(<argument><expr><name>pubkeyNew2</name></expr></argument>, <argument><expr><name><name>derive</name><operator>.</operator><name>nChild</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pubkeyNew</name> <operator>==</operator> <name>pubkeyNew2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>keyNew</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <name>pubkeyNew</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>bip32_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bip32_test1</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>RunTest</name><argument_list>(<argument><expr><name>test1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bip32_test2</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>RunTest</name><argument_list>(<argument><expr><name>test2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bip32_test3</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>RunTest</name><argument_list>(<argument><expr><name>test3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
