<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/flatfile_tests.cpp"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;flatfile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>flatfile_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>flatfile_filename</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>data_dir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FlatFilePos</name></type> <name>pos</name><argument_list>(<argument><expr><literal type="number">456</literal></expr></argument>, <argument><expr><literal type="number">789</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FlatFileSeq</name></type> <name>seq1</name><argument_list>(<argument><expr><name>data_dir</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>seq1</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_dir</name> <operator>/</operator> <literal type="string">"a00456.dat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FlatFileSeq</name></type> <name>seq2</name><argument_list>(<argument><expr><name>data_dir</name> <operator>/</operator> <literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>seq2</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data_dir</name> <operator>/</operator> <literal type="string">"a"</literal> <operator>/</operator> <literal type="string">"b00456.dat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>flatfile_open</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>data_dir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FlatFileSeq</name></type> <name>seq</name><argument_list>(<argument><expr><name>data_dir</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line1</name><argument_list>(<argument><expr><literal type="string">"A purely peer-to-peer version of electronic cash would allow online "</literal>
                      <literal type="string">"payments to be sent directly from one party to another without going "</literal>
                      <literal type="string">"through a financial institution."</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line2</name><argument_list>(<argument><expr><literal type="string">"Digital signatures provide part of the solution, but the main benefits are "</literal>
                      <literal type="string">"lost if a trusted third party is still required to prevent double-spending."</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>pos1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos2</name> <init>= <expr><name>pos1</name> <operator>+</operator> <call><name>GetSerializeSize</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Write first line to file.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>file</name> <operator>&lt;&lt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>line1</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Attempt to append to file opened in read-only mode.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>file</name> <operator>&lt;&lt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>line2</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Append second line to file.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>file</name> <operator>&lt;&lt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>line2</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Read text from file in read-only mode.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>text</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><name>file</name> <operator>&gt;&gt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>&gt;&gt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Read text from file with position offset.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>text</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><name>file</name> <operator>&gt;&gt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// Ensure another file in the sequence has no data.</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>text</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAutoFile</name></type> <name>file</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Open</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_DISK</name></expr></argument>, <argument><expr><name>CLIENT_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>file</name> <operator>&gt;&gt;</operator> <call><name>LIMITED_STRING</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>flatfile_allocate</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>data_dir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FlatFileSeq</name></type> <name>seq</name><argument_list>(<argument><expr><name>data_dir</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>out_of_space</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_of_space</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>file_size</name></name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>out_of_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_of_space</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>file_size</name></name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>out_of_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out_of_space</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>file_size</name></name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><name>out_of_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>flatfile_flush</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>data_dir</name> <init>= <expr><call><name>GetDataDir</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FlatFileSeq</name></type> <name>seq</name><argument_list>(<argument><expr><name>data_dir</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>out_of_space</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>seq</name><operator>.</operator><name>Allocate</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_of_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Flush without finalize should not truncate file.</comment>
    <expr_stmt><expr><call><name><name>seq</name><operator>.</operator><name>Flush</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>file_size</name></name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Flush with finalize should truncate file.</comment>
    <expr_stmt><expr><call><name><name>seq</name><operator>.</operator><name>Flush</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>fs</name><operator>::</operator><name>file_size</name></name><argument_list>(<argument><expr><call><name><name>seq</name><operator>.</operator><name>FileName</name></name><argument_list>(<argument><expr><call><name>FlatFilePos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
