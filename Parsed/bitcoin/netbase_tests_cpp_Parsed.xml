<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/netbase_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_permissions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>netbase_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>CNetAddr</name></type> <name>ResolveIP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LookupHost</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CSubNet</name></type> <name>ResolveSubNet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>subnet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CSubNet</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LookupSubNet</name><argument_list>(<argument><expr><name>subnet</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CNetAddr</name></type> <name>CreateInternal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>addr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>addr</name><operator>.</operator><name>SetInternal</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_networks</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call>                              <operator>==</operator> <name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call>                                    <operator>==</operator> <name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"8.8.8.8"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call>                                <operator>==</operator> <name>NET_IPV4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001::8888"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call>                             <operator>==</operator> <name>NET_IPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NET_ONION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CreateInternal</name><argument_list>(<argument><expr><literal type="string">"foo.com"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetNetwork</name><argument_list>()</argument_list></call>                           <operator>==</operator> <name>NET_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_properties</argument>)</argument_list></macro>
<block>{<block_content>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsIPv4</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"::FFFF:192.168.1.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsIPv4</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsIPv6</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"10.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC1918</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"192.168.1.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC1918</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"172.31.255.255"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC1918</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001:0DB8::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC3849</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"169.254.1.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC3927</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2002::1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC3964</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"FC00::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC4193</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001::2"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC4380</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001:10::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC4843</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001:20::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC7343</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"FE80::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC4862</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"64:FF9B::"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRFC6052</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsTor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsLocal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"::1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsLocal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"8.8.8.8"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRoutable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"2001::1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsRoutable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CreateInternal</name><argument_list>(<argument><expr><literal type="string">"FD6B:88C0:8724:edb1:8e4:3588:e546:35ca"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsInternal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CreateInternal</name><argument_list>(<argument><expr><literal type="string">"bar.com"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsInternal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>bool</name> <specifier>static</specifier></type> <name>TestSplitHost</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>test</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>hostOut</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>portOut</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SplitHostPort</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>portOut</name></expr></argument>, <argument><expr><name>hostOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>hostOut</name> <operator>==</operator> <name>host</name> <operator>&amp;&amp;</operator> <name>port</name> <operator>==</operator> <name>portOut</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_splithost</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"www.bitcoincore.org"</literal></expr></argument>, <argument><expr><literal type="string">"www.bitcoincore.org"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[www.bitcoincore.org]"</literal></expr></argument>, <argument><expr><literal type="string">"www.bitcoincore.org"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"www.bitcoincore.org:80"</literal></expr></argument>, <argument><expr><literal type="string">"www.bitcoincore.org"</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[www.bitcoincore.org]:80"</literal></expr></argument>, <argument><expr><literal type="string">"www.bitcoincore.org"</literal></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:8333"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[127.0.0.1]"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[127.0.0.1]:8333"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"::ffff:127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="string">"::ffff:127.0.0.1"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[::ffff:127.0.0.1]:8333"</literal></expr></argument>, <argument><expr><literal type="string">"::ffff:127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[::]:8333"</literal></expr></argument>, <argument><expr><literal type="string">"::"</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"::8333"</literal></expr></argument>, <argument><expr><literal type="string">"::8333"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">":8333"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">"[]:8333"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">8333</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestSplitHost</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><name>bool</name> <specifier>static</specifier></type> <name>TestParse</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>canon</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CService</name></type> <name>addr</name><argument_list>(<argument><expr><call><name>LookupNumeric</name><argument_list>(<argument><expr><call><name><name>src</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>canon</name> <operator>==</operator> <call><name><name>addr</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_lookupnumeric</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:65535"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1:8333"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:8333"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"::ffff:127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:65535"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"::"</literal></expr></argument>, <argument><expr><literal type="string">"[::]:65535"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"[::]:8333"</literal></expr></argument>, <argument><expr><literal type="string">"[::]:8333"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"[127.0.0.1]"</literal></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:65535"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">":::"</literal></expr></argument>, <argument><expr><literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// verify that an internal address fails to resolve</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"[fd6b:88c0:8724:1:2:3:4:5]"</literal></expr></argument>, <argument><expr><literal type="string">"[::]:0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// and that a one-off resolves correctly</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>TestParse</name><argument_list>(<argument><expr><literal type="string">"[fd6c:88c0:8724:1:2:3:4:5]"</literal></expr></argument>, <argument><expr><literal type="string">"[fd6c:88c0:8724:1:2:3:4:5]:65535"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>onioncat_test</argument>)</argument_list></macro>
<block>{<block_content>

    <comment type="line">// values from https://web.archive.org/web/20121122003543/http://www.cypherpunk.at/onioncat/wiki/OnionCat</comment>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>addr1</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"5wyqrzbvrdsumnok.onion"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CNetAddr</name></type> <name>addr2</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>addr1</name> <operator>==</operator> <name>addr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addr1</name><operator>.</operator><name>IsTor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addr1</name><operator>.</operator><name>ToStringIP</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"5wyqrzbvrdsumnok.onion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>addr1</name><operator>.</operator><name>IsRoutable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>subnet_test</argument>)</argument_list></macro>
<block>{<block_content>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/24"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/255.255.255.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/24"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.4.0/255.255.255.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/24"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.2.0/24"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"5.6.7.8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"5.6.7.8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"::ffff:127.0.0.1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:0/112"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:1234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"192.168.0.1/24"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"192.168.0.2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"192.168.0.20/29"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"192.168.0.18"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.2.1/24"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.2.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.2.110/31"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.2.111"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.2.20/26"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.2.63"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// All-Matching IPv6 Matches arbitrary IPv4 and IPv6</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"::/0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:1234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"::/0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// All-Matching IPv4 does not Match IPv6</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0/0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:1234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Invalid subnets Match nothing (not even invalid addresses)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CSubNet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"4.5.6.7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"bloop"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"bloop"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"hab"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Check valid/invalid</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/-1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/32"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.0/33"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/33"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/-1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/128"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/129"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"fuzzy"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//CNetAddr constructor test</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"127.0.0.1/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CSubNet</name></type> <name>subnet</name> <init>= <expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"255.255.255.255"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"255.0.0.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsValid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Match</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CSubNet</name><argument_list>(<argument><expr><call><name>ResolveIP</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"1:2:3:4:5:6:7:8/128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.254"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/31"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.252"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/30"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.248"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/29"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.240"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/28"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.224"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/27"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.192"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/26"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/25"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.255.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.0/24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.254.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.2.0/23"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.252.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/22"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.248.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.240.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.224.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/19"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.192.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/18"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.128.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/17"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.254.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.252.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.248.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.240.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.224.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.192.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.128.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.0.0.0/8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/254.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/252.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/248.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/240.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/224.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/192.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/128.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.0.0.0/0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1:2:3:4:5:6:7:8/128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/ffff:0000:0000:0000:0000:0000:0000:0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1::/16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/0000:0000:0000:0000:0000:0000:0000:0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"::/0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1.2.3.4/255.255.232.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.0.0/255.255.232.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>subnet</name> <operator>=</operator> <call><name>ResolveSubNet</name><argument_list>(<argument><expr><literal type="string">"1:2:3:4:5:6:7:8/ffff:ffff:ffff:fffe:ffff:ffff:ffff:ff0f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1:2:3:4:5:6:7:8/ffff:ffff:ffff:fffe:ffff:ffff:ffff:ff0f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_getgroup</argument>)</argument_list></macro>
<block>{<block_content>

    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"127.0.0.1"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({<literal type="number">0</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// Local -&gt; !Routable()</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"257.0.0.1"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({<literal type="number">0</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// !Valid -&gt; !Routable()</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"10.0.0.1"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({<literal type="number">0</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC1918 -&gt; !Routable()</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"169.254.1.1"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({<literal type="number">0</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC3927 -&gt; !Routable()</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"1.2.3.4"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV4, <literal type="number">1</literal>, <literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// IPv4</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"::FFFF:0:102:304"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV4, <literal type="number">1</literal>, <literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC6145</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"64:FF9B::102:304"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV4, <literal type="number">1</literal>, <literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC6052</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"2002:102:304:9999:9999:9999:9999:9999"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV4, <literal type="number">1</literal>, <literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC3964</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"2001:0:9999:9999:9999:9999:FEFD:FCFB"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV4, <literal type="number">1</literal>, <literal type="number">2</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// RFC4380</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_ONION, <literal type="number">239</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">// Tor</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"2001:470:abcd:9999:9999:9999:9999:9999"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV6, <literal type="number">32</literal>, <literal type="number">1</literal>, <literal type="number">4</literal>, <literal type="number">112</literal>, <literal type="number">175</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">//he.net</comment>
    <macro><name>BOOST_CHECK</name><argument_list>(<argument>ResolveIP(<literal type="string">"2001:2001:9999:9999:9999:9999:9999:9999"</literal>).GetGroup() == std::vector&lt;unsigned char&gt;({(unsigned char)NET_IPV6, <literal type="number">32</literal>, <literal type="number">1</literal>, <literal type="number">32</literal>, <literal type="number">1</literal>})</argument>)</argument_list></macro><empty_stmt>;</empty_stmt> <comment type="line">//IPv6</comment>

    <comment type="line">// baz.net sha256 hash: 12929400eb4607c4ac075f087167e75286b179c693eb059a01774b864e8fe505</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>internal_group</name> <init>= <expr><block>{<expr><name>NET_INTERNAL</name></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x07</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>CreateInternal</name><argument_list>(<argument><expr><literal type="string">"baz.net"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetGroup</name><argument_list>()</argument_list></call> <operator>==</operator> <name>internal_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netbase_parsenetwork</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"ipv4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_IPV4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"ipv6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_IPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"onion"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_ONION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"tor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_ONION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"IPv4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_IPV4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"IPv6"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_IPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"ONION"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_ONION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"TOR"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_ONION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">":)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"tÃr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">"\xfe\xff"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNetwork</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NET_UNROUTABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>netpermissions_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NetWhitebindPermissions</name></type> <name>whitebindPermissions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NetWhitelistPermissions</name></type> <name>whitelistPermissions</name></decl>;</decl_stmt>

    <comment type="line">// Detect invalid white bind</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"Cannot resolve -whitebind address"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"Need to specify a port with -whitebind"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If no permission flags, assume backward compatibility</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>ClearFlag</name></name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Can set one permission</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Happy path, can parse flags</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// forcerelay should also activate the relay permission</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_FORCERELAY</name> <operator>|</operator> <name>PF_RELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,relay,noban@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_RELAY</name> <operator>|</operator> <name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay,noban@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"all@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allow dups</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,relay,noban,noban@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_RELAY</name> <operator>|</operator> <name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allow empty</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,relay,,noban@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_RELAY</name> <operator>|</operator> <name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">",@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">",,@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitebindPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Detect invalid flag</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay,oopsie@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitebindPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"Invalid P2P permission"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check whitelist error</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay,noban@1.2.3.4:32"</literal></expr></argument>, <argument><expr><name>whitelistPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">"Invalid netmask specified in -whitelist"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Happy path for whitelist parsing</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"noban@1.2.3.4"</literal></expr></argument>, <argument><expr><name>whitelistPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitelistPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay,noban,relay@1.2.3.4/32"</literal></expr></argument>, <argument><expr><name>whitelistPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>whitelistPermissions</name><operator>.</operator><name>m_flags</name></name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name> <operator>|</operator> <name>PF_FORCERELAY</name> <operator>|</operator> <name>PF_NOBAN</name> <operator>|</operator> <name>PF_RELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>error</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>whitelistPermissions</name><operator>.</operator><name>m_subnet</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.2.3.4/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><argument_list>(<argument><expr><literal type="string">"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32"</literal></expr></argument>, <argument><expr><name>whitelistPermissions</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>strings</name> <init>= <expr><call><name><name>NetPermissions</name><operator>::</operator><name>ToStrings</name></name><argument_list>(<argument><expr><name>PF_ALL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bloomfilter"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"forcerelay"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"relay"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"noban"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mempool"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
