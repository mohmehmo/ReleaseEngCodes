<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/settings_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/settings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>settings_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="line" format="doxygen">//! Check settings struct contents against expected json strings.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckValues</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>util</name><operator>::</operator><name>Settings</name></name><modifier>&amp;</modifier></type> <name>settings</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>single_val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>list_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>SettingsValue</name></name></type> <name>single_value</name> <init>= <expr><call><name>GetSetting</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"section"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>SettingsValue</name></name></type> <name>list_value</name><argument_list>(<argument><expr><name><name>util</name><operator>::</operator><name>SettingsValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>item</name> <range>: <expr><call><name>GetSettingsList</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">"section"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>list_value</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>single_value</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>single_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>list_value</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>list_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<comment type="line">// Simple settings merge test case.</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>Simple</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>Settings</name></name></type> <name>settings</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>command_line_options</name><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="string">"val1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>command_line_options</name><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="string">"val2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>ro_config</name><index>[<expr><literal type="string">"section"</literal></expr>]</index><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The last given arg takes precedence when specified via commandline.</comment>
    <expr_stmt><expr><call><name>CheckValues</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="string">R"("val2")"</literal></expr></argument>, <argument><expr><literal type="string">R"(["val1","val2",2])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>Settings</name></name></type> <name>settings2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>settings2</name><operator>.</operator><name>ro_config</name><index>[<expr><literal type="string">"section"</literal></expr>]</index><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="string">"val2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>settings2</name><operator>.</operator><name>ro_config</name><index>[<expr><literal type="string">"section"</literal></expr>]</index><index>[<expr><literal type="string">"name"</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="string">"val3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The first given arg takes precedence when specified via config file.</comment>
    <expr_stmt><expr><call><name>CheckValues</name><argument_list>(<argument><expr><name>settings2</name></expr></argument>, <argument><expr><literal type="string">R"("val2")"</literal></expr></argument>, <argument><expr><literal type="string">R"(["val2","val3"])"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="line">// Test different ways settings can be merged, and verify results. This test can</comment>
<comment type="line">// be used to confirm that updates to settings code don't change behavior</comment>
<comment type="line">// unintentionally.</comment>
<struct>struct <name>MergeTestingSetup</name> <super_list>: <super><specifier>public</specifier> <name>BasicTestingSetup</name></super></super_list> <block>{<public type="default">
    <comment type="line" format="doxygen">//! Max number of actions to sequence together. Can decrease this when</comment>
    <comment type="line" format="doxygen">//! debugging to make test results easier to understand.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>int</name></type> <name>MAX_ACTIONS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <enum>enum <name>Action</name> <block>{ <decl><name>END</name></decl>, <decl><name>SET</name></decl>, <decl><name>NEGATE</name></decl>, <decl><name>SECTION_SET</name></decl>, <decl><name>SECTION_NEGATE</name></decl> }</block>;</enum>
    <using>using <name>ActionList</name> <init>= <type><name><name>Action</name><index>[<expr><name>MAX_ACTIONS</name></expr>]</index></name></type></init>;</using>

    <comment type="line" format="doxygen">//! Enumerate all possible test configurations.</comment>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Fn</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>ForEachMergeSetup</name><parameter_list>(<parameter><decl><type><name>Fn</name><modifier>&amp;&amp;</modifier></type> <name>fn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ActionList</name></type> <name>arg_actions</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
        <comment type="line">// command_line_options do not have sections. Only iterate over SET and NEGATE</comment>
        <expr_stmt><expr><call><name>ForEachNoDup</name><argument_list>(<argument><expr><name>arg_actions</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>NEGATE</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><block>{<block_content>
            <decl_stmt><decl><type><name>ActionList</name> <name>conf_actions</name> = <block>{<block_content/>}</block></type></decl></decl_stmt><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>ForEachNoDup</name><argument_list>(<argument><expr><name>conf_actions</name></expr></argument>, <argument><expr><name>SET</name></expr></argument>, <argument><expr><name>SECTION_NEGATE</name></expr></argument>, <argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><block>{<block_content>
                <for>for <control>(<init><decl><type><name>bool</name> <name>force_set</name></type></decl></init></control></for></block_content></block></lambda></expr></argument></argument_list></call></expr></expr_stmt></block_content></block></lambda></expr></argument></argument_list></call></expr></expr_stmt></block_content></block></function> : <block>{<block_content><expr><literal type="boolean">false</literal></expr><operator>,</operator> <expr><literal type="boolean">true</literal></expr></block_content>}</block></public>)</block> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>bool</name></type> <name>ignore_default_section_config</name> <range>: <expr><block>{<expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">true</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name>fn</name><argument_list>(<argument><expr><name>arg_actions</name></expr></argument>, <argument><expr><name>conf_actions</name></expr></argument>, <argument><expr><name>force_set</name></expr></argument>, <argument><expr><name>ignore_default_section_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block>
            <decl/></struct>})<empty_stmt>;</empty_stmt>
        })<empty_stmt>;</empty_stmt>
    }
}<empty_stmt>;</empty_stmt>

<comment type="line">// Regression test covering different ways config settings can be merged. The</comment>
<comment type="line">// test parses and merges settings, representing the results as strings that get</comment>
<comment type="line">// compared against an expected hash. To debug, the result strings can be dumped</comment>
<comment type="line">// to a file (see comments below).</comment>
<macro><name>BOOST_FIXTURE_TEST_CASE</name><argument_list>(<argument>Merge</argument>, <argument>MergeTestingSetup</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CHash256</name></type> <name>out_sha</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>out_file</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>out_path</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SETTINGS_MERGE_TEST_OUT"</literal></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>out_file</name> <operator>=</operator> <call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>out_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_file</name></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>system_error</name></name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>generic_category</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fopen failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>network</name> <init>= <expr><name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ForEachMergeSetup</name><argument_list>(<argument><expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ActionList</name><modifier>&amp;</modifier></type> <name>arg_actions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ActionList</name><modifier>&amp;</modifier></type> <name>conf_actions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_set</name></decl></parameter>,
                          <parameter><decl><type><name>bool</name></type> <name>ignore_default_section_config</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <name>desc</name></type></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name> <name>value_suffix</name> = 0</type></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>util</name><operator>::</operator><name>Settings</name></name> <name>settings</name></type></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier> <name>name</name> = <name>ignore_default_section_config</name> <modifier/>? "wallet" : "server"</type></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name> <name>push_values</name> = [<modifier>&amp;</modifier>](<name>Action</name> <name>action</name></type></decl>, const <decl><type ref="prev"/><name>char</name><modifier>*</modifier> <name>value_prefix</name></decl>, const <decl><type ref="prev"/><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier> <name>name_prefix</name></decl>,
                               <decl><type ref="prev"/><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>util</name><operator>::</operator><name>SettingsValue</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier> <name>dest</name></decl>) <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>SET</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SECTION_SET</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name> <name>i</name> = 0</type></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value_prefix</name> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><operator>++</operator><name>value_suffix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>name_prefix</name> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>dest</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>NEGATE</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SECTION_NEGATE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>name_prefix</name> <operator>+</operator> <literal type="string">"no"</literal> <operator>+</operator> <name>name</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></decl_stmt><empty_stmt>;</empty_stmt>

        <if_stmt><if>if <condition>(<expr><name>force_set</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>settings</name><operator>.</operator><name>forced_settings</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <literal type="string">"forced"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">"=forced"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>Action</name> <name>arg_action</name> : <name>arg_actions</name></type></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>push_values</name><argument_list>(<argument><expr><name>arg_action</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>command_line_options</name><index>[<expr><name>name</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>Action</name> <name>conf_action</name> : <name>conf_actions</name></type></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name> <name>use_section</name> = <name>conf_action</name> == <name>SECTION_SET</name> || <name>conf_action</name> == <name>SECTION_NEGATE</name></type></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>push_values</name><argument_list>(<argument><expr><name>conf_action</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>use_section</name></expr> ?</condition><then> <expr><name>network</name> <operator>+</operator> <literal type="string">"."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                <argument><expr><name><name>settings</name><operator>.</operator><name>ro_config</name><index>[<expr><ternary><condition><expr><name>use_section</name></expr> ?</condition><then> <expr><name>network</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>]</index><index>[<expr><name>name</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" || "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>desc</name> <operator>+=</operator> <call><name>GetSetting</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>network</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ignore_default_section_config</name></expr></argument>, <comment type="block">/* get_chain_name= */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" |"</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier> <name>s</name> : <name>GetSettingsList</name>(<name>settings</name></type></decl>, <decl><type ref="prev"/><name>network</name></decl>, <decl><type ref="prev"/><name>name</name></decl>, <decl><type ref="prev"/><name>ignore_default_section_config</name></decl></init>)</control><block type="pseudo"><block_content><expr_stmt><expr/></expr_stmt></block_content></block></for></block_content></block></lambda></expr></argument>)</argument_list></call> <block>{
            <expr><name>desc</name> <operator>+=</operator> <literal type="string">" "</literal></expr>;
            <expr><name>desc</name> <operator>+=</operator> <call><name><name>s</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr>;
        }</block>
        <name>desc</name> <operator>+=</operator> <literal type="string">" |"</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>OnlyHasDefaultSectionSetting</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>network</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">" ignored"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>desc</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>out_sha</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name><name>desc</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>out_file</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_REQUIRE</name><argument_list>(<argument><expr><call><name>fwrite</name><argument_list>(<argument><expr><call><name><name>desc</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>desc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out_file</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>desc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>)<empty_stmt>;</empty_stmt>

    <if_stmt><if>if <condition>(<expr><name>out_file</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>out_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>system_error</name></name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>generic_category</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fclose failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>out_file</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out_sha_bytes</name><index>[<expr><name><name>CSHA256</name><operator>::</operator><name>OUTPUT_SIZE</name></name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>out_sha</name><operator>.</operator><name>Finalize</name></name><argument_list>(<argument><expr><name>out_sha_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>out_sha_hex</name> <init>= <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>begin</name></name><argument_list>(<argument><expr><name>out_sha_bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>end</name></name><argument_list>(<argument><expr><name>out_sha_bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// If check below fails, should manually dump the results with:</comment>
    <comment type="line">//</comment>
    <comment type="line">//   SETTINGS_MERGE_TEST_OUT=results.txt ./test_bitcoin --run_test=settings_tests/Merge</comment>
    <comment type="line">//</comment>
    <comment type="line">// And verify diff against previous results to make sure the changes are expected.</comment>
    <comment type="line">//</comment>
    <comment type="line">// Results file is formatted like:</comment>
    <comment type="line">//</comment>
    <comment type="line">//   &lt;input&gt; || GetSetting() | GetSettingsList() | OnlyHasDefaultSectionSetting()</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>out_sha_hex</name></expr></argument>, <argument><expr><literal type="string">"79db02d74e3e193196541b67c068b40ebd0c124a24b3ecbe9cbf7e85b1c4ba7a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
