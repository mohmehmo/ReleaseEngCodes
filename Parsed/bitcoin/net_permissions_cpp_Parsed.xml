<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/net_permissions.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_permissions.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/translation.h&gt;</cpp:file></cpp:include>

<comment type="line">// The parse the following format "perm1,perm2@xxxxxx"</comment>
<function><type><name>bool</name></type> <name>TryParsePermissionFlags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>NetPermissionFlags</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>&amp;</modifier></type> <name>readen</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NetPermissionFlags</name></type> <name>flags</name> <init>= <expr><name>PF_NONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>atSeparator</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// if '@' is not found (ie, "xxxxx"), the caller should apply implicit permissions</comment>
    <if_stmt><if>if <condition>(<expr><name>atSeparator</name> <operator>==</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_ISIMPLICIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>readen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// else (ie, "perm1,perm2@xxxxx"), let's enumerate the permissions by splitting by ',' and calculate the flags</comment>
    <else>else <block>{<block_content>
        <expr_stmt><expr><name>readen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="line">// permissions == perm1,perm2</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>permissions</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>atSeparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>readen</name> <operator>&lt;</operator> <call><name><name>permissions</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>commaSeparator</name> <init>= <expr><call><name><name>permissions</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><name>readen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>len</name> <init>= <expr><ternary><condition><expr><name>commaSeparator</name> <operator>==</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr> ?</condition><then> <expr><call><name><name>permissions</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>readen</name></expr> </then><else>: <expr><name>commaSeparator</name> <operator>-</operator> <name>readen</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <comment type="line">// permission == perm1</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>permission</name> <init>= <expr><call><name><name>permissions</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>readen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>readen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt> <comment type="line">// We read "perm1"</comment>
            <if_stmt><if>if <condition>(<expr><name>commaSeparator</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>readen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// We read ","</comment>

            <if_stmt><if>if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"bloomfilter"</literal> <operator>||</operator> <name>permission</name> <operator>==</operator> <literal type="string">"bloom"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"noban"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"forcerelay"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_FORCERELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"mempool"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_MEMPOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"all"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="string">"relay"</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>NetPermissions</name><operator>::</operator><name>AddFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_RELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>permission</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></if> <comment type="line">// Allow empty entries</comment>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid P2P permission: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>readen</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>output</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name><name>NetPermissions</name><operator>::</operator><name>ToStrings</name></name><parameter_list>(<parameter><decl><type><name>NetPermissionFlags</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>strings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_BLOOMFILTER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"bloomfilter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_NOBAN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"noban"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_FORCERELAY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"forcerelay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_RELAY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"relay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>NetPermissions</name><operator>::</operator><name>HasFlag</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>PF_MEMPOOL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"mempool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>strings</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>NetWhitebindPermissions</name><operator>::</operator><name>TryParse</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>NetWhitebindPermissions</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NetPermissionFlags</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TryParsePermissionFlags</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strBind</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CService</name></type> <name>addrBind</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>Lookup</name><argument_list>(<argument><expr><call><name><name>strBind</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>addrBind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>ResolveErrMsg</name><argument_list>(<argument><expr><literal type="string">"whitebind"</literal></expr></argument>, <argument><expr><name>strBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>addrBind</name><operator>.</operator><name>GetPort</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Need to specify a port with -whitebind: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>strBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>m_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>m_service</name></name> <operator>=</operator> <name>addrBind</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>NetWhitelistPermissions</name><operator>::</operator><name>TryParse</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>NetWhitelistPermissions</name><modifier>&amp;</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>NetPermissionFlags</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TryParsePermissionFlags</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>net</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CSubNet</name></type> <name>subnet</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LookupSubNet</name><argument_list>(<argument><expr><call><name><name>net</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>subnet</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Invalid netmask specified in -whitelist: '%s'"</literal></expr></argument>)</argument_list></call><operator>.</operator><name>translated</name></expr></argument>, <argument><expr><name>net</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>m_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>.</operator><name>m_subnet</name></name> <operator>=</operator> <name>subnet</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
