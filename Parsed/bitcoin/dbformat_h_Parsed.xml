<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/dbformat.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_DBFORMAT_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_DBFORMAT_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/comparator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/filter_policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/table_builder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/coding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util/logging.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<comment type="line">// Grouping of constants.  We may want to make some of these</comment>
<comment type="line">// parameters set via options.</comment>
<decl_stmt><decl><type><name>namespace</name></type> <name>config</name> <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kNumLevels</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Level-0 compaction is started when we hit this many files.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kL0_CompactionTrigger</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Soft limit on number of level-0 files.  We slow down writes at this point.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kL0_SlowdownWritesTrigger</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Maximum number of level-0 files.  We stop writes at this point.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kL0_StopWritesTrigger</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Maximum level to which a new compacted memtable is pushed if it</comment>
<comment type="line">// does not create overlap.  We try to push to level 2 to avoid the</comment>
<comment type="line">// relatively expensive level 0=&gt;1 compactions and to avoid some</comment>
<comment type="line">// expensive manifest file operations.  We do not push all the way to</comment>
<comment type="line">// the largest level since that can generate a lot of wasted disk</comment>
<comment type="line">// space if the same key space is being repeatedly overwritten.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kMaxMemCompactLevel</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Approximate gap in bytes between samples of data read during iteration.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>kReadBytesPeriod</name> <init>= <expr><literal type="number">1048576</literal></expr></init></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace config</comment>

<decl_stmt><decl><type><name>class</name></type> <name>InternalKey</name></decl>;</decl_stmt>

<comment type="line">// Value types encoded as the last component of internal keys.</comment>
<comment type="line">// DO NOT CHANGE THESE ENUM VALUES: they are embedded in the on-disk</comment>
<comment type="line">// data structures.</comment>
<enum>enum <name>ValueType</name> <block>{
  <decl><name>kTypeDeletion</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,
  <decl><name>kTypeValue</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>
}</block>;</enum>
<comment type="line">// kValueTypeForSeek defines the ValueType that should be passed when</comment>
<comment type="line">// constructing a ParsedInternalKey object for seeking to a particular</comment>
<comment type="line">// sequence number (since we sort sequence numbers in decreasing order</comment>
<comment type="line">// and the value type is embedded as the low 8 bits in the sequence</comment>
<comment type="line">// number in internal keys, we need to use the highest-numbered</comment>
<comment type="line">// ValueType, not the lowest).</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ValueType</name></type> <name>kValueTypeForSeek</name> <init>= <expr><name>kTypeValue</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>uint64_t</name></type> <name>SequenceNumber</name>;</typedef>

<comment type="line">// We leave eight bits empty at the bottom so a type and sequence#</comment>
<comment type="line">// can be packed together into 64-bits.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SequenceNumber</name></type> <name>kMaxSequenceNumber</name> <init>=
    <expr><operator>(</operator><operator>(</operator><literal type="number">0x1ull</literal> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<struct>struct <name>ParsedInternalKey</name> <block>{
  <decl_stmt><decl><type><name>Slice</name></type> <name>user_key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SequenceNumber</name></type> <name>sequence</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ValueType</name></type> <name>type</name></decl>;</decl_stmt>

  <macro><name>ParsedInternalKey</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>  <comment type="line">// Intentionally left uninitialized (for speed)</comment>
  <macro><name>ParsedInternalKey</name><argument_list>(<argument>const Slice&amp; u</argument>, <argument>const SequenceNumber&amp; seq</argument>, <argument>ValueType t</argument>)</argument_list></macro>
      : <expr_stmt><expr><call><name>user_key</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>sequence</name><argument_list>(<argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>type</name><argument_list>(<argument>t</argument>)</argument_list></macro> <expr><block>{ }</block>
  <name>std</name><operator>::</operator><name>string</name> <macro><name>DebugString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
}</block>;</struct>

<comment type="line">// Return the length of the encoding of "key".</comment>
<function><type><specifier>inline</specifier> <name>size_t</name></type> <name>InternalKeyEncodingLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParsedInternalKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><name>key</name><operator>.</operator><name>user_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Append the serialization of "key" to *result.</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>AppendInternalKey</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>result</name></expr></argument>,
                              <argument><expr><specifier>const</specifier> <name>ParsedInternalKey</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="line">// Attempt to parse an internal key from "internal_key".  On success,</comment>
<comment type="line">// stores the parsed data in "*result", and returns true.</comment>
<comment type="line">//</comment>
<comment type="line">// On error, returns false, leaves "*result" in an undefined state.</comment>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>ParseInternalKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>internal_key</name></decl></parameter>,
                             <parameter><decl><type><name>ParsedInternalKey</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// Returns the user key portion of an internal key.</comment>
<function><type><specifier>inline</specifier> <name>Slice</name></type> <name>ExtractUserKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>internal_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>Slice</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>internal_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <name>ValueType</name></type> <name>ExtractValueType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>internal_key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><call><name><name>internal_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><call><name>DecodeFixed64</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ValueType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// A comparator for internal keys that uses a specified comparator for</comment>
<comment type="line">// the user key portion and breaks ties by decreasing sequence number.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>InternalKeyComparator</name> <range>: <expr><name>public</name> <name>Comparator</name> <block>{
 <expr><name>private</name><operator>:</operator>
  <specifier>const</specifier> <name>Comparator</name><operator>*</operator> <name>user_comparator_</name></expr>;
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>InternalKeyComparator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Comparator</name><operator>*</operator> <name>c</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>user_comparator_</name><argument_list>(<argument>c</argument>)</argument_list></macro> <block>{ }</block>
  <name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>Name</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>virtual</name> <name>int</name> <macro><name>Compare</name><argument_list>(<argument>const Slice&amp; a</argument>, <argument>const Slice&amp; b</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>virtual</name> <name>void</name> <macro><name>FindShortestSeparator</name><argument_list>(
      <argument>std::string* start</argument>,
      <argument>const Slice&amp; limit</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>virtual</name> <name>void</name> <macro><name>FindShortSuccessor</name><argument_list>(<argument>std::string* key</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <expr><specifier>const</specifier> <name>Comparator</name><operator>*</operator> <macro><name>user_comparator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>user_comparator_</name></expr>;</return> }</block>

  <name>int</name> <macro><name>Compare</name><argument_list>(<argument>const InternalKey&amp; a</argument>, <argument>const InternalKey&amp; b</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="line">// Filter policy wrapper that converts from internal keys to user keys</comment>
<decl_stmt><decl><type><name>class</name></type> <name>InternalFilterPolicy</name> <range>: <expr><name>public</name> <name>FilterPolicy</name> <block>{
 <expr><name>private</name><operator>:</operator>
  <specifier>const</specifier> <name>FilterPolicy</name><operator>*</operator> <specifier>const</specifier> <name>user_policy_</name></expr>;
 <expr><name>public</name><operator>:</operator>
  <name>explicit</name> <call><name>InternalFilterPolicy</name><argument_list>(<argument><expr><specifier>const</specifier> <name>FilterPolicy</name><operator>*</operator> <name>p</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>user_policy_</name><argument_list>(<argument>p</argument>)</argument_list></macro> <block>{ }</block>
  <name>virtual</name> <specifier>const</specifier> <name>char</name><operator>*</operator> <macro><name>Name</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>virtual</name> <name>void</name> <macro><name>CreateFilter</name><argument_list>(<argument>const Slice* keys</argument>, <argument>int n</argument>, <argument>std::string* dst</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
  <expr><name>virtual</name> <name>bool</name> <macro><name>KeyMayMatch</name><argument_list>(<argument>const Slice&amp; key</argument>, <argument>const Slice&amp; filter</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="line">// Modules in this directory should keep internal keys wrapped inside</comment>
<comment type="line">// the following class instead of plain strings so that we do not</comment>
<comment type="line">// incorrectly use string comparisons instead of an InternalKeyComparator.</comment>
<decl_stmt><decl><type><name>class</name></type> <name>InternalKey</name> <block>{<block_content>
 <label><name>private</name>:</label>
  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <name>rep_</name></expr>;</expr_stmt>
 <label><name>public</name>:</label>
  <macro><name>InternalKey</name><argument_list>()</argument_list></macro> <block>{<block_content> </block_content>}</block>   <comment type="line">// Leave rep_ as empty to indicate it is invalid</comment>
  <macro><name>InternalKey</name><argument_list>(<argument>const Slice&amp; user_key</argument>, <argument>SequenceNumber s</argument>, <argument>ValueType t</argument>)</argument_list></macro> <block>{<block_content>
    <expr_stmt><expr><call><name>AppendInternalKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rep_</name></expr></argument>, <argument><expr><call><name>ParsedInternalKey</name><argument_list>(<argument><expr><name>user_key</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <function><type><name>void</name></type> <name>DecodeFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>rep_</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
  <expr_stmt><expr><name>Slice</name> <macro><name>Encode</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>rep_</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
    <return>return <expr><name>rep_</name></expr>;</return>
  }</block></expr></expr_stmt>

  <expr_stmt><expr><name>Slice</name> <macro><name>user_key</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ExtractUserKey</name><argument_list>(<argument><expr><name>rep_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <function><type><name>void</name></type> <name>SetFrom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParsedInternalKey</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>rep_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AppendInternalKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rep_</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><name>void</name></type> <name>Clear</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name><name>rep_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

  <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>DebugString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>int</name> <name>InternalKeyComparator</name><operator>::</operator><macro><name>Compare</name><argument_list>(
    <argument>const InternalKey&amp; a</argument>, <argument>const InternalKey&amp; b</argument>)</argument_list></macro> <specifier>const</specifier> <block>{
  <return>return <expr><call><name>Compare</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>Encode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>Encode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<function><type><specifier>inline</specifier> <name>bool</name></type> <name>ParseInternalKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>internal_key</name></decl></parameter>,
                             <parameter><decl><type><name>ParsedInternalKey</name><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>n</name> <init>= <expr><call><name><name>internal_key</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>num</name> <init>= <expr><call><name>DecodeFixed64</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name>num</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sequence</name></name> <operator>=</operator> <name>num</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ValueType</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>user_key</name></name> <operator>=</operator> <call><name>Slice</name><argument_list>(<argument><expr><call><name><name>internal_key</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>c</name> <operator>&lt;=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>kTypeValue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// A helper class useful for DBImpl::Get()</comment>
<decl_stmt><decl><type><name>class</name></type> <name>LookupKey</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <comment type="line">// Initialize *this for looking up user_key at a snapshot with</comment>
  <comment type="line">// the specified sequence number.</comment>
  <macro><name>LookupKey</name><argument_list>(<argument>const Slice&amp; user_key</argument>, <argument>SequenceNumber sequence</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><operator>~</operator><call><name>LookupKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Return a key suitable for lookup in a MemTable.</comment>
  <expr_stmt><expr><name>Slice</name> <macro><name>memtable_key</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Slice</name><argument_list>(<argument><expr><name>start_</name></expr></argument>, <argument><expr><name>end_</name> <operator>-</operator> <name>start_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return an internal key (suitable for passing to an internal iterator)</comment>
  <expr_stmt><expr><name>Slice</name> <macro><name>internal_key</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Slice</name><argument_list>(<argument><expr><name>kstart_</name></expr></argument>, <argument><expr><name>end_</name> <operator>-</operator> <name>kstart_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

  <comment type="line">// Return the user key</comment>
  <expr_stmt><expr><name>Slice</name> <macro><name>user_key</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>Slice</name><argument_list>(<argument><expr><name>kstart_</name></expr></argument>, <argument><expr><name>end_</name> <operator>-</operator> <name>kstart_</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

 <label><name>private</name>:</label>
  <comment type="line">// We construct a char array of the form:</comment>
  <comment type="line">//    klength  varint32               &lt;-- start_</comment>
  <comment type="line">//    userkey  char[klength]          &lt;-- kstart_</comment>
  <comment type="line">//    tag      uint64</comment>
  <comment type="line">//                                    &lt;-- end_</comment>
  <comment type="line">// The array is a suitable MemTable key.</comment>
  <comment type="line">// The suffix starting with "userkey" can be used as an InternalKey.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>start_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>kstart_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>end_</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>space_</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>      <comment type="line">// Avoid allocation for short keys</comment>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>LookupKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>LookupKey</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>LookupKey</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><specifier>inline</specifier> <name>LookupKey</name><operator>::</operator><operator>~</operator><macro><name>LookupKey</name><argument_list>()</argument_list></macro> <block>{
  <if_stmt><if>if <condition>(<expr><name>start_</name> <operator>!=</operator> <name>space_</name></expr>)</condition><block type="pseudo"><block_content> <decl_stmt><decl><type><name><name>delete</name><index>[]</index></name></type> <name>start_</name></decl>;</decl_stmt></block_content></block></if></if_stmt>
}</block></expr></expr_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_DBFORMAT_H_</comment>
</unit>
