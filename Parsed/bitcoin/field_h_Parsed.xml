<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/field.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_FIELD_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FIELD_H</name></cpp:macro></cpp:define>

<comment type="block" format="doxygen">/** Field element module.
 *
 *  Field elements can be represented in several ways, but code accessing
 *  it (and implementations) need to take certain properties into account:
 *  - Each field element can be normalized or not.
 *  - Each field element has a magnitude, which represents how far away
 *    its representation is away from normalization. Normalized elements
 *    always have a magnitude of 1, but a magnitude of 1 doesn't imply
 *    normality.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsecp256k1-config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIELD_10X26</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field_10x26.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_FIELD_5X52</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field_5x52.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please select field implementation"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Normalize a field element. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Weakly normalize a field element: reduce it magnitude to 1, but don't fully normalize. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_weak</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Normalize a field element, without constant-time guarantee. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field
 *  implementation may optionally normalize the input, but this should not be relied upon. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Verify whether a field element represents zero i.e. would normalize to a zero value. The field
 *  implementation may optionally normalize the input, but this should not be relied upon. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a field element equal to a small integer. Resulting field element is normalized. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Sets a field element equal to zero, initializing all fields. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Verify whether a field element is zero. Requires the input to be normalized. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check the "oddness" of a field element. Requires the input to be normalized. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_odd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compare two field elements. Requires magnitude-1 inputs. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Same as secp256k1_fe_equal, but may be variable time. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_equal_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Compare two field elements. Requires both inputs to be normalized */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_cmp_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a field element equal to 32-byte big endian value. If successful, the resulting field element is normalized. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input
 *  as an argument. The magnitude of the output is one higher. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that
 *  small integer. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Adds a field element to another. The result has the sum of the inputs' magnitudes as magnitude. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Sets a field element to be the product of two others. Requires the inputs' magnitudes to be at most 8.
 *  The output magnitude is 1 (but not guaranteed to be normalized). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Sets a field element to be the square of another. Requires the input's magnitude to be at most 8.
 *  The output magnitude is 1 (but not guaranteed to be normalized). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** If a has a square root, it is computed in r and 1 is returned. If a does not
 *  have a square root, the root of its negation is computed and 0 is returned.
 *  The input's magnitude can be at most 8. The output magnitude is 1 (but not
 *  guaranteed to be normalized). The result in r will always be a square
 *  itself. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_sqrt</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Checks whether a field element is a quadratic residue. */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_quad_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Sets a field element to be the (modular) inverse of another. Requires the input's magnitude to be
 *  at most 8. The output magnitude is 1 (but not guaranteed to be normalized). */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_inv</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_inv_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Calculate the (modular) inverses of a batch of field elements. Requires the inputs' magnitudes to be
 *  at most 8. The output magnitudes are 1 (but not guaranteed to be normalized). The inputs and
 *  outputs must not overlap in memory. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_inv_all_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a field element to the storage type. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_to_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Convert a field element back from the storage type. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_from_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_storage_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** If flag is true, set *r equal to *a; otherwise leave it. Constant-time. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_FIELD_H */</comment>
</unit>
