<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/feebumper.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/coincontrol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/feebumper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/policy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/moneystr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/rbf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>

<comment type="line" format="doxygen">//! Check whether transaction has descendant in wallet or mempool, or has been</comment>
<comment type="line" format="doxygen">//! mined, or conflicts with a mined transaction. Return a feebumper::Result.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>feebumper</name><operator>::</operator><name>Result</name></name></type> <name>PreconditionChecks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CWallet</name><operator>&amp;</operator> <name>wallet</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CWalletTx</name><operator>&amp;</operator> <name>wtx</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>errors</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list>
<argument_list>{
    if <argument><expr><operator>(</operator><call><name><name>wallet</name><operator>.</operator><name>HasWalletSpend</name></name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <block>{
        <expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction has descendants in the wallet"</literal></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
    }</block>

    <block>{
        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasDescendantsInMempool</name><argument_list>(<argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><block>{
            <expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction has descendants in the mempool"</literal></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></if></if_stmt>
            <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
        }</block>
    }</expr></argument>

    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>GetDepthInMainChain</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <expr_stmt><expr><block>{
        <expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction has been mined, or is conflicted with a mined transaction"</literal></expr></argument>)</argument_list></call></expr>;</block></expr></expr_stmt></if></if_stmt></argument_list></decl></decl_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    }

    if <expr_stmt><expr><operator>(</operator><operator>!</operator><call><name>SignalsOptInRBF</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <block>{
        <expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction is not BIP 125 replaceable"</literal></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>wtx</name><operator>.</operator><name>mapValue</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"replaced_by_txid"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot bump transaction %s which was already bumped by transaction %s"</literal></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>wtx</name><operator>.</operator><name>mapValue</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="string">"replaced_by_txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check that original tx consists entirely of our inputs</comment>
    <comment type="line">// if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>IsAllFromMe</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><name>ISMINE_SPENDABLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction contains inputs that don't belong to this wallet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>


    <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
}

<comment type="line" format="doxygen">//! Check if the user provided a valid feeRate</comment>
static <function><type><name><name>feebumper</name><operator>::</operator><name>Result</name></name></type> <name>CheckFeeRate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CFeeRate</name><modifier>&amp;</modifier></type> <name>newFeerate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>maxTxSize</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>errors</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// check that fee rate is higher than mempool's minimum fee</comment>
    <comment type="line">// (no point in bumping fee if we know that the new tx won't be accepted to the mempool)</comment>
    <comment type="line">// This may occur if the user set FeeRate, TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,</comment>
    <comment type="line">// in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a</comment>
    <comment type="line">// moment earlier. In this case, we report an error to the user, who may adjust the fee.</comment>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>minMempoolFeeRate</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mempoolMinFee</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>newFeerate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>minMempoolFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(
            <argument><expr><literal type="string">"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- "</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>newFeerate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>minMempoolFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>new_total_fee</name> <init>= <expr><call><name><name>newFeerate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>incrementalRelayFee</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>relayIncrementalFee</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>WALLET_INCREMENTAL_RELAY_FEE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Given old total fee and transaction size, calculate the old feeRate</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>old_fee</name> <init>= <expr><call><name><name>wtx</name><operator>.</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>ISMINE_SPENDABLE</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>txSize</name> <init>= <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>nOldFeeRate</name><argument_list>(<argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>txSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// Min total fee is old fee + relay fee</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>minTotalFee</name> <init>= <expr><call><name><name>nOldFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>incrementalRelayFee</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>new_total_fee</name> <operator>&lt;</operator> <name>minTotalFee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Insufficient total fee %s, must be at least %s (oldFee %s + incrementalFee %s)"</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>new_total_fee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>minTotalFee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>nOldFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>incrementalRelayFee</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>requiredFee</name> <init>= <expr><call><name>GetRequiredFee</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>maxTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_total_fee</name> <operator>&lt;</operator> <name>requiredFee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Insufficient total fee (cannot be less than required fee %s)"</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>requiredFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check that in all cases the new fee doesn't violate maxTxFee</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>max_tx_fee</name> <init>= <expr><name><name>wallet</name><operator>.</operator><name>m_default_max_tx_fee</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>new_total_fee</name> <operator>&gt;</operator> <name>max_tx_fee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)"</literal></expr></argument>,
                            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>new_total_fee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>max_tx_fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CFeeRate</name></type> <name>EstimateFeeRate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>old_fee</name></decl></parameter>, <parameter><decl><type><name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Get the fee rate of the original transaction. This is calculated from</comment>
    <comment type="line">// the tx fee/vsize, so it may have been rounded down. Add 1 satoshi to the</comment>
    <comment type="line">// result.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>txSize</name> <init>= <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feerate</name><argument_list>(<argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>txSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>feerate</name> <operator>+=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The node has a configurable incremental relay fee. Increment the fee by</comment>
    <comment type="line">// the minimum of that and the wallet's conservative</comment>
    <comment type="line">// WALLET_INCREMENTAL_RELAY_FEE value to future proof against changes to</comment>
    <comment type="line">// network wide policy for incremental relay fee that our node may not be</comment>
    <comment type="line">// aware of. This ensures we're over the required relay fee rate</comment>
    <comment type="line">// (BIP 125 rule 4).  The replacement tx will be at least as large as the</comment>
    <comment type="line">// original tx, so the total fee will be greater (BIP 125 rule 3)</comment>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>node_incremental_relay_fee</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>relayIncrementalFee</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>wallet_incremental_relay_fee</name> <init>= <expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>WALLET_INCREMENTAL_RELAY_FEE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>feerate</name> <operator>+=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>node_incremental_relay_fee</name></expr></argument>, <argument><expr><name>wallet_incremental_relay_fee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Fee rate must also be at least the wallet's GetMinimumFeeRate</comment>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>min_feerate</name><argument_list>(<argument><expr><call><name>GetMinimumFeeRate</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>coin_control</name></expr></argument>, <comment type="block">/* feeCalc */</comment> <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="line">// Set the required fee rate for the replacement transaction in coin control.</comment>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>feerate</name></expr></argument>, <argument><expr><name>min_feerate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<namespace>namespace <name>feebumper</name> <block>{

<function><type><name>bool</name></type> <name>TransactionCanBeBumped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>*</modifier></type> <name>wtx</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>GetWalletTx</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>wtx</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>errors_dummy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>feebumper</name><operator>::</operator><name>Result</name></name></type> <name>res</name> <init>= <expr><call><name>PreconditionChecks</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><operator>*</operator><name>wtx</name></expr></argument>, <argument><expr><name>errors_dummy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>res</name> <operator>==</operator> <name><name>feebumper</name><operator>::</operator><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Result</name></type> <name>CreateTotalBumpTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CWallet</name><modifier>*</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>total_fee</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>errors</name></decl></parameter>,
                                  <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>old_fee</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>new_fee</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>new_fee</name> <operator>=</operator> <name>total_fee</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>wallet</name><operator>-&gt;</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Invalid or non-wallet transaction id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>INVALID_ADDRESS_OR_KEY</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><call><name>PreconditionChecks</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// figure out which output was change</comment>
    <comment type="line">// if there was no change output or multiple change outputs, fail</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nOutput</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>wallet</name><operator>-&gt;</operator><name>IsChange</name></name><argument_list>(<argument><expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nOutput</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction has multiple change outputs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>nOutput</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>nOutput</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction does not have a change output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Calculate the expected size of the new transaction.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>txSize</name> <init>= <expr><call><name>GetVirtualTransactionSize</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>maxNewTxSize</name> <init>= <expr><call><name>CalculateMaximumSignedTxSize</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>maxNewTxSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Transaction contains inputs that cannot be signed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>INVALID_ADDRESS_OR_KEY</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// calculate the old fee and fee-rate</comment>
    <expr_stmt><expr><name>old_fee</name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>ISMINE_SPENDABLE</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>nOldFeeRate</name><argument_list>(<argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>txSize</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="line">// The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to</comment>
    <comment type="line">// future proof against changes to network wide policy for incremental relay</comment>
    <comment type="line">// fee that our node may not be aware of.</comment>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>nodeIncrementalRelayFee</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>relayIncrementalFee</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>walletIncrementalRelayFee</name> <init>= <expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>WALLET_INCREMENTAL_RELAY_FEE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nodeIncrementalRelayFee</name> <operator>&gt;</operator> <name>walletIncrementalRelayFee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>walletIncrementalRelayFee</name> <operator>=</operator> <name>nodeIncrementalRelayFee</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CAmount</name></type> <name>minTotalFee</name> <init>= <expr><call><name><name>nOldFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>nodeIncrementalRelayFee</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>total_fee</name> <operator>&lt;</operator> <name>minTotalFee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)"</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>minTotalFee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>nOldFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>nodeIncrementalRelayFee</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>requiredFee</name> <init>= <expr><call><name>GetRequiredFee</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>, <argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>total_fee</name> <operator>&lt;</operator> <name>requiredFee</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Insufficient totalFee (cannot be less than required fee %s)"</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>requiredFee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>INVALID_PARAMETER</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check that in all cases the new fee doesn't violate maxTxFee</comment>
     <decl_stmt><decl><type><specifier>const</specifier> <name>CAmount</name></type> <name>max_tx_fee</name> <init>= <expr><name><name>wallet</name><operator>-&gt;</operator><name>m_default_max_tx_fee</name></name></expr></init></decl>;</decl_stmt>
     <if_stmt><if>if <condition>(<expr><name>new_fee</name> <operator>&gt;</operator> <name>max_tx_fee</name></expr>)</condition> <block>{<block_content>
         <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)"</literal></expr></argument>,
                               <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>new_fee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><name>max_tx_fee</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
     </block_content>}</block></if></if_stmt>

    <comment type="line">// check that fee rate is higher than mempool's minimum fee</comment>
    <comment type="line">// (no point in bumping fee if we know that the new tx won't be accepted to the mempool)</comment>
    <comment type="line">// This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,</comment>
    <comment type="line">// in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a</comment>
    <comment type="line">// moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.</comment>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>minMempoolFeeRate</name> <init>= <expr><call><name><name>wallet</name><operator>-&gt;</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mempoolMinFee</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>nNewFeeRate</name> <init>= <expr><call><name>CFeeRate</name><argument_list>(<argument><expr><name>total_fee</name></expr></argument>, <argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>nNewFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>minMempoolFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(
            <argument><expr><literal type="string">"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- "</literal>
            <literal type="string">"the totalFee value should be at least %s to add transaction"</literal></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>nNewFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>minMempoolFeeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>FormatMoney</name><argument_list>(<argument><expr><call><name><name>minMempoolFeeRate</name><operator>.</operator><name>GetFee</name></name><argument_list>(<argument><expr><name>maxNewTxSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Now modify the output to increase the fee.</comment>
    <comment type="line">// If the output is not large enough to pay the fee, fail.</comment>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nDelta</name> <init>= <expr><name>new_fee</name> <operator>-</operator> <name>old_fee</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nDelta</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mtx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>{<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>}</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTxOut</name><modifier>*</modifier></type> <name>poutput</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>mtx</name><operator>.</operator><name>vout</name><index>[<expr><name>nOutput</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>poutput</name><operator>-&gt;</operator><name>nValue</name></name> <operator>&lt;</operator> <name>nDelta</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Change output is too small to bump the fee"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If the output would become dust, discard it (converting the dust to fee)</comment>
    <expr_stmt><expr><name><name>poutput</name><operator>-&gt;</operator><name>nValue</name></name> <operator>-=</operator> <name>nDelta</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>poutput</name><operator>-&gt;</operator><name>nValue</name></name> <operator>&lt;=</operator> <call><name>GetDustThreshold</name><argument_list>(<argument><expr><operator>*</operator><name>poutput</name></expr></argument>, <argument><expr><call><name>GetDiscardRate</name><argument_list>(<argument><expr><operator>*</operator><name>wallet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>wallet</name><operator>-&gt;</operator><name>WalletLogPrintf</name></name><argument_list>(<argument><expr><literal type="string">"Bumping fee and discarding dust output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>new_fee</name> <operator>+=</operator> <name><name>poutput</name><operator>-&gt;</operator><name>nValue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mtx</name><operator>.</operator><name>vout</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>mtx</name><operator>.</operator><name>vout</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>nOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Mark new tx not replaceable, if requested.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name><operator>.</operator><name>get_value_or</name></name><argument_list>(<argument><expr><name><name>wallet</name><operator>-&gt;</operator><name>m_signal_rbf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>input</name> <operator>:</operator> <name><name>mtx</name><operator>.</operator><name>vin</name></name></expr></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>nSequence</name></name> <operator>&lt;</operator> <literal type="number">0xfffffffe</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>input</name><operator>.</operator><name>nSequence</name></name> <operator>=</operator> <literal type="number">0xfffffffe</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Result</name></type> <name>CreateRateBumpTransaction</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinControl</name><modifier>&amp;</modifier></type> <name>coin_control</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>errors</name></decl></parameter>,
                                 <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>old_fee</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>new_fee</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>mtx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// We are going to modify coin control later, copy to re-use</comment>
    <decl_stmt><decl><type><name>CCoinControl</name></type> <name>new_coin_control</name><argument_list>(<argument><expr><name>coin_control</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Invalid or non-wallet transaction id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>INVALID_ADDRESS_OR_KEY</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CWalletTx</name><modifier>&amp;</modifier></type> <name>wtx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><call><name>PreconditionChecks</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Fill in recipients(and preserve a single change key if there is one)</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CRecipient</name></expr></argument>&gt;</argument_list></name></type> <name>recipients</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>output</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vout</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>IsChange</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CRecipient</name></type> <name>recipient</name> <init>= <expr><block>{<expr><name><name>output</name><operator>.</operator><name>scriptPubKey</name></name></expr>, <expr><name><name>output</name><operator>.</operator><name>nValue</name></name></expr>, <expr><literal type="boolean">false</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>recipients</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>change_dest</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ExtractDestination</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>change_dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>new_coin_control</name><operator>.</operator><name>destChange</name></name> <operator>=</operator> <name>change_dest</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>old_fee</name> <operator>=</operator> <call><name><name>wtx</name><operator>.</operator><name>GetDebit</name></name><argument_list>(<argument><expr><name>ISMINE_SPENDABLE</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>GetValueOut</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>coin_control</name><operator>.</operator><name>m_feerate</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// The user provided a feeRate argument.</comment>
        <comment type="line">// We calculate this here to avoid compiler warning on the cs_wallet lock</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>maxTxSize</name> <init>= <expr><call><name>CalculateMaximumSignedTxSize</name><argument_list>(<argument><expr><operator>*</operator><name><name>wtx</name><operator>.</operator><name>tx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wallet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Result</name></type> <name>res</name> <init>= <expr><call><name>CheckFeeRate</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><operator>*</operator><name><name>new_coin_control</name><operator>.</operator><name>m_feerate</name></name></expr></argument>, <argument><expr><name>maxTxSize</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// The user did not provide a feeRate argument</comment>
        <expr_stmt><expr><name><name>new_coin_control</name><operator>.</operator><name>m_feerate</name></name> <operator>=</operator> <call><name>EstimateFeeRate</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>wtx</name></expr></argument>, <argument><expr><name>old_fee</name></expr></argument>, <argument><expr><name>new_coin_control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Fill in required inputs we are double-spending(all of them)</comment>
    <comment type="line">// N.B.: bip125 doesn't require all the inputs in the replaced transaction to be</comment>
    <comment type="line">// used in the replacement transaction, but it's very important for wallets to make</comment>
    <comment type="line">// sure that happens. If not, it would be possible to bump a transaction A twice to</comment>
    <comment type="line">// A2 and A3 where A2 and A3 don't conflict (or alternatively bump A to A2 and A2</comment>
    <comment type="line">// to A3 where A and A3 don't conflict). If both later get confirmed then the sender</comment>
    <comment type="line">// has accidentally double paid.</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>inputs</name> <range>: <expr><name><name>wtx</name><operator>.</operator><name>tx</name><operator>-&gt;</operator><name>vin</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>new_coin_control</name><operator>.</operator><name>Select</name></name><argument_list>(<argument><expr><call><name>COutPoint</name><argument_list>(<argument><expr><name><name>inputs</name><operator>.</operator><name>prevout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>new_coin_control</name><operator>.</operator><name>fAllowOtherInputs</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <comment type="line">// We cannot source new unconfirmed inputs(bip125 rule 2)</comment>
    <expr_stmt><expr><name><name>new_coin_control</name><operator>.</operator><name>m_min_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx_new</name> <init>= <expr><call><name>MakeTransactionRef</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>fee_ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>change_pos_in_out</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// No requested location for change</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>fail_reason</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>CreateTransaction</name></name><argument_list>(<argument><expr><operator>*</operator><name>locked_chain</name></expr></argument>, <argument><expr><name>recipients</name></expr></argument>, <argument><expr><name>tx_new</name></expr></argument>, <argument><expr><name>fee_ret</name></expr></argument>, <argument><expr><name>change_pos_in_out</name></expr></argument>, <argument><expr><name>fail_reason</name></expr></argument>, <argument><expr><name>new_coin_control</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Unable to create transaction: "</literal> <operator>+</operator> <name>fail_reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>WALLET_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Write back new fee if successful</comment>
    <expr_stmt><expr><name>new_fee</name> <operator>=</operator> <name>fee_ret</name></expr>;</expr_stmt>

    <comment type="line">// Write back transaction</comment>
    <expr_stmt><expr><name>mtx</name> <operator>=</operator> <call><name>CMutableTransaction</name><argument_list>(<argument><expr><operator>*</operator><name>tx_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Mark new tx not replaceable, if requested.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>coin_control</name><operator>.</operator><name>m_signal_bip125_rbf</name><operator>.</operator><name>get_value_or</name></name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>m_signal_rbf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>input</name> <operator>:</operator> <name><name>mtx</name><operator>.</operator><name>vin</name></name></expr></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>.</operator><name>nSequence</name></name> <operator>&lt;</operator> <literal type="number">0xfffffffe</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>input</name><operator>.</operator><name>nSequence</name></name> <operator>=</operator> <literal type="number">0xfffffffe</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>SignTransaction</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>mtx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>wallet</name><operator>.</operator><name>SignTransaction</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Result</name></type> <name>CommitTransaction</name><parameter_list>(<parameter><decl><type><name>CWallet</name><modifier>&amp;</modifier></type> <name>wallet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>txid</name></decl></parameter>, <parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;&amp;</modifier></type> <name>mtx</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>errors</name></decl></parameter>, <parameter><decl><type><name>uint256</name><modifier>&amp;</modifier></type> <name>bumped_txid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>locked_chain</name> <init>= <expr><call><name><name>wallet</name><operator>.</operator><name>chain</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>errors</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>MISC_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><ternary><condition><expr><call><name><name>txid</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>txid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Invalid or non-wallet transaction id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>Result</name><operator>::</operator><name>MISC_ERROR</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>CWalletTx</name><modifier>&amp;</modifier></type> <name>oldWtx</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// make sure the transaction still has no descendants and hasn't been mined in the meantime</comment>
    <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><call><name>PreconditionChecks</name><argument_list>(<argument><expr><name>wallet</name></expr></argument>, <argument><expr><name>oldWtx</name></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name><name>Result</name><operator>::</operator><name>OK</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// commit/broadcast the tx</comment>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>tx</name> <init>= <expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mapValue_t</name></type> <name>mapValue</name> <init>= <expr><name><name>oldWtx</name><operator>.</operator><name>mapValue</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mapValue</name><index>[<expr><literal type="string">"replaces_txid"</literal></expr>]</index></name> <operator>=</operator> <call><name><name>oldWtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>wallet</name><operator>.</operator><name>CommitTransaction</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>mapValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>oldWtx</name><operator>.</operator><name>vOrderForm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// mark the original tx as bumped</comment>
    <expr_stmt><expr><name>bumped_txid</name> <operator>=</operator> <call><name><name>tx</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>wallet</name><operator>.</operator><name>MarkReplaced</name></name><argument_list>(<argument><expr><call><name><name>oldWtx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bumped_txid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// TODO: see if JSON-RPC has a standard way of returning a response</comment>
        <comment type="line">// along with an exception. It would be good to return information about</comment>
        <comment type="line">// wtxBumped to the caller even if marking the original transaction</comment>
        <comment type="line">// replaced does not succeed for some reason.</comment>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Created new bumpfee transaction but could not mark the original transaction as replaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>Result</name><operator>::</operator><name>OK</name></name></expr>;</return>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace feebumper</comment>
</unit>
