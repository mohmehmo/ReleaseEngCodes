<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/key.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Copyright (c) 2017 The Zcash developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_KEY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_KEY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/allocators/secure.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>


<comment type="block" format="doxygen">/**
 * secure_allocator is defined in allocators.h
 * CPrivKey is a serialized private key, with all parameters included
 * (SIZE bytes)
 */</comment>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>secure_allocator</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>CPrivKey</name></expr>;</expr_stmt></typedef>

<comment type="block" format="doxygen">/** An encapsulated private key. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CKey</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/**
     * secp256k1:
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>SIZE</name>            <init>= <expr><literal type="number">279</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>COMPRESSED_SIZE</name> <init>= <expr><literal type="number">214</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * see www.keylength.com
     * script supports up to 75 for single byte push
     */</comment>
    <expr_stmt><expr><call><name>static_assert</name><argument_list>(
        <argument><expr><name>SIZE</name> <operator>&gt;=</operator> <name>COMPRESSED_SIZE</name></expr></argument>,
        <argument><expr><literal type="string">"COMPRESSED_SIZE is larger than SIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>private</name>:</label>
    <comment type="line" format="doxygen">//! Whether this private key is valid. We check for correctness when modifying the key</comment>
    <comment type="line" format="doxygen">//! data, so fValid should always correspond to the actual state.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fValid</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Whether the public key corresponding to this private key is (to be) compressed.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fCompressed</name></decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! The actual byte data</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>, <argument><expr><name><name>secure_allocator</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>keydata</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Check whether the 32-byte array pointed to by vch is valid keydata.</comment>
    <function_decl><type><name>bool</name> <specifier>static</specifier></type> <name>Check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>vch</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
    <comment type="line" format="doxygen">//! Construct an invalid private key.</comment>
    <expr_stmt><expr><call><name>CKey</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>fValid</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>fCompressed</name><argument_list>(<argument>false</argument>)</argument_list></macro>
    <expr><block>{
        <comment type="line">// Important: vch must be 32 bytes in length to not break serialization</comment>
        <expr><call><name><name>keydata</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;
    }</block>

    <name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CKey</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CKey</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>fCompressed</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>fCompressed</name></name> <operator>&amp;&amp;</operator>
            <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Initialize using begin and end iterators to byte data.</comment>
    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
    <name>void</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>pbegin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>pend</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fCompressedIn</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size_t</name><argument_list>(<argument><expr><name>pend</name> <operator>-</operator> <name>pbegin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>keydata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>fValid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pbegin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pbegin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>keydata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>fValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>fCompressed</name> <operator>=</operator> <name>fCompressedIn</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>fValid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="line" format="doxygen">//! Simple read-only vector-like interface.</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>fValid</name> <operator>?</operator> <call><name><name>keydata</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name><name>keydata</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Check whether this private key is valid.</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>IsValid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fValid</name></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Check whether the public key corresponding to this private key is (to be) compressed.</comment>
    <expr_stmt><expr><name>bool</name> <macro><name>IsCompressed</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fCompressed</name></expr>;</return> }</block></expr></expr_stmt>

    <comment type="line" format="doxygen">//! Generate a new private key using a cryptographic PRNG.</comment>
    <function_decl><type><name>void</name></type> <name>MakeNewKey</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fCompressed</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line" format="doxygen">//! Negate private key</comment>
    <function_decl><type><name>bool</name></type> <name>Negate</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="doxygen">/**
     * Convert the private key to a CPrivKey (serialized OpenSSL private key data).
     * This is expensive.
     */</comment>
    <expr_stmt><expr><name>CPrivKey</name> <macro><name>GetPrivKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Compute the public key from a private key.
     * This is expensive.
     */</comment>
    <expr_stmt><expr><name>CPubKey</name> <macro><name>GetPubKey</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Create a DER-serialized signature.
     * The test_case parameter tweaks the deterministic nonce.
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>Sign</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>hash</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchSig</name></expr></argument>, <argument><expr><name>bool</name> <name>grind</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><name>uint32_t</name> <name>test_case</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Create a compact signature (65 bytes), which allows reconstructing the used public key.
     * The format is one header byte, followed by two times 32 bytes for the serialized r and s values.
     * The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,
     *                  0x1D = second key with even y, 0x1E = second key with odd y,
     *                  add 0x04 for compressed keys.
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>SignCompact</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint256</name><operator>&amp;</operator> <name>hash</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vchSig</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Derive BIP32 child key.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>Derive</name><argument_list>(<argument><expr><name>CKey</name><operator>&amp;</operator> <name>keyChild</name></expr></argument>, <argument><expr><name>ChainCode</name> <operator>&amp;</operator><name>ccChild</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>nChild</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>ChainCode</name><operator>&amp;</operator> <name>cc</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Verify thoroughly whether a private key and a public key match.
     * This is done using a different mechanism than just regenerating it.
     */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>VerifyPubKey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CPubKey</name><operator>&amp;</operator> <name>vchPubKey</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <comment type="line" format="doxygen">//! Load private key and check that public key matches.</comment>
    <function_decl><type><name>bool</name></type> <name>Load</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPrivKey</name><modifier>&amp;</modifier></type> <name>privkey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>vchPubKey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fSkipCheck</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>CExtKey</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>nDepth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>vchFingerprint</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nChild</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ChainCode</name></type> <name>chaincode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CExtKey</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CExtKey</name><operator>&amp;</operator> <name>b</name><operator>)</operator>
    <block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>nDepth</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nDepth</name></name> <operator>&amp;&amp;</operator>
            <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>.</operator><name>vchFingerprint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>.</operator><name>vchFingerprint</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vchFingerprint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
            <name><name>a</name><operator>.</operator><name>nChild</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>nChild</name></name> <operator>&amp;&amp;</operator>
            <name><name>a</name><operator>.</operator><name>chaincode</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>chaincode</name></name> <operator>&amp;&amp;</operator>
            <name><name>a</name><operator>.</operator><name>key</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>key</name></name></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>Encode</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <name><name>code</name><index>[<expr><name>BIP32_EXTKEY_SIZE</name></expr>]</index></name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>Decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>code</name><index>[<expr><name>BIP32_EXTKEY_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>bool</name></type> <name>Derive</name><argument_list>(<argument><expr><name>CExtKey</name><operator>&amp;</operator> <name>out</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>nChild</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
    <expr_stmt><expr><name>CExtPubKey</name> <macro><name>Neuter</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <function_decl><type><name>void</name></type> <name>SetSeed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nSeedLen</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<comment type="block" format="doxygen">/** Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. */</comment>
<function_decl><type><name>void</name></type> <name>ECC_Start</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Deinitialize the elliptic curve support. No-op if ECC_Start wasn't called first. */</comment>
<function_decl><type><name>void</name></type> <name>ECC_Stop</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Check that required EC support is available at runtime. */</comment>
<function_decl><type><name>bool</name></type> <name>ECC_InitSanityCheck</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_KEY_H</comment>
</unit>
