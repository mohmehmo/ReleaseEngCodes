<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/logging/timer.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_LOGGING_TIMER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_LOGGING_TIMER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;logging.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/macros.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><name>namespace</name></type> <name>BCLog</name> <block>{<block_content>

<comment type="line" format="doxygen">//! RAII-style object that outputs timing information to logs.</comment>
<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>TimeType</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Timer</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="line" format="doxygen">//! If log_category is left as the default, end_msg will log unconditionally</comment>
    <comment type="line" format="doxygen">//! (instead of being filtered by category).</comment>
    <macro><name>Timer</name><argument_list>(
        <argument>std::string prefix</argument>,
        <argument>std::string end_msg</argument>,
        <argument>BCLog::LogFlags log_category = BCLog::LogFlags::ALL</argument>)</argument_list></macro> :
            <expr_stmt><expr><call><name>m_prefix</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <expr><call><name>m_title</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name>move</name><argument_list>(<argument><expr><name>end_msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator>
            <macro><name>m_log_category</name><argument_list>(<argument>log_category</argument>)</argument_list></macro>
    <expr><block>{
        <expr><call><name><name>this</name><operator>-&gt;</operator><name>Log</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s started"</literal></expr></argument>, <argument><expr><name>m_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr><name>m_start_t</name> <operator>=</operator> <call><name><name>GetTime</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;
    }</block>

    <operator>~</operator><macro><name>Timer</name><argument_list>()</argument_list></macro>
    <block>{
        <expr><call><name><name>this</name><operator>-&gt;</operator><name>Log</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s completed"</literal></expr></argument>, <argument><expr><name>m_title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
    }</block>

    <name>void</name> <macro><name>Log</name><argument_list>(<argument>const std::string&amp; msg</argument>)</argument_list></macro>
    <block>{
        <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>full_msg</name> <operator>=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>LogMsg</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;

        <if_stmt><if>if <condition>(<expr><name>m_log_category</name> <operator>==</operator> <name>BCLog</name><operator>::</operator><name>LogFlags</name><operator>::</operator><name>ALL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>full_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content> else <block>{<block_content>
            <expr_stmt><expr><call><name>LogPrint</name><argument_list>(<argument><expr><name>m_log_category</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>full_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/>}</block_content>
    }

    std::string LogMsg(const std::string&amp; msg</block></block></if></if_stmt>)
    <block>{
        <expr><specifier>const</specifier> <name>auto</name> <name>end_time</name> <operator>=</operator> <call><name><name>GetTime</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call> <operator>-</operator> <name>m_start_t</name></expr>;
        <if_stmt><if>if <condition>(<expr><call><name><name>m_start_t</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name>m_prefix</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt/>}</block_content>

        std::string units = ""</block><empty_stmt>;</empty_stmt></if></if_stmt>
        <name>float</name> <name>divisor</name> <operator>=</operator> <literal type="number">1</literal></block></block></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>TimeType</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <literal type="string">"Î¼s"</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>TimeType</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>milliseconds</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <literal type="string">"ms"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1000.</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt;<argument><expr><name>TimeType</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>units</name> <operator>=</operator> <literal type="string">"s"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1000.</literal> <operator>*</operator> <literal type="number">1000.</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>time_ms</name> <init>= <expr><call><name><name>end_time</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>divisor</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s: %s (%.2f%s)"</literal></expr></argument>, <argument><expr><name>m_prefix</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>time_ms</name></expr></argument>, <argument><expr><name>units</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

<label><name>private</name>:</label>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name> <name>m_start_t</name><block>{}</block></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Log prefix; usually the name of the function this was created in.</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>m_prefix</name><block>{}</block></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! A descriptive message of what is being timed.</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>m_title</name><block>{}</block></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Forwarded on to LogPrint if specified - has the effect of only</comment>
    <comment type="line" format="doxygen">//! outputing the timing log when a particular debug= category is specified.</comment>
    <expr_stmt><expr><specifier>const</specifier> <name>BCLog</name><operator>::</operator><name>LogFlags</name> <name>m_log_category</name><block>{}</block></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

} <comment type="line">// namespace BCLog</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TIME_MICROS</name><parameter_list>(<parameter><type><name>end_msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BCLog::Timer&lt;std::chrono::microseconds&gt; PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TIME_MILLIS</name><parameter_list>(<parameter><type><name>end_msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BCLog::Timer&lt;std::chrono::milliseconds&gt; PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_TIME_SECONDS</name><parameter_list>(<parameter><type><name>end_msg</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>BCLog::Timer&lt;std::chrono::seconds&gt; PASTE2(logging_timer, __COUNTER__)(__func__, end_msg, ## __VA_ARGS__)</cpp:value></cpp:define>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_LOGGING_TIMER_H</comment>
</unit>
