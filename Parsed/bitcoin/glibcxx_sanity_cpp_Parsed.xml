<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/compat/glibcxx_sanity.cpp"><comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>

<namespace>namespace
<block>{
<comment type="line">// trigger: use ctype&lt;char&gt;::widen to trigger ctype&lt;char&gt;::_M_widen_init().</comment>
<comment type="line">// test: convert a char from narrow to wide and back. Verify that the result</comment>
<comment type="line">//   matches the original.</comment>
<function><type><name>bool</name></type> <name>sanity_test_widen</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>testchar</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ctype</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>test</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>use_facet</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>ctype</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>locale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>test</name><operator>.</operator><name>narrow</name></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>widen</name></name><argument_list>(<argument><expr><name>testchar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>testchar</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// trigger: use list::push_back and list::pop_back to trigger _M_hook and</comment>
<comment type="line">//   _M_unhook.</comment>
<comment type="line">// test: Push a sequence of integers into a list. Pop them off and verify that</comment>
<comment type="line">//   they match the original sequence.</comment>
<function><type><name>bool</name></type> <name>sanity_test_list</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>list</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>test</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name><name>test</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace</comment>

<comment type="line">// trigger: string::at(x) on an empty string to trigger __throw_out_of_range_fmt.</comment>
<comment type="line">// test: force std::string to throw an out_of_range exception. Verify that</comment>
<comment type="line">//   it's caught correctly.</comment>
<function><type><name>bool</name></type> <name>sanity_test_range_fmt</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>test</name></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>out_of_range</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>glibcxx_sanity_test</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sanity_test_widen</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sanity_test_list</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>sanity_test_range_fmt</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
