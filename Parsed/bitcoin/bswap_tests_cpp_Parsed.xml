<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/bswap_tests.cpp"><comment type="line">// Copyright (c) 2016-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compat/byteswap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>bswap_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bswap_tests</argument>)</argument_list></macro>
<block>{<block_content>
	<comment type="line">// Sibling in bitcoin/src/qt/test/compattests.cpp</comment>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>u1</name> <init>= <expr><literal type="number">0x1234</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>u2</name> <init>= <expr><literal type="number">0x56789abc</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>u3</name> <init>= <expr><literal type="number">0xdef0123456789abc</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type> <name>e1</name> <init>= <expr><literal type="number">0x3412</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>e2</name> <init>= <expr><literal type="number">0xbc9a7856</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>e3</name> <init>= <expr><literal type="number">0xbc9a78563412f0de</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>bswap_16</name><argument_list>(<argument><expr><name>u1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>e1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>bswap_32</name><argument_list>(<argument><expr><name>u2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>bswap_64</name><argument_list>(<argument><expr><name>u3</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>e3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
