<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/random_tests.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>random_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>osrandom_tests</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>Random_SanityCheck</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>fastrandom_tests</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Check that deterministic FastRandomContexts are deterministic</comment>
    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx1</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx2</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>uint64_t</name><argument_list>{<argument><expr><literal type="number">10393729187455219830U</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>GetRandInt</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>int</name><argument_list>{<argument><expr><literal type="number">769702006</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>ctx2</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>ctx2</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>ctx2</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx2</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>ctx2</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx1</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>ctx2</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that a nondeterministic ones are not</comment>
    <expr_stmt><expr><name>g_mock_deterministic_tests</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetRand</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>uint64_t</name><argument_list>{<argument><expr><literal type="number">10393729187455219830U</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>GetRandInt</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>int</name><argument_list>{<argument><expr><literal type="number">769702006</literal></expr></argument>}</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx3</name></decl>, <decl><type ref="prev"/><name>ctx4</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx3</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>ctx4</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// extremely unlikely to be equal</comment>
    </block_content>}</block>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx3</name></decl>, <decl><type ref="prev"/><name>ctx4</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx3</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>ctx4</name><operator>.</operator><name>rand256</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx3</name></decl>, <decl><type ref="prev"/><name>ctx4</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ctx3</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>ctx4</name><operator>.</operator><name>randbytes</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>fastrandom_randbits</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx2</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bits</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><operator>++</operator><name>bits</name></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>rangebits</name> <init>= <expr><call><name><name>ctx1</name><operator>.</operator><name>randbits</name></name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>rangebits</name> <operator>&gt;&gt;</operator> <name>bits</name></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>range</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>bits</name> <operator>|</operator> <name>rangebits</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>rand</name> <init>= <expr><call><name><name>ctx2</name><operator>.</operator><name>randrange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>rand</name> <operator>&lt;</operator> <name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<comment type="block" format="doxygen">/** Does-it-compile test for compatibility with standard C++11 RNG interface. */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>stdrandom_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>distribution</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>distribution</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>test</name><argument_list>{<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>shuffle</name></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>Shuffle</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>test</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

</block_content>}</block>

<comment type="block" format="doxygen">/** Test that Shuffle reaches every permutation with equal probability. */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>shuffle_stat_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name><name>counts</name><index>[<expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>Shuffle</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>begin</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>end</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <literal type="number">25</literal> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">125</literal> <operator>+</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <literal type="number">625</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>counts</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>chi_score</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>i</name> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i2</name> <init>= <expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i3</name> <init>= <expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">25</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i4</name> <init>= <expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">125</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>i5</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">625</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>i1</name> <operator>==</operator> <name>i2</name> <operator>||</operator> <name>i1</name> <operator>==</operator> <name>i3</name> <operator>||</operator> <name>i1</name> <operator>==</operator> <name>i4</name> <operator>||</operator> <name>i1</name> <operator>==</operator> <name>i5</name> <operator>||</operator> <name>i2</name> <operator>==</operator> <name>i3</name> <operator>||</operator> <name>i2</name> <operator>==</operator> <name>i4</name> <operator>||</operator> <name>i2</name> <operator>==</operator> <name>i5</name> <operator>||</operator> <name>i3</name> <operator>==</operator> <name>i4</name> <operator>||</operator> <name>i3</name> <operator>==</operator> <name>i5</name> <operator>||</operator> <name>i4</name> <operator>==</operator> <name>i5</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>chi_score</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>count</name> <operator>-</operator> <literal type="number">100.0</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>count</name> <operator>-</operator> <literal type="number">100.0</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">100.0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>count</name> <operator>&gt;</operator> <literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>count</name> <operator>&lt;</operator> <literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>chi_score</name> <operator>&gt;</operator> <literal type="number">58.1411</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 99.9999% confidence interval</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>chi_score</name> <operator>&lt;</operator> <literal type="number">210.275</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">12000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
