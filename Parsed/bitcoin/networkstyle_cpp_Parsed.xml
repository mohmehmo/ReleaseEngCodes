<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/networkstyle.cpp"><comment type="line">// Copyright (c) 2014-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/networkstyle.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/guiconstants.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparamsbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>networkId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>appName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iconColorHueShift</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iconColorSaturationReduction</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>network_styles</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"main"</literal></expr>, <expr><name>QAPP_APP_NAME_DEFAULT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"test"</literal></expr>, <expr><name>QAPP_APP_NAME_TESTNET</name></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">30</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"regtest"</literal></expr>, <expr><name>QAPP_APP_NAME_REGTEST</name></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">30</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name>network_styles_count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>network_styles</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>network_styles</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<comment type="line">// titleAddText needs to be const char* for tr()</comment>
<constructor><name><name>NetworkStyle</name><operator>::</operator><name>NetworkStyle</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>_appName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>iconColorHueShift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>iconColorSaturationReduction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>_titleAddText</name></decl></parameter>)</parameter_list><member_init_list>:
    <call><name>appName</name><argument_list>(<argument><expr><name>_appName</name></expr></argument>)</argument_list></call>,
    <call><name>titleAddText</name><argument_list>(<argument><expr><call><name><name>qApp</name><operator>-&gt;</operator><name>translate</name></name><argument_list>(<argument><expr><literal type="string">"SplashScreen"</literal></expr></argument>, <argument><expr><name>_titleAddText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <comment type="line">// load pixmap</comment>
    <decl_stmt><decl><type><name>QPixmap</name></type> <name>pixmap</name><argument_list>(<argument><expr><literal type="string">":/icons/bitcoin"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>iconColorHueShift</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iconColorSaturationReduction</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// generate QImage from QPixmap</comment>
        <decl_stmt><decl><type><name>QImage</name></type> <name>img</name> <init>= <expr><call><name><name>pixmap</name><operator>.</operator><name>toImage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

        <comment type="line">// traverse though lines</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;</operator><call><name><name>img</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>QRgb</name> <modifier>*</modifier></type><name>scL</name> <init>= <expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt; <argument><expr><name>QRgb</name> <operator>*</operator></expr></argument>&gt;</argument_list><argument_list>( <argument><expr><call><name><name>img</name><operator>.</operator><name>scanLine</name></name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></cast></expr></init></decl>;</decl_stmt>

            <comment type="line">// loop through pixels</comment>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><call><name><name>img</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// preserve alpha because QColor::getHsl doesn't return the alpha value</comment>
                <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>qAlpha</name><argument_list>(<argument><expr><name><name>scL</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>QColor</name></type> <name>col</name><argument_list>(<argument><expr><name><name>scL</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>

                <comment type="line">// get hue value</comment>
                <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>getHsl</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// rotate color on RGB color circle</comment>
                <comment type="line">// 70Â° should end up with the typical "testnet" green</comment>
                <expr_stmt><expr><name>h</name><operator>+=</operator><name>iconColorHueShift</name></expr>;</expr_stmt>

                <comment type="line">// change saturation value</comment>
                <if_stmt><if>if<condition>(<expr><name>s</name><operator>&gt;</operator><name>iconColorSaturationReduction</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>s</name> <operator>-=</operator> <name>iconColorSaturationReduction</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>setHsl</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// set the pixel</comment>
                <expr_stmt><expr><name><name>scL</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name><name>col</name><operator>.</operator><name>rgba</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">//convert back to QPixmap</comment>
        <expr_stmt><expr><call><name><name>pixmap</name><operator>.</operator><name>convertFromImage</name></name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>appIcon</name>             <operator>=</operator> <call><name>QIcon</name><argument_list>(<argument><expr><name>pixmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>trayAndWindowIcon</name>   <operator>=</operator> <call><name>QIcon</name><argument_list>(<argument><expr><call><name><name>pixmap</name><operator>.</operator><name>scaled</name></name><argument_list>(<argument><expr><call><name>QSize</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>,<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><specifier>const</specifier> <name>NetworkStyle</name><modifier>*</modifier></type> <name><name>NetworkStyle</name><operator>::</operator><name>instantiate</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>networkId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>titleAddText</name> <init>= <expr><ternary><condition><expr><name>networkId</name> <operator>==</operator> <name><name>CBaseChainParams</name><operator>::</operator><name>MAIN</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><name>networkId</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>network_styles_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>networkId</name> <operator>==</operator> <name><name>network_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>networkId</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>NetworkStyle</name><argument_list>(
                    <argument><expr><name><name>network_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>appName</name></expr></argument>,
                    <argument><expr><name><name>network_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>iconColorHueShift</name></expr></argument>,
                    <argument><expr><name><name>network_styles</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>iconColorSaturationReduction</name></expr></argument>,
                    <argument><expr><call><name><name>titleAddText</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>
</unit>
