<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/univalue/lib/univalue_get.cpp"><comment type="line">// Copyright 2014 BitPay Inc.</comment>
<comment type="line">// Copyright 2015 Bitcoin Core Developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"univalue.h"</cpp:file></cpp:include>

<namespace>namespace
<block>{
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParsePrechecks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// No empty string allowed</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>json_isspace</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>json_isspace</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// No padding allowed</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// No embedded NUL characters allowed</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ParseInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParsePrechecks</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// strtol will not set errno if valid</comment>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>n</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line">// Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow</comment>
    <comment type="line">// we still have to check that the returned value is within the range of an *int32_t*. On 64-bit</comment>
    <comment type="line">// platforms the size of these types may be different.</comment>
    <return>return <expr><name>endp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator>
        <name>n</name> <operator>&gt;=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <name>n</name> <operator>&lt;=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ParseInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParsePrechecks</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">// strtoll will not set errno if valid</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line">// Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow</comment>
    <comment type="line">// we still have to check that the returned value is within the range of an *int64_t*.</comment>
    <return>return <expr><name>endp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator>
        <name>n</name> <operator>&gt;=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>min</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <name>n</name> <operator>&lt;=</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ParseDouble</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParsePrechecks</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// No hexadecimal floats allowed</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>istringstream</name></name></type> <name>text</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>imbue</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>locale</name><operator>::</operator><name>classic</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>text</name> <operator>&gt;&gt;</operator> <name>result</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><call><name><name>text</name><operator>.</operator><name>eof</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>text</name><operator>.</operator><name>fail</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
}</block></namespace>

<function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>getKeys</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an object as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>UniValue</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>getValues</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name> <operator>&amp;&amp;</operator> <name>typ</name> <operator>!=</operator> <name>VARR</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an object or array as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>values</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>UniValue</name><operator>::</operator><name>get_bool</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VBOOL</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not a boolean as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><call><name>getBool</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>get_str</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VSTR</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not a string as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><call><name>getValStr</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name><name>UniValue</name><operator>::</operator><name>get_int</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VNUM</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an integer as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>retval</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseInt32</name><argument_list>(<argument><expr><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON integer out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name><name>UniValue</name><operator>::</operator><name>get_int64</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VNUM</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an integer as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>retval</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseInt64</name><argument_list>(<argument><expr><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON integer out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name><name>UniValue</name><operator>::</operator><name>get_real</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VNUM</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not a number as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>retval</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseDouble</name><argument_list>(<argument><expr><call><name>getValStr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>retval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON double out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>get_obj</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VOBJ</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an object as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name><name>UniValue</name><operator>::</operator><name>get_array</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>!=</operator> <name>VARR</name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"JSON value is not an array as expected"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

</unit>
