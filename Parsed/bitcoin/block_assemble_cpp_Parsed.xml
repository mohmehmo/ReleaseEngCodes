<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/bench/block_assemble.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bench/bench.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/sha256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AssembleBlock</name><parameter_list>(<parameter><decl><type><name><name>benchmark</name><operator>::</operator><name>State</name></name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>op_true</name><argument_list>{<argument><expr><name>OP_TRUE</name></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>witness</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>witness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>op_true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>witness_program</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>op_true</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>op_true</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>witness_program</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CScript</name></type> <name>SCRIPT_PUB</name><argument_list>{<argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>OP_0</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <macro><name>std</name></macro><name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></name><block>{<expr><call><name><name>witness_program</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>, <macro><name>witness_program</name></macro><expr><operator>.</operator><macro><name>end</name><argument_list>()</argument_list></macro></expr>}</block></expr></argument>}</argument_list></decl>;</decl_stmt>

    <comment type="line">// Collect some loose transactions that spend the coinbases of our mined blocks</comment>
    <decl_stmt><decl><type><specifier>constexpr</specifier> <name>size_t</name></type> <name>NUM_BLOCKS</name><argument_list>{<argument><expr><literal type="number">200</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>array</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>, <argument><expr><name>NUM_BLOCKS</name> <operator>-</operator> <name>COINBASE_MATURITY</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type> <name>txs</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>b</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>NUM_BLOCKS</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MineBlock</name><argument_list>(<argument><expr><name>SCRIPT_PUB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vin</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>scriptWitness</name> <operator>=</operator> <name>witness</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tx</name><operator>.</operator><name>vout</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">1337</literal></expr></argument>, <argument><expr><name>SCRIPT_PUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>NUM_BLOCKS</name> <operator>-</operator> <name>b</name> <operator>&gt;=</operator> <name>COINBASE_MATURITY</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>txs</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><operator>::</operator><name>cs_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Required for ::AcceptToMemoryPool.</comment>

        <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>txr</name> <range>: <expr><name>txs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>TxValidationState</name></type> <name>state</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ret</name><argument_list>{<argument><expr><name><operator>::</operator><name>AcceptToMemoryPool</name></name><operator>(</operator><name><operator>::</operator><name>mempool</name></name><operator>,</operator> <name>state</name><operator>,</operator> <name>txr</name><operator>,</operator> <literal type="null">nullptr</literal> <comment type="block">/* plTxnReplaced */</comment><operator>,</operator> <literal type="boolean">false</literal> <comment type="block">/* bypass_limits */</comment><operator>,</operator> <comment type="block">/* nAbsurdFee */</comment> <literal type="number">0</literal><operator>)</operator></expr></argument>}</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

    <while>while <condition>(<expr><call><name><name>state</name><operator>.</operator><name>KeepRunning</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>PrepareBlock</name><argument_list>(<argument><expr><name>SCRIPT_PUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<expr_stmt><expr><call><name>BENCHMARK</name><argument_list>(<argument><expr><name>AssembleBlock</name></expr></argument>, <argument><expr><literal type="number">700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</unit>
