<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/wallet/test/psbt_wallet_tests.cpp"><comment type="line">// Copyright (c) 2017-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/bip32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/psbtwallet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/test/wallet_test_fixture.h&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>psbt_wallet_tests</argument>, <argument>WalletTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>psbt_updater_test</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>auto</name></type> <name>spk_man</name> <init>= <expr><call><name><name>m_wallet</name><operator>.</operator><name>GetLegacyScriptPubKeyMan</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name><name>m_wallet</name><operator>.</operator><name>cs_wallet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create prevtxs and add to wallet</comment>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s_prev_tx1</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>prev_tx1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s_prev_tx1</name> <operator>&gt;&gt;</operator> <name>prev_tx1</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CWalletTx</name></type> <name>prev_wtx1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_wallet</name></expr></argument>, <argument><expr><name>prev_tx1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>prev_wtx1</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prev_wtx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s_prev_tx2</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f618765000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>prev_tx2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s_prev_tx2</name> <operator>&gt;&gt;</operator> <name>prev_tx2</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CWalletTx</name></type> <name>prev_wtx2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_wallet</name></expr></argument>, <argument><expr><name>prev_tx2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>m_wallet</name><operator>.</operator><name>mapWallet</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>prev_wtx2</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>prev_wtx2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add scripts</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>rs1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s_rs1</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>s_rs1</name> <operator>&gt;&gt;</operator> <name>rs1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>rs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>rs2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s_rs2</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"2200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>s_rs2</name> <operator>&gt;&gt;</operator> <name>rs2</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>rs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>ws1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>s_ws1</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"47522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>s_ws1</name> <operator>&gt;&gt;</operator> <name>ws1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>ws1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add hd seed</comment>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key</name> <init>= <expr><call><name>DecodeSecret</name><argument_list>(<argument><expr><literal type="string">"5KSSJQ7UNfFGwVgpCZDSHm5rVNhMFcFtvWM3zQ8mW4qNDEN7LFd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Mainnet and uncompressed form of cUkG8i1RFfWGWy5ziR11zJ5V4U4W3viSFCfyJmZnvQaUsd1xuF3T</comment>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>master_pub_key</name> <init>= <expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>DeriveNewSeed</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>SetHDSeed</name></name><argument_list>(<argument><expr><name>master_pub_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spk_man</name><operator>-&gt;</operator><name>NewKeyPool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Call FillPSBT</comment>
    <decl_stmt><decl><type><name>PartiallySignedTransaction</name></type> <name>psbtx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ssData</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f000000000000000000"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>ssData</name> <operator>&gt;&gt;</operator> <name>psbtx</name></expr>;</expr_stmt>

    <comment type="line">// Fill transaction with our data</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>complete</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_REQUIRE_EQUAL</name><argument_list>(<argument><expr><name><name>TransactionError</name><operator>::</operator><name>OK</name></name></expr></argument>, <argument><expr><call><name>FillPSBT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_wallet</name></expr></argument>, <argument><expr><name>psbtx</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get the final tx</comment>
    <function_decl><type><name>CDataStream</name></type> <name>ssTx</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>ssTx</name> <operator>&lt;&lt;</operator> <name>psbtx</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>final_hex</name> <init>= <expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>ssTx</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ssTx</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>final_hex</name></expr></argument>, <argument><expr><literal type="string">"70736274ff01009a020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff838d0427d0ec650a68aa46bb0b098aea4422c071b2ca78352a077959d07cea1d0100000000ffffffff0270aaf00800000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00e1f5050000000016001400aea9a2e5f0f876a588df5546e8742d1d87008f00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f0000008000000080010000800001012000c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88701042200208c2353173743b595dfb4a07b72ba8e42e3797da74e87fe7d9d7497e3b2028903010547522103089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc21023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7352ae2206023add904f3d6dcf59ddb906b0dee23529b7ffb9ed50e5e86151926860221f0e7310d90c6a4f000000800000008003000080220603089dc10c7ac6db54f91329af617333db388cead0c231f723379d1b99030b02dc10d90c6a4f00000080000000800200008000220203a9a4c37f5996d3aa25dbac6b570af0650394492942460b354753ed9eeca5877110d90c6a4f000000800000008004000080002202027f6399757d2eff55a136ad02c684b1838b6556e5f1b6b34282a94b6b5005109610d90c6a4f00000080000000800500008000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>parse_hd_keypath</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list></name></type> <name>keypath</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"///////////////////////////"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1'/1"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"//////////////////////////'/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1///////////////////////////"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1'/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1/'//////////////////////////"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"0000'/0000'/0000'"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"0000,/0000,/0000,"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"01234"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"0x1234"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">" 1"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"42"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m42"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"4294967295"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967295 == 0xFFFFFFFF (uint32_t max)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"4294967296"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967296 == 0xFFFFFFFF (uint32_t max) + 1</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"n/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"n/0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0'"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0''"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0'/0'"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/'0/0'"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"n/0/0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/0/00"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/0/f00"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/0/000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/1/1/111111111111111111111111111111111111111111111111111111111111111111111111111111111111"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/00/0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0'/00/'0"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/1/"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/1//"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/4294967295"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967295 == 0xFFFFFFFF (uint32_t max)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/0/4294967296"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967296 == 0xFFFFFFFF (uint32_t max) + 1</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/4294967295"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967295 == 0xFFFFFFFF (uint32_t max)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>ParseHDKeypath</name><argument_list>(<argument><expr><literal type="string">"m/4294967296"</literal></expr></argument>, <argument><expr><name>keypath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 4294967296 == 0xFFFFFFFF (uint32_t max) + 1</comment>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
