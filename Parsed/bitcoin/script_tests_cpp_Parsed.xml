<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/script_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/data/script_tests.json.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/sign.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/transaction_utils.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONSENSUS_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/bitcoinconsensus.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<comment type="line">// Uncomment if you want to output updated JSON tests.</comment>
<comment type="line">// #define UPDATE_JSON_TESTS</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>gFlags</name> <init>= <expr><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_STRICTENC</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>ParseScriptFlags</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strFlags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>FormatScriptFlags</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>UniValue</name></type>
<name>read_json</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>jsondata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>v</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>v</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>jsondata</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>v</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Parse error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>UniValue</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>v</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>ScriptErrorDesc</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ScriptError_t</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>ScriptErrorDesc</name></type> <name><name>script_errors</name><index>[]</index></name><init>=<expr><block>{
    <expr><block>{<expr><name>SCRIPT_ERR_OK</name></expr>, <expr><literal type="string">"OK"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_UNKNOWN_ERROR</name></expr>, <expr><literal type="string">"UNKNOWN_ERROR"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr>, <expr><literal type="string">"EVAL_FALSE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_OP_RETURN</name></expr>, <expr><literal type="string">"OP_RETURN"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SCRIPT_SIZE</name></expr>, <expr><literal type="string">"SCRIPT_SIZE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_PUSH_SIZE</name></expr>, <expr><literal type="string">"PUSH_SIZE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_OP_COUNT</name></expr>, <expr><literal type="string">"OP_COUNT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_STACK_SIZE</name></expr>, <expr><literal type="string">"STACK_SIZE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_COUNT</name></expr>, <expr><literal type="string">"SIG_COUNT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_PUBKEY_COUNT</name></expr>, <expr><literal type="string">"PUBKEY_COUNT"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_VERIFY</name></expr>, <expr><literal type="string">"VERIFY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_EQUALVERIFY</name></expr>, <expr><literal type="string">"EQUALVERIFY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_CHECKMULTISIGVERIFY</name></expr>, <expr><literal type="string">"CHECKMULTISIGVERIFY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_CHECKSIGVERIFY</name></expr>, <expr><literal type="string">"CHECKSIGVERIFY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_NUMEQUALVERIFY</name></expr>, <expr><literal type="string">"NUMEQUALVERIFY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_BAD_OPCODE</name></expr>, <expr><literal type="string">"BAD_OPCODE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_DISABLED_OPCODE</name></expr>, <expr><literal type="string">"DISABLED_OPCODE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_INVALID_STACK_OPERATION</name></expr>, <expr><literal type="string">"INVALID_STACK_OPERATION"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_INVALID_ALTSTACK_OPERATION</name></expr>, <expr><literal type="string">"INVALID_ALTSTACK_OPERATION"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_UNBALANCED_CONDITIONAL</name></expr>, <expr><literal type="string">"UNBALANCED_CONDITIONAL"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_NEGATIVE_LOCKTIME</name></expr>, <expr><literal type="string">"NEGATIVE_LOCKTIME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_UNSATISFIED_LOCKTIME</name></expr>, <expr><literal type="string">"UNSATISFIED_LOCKTIME"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_HASHTYPE</name></expr>, <expr><literal type="string">"SIG_HASHTYPE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_DER</name></expr>, <expr><literal type="string">"SIG_DER"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_MINIMALDATA</name></expr>, <expr><literal type="string">"MINIMALDATA"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_PUSHONLY</name></expr>, <expr><literal type="string">"SIG_PUSHONLY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_HIGH_S</name></expr>, <expr><literal type="string">"SIG_HIGH_S"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_NULLDUMMY</name></expr>, <expr><literal type="string">"SIG_NULLDUMMY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_PUBKEYTYPE</name></expr>, <expr><literal type="string">"PUBKEYTYPE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_CLEANSTACK</name></expr>, <expr><literal type="string">"CLEANSTACK"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_MINIMALIF</name></expr>, <expr><literal type="string">"MINIMALIF"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_NULLFAIL</name></expr>, <expr><literal type="string">"NULLFAIL"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS</name></expr>, <expr><literal type="string">"DISCOURAGE_UPGRADABLE_NOPS"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM</name></expr>, <expr><literal type="string">"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH</name></expr>, <expr><literal type="string">"WITNESS_PROGRAM_WRONG_LENGTH"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY</name></expr>, <expr><literal type="string">"WITNESS_PROGRAM_WITNESS_EMPTY"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH</name></expr>, <expr><literal type="string">"WITNESS_PROGRAM_MISMATCH"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_MALLEATED</name></expr>, <expr><literal type="string">"WITNESS_MALLEATED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_MALLEATED_P2SH</name></expr>, <expr><literal type="string">"WITNESS_MALLEATED_P2SH"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_UNEXPECTED</name></expr>, <expr><literal type="string">"WITNESS_UNEXPECTED"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr>, <expr><literal type="string">"WITNESS_PUBKEYTYPE"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_OP_CODESEPARATOR</name></expr>, <expr><literal type="string">"OP_CODESEPARATOR"</literal></expr>}</block></expr>,
    <expr><block>{<expr><name>SCRIPT_ERR_SIG_FINDANDDELETE</name></expr>, <expr><literal type="string">"SIG_FINDANDDELETE"</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FormatScriptError</name><parameter_list>(<parameter><decl><type><name>ScriptError_t</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>script_errors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>script_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name> <operator>==</operator> <name>err</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>script_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unknown scripterror enumeration value, update script_errors in script_tests.cpp."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ScriptError_t</name></type> <name>ParseScriptError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>script_errors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>script_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>name</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>script_errors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>err</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Unknown scripterror \""</literal> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">"\" in test description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SCRIPT_ERR_UNKNOWN_ERROR</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>script_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<function><type><name>void</name></type> <name>DoTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CScriptWitness</name><modifier>&amp;</modifier></type> <name>scriptWitness</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scriptError</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>nValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>expect</name> <init>= <expr><operator>(</operator><name>scriptError</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_CLEANSTACK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SCRIPT_VERIFY_P2SH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SCRIPT_VERIFY_WITNESS</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name></type> <name>txCredit</name><argument_list>{<argument><expr><macro><name>BuildCreditingTransaction</name><argument_list>(<argument>scriptPubKey</argument>, <argument>nValue</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>, <argument><expr><name>txCredit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx2</name> <init>= <expr><name>tx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptWitness</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txCredit</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>expect</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>scriptError</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name>FormatScriptError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" where "</literal> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name>FormatScriptError</name><argument_list>(<argument><expr><operator>(</operator><name>ScriptError_t</name><operator>)</operator><name>scriptError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" expected: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify that removing flags from a passing test or adding flags to a failing test does not change the result.</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>extra_flags</name> <init>= <expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>combined_flags</name> <init>= <expr><ternary><condition><expr><name>expect</name></expr> ?</condition><then> <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>~</operator><name>extra_flags</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>extra_flags</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <comment type="line">// Weed out some invalid flag combinations.</comment>
        <if_stmt><if>if <condition>(<expr><name>combined_flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_CLEANSTACK</name> <operator>&amp;&amp;</operator> <operator>~</operator><name>combined_flags</name> <operator>&amp;</operator> <operator>(</operator><name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>combined_flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_WITNESS</name> <operator>&amp;&amp;</operator> <operator>~</operator><name>combined_flags</name> <operator>&amp;</operator> <name>SCRIPT_VERIFY_P2SH</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scriptWitness</name></expr></argument>, <argument><expr><name>combined_flags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txCredit</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>expect</name></expr></argument>, <argument><expr><name>message</name> <operator>+</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">" (with flags %x)"</literal></expr></argument>, <argument><expr><name>combined_flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONSENSUS_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>stream</name><argument_list>(<argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>tx2</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>libconsensus_flags</name> <operator>==</operator> <name>flags</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>expectedSuccessCode</name> <init>= <expr><ternary><condition><expr><name>expect</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>bitcoinconsensus_verify_script_with_amount</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>txCredit</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>expectedSuccessCode</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>bitcoinconsensus_verify_script_with_amount</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>expectedSuccessCode</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>expectedSuccessCode</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <specifier>static</specifier></type> <name>NegateSignatureS</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vchSig</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// Parse the signature.</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Really ugly to implement mod-n negation here, but it would be feature creep to expose such functionality from libsecp256k1.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>order</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0x00</literal></expr>,
        <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>,
        <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFE</literal></expr>,
        <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x3B</literal></expr>,
        <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x41</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>order</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>carry</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Reconstruct the signature.</comment>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0x30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<namespace>namespace
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vchKey0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vchKey1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vchKey2</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>KeyData</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>CKey</name></type> <name>key0</name></decl>, <decl><type ref="prev"/><name>key0C</name></decl>, <decl><type ref="prev"/><name>key1</name></decl>, <decl><type ref="prev"/><name>key1C</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>, <decl><type ref="prev"/><name>key2C</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey0</name></decl>, <decl><type ref="prev"/><name>pubkey0C</name></decl>, <decl><type ref="prev"/><name>pubkey0H</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey1</name></decl>, <decl><type ref="prev"/><name>pubkey1C</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubkey2</name></decl>, <decl><type ref="prev"/><name>pubkey2C</name></decl>;</decl_stmt>

    <constructor><name>KeyData</name><parameter_list>()</parameter_list>
    <block>{<block_content>

        <expr_stmt><expr><call><name><name>key0</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey0</name></expr></argument>, <argument><expr><name>vchKey0</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key0C</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey0</name></expr></argument>, <argument><expr><name>vchKey0</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey0</name> <operator>=</operator> <call><name><name>key0</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey0H</name> <operator>=</operator> <call><name><name>key0</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey0C</name> <operator>=</operator> <call><name><name>key0C</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><cast type="const">const_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pubkey0H</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></cast> <operator>=</operator> <literal type="number">0x06</literal> <operator>|</operator> <operator>(</operator><name><name>pubkey0H</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>key1</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey1</name></expr></argument>, <argument><expr><name>vchKey1</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key1C</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey1</name></expr></argument>, <argument><expr><name>vchKey1</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey1</name> <operator>=</operator> <call><name><name>key1</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey1C</name> <operator>=</operator> <call><name><name>key1C</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>key2</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey2</name></expr></argument>, <argument><expr><name>vchKey2</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>key2C</name><operator>.</operator><name>Set</name></name><argument_list>(<argument><expr><name>vchKey2</name></expr></argument>, <argument><expr><name>vchKey2</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey2</name> <operator>=</operator> <call><name><name>key2</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pubkey2C</name> <operator>=</operator> <call><name><name>key2C</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
</public>}</block>;</struct>

<enum type="class">enum class <name>WitnessMode</name> <block>{
    <decl><name>NONE</name></decl>,
    <decl><name>PKH</name></decl>,
    <decl><name>SH</name></decl>
}</block>;</enum>

<class>class <name>TestBuilder</name>
<block>{<private type="default">
</private><private>private:
    <comment type="line" format="doxygen">//! Actually executed script</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! The P2SH redeemscript</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>redeemscript</name></decl>;</decl_stmt>
    <comment type="line" format="doxygen">//! The Witness embedded script</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>witscript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>scriptWitness</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransactionRef</name></type> <name>creditTx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>spendTx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>havePush</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>push</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>comment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>scriptError</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValue</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>DoPush</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>havePush</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>spendTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>push</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>havePush</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>DoPush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
         <expr_stmt><expr><call><name>DoPush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><name>push</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
         <expr_stmt><expr><name>havePush</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

</private><public>public:
    <constructor><name>TestBuilder</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>comment_</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags_</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>P2SH</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>, <parameter><decl><type><name>WitnessMode</name></type> <name>wm</name> <init>= <expr><name><name>WitnessMode</name><operator>::</operator><name>NONE</name></name></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>witnessversion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>nValue_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>script</name><argument_list>(<argument><expr><name>script_</name></expr></argument>)</argument_list></call>, <call><name>havePush</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>comment</name><argument_list>(<argument><expr><name>comment_</name></expr></argument>)</argument_list></call>, <call><name>flags</name><argument_list>(<argument><expr><name>flags_</name></expr></argument>)</argument_list></call>, <call><name>scriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_OK</name></expr></argument>)</argument_list></call>, <call><name>nValue</name><argument_list>(<argument><expr><name>nValue_</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><name>script</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>wm</name> <operator>==</operator> <name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>uint160</name></type> <name>hash</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CHash160</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>witnessversion</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>wm</name> <operator>==</operator> <name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>witscript</name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>witscript</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>witscript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>witnessversion</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>P2SH</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>redeemscript</name> <operator>=</operator> <name>scriptPubKey</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>CScriptID</name><argument_list>(<argument><expr><name>redeemscript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>creditTx</name> <operator>=</operator> <call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spendTx</name> <operator>=</operator> <call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>creditTx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>ScriptError</name><parameter_list>(<parameter><decl><type><name>ScriptError_t</name></type> <name>err</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>scriptError</name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>_script</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spendTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>+=</operator> <name>_script</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Num</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>spendTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name> <operator>&lt;&lt;</operator> <name>num</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>hex</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>_script</name></decl></parameter>)</parameter_list> <block>{<block_content>
         <macro><name>DoPush</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(_script.begin(), _script.end())</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>PushSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name> <init>= <expr><name>SIGHASH_ALL</name></expr></init></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lenR</name> <init>= <expr><literal type="number">32</literal></expr></init></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lenS</name> <init>= <expr><literal type="number">32</literal></expr></init></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name> <init>= <expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></init></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>amount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>spendTx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>iter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lenS</name> <operator>==</operator> <literal type="number">33</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>vchSig</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">33</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>NegateSignatureS</name><argument_list>(<argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>vchSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name><name>vchSig</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><name>lenR</name> <operator>!=</operator> <call><name><name>r</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>lenS</name> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
        <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>nHashType</name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>(<argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>PushWitSig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>CAmount</name></type> <name>amount</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nHashType</name> <init>= <expr><name>SIGHASH_ALL</name></expr></init></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lenR</name> <init>= <expr><literal type="number">32</literal></expr></init></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>lenS</name> <init>= <expr><literal type="number">32</literal></expr></init></decl></parameter>, <parameter><decl><type><name>SigVersion</name></type> <name>sigversion</name> <init>= <expr><name><name>SigVersion</name><operator>::</operator><name>WITNESS_V0</name></name></expr></init></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>amount</name> <operator>=</operator> <name>nValue</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><call><name>PushSig</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>nHashType</name></expr></argument>, <argument><expr><name>lenR</name></expr></argument>, <argument><expr><name>lenS</name></expr></argument>, <argument><expr><name>sigversion</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <macro><name>DoPush</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(pubkey.begin(), pubkey.end())</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>PushRedeem</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <macro><name>DoPush</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(redeemscript.begin(), redeemscript.end())</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>PushWitRedeem</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <macro><name>DoPush</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(witscript.begin(), witscript.end())</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <return>return <expr><call><name>AsWit</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>EditPush</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>hexin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>hexout</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>havePush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>datain</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>hexin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>dataout</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>hexout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <call><name><name>datain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>push</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(push.begin() + pos, push.begin() + pos + datain.size()) == datain</argument>, <argument>comment</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name><name>push</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>push</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><call><name><name>push</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>pos</name> <operator>+</operator> <call><name><name>datain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>push</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>push</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><call><name><name>dataout</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataout</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>DamagePush</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>havePush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&lt;</operator> <call><name><name>push</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>push</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>Test</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TestBuilder</name></type> <name>copy</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt> <comment type="line">// Make a copy so we can rollback the push.</comment>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DoTest</name><argument_list>(<argument><expr><name><name>creditTx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>, <argument><expr><name><name>spendTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>, <argument><expr><name>scriptWitness</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>scriptError</name></expr></argument>, <argument><expr><name>nValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>AsWit</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>havePush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>havePush</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>UniValue</name></type> <name>GetJSON</name><parameter_list>()</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DoPush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>array</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>UniValue</name></type> <name>wit</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>scriptWitness</name><operator>.</operator><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>wit</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name><name>scriptWitness</name><operator>.</operator><name>stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>wit</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>wit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>FormatScript</name><argument_list>(<argument><expr><name><name>spendTx</name><operator>.</operator><name>vin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>FormatScript</name><argument_list>(<argument><expr><name><name>creditTx</name><operator>-&gt;</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>FormatScriptFlags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>FormatScriptError</name><argument_list>(<argument><expr><operator>(</operator><name>ScriptError_t</name><operator>)</operator><name>scriptError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>array</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>GetComment</name><parameter_list>()</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <return>return <expr><name>comment</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>JSONPrettyPrint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>univalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name> <init>= <expr><call><name><name>univalue</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Workaround for libunivalue pretty printer, which puts a space between commas and newlines</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>pos</name> <operator>=</operator> <call><name><name>ret</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="string">" \n"</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
}</block></namespace> <comment type="line">// namespace</comment>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_build</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>KeyData</name></type> <name>keys</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TestBuilder</name></expr></argument>&gt;</argument_list></name></type> <name>tests</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK, bad sig"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>pubkey1C</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PKH"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>pubkey2C</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PKH, bad pubkey"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EQUALVERIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK anyonecanpay"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name> <operator>|</operator> <name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK anyonecanpay marked with normal hashtype"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name> <operator>|</operator> <name>SIGHASH_ANYONECANPAY</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="string">"81"</literal></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PK)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PK), bad redeemscript"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>pubkey0</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PKH)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>pubkey1</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PKH), bad sig but no VERIFY_P2SH"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>pubkey1</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PKH), bad sig"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EQUALVERIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3, 2 sigs"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(2-of-3)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(2-of-3), 1 sig"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too much R padding but no DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too much R padding"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too much S padding but no DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"44"</literal></expr></argument>, <argument><expr><literal type="string">"45"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><literal type="string">"2100"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too much S padding"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"44"</literal></expr></argument>, <argument><expr><literal type="string">"45"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>, <argument><expr><literal type="string">"2100"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too little R padding but no DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with too little R padding"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with bad sig with too much R padding but no DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with bad sig with too much R padding"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with too much R padding but no DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with too much R padding"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"43021F"</literal></expr></argument>, <argument><expr><literal type="string">"44022000"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 1, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 1, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 2, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 2, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 3, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 3, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 4, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 4, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 5, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 5, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 6, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 6, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 7, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 7, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 8, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 8, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 9, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 9, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 10, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 10, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 11, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 11, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 12, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"BIP66 example 12, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"45022100"</literal></expr></argument>, <argument><expr><literal type="string">"440220"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with multi-byte hashtype, without DERSIG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><literal type="string">"0101"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with multi-byte hashtype, with DERSIG"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_DERSIG</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>EditPush</name><argument_list>(<argument><expr><literal type="number">70</literal></expr></argument>, <argument><expr><literal type="string">"01"</literal></expr></argument>, <argument><expr><literal type="string">"0101"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_DER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with high S but no LOW_S"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with high S"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_LOW_S</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_HIGH_S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with hybrid pubkey but no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with hybrid pubkey"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with hybrid pubkey but no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with hybrid pubkey"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with invalid hybrid pubkey but no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with invalid hybrid pubkey"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"1-of-2 with the second 1 hybrid pubkey and no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"1-of-2 with the second 1 hybrid pubkey"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0H</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"1-of-2 with the first 1 hybrid pubkey"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with undefined hashtype but no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with undefined hashtype"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_HASHTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK NOT with invalid sig and undefined hashtype"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_STRICTENC</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_HASHTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3 with nonzero dummy but no NULLDUMMY"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3 with nonzero dummy"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_NULLDUMMY</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_NULLDUMMY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name> <operator>&lt;&lt;</operator> <name>OP_NOT</name></expr></argument>,
                                <argument><expr><literal type="string">"3-of-3 NOT with invalid sig with nonzero dummy"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_NULLDUMMY</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_NULLDUMMY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"2-of-2 with two identical keys and sigs pushed using OP_DUP"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_SIGPUSHONLY</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_DUP</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_PUSHONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with non-push scriptSig but with P2SH validation"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_PUSHONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey2C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2PK) with non-push scriptSig but not P2SH"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_SIGPUSHONLY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key2</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Add</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP8</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_SIG_PUSHONLY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"2-of-2 with two identical keys and sigs pushed"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_SIGPUSHONLY</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with unnecessary input but no CLEANSTACK"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with unnecessary input"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CLEANSTACK</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_CLEANSTACK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH with unnecessary input but no CLEANSTACK"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH with unnecessary input"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CLEANSTACK</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_CLEANSTACK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH with CLEANSTACK"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CLEANSTACK</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH with the wrong key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH with the wrong key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH) with the wrong key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH) with the wrong key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH with the wrong key but no WITNESS"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH with the wrong key but no WITNESS"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH) with the wrong key but no WITNESS"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH) with the wrong key but no WITNESS"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH with wrong value"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH with wrong value"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH) with wrong value"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH) with wrong value"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"P2WPKH with future witness version"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator>
                                <name>SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witscript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>witscript</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>witscript</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>hashBytes</name> <init>= <expr><call><name>ToByteVector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>hashBytes</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>hashBytes</name></expr></argument>,
                                    <argument><expr><literal type="string">"P2WPKH with wrong witness program length"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>
                                   )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH with empty witness"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>witscript</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><name>witscript</name></expr></argument>,
                                    <argument><expr><literal type="string">"P2WSH with witness program mismatch"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>
                                   )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name>witscript</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DamagePush</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"P2WPKH with witness program mismatch"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"P2WPKH with non-empty scriptSig"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_MALLEATED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WPKH) with superfluous push in scriptSig"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Num</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_MALLEATED_P2SH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2PK with witness"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>
                               )</argument_list></call><operator>.</operator><call><name>PushSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_UNEXPECTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Compressed keys should pass SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</comment>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH with compressed key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH with compressed key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH) with compressed key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH) with compressed key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Testing uncompressed key in witness with SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</comment>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WSH"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2WPKH"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WSH)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"Basic P2SH(P2WPKH)"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>PKH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2WSH 1-of-2 multisig with compressed keys</comment>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with compressed keys"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with compressed keys"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with compressed keys"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with compressed keys"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2WSH 1-of-2 multisig with first key uncompressed</comment>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// P2WSH 1-of-2 multisig with second key uncompressed</comment>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key0C</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tests</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>TestBuilder</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey1</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>pubkey0C</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr></argument>,
                                <argument><expr><literal type="string">"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key"</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_WITNESS</name> <operator>|</operator> <name>SCRIPT_VERIFY_P2SH</name> <operator>|</operator> <name>SCRIPT_VERIFY_WITNESS_PUBKEYTYPE</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>WitnessMode</name><operator>::</operator><name>SH</name></name></expr></argument>,
                                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>Push</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>AsWit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushWitSig</name><argument_list>(<argument><expr><name><name>keys</name><operator>.</operator><name>key1</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>PushWitRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>PushRedeem</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ScriptError</name><argument_list>(<argument><expr><name>SCRIPT_ERR_WITNESS_PUBKEYTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>tests_set</name></decl>;</decl_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>json_tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>json_tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>tv</name> <init>= <expr><name><name>json_tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tests_set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>JSONPrettyPrint</name><argument_list>(<argument><expr><call><name><name>tv</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UPDATE_JSON_TESTS</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strGen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><decl><type><name>TestBuilder</name><modifier>&amp;</modifier></type> <name>test</name> <range>: <expr><name>tests</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>test</name><operator>.</operator><name>Test</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name> <init>= <expr><call><name>JSONPrettyPrint</name><argument_list>(<argument><expr><call><name><name>test</name><operator>.</operator><name>GetJSON</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UPDATE_JSON_TESTS</name></cpp:ifdef>
        <expr_stmt><expr><name>strGen</name> <operator>+=</operator> <name>str</name> <operator>+</operator> <literal type="string">",\n"</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if <condition>(<expr><call><name><name>tests_set</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">"Missing auto script_valid test: "</literal> <operator>+</operator> <call><name><name>test</name><operator>.</operator><name>GetComment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>UPDATE_JSON_TESTS</name></cpp:ifdef>
    <decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>file</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"script_tests.json.gen"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name><name>strGen</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_json_test</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Read tests from test/data/script_tests.json</comment>
    <comment type="line">// Format is an array of arrays</comment>
    <comment type="line">// Inner arrays are [ ["wit"..., nValue]?, "scriptSig", "scriptPubKey", "flags", "expected_scripterror" ]</comment>
    <comment type="line">// ... where scriptSig and scriptPubKey are stringified</comment>
    <comment type="line">// scripts.</comment>
    <comment type="line">// If a witness is given, then the last value in the array should be the</comment>
    <comment type="line">// amount (nValue) to use in the crediting tx</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>tests</name> <init>= <expr><call><name>read_json</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name></expr></argument>, <argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>json_tests</name><operator>::</operator><name>script_tests</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>tests</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>test</name> <init>= <expr><name><name>tests</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strTest</name> <init>= <expr><call><name><name>test</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>witness</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CAmount</name></type> <name>nValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>test</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>isArray</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>test</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>witness</name><operator>.</operator><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>nValue</name> <operator>=</operator> <call><name>AmountFromValue</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <name>pos</name></expr>)</condition> <comment type="line">// Allow size &gt; 3; extra stuff ignored (useful for comments)</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>test</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>BOOST_ERROR</name><argument_list>(<argument><expr><literal type="string">"Bad test: "</literal> <operator>&lt;&lt;</operator> <name>strTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>scriptSigString</name> <init>= <expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name> <init>= <expr><call><name>ParseScript</name><argument_list>(<argument><expr><name>scriptSigString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>scriptPubKeyString</name> <init>= <expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name> <init>= <expr><call><name>ParseScript</name><argument_list>(<argument><expr><name>scriptPubKeyString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scriptflags</name> <init>= <expr><call><name>ParseScriptFlags</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>scriptError</name> <init>= <expr><call><name>ParseScriptError</name><argument_list>(<argument><expr><name><name>test</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>DoTest</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>witness</name></expr></argument>, <argument><expr><name>scriptflags</name></expr></argument>, <argument><expr><name>strTest</name></expr></argument>, <argument><expr><name>scriptError</name></expr></argument>, <argument><expr><name>nValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_PushData</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Check that PUSHDATA1, PUSHDATA2, and PUSHDATA4 create the same value on</comment>
    <comment type="line">// the stack as the 1-75 opcodes do.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>direct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pushdata1</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>OP_PUSHDATA1</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pushdata2</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>OP_PUSHDATA2</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pushdata4</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>OP_PUSHDATA4</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>directStack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>directStack</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>direct</name></expr></argument>, <argument><expr><name>direct</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>direct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pushdata1Stack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>pushdata1Stack</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>pushdata1</name></expr></argument>, <argument><expr><name>pushdata1</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pushdata1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pushdata1Stack</name> <operator>==</operator> <name>directStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pushdata2Stack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>pushdata2Stack</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>pushdata2</name></expr></argument>, <argument><expr><name>pushdata2</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pushdata2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pushdata2Stack</name> <operator>==</operator> <name>directStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pushdata4Stack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>EvalScript</name><argument_list>(<argument><expr><name>pushdata4Stack</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><name>pushdata4</name></expr></argument>, <argument><expr><name>pushdata4</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pushdata4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>pushdata4Stack</name> <operator>==</operator> <name>directStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata1_trunc</name><argument_list>{<argument><expr><name>OP_PUSHDATA1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata2_trunc</name><argument_list>{<argument><expr><name>OP_PUSHDATA2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>pushdata4_trunc</name><argument_list>{<argument><expr><name>OP_PUSHDATA4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>stack_ignore</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>EvalScript</name><argument_list>(<argument><expr><name>stack_ignore</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata1_trunc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata1_trunc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>SCRIPT_ERR_BAD_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>EvalScript</name><argument_list>(<argument><expr><name>stack_ignore</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata2_trunc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata2_trunc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>SCRIPT_ERR_BAD_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>EvalScript</name><argument_list>(<argument><expr><name>stack_ignore</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>pushdata4_trunc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pushdata4_trunc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_P2SH</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>SCRIPT_ERR_BAD_OPCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_cltv_truncated</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>script_cltv_trunc</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKLOCKTIMEVERIFY</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>stack_ignore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>EvalScript</name><argument_list>(<argument><expr><name>stack_ignore</name></expr></argument>, <argument><expr><name>script_cltv_trunc</name></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>SCRIPT_ERR_INVALID_STACK_OPERATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>CScript</name></type>
<name>sign_multisig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>result</name></decl>;</decl_stmt>
    <comment type="line">//</comment>
    <comment type="line">// NOTE: CHECKMULTISIG has an unfortunate bug; it requires</comment>
    <comment type="line">// one extra item on the stack, before the signatures.</comment>
    <comment type="line">// Putting OP_0 on the stack is the workaround;</comment>
    <comment type="line">// fixing the bug would mean splitting the block chain (old</comment>
    <comment type="line">// clients would not accept new CHECKMULTISIG transactions,</comment>
    <comment type="line">// and vice-versa)</comment>
    <comment type="line">//</comment>
    <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CKey</name> <modifier>&amp;</modifier></type><name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchSig</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>Sign</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>vchSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vchSig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>&lt;&lt;</operator> <name>vchSig</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>CScript</name></type>
<name>sign_multisig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CKey</name><modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_CHECKMULTISIG12</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>, <decl><type ref="prev"/><name>key3</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key1</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key2</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key3</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey12</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptPubKey12</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name></type> <name>txFrom12</name><argument_list>{<argument><expr><macro><name>BuildCreditingTransaction</name><argument_list>(<argument>scriptPubKey12</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txTo12</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txFrom12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>goodsig1</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><name>key1</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig1</name></expr></argument>, <argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom12</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>txTo12</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig1</name></expr></argument>, <argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom12</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>goodsig2</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig2</name></expr></argument>, <argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom12</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig1</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><name>key3</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo12</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig1</name></expr></argument>, <argument><expr><name>scriptPubKey12</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo12</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom12</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_CHECKMULTISIG23</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CKey</name></type> <name>key1</name></decl>, <decl><type ref="prev"/><name>key2</name></decl>, <decl><type ref="prev"/><name>key3</name></decl>, <decl><type ref="prev"/><name>key4</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>key1</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key2</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key3</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>key4</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey23</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>scriptPubKey23</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>key1</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>key2</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name><name>key3</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name></type> <name>txFrom23</name><argument_list>{<argument><expr><macro><name>BuildCreditingTransaction</name><argument_list>(<argument>scriptPubKey23</argument>)</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txTo23</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>txFrom23</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>goodsig1</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig1</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>goodsig2</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig2</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>goodsig3</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>goodsig3</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Can't re-use sig</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig1</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig1</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sigs must be in correct order</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig2</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig2</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sigs must be in correct order</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig3</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig3</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sigs must match pubkeys</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig4</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig4</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// sigs must match pubkeys</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig5</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig5</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_EVAL_FALSE</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Must have signatures</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>badsig6</name> <init>= <expr><call><name>sign_multisig</name><argument_list>(<argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txTo23</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>VerifyScript</name><argument_list>(<argument><expr><name>badsig6</name></expr></argument>, <argument><expr><name>scriptPubKey23</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>gFlags</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureChecker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>txTo23</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom23</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_INVALID_STACK_OPERATION</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Wrapper around ProduceSignature to combine two scriptsigs */</comment>
<function><type><name>SignatureData</name></type> <name>CombineSignatures</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxOut</name><modifier>&amp;</modifier></type> <name>txout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>scriptSig1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SignatureData</name><modifier>&amp;</modifier></type> <name>scriptSig2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>data</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>MergeSignatureData</name></name><argument_list>(<argument><expr><name>scriptSig1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>MergeSignatureData</name></name><argument_list>(<argument><expr><name>scriptSig2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ProduceSignature</name><argument_list>(<argument><expr><name>DUMMY_SIGNING_PROVIDER</name></expr></argument>, <argument><expr><call><name>MutableTransactionSignatureCreator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>txout</name><operator>.</operator><name>scriptPubKey</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_combineSigs</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test the ProduceSignature's ability to combine signatures function</comment>
    <decl_stmt><decl><type><name>FillableSigningProvider</name></type> <name>keystore</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CKey</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name></type> <name>pubkeys</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>CKey</name></type> <name>key</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>key</name><operator>.</operator><name>MakeNewKey</name></name><argument_list>(<argument><expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>key</name><operator>.</operator><name>GetPubKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txFrom</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>PKHash</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>txTo</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CScriptWitness</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name> <init>= <expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>scriptPubKey</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>scriptSig</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SignatureData</name></type> <name>empty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>combined</name> <init>= <expr><call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>combined</name><operator>.</operator><name>scriptSig</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Single signature case:</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// changes scriptSig</comment>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>scriptSigCopy</name> <init>= <expr><name>scriptSig</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Signing again will give a different, valid signature:</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>scriptSigCopy</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSigCopy</name><operator>.</operator><name>scriptSig</name></name> <operator>||</operator> <name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// P2SH, single-signature case:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>pkSingle</name></decl>;</decl_stmt> <expr_stmt><expr><name>pkSingle</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>pkSingle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>ScriptHash</name><argument_list>(<argument><expr><name>pkSingle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSigCopy</name> <operator>=</operator> <name>scriptSig</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>scriptSigCopy</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSigCopy</name><operator>.</operator><name>scriptSig</name></name> <operator>||</operator> <name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Hardest case:  Multisig 2-of-3</comment>
    <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <call><name>GetScriptForMultisig</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pubkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>keystore</name><operator>.</operator><name>AddCScript</name></name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>SignSignature</name><argument_list>(<argument><expr><name>keystore</name></expr></argument>, <argument><expr><call><name>CTransaction</name><argument_list>(<argument><expr><name>txFrom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <call><name>DataFromTransaction</name><argument_list>(<argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>empty</name></expr></argument>, <argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name><name>scriptSig</name><operator>.</operator><name>scriptSig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// A couple of partially-signed versions:</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sig1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash1</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>Sign</name><argument_list>(<argument><expr><name>hash1</name></expr></argument>, <argument><expr><name>sig1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sig1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sig2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash2</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>Sign</name><argument_list>(<argument><expr><name>hash2</name></expr></argument>, <argument><expr><name>sig2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sig2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>sig3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash3</name> <init>= <expr><call><name>SignatureHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGHASH_SINGLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>SigVersion</name><operator>::</operator><name>BASE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>Sign</name><argument_list>(<argument><expr><name>hash3</name></expr></argument>, <argument><expr><name>sig3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sig3</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>SIGHASH_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Not fussy about order (or even existence) of placeholders or signatures:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial1a</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig1</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial1b</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial2a</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial2b</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>sig2</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial3a</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>sig3</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial3b</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig3</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>partial3c</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig3</name> <operator>&lt;&lt;</operator> <name>OP_0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>complete12</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig1</name> <operator>&lt;&lt;</operator> <name>sig2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>complete13</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig1</name> <operator>&lt;&lt;</operator> <name>sig3</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>complete23</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>sig2</name> <operator>&lt;&lt;</operator> <name>sig3</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>partial1_sigs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>partial1_sigs</name><operator>.</operator><name>signatures</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>SigPair</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>partial2_sigs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>partial2_sigs</name><operator>.</operator><name>signatures</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>SigPair</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SignatureData</name></type> <name>partial3_sigs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>partial3_sigs</name><operator>.</operator><name>signatures</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetID</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>SigPair</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>GetPubKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sig3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>partial1a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>, <argument><expr><name>partial2_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial2_sigs</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>, <argument><expr><name>partial2_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial3_sigs</name></expr></argument>, <argument><expr><name>partial1_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial2_sigs</name></expr></argument>, <argument><expr><name>partial3_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial3_sigs</name></expr></argument>, <argument><expr><name>partial2_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>complete23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>combined</name> <operator>=</operator> <call><name>CombineSignatures</name><argument_list>(<argument><expr><name><name>txFrom</name><operator>.</operator><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>txTo</name></expr></argument>, <argument><expr><name>partial3_sigs</name></expr></argument>, <argument><expr><name>partial3_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name><name>combined</name><operator>.</operator><name>scriptSig</name></name> <operator>==</operator> <name>partial3c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_standard_push</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>ScriptError</name></type> <name>err</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">67000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>script</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>IsPushOnly</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Number "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" is not pure push."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_MINIMALDATA</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Number "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" push is not minimal data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>MAX_SCRIPT_ELEMENT_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>data</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="char">'\111'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>script</name> <operator>&lt;&lt;</operator> <name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>IsPushOnly</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Length "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" is not pure push."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><call><name>VerifyScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>SCRIPT_VERIFY_MINIMALDATA</name></expr></argument>, <argument><expr><call><name>BaseSignatureChecker</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Length "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" push is not minimal data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_MESSAGE</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <name>SCRIPT_ERR_OK</name></expr></argument>, <argument><expr><call><name>ScriptErrorString</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_IsPushOnly_on_invalid_scripts</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// IsPushOnly returns false when given a script containing only pushes that</comment>
    <comment type="line">// are invalid due to truncation. IsPushOnly() is consensus critical</comment>
    <comment type="line">// because P2SH evaluation uses it, although this specific behavior should</comment>
    <comment type="line">// not be consensus critical as the P2SH evaluation would fail first due to</comment>
    <comment type="line">// the invalid push. Still, it doesn't hurt to test it explicitly.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>direct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name>CScript</name><argument_list>(<argument><expr><name>direct</name></expr></argument>, <argument><expr><name>direct</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>direct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsPushOnly</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_GetScriptAsm</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><literal type="string">"OP_CHECKLOCKTIMEVERIFY"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP2</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><literal type="string">"OP_CHECKLOCKTIMEVERIFY"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKLOCKTIMEVERIFY</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><literal type="string">"OP_CHECKLOCKTIMEVERIFY"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_NOP2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><literal type="string">"OP_CHECKLOCKTIMEVERIFY"</literal></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKLOCKTIMEVERIFY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>derSig</name><argument_list>(<argument><expr><literal type="string">"304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c5090"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pubKey</name><argument_list>(<argument><expr><literal type="string">"03b0da749730dc9b4b1f4a14d6902877a92541f5368778853d9c4a0cb7802dcfb2"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vchPubKey</name> <init>= <expr><call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"00 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"80 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"80"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[ALL] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"01"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[NONE] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"02"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[SINGLE] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[ALL|ANYONECANPAY] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"81"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[NONE|ANYONECANPAY] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"82"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"[SINGLE|ANYONECANPAY] "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"83"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"00 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"80 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"80"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"01 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"01"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"02 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"02"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"03 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"81 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"81"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"82 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"82"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"83 "</literal> <operator>+</operator> <name>pubKey</name></expr></argument>, <argument><expr><call><name>ScriptToAsmStr</name><argument_list>(<argument><expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>derSig</name> <operator>+</operator> <literal type="string">"83"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>vchPubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>CScript</name></type>
<name>ScriptFromHex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>hex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name>ParseHex</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>CScript</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_FindAndDelete</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Exercise the FindAndDelete functionality</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>expect</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// delete nothing should be a no-op</comment>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_2</name> <operator>&lt;&lt;</operator> <name>OP_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_3</name> <operator>&lt;&lt;</operator> <name>OP_4</name> <operator>&lt;&lt;</operator> <name>OP_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_4</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PUSH 0x02ff03 onto stack</comment>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff030302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PUSH 0x2ff03 PUSH 0x2ff03</comment>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff030302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt> <comment type="line">// FindAndDelete matches entire opcodes</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff030302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"ff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This is an odd edge case: strip of the push-three-bytes</comment>
    <comment type="line">// prefix, leaving 02ff03 which is push-two-bytes:</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0302ff030302ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"ff03"</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><literal type="string">"ff03"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Byte sequence that spans multiple opcodes:</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"02feed5169"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PUSH(0xfeed) OP_1 OP_VERIFY</comment>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"feed51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// doesn't match 'inside' opcodes</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"02feed5169"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// PUSH(0xfeed) OP_1 OP_VERIFY</comment>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"02feed51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"69"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"516902feed5169"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"feed51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"516902feed5169"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"02feed51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"516969"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt> <comment type="line">// FindAndDelete is single-pass</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt> <comment type="line">// FindAndDelete is single-pass</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Another weird edge case:</comment>
    <comment type="line">// End with invalid push (not enough data)...</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0003feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"03feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// ... can remove the invalid push</comment>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0003feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>expect</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"03feed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>FindAndDelete</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_HasValidOps</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Exercise the HasValidOps functionality</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"76a9141234567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Normal script</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"76a914ff34567890abcdefa1a2a3a4a5a6a7a8a9a0aaab88ac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"ff88ac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Script with OP_INVALIDOPCODE explicit</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>script</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"88acc0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Script with undefined opcode</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>script</name><operator>.</operator><name>HasValidOps</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>script_can_append_self</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>ScriptFromHex</name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// check doubling a script that's large enough to require reallocation</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hex</name><index>[]</index></name> <init>= <expr><literal type="string">"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name> <operator>&lt;&lt;</operator> <call><name>ParseHex</name><argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONSENSUS_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Test simple (successful) usage of bitcoinconsensus_verify_script */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_returns_true</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_1</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>spendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test bitcoinconsensus_verify_script returns invalid tx index err*/</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_tx_index_err</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>spendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test bitcoinconsensus_verify_script returns tx size mismatch err*/</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_tx_size</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>spendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_SIZE_MISMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test bitcoinconsensus_verify_script returns invalid tx serialization error */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_tx_serialization</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_TX_DESERIALIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test bitcoinconsensus_verify_script returns amount required error */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_amount_required_err</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><name>bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>spendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_AMOUNT_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<comment type="block">/* Test bitcoinconsensus_verify_script returns invalid flags err */</comment>
<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bitcoinconsensus_verify_script_invalid_flags</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>libconsensus_flags</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptPubKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScript</name></type> <name>scriptSig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CScriptWitness</name></type> <name>wit</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scriptPubKey</name> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>creditTx</name> <init>= <expr><call><name>BuildCreditingTransaction</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTransaction</name></type> <name>spendTx</name> <init>= <expr><call><name>BuildSpendingTransaction</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>, <argument><expr><name>wit</name></expr></argument>, <argument><expr><name>creditTx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CDataStream</name></type> <name>stream</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>spendTx</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bitcoinconsensus_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>bitcoinconsensus_verify_script</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>stream</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stream</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nIn</name></expr></argument>, <argument><expr><name>libconsensus_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>bitcoinconsensus_ERR_INVALID_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
