<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/optionsmodel.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_OPTIONSMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_OPTIONSMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractListModel&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DEFAULT_GUI_PROXY_HOST</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>short</name></type> <name>DEFAULT_GUI_PROXY_PORT</name> <init>= <expr><literal type="number">9050</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Interface from Qt to configuration data structure for Bitcoin client.
   To Qt, the options are presented as a list with the different options
   laid out vertically.
   This can be changed to a tree once the settings become sufficiently
   complex.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name> <range>: <expr><name>public</name> <name>QAbstractListModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <macro><name>OptionsModel</name><argument_list>(<argument>interfaces::Node&amp; node</argument>, <argument>QObject *parent = nullptr</argument>, <argument>bool resetSettings = false</argument>)</argument_list></macro></expr>;

    enum <expr><name>OptionID</name> <block>{
        <expr><name>StartAtStartup</name></expr>,         <comment type="line">// bool</comment>
        <expr><name>HideTrayIcon</name></expr>,           <comment type="line">// bool</comment>
        <expr><name>MinimizeToTray</name></expr>,         <comment type="line">// bool</comment>
        <expr><name>MapPortUPnP</name></expr>,            <comment type="line">// bool</comment>
        <expr><name>MinimizeOnClose</name></expr>,        <comment type="line">// bool</comment>
        <expr><name>ProxyUse</name></expr>,               <comment type="line">// bool</comment>
        <expr><name>ProxyIP</name></expr>,                <comment type="line">// QString</comment>
        <expr><name>ProxyPort</name></expr>,              <comment type="line">// int</comment>
        <expr><name>ProxyUseTor</name></expr>,            <comment type="line">// bool</comment>
        <expr><name>ProxyIPTor</name></expr>,             <comment type="line">// QString</comment>
        <expr><name>ProxyPortTor</name></expr>,           <comment type="line">// int</comment>
        <expr><name>DisplayUnit</name></expr>,            <comment type="line">// BitcoinUnits::Unit</comment>
        <expr><name>ThirdPartyTxUrls</name></expr>,       <comment type="line">// QString</comment>
        <expr><name>Language</name></expr>,               <comment type="line">// QString</comment>
        <expr><name>CoinControlFeatures</name></expr>,    <comment type="line">// bool</comment>
        <expr><name>ThreadsScriptVerif</name></expr>,     <comment type="line">// int</comment>
        <expr><name>Prune</name></expr>,                  <comment type="line">// bool</comment>
        <expr><name>PruneSize</name></expr>,              <comment type="line">// int</comment>
        <expr><name>DatabaseCache</name></expr>,          <comment type="line">// int</comment>
        <expr><name>SpendZeroConfChange</name></expr>,    <comment type="line">// bool</comment>
        <expr><name>Listen</name></expr>,                 <comment type="line">// bool</comment>
        <expr><name>OptionIDRowCount</name></expr>,
    }</block></expr>;

    <expr><name>void</name> <macro><name>Init</name><argument_list>(<argument>bool resetSettings = false</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>Reset</name><argument_list>()</argument_list></call></expr>;

    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp; parent = QModelIndex()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp; index</argument>, <argument>int role = Qt::DisplayRole</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>setData</name><argument_list>(<argument>const QModelIndex &amp; index</argument>, <argument>const QVariant &amp; value</argument>, <argument>int role = Qt::EditRole</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Updates current unit in memory, settings and emits displayUnitChanged(newUnit) signal */</comment>
    <expr><name>void</name> <call><name>setDisplayUnit</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QVariant</name> <operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block">/* Explicit getters */</comment>
    <expr><name>bool</name> <macro><name>getHideTrayIcon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fHideTrayIcon</name></expr>;</return> }</block>
    <name>bool</name> <macro><name>getMinimizeToTray</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fMinimizeToTray</name></expr>;</return> }</block>
    <name>bool</name> <macro><name>getMinimizeOnClose</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fMinimizeOnClose</name></expr>;</return> }</block>
    <name>int</name> <macro><name>getDisplayUnit</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>nDisplayUnit</name></expr>;</return> }</block>
    <name>QString</name> <macro><name>getThirdPartyTxUrls</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>strThirdPartyTxUrls</name></expr>;</return> }</block>
    <name>bool</name> <macro><name>getCoinControlFeatures</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fCoinControlFeatures</name></expr>;</return> }</block>
    <specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <macro><name>getOverriddenByCommandLine</name><argument_list>()</argument_list></macro> <block>{ <return>return <expr><name>strOverriddenByCommandLine</name></expr>;</return> }</block>

    <comment type="block">/* Explicit setters */</comment>
    <name>void</name> <macro><name>SetPrune</name><argument_list>(<argument>bool prune</argument>, <argument>bool force = false</argument>)</argument_list></macro></expr>;

    <comment type="block">/* Restart flag helper */</comment>
    <expr><name>void</name> <macro><name>setRestartRequired</name><argument_list>(<argument>bool fRequired</argument>)</argument_list></macro></expr>;
    <expr><name>bool</name> <macro><name>isRestartRequired</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <macro><name>node</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>m_node</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
    <name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <comment type="block">/* Qt-only settings */</comment>
    <expr><name>bool</name> <name>fHideTrayIcon</name></expr>;
    <expr><name>bool</name> <name>fMinimizeToTray</name></expr>;
    <expr><name>bool</name> <name>fMinimizeOnClose</name></expr>;
    <expr><name>QString</name> <name>language</name></expr>;
    <expr><name>int</name> <name>nDisplayUnit</name></expr>;
    <expr><name>QString</name> <name>strThirdPartyTxUrls</name></expr>;
    <expr><name>bool</name> <name>fCoinControlFeatures</name></expr>;
    <comment type="block">/* settings that were overridden by command-line */</comment>
    <expr><name>QString</name> <name>strOverriddenByCommandLine</name></expr>;

    <comment type="line">// Add option to list of GUI options overridden through command line/config file</comment>
    <expr><name>void</name> <call><name>addOverriddenOption</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>option</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Check settings version and upgrade default values if required</comment>
    <expr><name>void</name> <call><name>checkAndMigrate</name><argument_list>()</argument_list></call></expr>;
<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <macro><name>displayUnitChanged</name><argument_list>(<argument>int unit</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>coinControlFeaturesChanged</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>hideTrayIconChanged</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_OPTIONSMODEL_H</comment>
</unit>
