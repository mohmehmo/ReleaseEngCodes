<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/test/scriptnum10.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_TEST_SCRIPTNUM10_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_TEST_SCRIPTNUM10_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>scriptnum10_error</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>runtime_error</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>scriptnum10_error</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>)</argument_list></call> <operator>:</operator> <name>std</name><operator>::</operator><macro><name>runtime_error</name><argument_list>(<argument>str</argument>)</argument_list></macro> <block>{}</block></expr>
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>CScriptNum10</name>
<block>{<block_content>
<comment type="block" format="doxygen">/**
 * The ScriptNum implementation from Bitcoin Core 0.10.0, for cross-comparison.
 */</comment>
<label><name>public</name>:</label>

    <function><type><name>explicit</name></type> <name>CScriptNum10</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64_t</name><modifier>&amp;</modifier></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><name>m_value</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>nDefaultMaxNumSize</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>explicit</name></type> <name>CScriptNum10</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vch</name></expr></argument>, <argument><expr><name>bool</name> <name>fRequireMinimal</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>size_t</name> <name>nMaxNumSize</name> <operator>=</operator> <name>nDefaultMaxNumSize</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>nMaxNumSize</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>throw</name></type> <name>scriptnum10_error</name><argument_list>(<argument><expr><literal type="string">"script number overflow"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fRequireMinimal</name> <operator>&amp;&amp;</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Check that the number is encoded with the minimum possible</comment>
            <comment type="line">// number of bytes.</comment>
            <comment type="line">//</comment>
            <comment type="line">// If the most-significant-byte - excluding the sign bit - is zero</comment>
            <comment type="line">// then we're not minimal. Note how this test also rejects the</comment>
            <comment type="line">// negative-zero encoding, 0x80.</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>vch</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// One exception: if there's more than one byte and the most</comment>
                <comment type="line">// significant bit of the second-most-significant-byte is set</comment>
                <comment type="line">// it would conflict with the sign bit. An example of this case</comment>
                <comment type="line">// is +-255, which encode to 0xff00 and 0xff80 respectively.</comment>
                <comment type="line">// (big-endian).</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name><name>vch</name><index>[<expr><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>throw</name></type> <name>scriptnum10_error</name><argument_list>(<argument><expr><literal type="string">"non-minimally encoded script number"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>m_value</name> <operator>=</operator> <call><name>set_vch</name><argument_list>(<argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>==</operator> <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>!=</operator> <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>&lt;=</operator> <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>&lt;</operator>  <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>&gt;=</operator> <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier>    <block>{ <return>return <expr><name>m_value</name> <operator>&gt;</operator>  <name>rhs</name></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>==</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>!=</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>&lt;=</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&lt;</operator> <operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>&lt;</operator> <operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>&gt;=</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>bool</name> <name>operator</name><operator>&gt;</operator> <operator>(</operator><specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>&gt;</operator> <operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name> <name>operator</name><operator>+</operator><operator>(</operator>   <specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>    <specifier>const</specifier> <block>{ <return>return <expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><name>m_value</name> <operator>+</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name> <name>operator</name><operator>-</operator><operator>(</operator>   <specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>    <specifier>const</specifier> <block>{ <return>return <expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><name>m_value</name> <operator>-</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;</return>}</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name> <name>operator</name><operator>+</operator><operator>(</operator>   <specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>+</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return>   }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name> <name>operator</name><operator>-</operator><operator>(</operator>   <specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <specifier>const</specifier> <block>{ <return>return <expr><name>operator</name><operator>-</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return>   }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator> <specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>       <block>{ <return>return <expr><name>operator</name><operator>+=</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return>  }</block></expr></expr_stmt>
    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator> <specifier>const</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>       <block>{ <return>return <expr><name>operator</name><operator>-=</operator><operator>(</operator><name><name>rhs</name><operator>.</operator><name>m_value</name></name><operator>)</operator></expr>;</return>  }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name> <name>operator</name><operator>-</operator><operator>(</operator><operator>)</operator>                         <specifier>const</specifier>
    <block>{
        <expr><call><name>assert</name><argument_list>(<argument><expr><name>m_value</name> <operator>!=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <return>return <expr><call><name>CScriptNum10</name><argument_list>(<argument><expr><operator>-</operator><name>m_value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <decl_stmt><decl><type><specifier>inline</specifier> <name>CScriptNum10</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator> <specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>
    <block>{
        <expr><name>m_value</name> <operator>=</operator> <name>rhs</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></init></decl></decl_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>operator</name><operator>+=</operator><operator>(</operator> <specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>
    <block>{
        <expr><call><name>assert</name><argument_list>(<argument><expr><name>rhs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>rhs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m_value</name> <operator>&lt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>-</operator> <name>rhs</name><operator>)</operator> <operator>||</operator>
                           <operator>(</operator><name>rhs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m_value</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call> <operator>-</operator> <name>rhs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
        <expr><name>m_value</name> <operator>+=</operator> <name>rhs</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>inline</specifier> <name>CScriptNum10</name><operator>&amp;</operator> <name>operator</name><operator>-=</operator><operator>(</operator> <specifier>const</specifier> <name>int64_t</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator>
    <block>{
        <expr><call><name>assert</name><argument_list>(<argument><expr><name>rhs</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>rhs</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m_value</name> <operator>&gt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call> <operator>+</operator> <name>rhs</name><operator>)</operator> <operator>||</operator>
                           <operator>(</operator><name>rhs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m_value</name> <operator>&lt;=</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call> <operator>+</operator> <name>rhs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;
        <expr><name>m_value</name> <operator>-=</operator> <name>rhs</name></expr>;
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><name>int</name> <macro><name>getint</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <if_stmt><if>if <condition>(<expr><name>m_value</name> <operator>&gt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>max</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>m_value</name> <operator>&lt;</operator> <name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>std</name><operator>::</operator><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>min</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
        <return>return <expr><name>m_value</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <macro><name>getvch</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
    <block>{
        <return>return <expr><call><name>serialize</name><argument_list>(<argument><expr><name>m_value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></expr></expr_stmt>

    <expr_stmt><expr><specifier>static</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <macro><name>serialize</name><argument_list>(<argument>const int64_t&amp; value</argument>)</argument_list></macro>
    <block>{
        <if_stmt><if>if<condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>std</name><operator>::</operator><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name> <name>result</name></block></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>neg</name> <init>= <expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>absvalue</name> <init>= <expr><ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><operator>-</operator><name>value</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <while>while<condition>(<expr><name>absvalue</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>absvalue</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>absvalue</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

<comment type="line">//    - If the most significant byte is &gt;= 0x80 and the value is positive, push a</comment>
<comment type="line">//    new zero-byte to make the significant byte &lt; 0x80 again.</comment>

<comment type="line">//    - If the most significant byte is &gt;= 0x80 and the value is negative, push a</comment>
<comment type="line">//    new 0x80 byte that will be popped off when converting to an integral.</comment>

<comment type="line">//    - If the most significant byte is &lt; 0x80 and the value is negative, add</comment>
<comment type="line">//    0x80 to it, since it will be subtracted and interpreted as a negative when</comment>
<comment type="line">//    converting to an integral.</comment>

        <if_stmt><if>if <condition>(<expr><call><name><name>result</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    }

private:
    <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>set_vch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vch</name></expr></argument>)</argument_list>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
          <expr_stmt><expr><name>result</name> <operator>|=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>vch</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>*</operator><name>i</name></expr>;</expr_stmt></block_content></block></for>

      <comment type="line">// If the input vector's most significant byte is 0x80, remove it from</comment>
      <comment type="line">// the result's msb and return a negative.</comment>
      <if_stmt><if>if <condition>(<expr><call><name><name>vch</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>-</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>result</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0x80ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><call><name><name>vch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

      <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></decl></decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>m_value</name></decl>;</decl_stmt>
};


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_TEST_BIGNUM_H</comment>
</unit>
