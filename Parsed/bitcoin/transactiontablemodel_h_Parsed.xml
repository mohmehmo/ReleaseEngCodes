<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/transactiontablemodel.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_TRANSACTIONTABLEMODEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_TRANSACTIONTABLEMODEL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bitcoinunits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QAbstractTableModel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionRecord</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionTablePriv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** UI model for the transaction table of a wallet.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>TransactionTableModel</name> <range>: <expr><name>public</name> <name>QAbstractTableModel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>TransactionTableModel</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><name>WalletModel</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>TransactionTableModel</name><argument_list>()</argument_list></call></expr>;

    enum <expr><name>ColumnIndex</name> <block>{
        <expr><name>Status</name> <operator>=</operator> <literal type="number">0</literal></expr>,
        <expr><name>Watchonly</name> <operator>=</operator> <literal type="number">1</literal></expr>,
        <expr><name>Date</name> <operator>=</operator> <literal type="number">2</literal></expr>,
        <expr><name>Type</name> <operator>=</operator> <literal type="number">3</literal></expr>,
        <expr><name>ToAddress</name> <operator>=</operator> <literal type="number">4</literal></expr>,
        <expr><name>Amount</name> <operator>=</operator> <literal type="number">5</literal></expr>
    }</block></expr>;

    <comment type="block" format="doxygen">/** Roles to get specific information from a transaction row.
        These are independent of column.
    */</comment>
    enum <expr><name>RoleIndex</name> <block>{
        <comment type="block" format="doxygen">/** Type of transaction */</comment>
        <expr><name>TypeRole</name> <operator>=</operator> <name>Qt</name><operator>::</operator><name>UserRole</name></expr>,
        <comment type="block" format="doxygen">/** Date and time this transaction was created */</comment>
        <expr><name>DateRole</name></expr>,
        <comment type="block" format="doxygen">/** Watch-only boolean */</comment>
        <expr><name>WatchonlyRole</name></expr>,
        <comment type="block" format="doxygen">/** Watch-only icon */</comment>
        <expr><name>WatchonlyDecorationRole</name></expr>,
        <comment type="block" format="doxygen">/** Long description (HTML format) */</comment>
        <expr><name>LongDescriptionRole</name></expr>,
        <comment type="block" format="doxygen">/** Address of transaction */</comment>
        <expr><name>AddressRole</name></expr>,
        <comment type="block" format="doxygen">/** Label of address related to transaction */</comment>
        <expr><name>LabelRole</name></expr>,
        <comment type="block" format="doxygen">/** Net amount of transaction */</comment>
        <expr><name>AmountRole</name></expr>,
        <comment type="block" format="doxygen">/** Transaction hash */</comment>
        <expr><name>TxHashRole</name></expr>,
        <comment type="block" format="doxygen">/** Transaction data, hex-encoded */</comment>
        <expr><name>TxHexRole</name></expr>,
        <comment type="block" format="doxygen">/** Whole transaction as plain text */</comment>
        <expr><name>TxPlainTextRole</name></expr>,
        <comment type="block" format="doxygen">/** Is transaction confirmed? */</comment>
        <expr><name>ConfirmedRole</name></expr>,
        <comment type="block" format="doxygen">/** Formatted amount, without brackets when unconfirmed */</comment>
        <expr><name>FormattedAmountRole</name></expr>,
        <comment type="block" format="doxygen">/** Transaction status (TransactionRecord::Status) */</comment>
        <expr><name>StatusRole</name></expr>,
        <comment type="block" format="doxygen">/** Unprocessed icon */</comment>
        <expr><name>RawDecorationRole</name></expr>,
    }</block></expr>;

    <expr><name>int</name> <macro><name>rowCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>int</name> <macro><name>columnCount</name><argument_list>(<argument>const QModelIndex &amp;parent</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>data</name><argument_list>(<argument>const QModelIndex &amp;index</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>headerData</name><argument_list>(<argument>int section</argument>, <argument>Qt::Orientation orientation</argument>, <argument>int role</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QModelIndex</name> <macro><name>index</name><argument_list>(<argument>int row</argument>, <argument>int column</argument>, <argument>const QModelIndex &amp; parent = QModelIndex()</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>bool</name> <macro><name>processingQueuedTransactions</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>fProcessingQueuedTransactions</name></expr>;</return> }</block>

<name>private</name><operator>:</operator>
    <name>WalletModel</name> <operator>*</operator><name>walletModel</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_transaction_changed</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_show_progress</name></expr>;
    <expr><name>QStringList</name> <name>columns</name></expr>;
    <expr><name>TransactionTablePriv</name> <operator>*</operator><name>priv</name></expr>;
    <expr><name>bool</name> <name>fProcessingQueuedTransactions</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr>;

    <expr><name>void</name> <call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;

    <expr><name>QString</name> <macro><name>lookupAddress</name><argument_list>(<argument>const std::string &amp;address</argument>, <argument>bool tooltip</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>addressColor</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTxStatus</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTxDate</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTxType</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTxToAddress</name><argument_list>(<argument>const TransactionRecord *wtx</argument>, <argument>bool tooltip</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTxAmount</name><argument_list>(<argument>const TransactionRecord *wtx</argument>, <argument>bool showUnconfirmed=true</argument>, <argument>BitcoinUnits::SeparatorStyle separators=BitcoinUnits::separatorStandard</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QString</name> <macro><name>formatTooltip</name><argument_list>(<argument>const TransactionRecord *rec</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>txStatusDecoration</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>txWatchonlyDecoration</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
    <expr><name>QVariant</name> <macro><name>txAddressDecoration</name><argument_list>(<argument>const TransactionRecord *wtx</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block">/* New transaction, or transaction changed status */</comment>
    <name>void</name> <macro><name>updateTransaction</name><argument_list>(<argument>const QString &amp;hash</argument>, <argument>int status</argument>, <argument>bool showTransaction</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>updateConfirmations</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateDisplayUnit</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Updates the column title to "Amount (DisplayUnit)" and emits headerDataChanged() signal for table headers to react. */</comment>
    <expr><name>void</name> <call><name>updateAmountColumnTitle</name><argument_list>()</argument_list></call></expr>;
    <comment type="block">/* Needed to update fProcessingQueuedTransactions through a QueuedConnection */</comment>
    <expr><name>void</name> <macro><name>setProcessingQueuedTransactions</name><argument_list>(<argument>bool value</argument>)</argument_list></macro> <block>{ <expr><name>fProcessingQueuedTransactions</name> <operator>=</operator> <name>value</name></expr>; }</block>

    <name>friend</name> <name>class</name> <name>TransactionTablePriv</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_TRANSACTIONTABLEMODEL_H</comment>
</unit>
