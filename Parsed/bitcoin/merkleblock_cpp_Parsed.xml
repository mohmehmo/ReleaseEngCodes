<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/merkleblock.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;merkleblock.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>


<constructor><name><name>CMerkleBlock</name><operator>::</operator><name>CMerkleBlock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>CBloomFilter</name><modifier>*</modifier></type> <name>filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>txids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>header</name> <operator>=</operator> <call><name><name>block</name><operator>.</operator><name>GetBlockHeader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vMatch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vHashes</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vHashes</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hash</name> <init>= <expr><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>txids</name> <operator>&amp;&amp;</operator> <call><name><name>txids</name><operator>-&gt;</operator><name>count</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>filter</name> <operator>&amp;&amp;</operator> <call><name><name>filter</name><operator>-&gt;</operator><name>IsRelevantAndUpdate</name></name><argument_list>(<argument><expr><operator>*</operator><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vMatchedTxn</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>vHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>txn</name> <operator>=</operator> <call><name>CPartialMerkleTree</name><argument_list>(<argument><expr><name>vHashes</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>uint256</name></type> <name><name>CPartialMerkleTree</name><operator>::</operator><name>CalcHash</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vTxid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">//we can never have zero txs in a merkle block, we always need the coinbase tx</comment>
    <comment type="line">//if we do not have this assert, we can hit a memory access violation when indexing into vTxid</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>vTxid</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// hash at height 0 is the txids themself</comment>
        <return>return <expr><name><name>vTxid</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// calculate left hash</comment>
        <decl_stmt><decl><type><name>uint256</name></type> <name>left</name> <init>= <expr><call><name>CalcHash</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
        <comment type="line">// calculate right hash if not beyond the end of the array - copy left hash otherwise</comment>
        <if_stmt><if>if <condition>(<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>CalcTreeWidth</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>CalcHash</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <comment type="line">// combine subhashes</comment>
        <return>return <expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>left</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>left</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>CPartialMerkleTree</name><operator>::</operator><name>TraverseAndBuild</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vTxid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vMatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// determine whether this node is the parent of at least one matched txid</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>fParentOfMatch</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>p</name> <init>= <expr><name>pos</name> <operator>&lt;&lt;</operator> <name>height</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>(</operator><name>pos</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>nTransactions</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>fParentOfMatch</name> <operator>|=</operator> <name><name>vMatch</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <comment type="line">// store as flag bit</comment>
    <expr_stmt><expr><call><name><name>vBits</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fParentOfMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>height</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>fParentOfMatch</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// if at height 0, or nothing interesting below, store hash and stop</comment>
        <expr_stmt><expr><call><name><name>vHash</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>CalcHash</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// otherwise, don't store any hash, but descend into the subtrees</comment>
        <expr_stmt><expr><call><name>TraverseAndBuild</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>CalcTreeWidth</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>TraverseAndBuild</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>uint256</name></type> <name><name>CPartialMerkleTree</name><operator>::</operator><name>TraverseAndExtract</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>&amp;</modifier></type><name>nBitsUsed</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>&amp;</modifier></type><name>nHashUsed</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vMatch</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nBitsUsed</name> <operator>&gt;=</operator> <call><name><name>vBits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// overflowed the bits array - failure</comment>
        <expr_stmt><expr><name>fBad</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fParentOfMatch</name> <init>= <expr><name><name>vBits</name><index>[<expr><name>nBitsUsed</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>height</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>fParentOfMatch</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// if at height 0, or nothing interesting below, use stored hash and do not descend</comment>
        <if_stmt><if>if <condition>(<expr><name>nHashUsed</name> <operator>&gt;=</operator> <call><name><name>vHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// overflowed the hash array - failure</comment>
            <expr_stmt><expr><name>fBad</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hash</name> <init>= <expr><name><name>vHash</name><index>[<expr><name>nHashUsed</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>height</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fParentOfMatch</name></expr>)</condition> <block>{<block_content> <comment type="line">// in case of height 0, we have a matched txid</comment>
            <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vnIndex</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>hash</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// otherwise, descend into the subtrees to extract matched txids and hashes</comment>
        <decl_stmt><decl><type><name>uint256</name></type> <name>left</name> <init>= <expr><call><name>TraverseAndExtract</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>nBitsUsed</name></expr></argument>, <argument><expr><name>nHashUsed</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>, <argument><expr><name>vnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name>CalcTreeWidth</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>TraverseAndExtract</name><argument_list>(<argument><expr><name>height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>nBitsUsed</name></expr></argument>, <argument><expr><name>nHashUsed</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>, <argument><expr><name>vnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>left</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// The left and right branches should never be identical, as the transaction</comment>
                <comment type="line">// hashes covered by them must each be unique.</comment>
                <expr_stmt><expr><name>fBad</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// and combine them before returning</comment>
        <return>return <expr><call><name>Hash</name><argument_list>(<argument><expr><call><name><name>left</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>left</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>right</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<constructor><name><name>CPartialMerkleTree</name><operator>::</operator><name>CPartialMerkleTree</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vTxid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vMatch</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>nTransactions</name><argument_list>(<argument><expr><call><name><name>vTxid</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>, <call><name>fBad</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content>
    <comment type="line">// reset state</comment>
    <expr_stmt><expr><call><name><name>vBits</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vHash</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// calculate height of tree</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>CalcTreeWidth</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nHeight</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <comment type="line">// traverse the partial tree</comment>
    <expr_stmt><expr><call><name>TraverseAndBuild</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vTxid</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>CPartialMerkleTree</name><operator>::</operator><name>CPartialMerkleTree</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>nTransactions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>fBad</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>uint256</name></type> <name><name>CPartialMerkleTree</name><operator>::</operator><name>ExtractMatches</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vMatch</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>vMatch</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// An empty set will not work</comment>
    <if_stmt><if>if <condition>(<expr><name>nTransactions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// check for excessively high numbers of transactions</comment>
    <if_stmt><if>if <condition>(<expr><name>nTransactions</name> <operator>&gt;</operator> <name>MAX_BLOCK_WEIGHT</name> <operator>/</operator> <name>MIN_TRANSACTION_WEIGHT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// there can never be more hashes provided than one for every txid</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>vHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>nTransactions</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// there must be at least one bit per node in the partial tree, and at least one node per hash</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>vBits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>vHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// calculate height of tree</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>CalcTreeWidth</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>nHeight</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <comment type="line">// traverse the partial tree</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nBitsUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nHashUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hashMerkleRoot</name> <init>= <expr><call><name>TraverseAndExtract</name><argument_list>(<argument><expr><name>nHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBitsUsed</name></expr></argument>, <argument><expr><name>nHashUsed</name></expr></argument>, <argument><expr><name>vMatch</name></expr></argument>, <argument><expr><name>vnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// verify that no problems occurred during the tree traversal</comment>
    <if_stmt><if>if <condition>(<expr><name>fBad</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// verify that all bits were consumed (except for the padding caused by serializing it as a byte sequence)</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>nBitsUsed</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal> <operator>!=</operator> <operator>(</operator><call><name><name>vBits</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="line">// verify that all hashes were consumed</comment>
    <if_stmt><if>if <condition>(<expr><name>nHashUsed</name> <operator>!=</operator> <call><name><name>vHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>uint256</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>hashMerkleRoot</name></expr>;</return>
</block_content>}</block></function>
</unit>
