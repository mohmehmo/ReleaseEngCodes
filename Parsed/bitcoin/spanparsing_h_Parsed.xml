<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/util/spanparsing.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_UTIL_SPANPARSING_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_UTIL_SPANPARSING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;span.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>spanparsing</name> <block>{<block_content>

<comment type="block" format="doxygen">/** Parse a constant.
 *
 * If sp's initial part matches str, sp is updated to skip that part, and true is returned.
 * Otherwise sp is unmodified and false is returned.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>Const</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Parse a function call.
 *
 * If sp's initial part matches str + "(", and sp ends with ")", sp is updated to be the
 * section between the braces, and true is returned. Otherwise sp is unmodified and false
 * is returned.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>Func</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>str</name></expr></argument>, <argument><expr><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>sp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Extract the expression that sp begins with.
 *
 * This function will return the initial part of sp, up to (but not including) the first
 * comma or closing brace, skipping ones that are surrounded by braces. So for example,
 * for "foo(bar(1),2),3" the initial part "foo(bar(1),2)" will be returned. sp will be
 * updated to skip the initial part that is returned.
 */</comment>
<function_decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>Expr</name><parameter_list>(<parameter><decl><type><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sp</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Split a string on every instance of sep, returning a vector.
 *
 * If sep does not occur in sp, a singleton with the entirety of sp is returned.
 *
 * Note that this function does not care about braces, so splitting
 * "foo(bar(1),2),3) on ',' will return {"foo(bar(1)", "2)", "3)"}.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <macro><name>Split</name><argument_list>(<argument>const Span&lt;const char&gt;&amp; sp</argument>, <argument>char sep</argument>)</argument_list></macro></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace spanparsing</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_UTIL_SPANPARSING_H</comment>
</unit>
