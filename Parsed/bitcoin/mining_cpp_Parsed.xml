<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/rpc/mining.cpp"><comment type="line">// Copyright (c) 2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/consensus.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/params.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;miner.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;policy/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pow.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/descriptor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/signingprovider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shutdown.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;txmempool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/fees.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validation.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;versionbitsinfo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;warnings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Return average network hashes per second based on the last 'lookup' blocks,
 * or from the last difficulty change if 'lookup' is nonpositive.
 * If 'height' is nonnegative, compute the estimate at the time when a given block was found.
 */</comment>
<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>GetNetworkHashPS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lookup</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&lt;</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>pb</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><index>[<expr><name>height</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pb</name> <operator>==</operator> <literal type="null">nullptr</literal> <operator>||</operator> <operator>!</operator><name><name>pb</name><operator>-&gt;</operator><name>nHeight</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// If lookup is -1, then use blocks since last difficulty change.</comment>
    <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lookup</name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>%</operator> <call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call><operator>.</operator><call><name>DifficultyAdjustmentInterval</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If lookup is larger than chain, then set it to chain length.</comment>
    <if_stmt><if>if <condition>(<expr><name>lookup</name> <operator>&gt;</operator> <name><name>pb</name><operator>-&gt;</operator><name>nHeight</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>lookup</name> <operator>=</operator> <name><name>pb</name><operator>-&gt;</operator><name>nHeight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>CBlockIndex</name> <modifier>*</modifier></type><name>pb0</name> <init>= <expr><name>pb</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>minTime</name> <init>= <expr><call><name><name>pb0</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>maxTime</name> <init>= <expr><name>minTime</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lookup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pb0</name> <operator>=</operator> <name><name>pb0</name><operator>-&gt;</operator><name>pprev</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>time</name> <init>= <expr><call><name><name>pb0</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>minTime</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>minTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxTime</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>maxTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// In case there's a situation where minTime == maxTime, we don't want a divide by zero exception.</comment>
    <if_stmt><if>if <condition>(<expr><name>minTime</name> <operator>==</operator> <name>maxTime</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>workDiff</name> <init>= <expr><name><name>pb</name><operator>-&gt;</operator><name>nChainWork</name></name> <operator>-</operator> <name><name>pb0</name><operator>-&gt;</operator><name>nChainWork</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>timeDiff</name> <init>= <expr><name>maxTime</name> <operator>-</operator> <name>minTime</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>workDiff</name><operator>.</operator><name>getdouble</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>timeDiff</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getnetworkhashps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getnetworkhashps"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns the estimated network hashes per second based on the last n blocks.\n"</literal>
                <literal type="string">"Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\n"</literal>
                <literal type="string">"Pass in [height] to estimate the network speed at the time when a certain block was found.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nblocks"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"120"</literal></expr><operator>,</operator> <expr><literal type="string">"The number of blocks, or -1 for blocks since last difficulty change."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"height"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"-1"</literal></expr><operator>,</operator> <expr><literal type="string">"To estimate at the time of the given height."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"x             (numeric) Hashes per second estimated\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getnetworkhashps"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getnetworkhashps"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>GetNetworkHashPS</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>generateBlocks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>coinbase_script</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nGenerate</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nMaxTries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeightEnd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <block>{<block_content>   <comment type="line">// Don't keep cs_main locked</comment>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nHeight</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nHeightEnd</name> <operator>=</operator> <name>nHeight</name><operator>+</operator><name>nGenerate</name></expr>;</expr_stmt>
    </block_content>}</block>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nExtraNonce</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>blockHashes</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>nHeight</name> <operator>&lt;</operator> <name>nHeightEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name></type> <name>pblocktemplate</name><argument_list>(<argument><expr><call><name>BlockAssembler</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>coinbase_script</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pblocktemplate</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Couldn't create new block"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>CBlock</name> <modifier>*</modifier></type><name>pblock</name> <init>= <expr><operator>&amp;</operator><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>IncrementExtraNonce</name><argument_list>(<argument><expr><name>pblock</name></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nExtraNonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <while>while <condition>(<expr><name>nMaxTries</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pblock</name><operator>-&gt;</operator><name>nNonce</name></name> <operator>&lt;</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CheckProofOfWork</name><argument_list>(<argument><expr><call><name><name>pblock</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>nBits</name></name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name><name>pblock</name><operator>-&gt;</operator><name>nNonce</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>--</operator><name>nMaxTries</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name>nMaxTries</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ShutdownRequested</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pblock</name><operator>-&gt;</operator><name>nNonce</name></name> <operator>==</operator> <call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint32_t</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name></type> <name>shared_pblock</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><name>pblock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>shared_pblock</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ProcessNewBlock, block not accepted"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>nHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>blockHashes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pblock</name><operator>-&gt;</operator><name>GetHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>blockHashes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>generatetodescriptor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{
        <argument><expr><literal type="string">"generatetodescriptor"</literal></expr></argument>,
        <argument><expr><literal type="string">"\nMine blocks immediately to a specified descriptor (before the RPC call returns)\n"</literal></expr></argument>,
        <block>{<block_content>
            <block>{<block_content><expr_stmt><expr><literal type="string">"num_blocks"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"How many blocks are generated immediately."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"descriptor"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The descriptor to send the newly generated bitcoin to."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
            <block>{<block_content><expr_stmt><expr><literal type="string">"maxtries"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1000000"</literal></expr><operator>,</operator> <expr><literal type="string">"How many iterations to try."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
        <expr_stmt/>}</block_content></block>,
        <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[ blockhashes ]     (array) hashes of blocks generated\n"</literal></expr></argument>}</argument_list></call></expr></argument>,
        <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nGenerate 11 blocks to mydesc\n"</literal> <operator>+</operator> <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"generatetodescriptor"</literal></argument>, <argument><literal type="string">"11 \"mydesc\""</literal></argument>)</argument_list></macro></expr></argument>}</argument_list></call></expr></argument>,
    }</argument_list></call>
        <operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_blocks</name><argument_list>{<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><macro><name>get_int</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>max_tries</name><argument_list>{<argument><expr><ternary><condition><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1000000</literal></expr> </then><else>: <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><macro><name>get_int</name><argument_list>()</argument_list></macro></expr></else></ternary></expr></argument>}</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>key_provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>error</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>desc</name> <init>= <expr><call><name>Parse</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <comment type="block">/* require_checksum = */</comment> <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>desc</name><operator>-&gt;</operator><name>IsRange</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Ranged descriptor not accepted. Maybe pass through deriveaddresses first?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>FlatSigningProvider</name></type> <name>provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CScript</name></expr></argument>&gt;</argument_list></name></type> <name>coinbase_script</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>desc</name><operator>-&gt;</operator><name>Expand</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key_provider</name></expr></argument>, <argument><expr><name>coinbase_script</name></expr></argument>, <argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot derive script without private keys"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><call><name><name>coinbase_script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>generateBlocks</name><argument_list>(<argument><expr><call><name><name>coinbase_script</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>num_blocks</name></expr></argument>, <argument><expr><name>max_tries</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>generatetoaddress</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nMine blocks immediately to a specified address (before the RPC call returns)\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"nblocks"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"How many blocks are generated immediately."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"address"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The address to send the newly generated bitcoin to."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"maxtries"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"1000000"</literal></expr><operator>,</operator> <expr><literal type="string">"How many iterations to try."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"[ blockhashes ]     (array) hashes of blocks generated\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
            <argument><expr><literal type="string">"\nGenerate 11 blocks to myaddress\n"</literal>
            <operator>+</operator> <call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>, <argument><expr><literal type="string">"11 \"myaddress\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <literal type="string">"If you are running the bitcoin core wallet, you can get a new address to send the newly generated bitcoin to with:\n"</literal>
            <operator>+</operator> <macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"getnewaddress"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nGenerate</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nMaxTries</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nMaxTries</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CTxDestination</name></type> <name>destination</name> <init>= <expr><call><name>DecodeDestination</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_ADDRESS_OR_KEY</name></expr></argument>, <argument><expr><literal type="string">"Error: Invalid address"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>CScript</name></type> <name>coinbase_script</name> <init>= <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>generateBlocks</name><argument_list>(<argument><expr><name>coinbase_script</name></expr></argument>, <argument><expr><name>nGenerate</name></expr></argument>, <argument><expr><name>nMaxTries</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getmininginfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getmininginfo"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nReturns a json object containing mining-related information."</literal></expr></argument>,
                <block>{<block_content><expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
                    <argument><expr><literal type="string">"{\n"</literal>
                    <literal type="string">"  \"blocks\": nnn,             (numeric) The current block\n"</literal>
                    <literal type="string">"  \"currentblockweight\": nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\n"</literal>
                    <literal type="string">"  \"currentblocktx\": nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\n"</literal>
                    <literal type="string">"  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty\n"</literal>
                    <literal type="string">"  \"networkhashps\": nnn,      (numeric) The network hashes per second\n"</literal>
                    <literal type="string">"  \"pooledtx\": n              (numeric) The size of the mempool\n"</literal>
                    <literal type="string">"  \"chain\": \"xxxx\",           (string) current network name (main, test, regtest)\n"</literal>
                    <literal type="string">"  \"warnings\": \"...\"          (string) any network and blockchain warnings\n"</literal>
                    <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getmininginfo"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getmininginfo"</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>obj</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blocks"</literal></expr></argument>,           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Height</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>BlockAssembler</name><operator>::</operator><name>m_last_block_weight</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"currentblockweight"</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>BlockAssembler</name><operator>::</operator><name>m_last_block_weight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>BlockAssembler</name><operator>::</operator><name>m_last_block_num_txs</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"currentblocktx"</literal></expr></argument>, <argument><expr><operator>*</operator><name><name>BlockAssembler</name><operator>::</operator><name>m_last_block_num_txs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"difficulty"</literal></expr></argument>,       <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>GetDifficulty</name><argument_list>(<argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"networkhashps"</literal></expr></argument>,    <argument><expr><call><name>getnetworkhashps</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pooledtx"</literal></expr></argument>,         <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name><name>mempool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"chain"</literal></expr></argument>,            <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>obj</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"warnings"</literal></expr></argument>,         <argument><expr><call><name>GetWarnings</name><argument_list>(<argument><expr><literal type="string">"statusbar"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>obj</name></expr>;</return>
</block_content>}</block></function>


<comment type="line">// NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts</comment>
<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>prioritisetransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"prioritisetransaction"</literal></expr></argument>,
                <argument><expr><literal type="string">"Accepts the transaction into mined blocks at a higher (or lower) priority\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"txid"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The transaction id."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"dummy"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr><operator>,</operator> <expr><literal type="string">"API-Compatibility for previous API. Must be zero or null.\n"</literal>
            <literal type="string">"                  DEPRECATED. For forward compatibility use named arguments and omit this parameter."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"fee_delta"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"The fee value (in satoshis) to add (or subtract, if negative).\n"</literal>
            <literal type="string">"                  Note, that this value is not a fee rate. It is a value to modify absolute fee of the TX.\n"</literal>
            <literal type="string">"                  The fee is not actually paid, only the algorithm for selecting transactions into a block\n"</literal>
            <literal type="string">"                  considers the transaction as it would have paid a higher (or lower) fee."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"true              (boolean) Returns true\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"prioritisetransaction"</literal></expr></argument>, <argument><expr><literal type="string">"\"txid\" 0.0 10000"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"prioritisetransaction"</literal></argument>, <argument><literal type="string">"\"txid\", 0.0, 10000"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name><argument_list>(<argument><expr><call><name>ParseHashV</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"txid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nAmount</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_int64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_real</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Priority is no longer supported, dummy argument to prioritisetransaction must be 0."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>mempool</name><operator>.</operator><name>PrioritiseTransaction</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>nAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<comment type="line">// NOTE: Assumes a conclusive result; if result is inconclusive, it must be handled by caller</comment>
<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>BIP22ValidationResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BlockValidationState</name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsError</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_VERIFY_ERROR</name></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsInvalid</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strRejectReason</name> <init>= <expr><call><name><name>state</name><operator>.</operator><name>GetRejectReason</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>strRejectReason</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"rejected"</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><name>strRejectReason</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Should be impossible</comment>
    <return>return <expr><literal type="string">"valid?"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>gbt_vb_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>VBDeploymentInfo</name></name><modifier>&amp;</modifier></type> <name>vbinfo</name> <init>= <expr><name><name>VersionBitsDeploymentInfo</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name> <init>= <expr><name><name>vbinfo</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vbinfo</name><operator>.</operator><name>gbt_force</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>getblocktemplate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"getblocktemplate"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\n"</literal>
                <literal type="string">"It returns data needed to construct a block to work on.\n"</literal>
                <literal type="string">"For full specification, see BIPs 22, 23, 9, and 145:\n"</literal>
                <literal type="string">"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\n"</literal>
                <literal type="string">"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\n"</literal>
                <literal type="string">"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\n"</literal>
                <literal type="string">"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"template_request"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>OBJ</name></name></expr><operator>,</operator> <expr><literal type="string">"{}"</literal></expr><operator>,</operator> <expr><literal type="string">"A json object in the following spec"</literal></expr><operator>,</operator>
                        <expr><block>{
                            <expr><block>{<expr><literal type="string">"mode"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <comment type="block">/* treat as named arg */</comment> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr>, <expr><literal type="string">"This must be set to \"template\", \"proposal\" (see BIP 23), or omitted"</literal></expr>}</block></expr>,
                            <expr><block>{<expr><literal type="string">"capabilities"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr>, <comment type="block">/* treat as named arg */</comment> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED_NAMED_ARG</name></name></expr>, <expr><literal type="string">"A list of strings"</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"support"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'"</literal></expr>}</block></expr>,
                                }</block></expr>,
                                }</block></expr>,
                            <expr><block>{<expr><literal type="string">"rules"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>ARR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr>, <expr><literal type="string">"A list of strings"</literal></expr>,
                                <expr><block>{
                                    <expr><block>{<expr><literal type="string">"support"</literal></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr>, <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>OMITTED</name></name></expr>, <expr><literal type="string">"client side supported softfork deployment"</literal></expr>}</block></expr>,
                                }</block></expr>,
                                }</block></expr>,
                        }</block></expr><operator>,</operator>
                        <expr><literal type="string">"\"template_request\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"version\" : n,                    (numeric) The preferred block version\n"</literal>
            <literal type="string">"  \"rules\" : [ \"rulename\", ... ],    (array of strings) specific block rules that are to be enforced\n"</literal>
            <literal type="string">"  \"vbavailable\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\n"</literal>
            <literal type="string">"      \"rulename\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\n"</literal>
            <literal type="string">"      ,...\n"</literal>
            <literal type="string">"  },\n"</literal>
            <literal type="string">"  \"vbrequired\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\n"</literal>
            <literal type="string">"  \"previousblockhash\" : \"xxxx\",     (string) The hash of current highest block\n"</literal>
            <literal type="string">"  \"transactions\" : [                (array) contents of non-coinbase transactions that should be included in the next block\n"</literal>
            <literal type="string">"      {\n"</literal>
            <literal type="string">"         \"data\" : \"xxxx\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\n"</literal>
            <literal type="string">"         \"txid\" : \"xxxx\",             (string) transaction id encoded in little-endian hexadecimal\n"</literal>
            <literal type="string">"         \"hash\" : \"xxxx\",             (string) hash encoded in little-endian hexadecimal (including witness data)\n"</literal>
            <literal type="string">"         \"depends\" : [                (array) array of numbers \n"</literal>
            <literal type="string">"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n"</literal>
            <literal type="string">"             ,...\n"</literal>
            <literal type="string">"         ],\n"</literal>
            <literal type="string">"         \"fee\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n"</literal>
            <literal type="string">"         \"sigops\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\n"</literal>
            <literal type="string">"         \"weight\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\n"</literal>
            <literal type="string">"      }\n"</literal>
            <literal type="string">"      ,...\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"coinbaseaux\" : { ... },            (json object) data that should be included in the coinbase's scriptSig content\n"</literal>
            <literal type="string">"  \"coinbasevalue\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\n"</literal>
            <literal type="string">"  \"coinbasetxn\" : { ... },          (json object) information for coinbase transaction\n"</literal>
            <literal type="string">"  \"target\" : \"xxxx\",                (string) The hash target\n"</literal>
            <literal type="string">"  \"mintime\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"mutable\" : [                     (array of string) list of ways the block template may be changed \n"</literal>
            <literal type="string">"     \"value\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n"</literal>
            <literal type="string">"     ,...\n"</literal>
            <literal type="string">"  ],\n"</literal>
            <literal type="string">"  \"noncerange\" : \"00000000ffffffff\",(string) A range of valid nonces\n"</literal>
            <literal type="string">"  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks\n"</literal>
            <literal type="string">"  \"sizelimit\" : n,                  (numeric) limit of block size\n"</literal>
            <literal type="string">"  \"weightlimit\" : n,                (numeric) limit of block weight\n"</literal>
            <literal type="string">"  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n"</literal>
            <literal type="string">"  \"bits\" : \"xxxxxxxx\",              (string) compressed target of next block\n"</literal>
            <literal type="string">"  \"height\" : n                      (numeric) The height of the next block\n"</literal>
            <literal type="string">"}\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"getblocktemplate"</literal></expr></argument>, <argument><expr><literal type="string">"'{\"rules\": [\"segwit\"]}'"</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"getblocktemplate"</literal></argument>, <argument><literal type="string">"{\"rules\": [\"segwit\"]}"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMode</name> <init>= <expr><literal type="string">"template"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>lpval</name> <init>= <expr><name>NullUniValue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>setClientRules</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nMaxVersionPreVB</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>oparam</name> <init>= <expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>modeval</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>oparam</name></expr></argument>, <argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>modeval</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>strMode</name> <operator>=</operator> <call><name><name>modeval</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>modeval</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/* Do nothing */</comment>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid mode"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt>
        <expr_stmt><expr><name>lpval</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>oparam</name></expr></argument>, <argument><expr><literal type="string">"longpollid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>strMode</name> <operator>==</operator> <literal type="string">"proposal"</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>dataval</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>oparam</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dataval</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_TYPE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing data String key for proposal"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeHexBlk</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><call><name><name>dataval</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block decode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pindex</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>pindex</name><operator>-&gt;</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>BLOCK_VALID_SCRIPTS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="string">"duplicate"</literal></expr>;</return></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>pindex</name><operator>-&gt;</operator><name>nStatus</name></name> <operator>&amp;</operator> <name>BLOCK_FAILED_MASK</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="string">"duplicate-invalid"</literal></expr>;</return></block_content></block></if></if_stmt>
                <return>return <expr><literal type="string">"duplicate-inconclusive"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier> <specifier>const</specifier></type> <name>pindexPrev</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// TestBlockValidity only supports blocks built on the current Tip</comment>
            <if_stmt><if>if <condition>(<expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name> <operator>!=</operator> <call><name><name>pindexPrev</name><operator>-&gt;</operator><name>GetBlockHash</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="string">"inconclusive-not-best-prevblk"</literal></expr>;</return></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TestBlockValidity</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>pindexPrev</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>BIP22ValidationResult</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>aClientRules</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>oparam</name></expr></argument>, <argument><expr><literal type="string">"rules"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>aClientRules</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>aClientRules</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>v</name> <init>= <expr><name><name>aClientRules</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>setClientRules</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// NOTE: It is important that this NOT be read if versionbits is supported</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>uvMaxVersion</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>oparam</name></expr></argument>, <argument><expr><literal type="string">"maxversion"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>uvMaxVersion</name><operator>.</operator><name>isNum</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nMaxVersionPreVB</name> <operator>=</operator> <call><name><name>uvMaxVersion</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>strMode</name> <operator>!=</operator> <literal type="string">"template"</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid mode"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>g_rpc_node</name><operator>-&gt;</operator><name>connman</name></name></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_P2P_DISABLED</name></expr></argument>, <argument><expr><literal type="string">"Error: Peer-to-peer functionality missing or disabled"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>g_rpc_node</name><operator>-&gt;</operator><name>connman</name><operator>-&gt;</operator><name>GetNodeCount</name></name><argument_list>(<argument><expr><name><name>CConnman</name><operator>::</operator><name>CONNECTIONS_ALL</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_NOT_CONNECTED</name></expr></argument>, <argument><expr><name>PACKAGE_NAME</name> <literal type="string">" is not connected!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><operator>::</operator><name>ChainstateActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>IsInitialBlockDownload</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_IN_INITIAL_DOWNLOAD</name></expr></argument>, <argument><expr><name>PACKAGE_NAME</name> <literal type="string">" is in initial sync and waiting for blocks..."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>nTransactionsUpdatedLast</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>lpval</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Wait to respond until either the best block changes, OR a minute has passed and there are more transactions</comment>
        <decl_stmt><decl><type><name>uint256</name></type> <name>hashWatchedChain</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>time_point</name></name></type> <name>checktxtime</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nTransactionsUpdatedLastLP</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>lpval</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Format: &lt;hashBestChain&gt;&lt;nTransactionsUpdatedLast&gt;</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>lpstr</name> <init>= <expr><call><name><name>lpval</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>hashWatchedChain</name> <operator>=</operator> <call><name>ParseHashV</name><argument_list>(<argument><expr><call><name><name>lpstr</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"longpollid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nTransactionsUpdatedLastLP</name> <operator>=</operator> <call><name>atoi64</name><argument_list>(<argument><expr><call><name><name>lpstr</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier</comment>
            <expr_stmt><expr><name>hashWatchedChain</name> <operator>=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nTransactionsUpdatedLastLP</name> <operator>=</operator> <name>nTransactionsUpdatedLast</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Release lock while waiting</comment>
        <expr_stmt><expr><call><name>LEAVE_CRITICAL_SECTION</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <expr_stmt><expr><name>checktxtime</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>minutes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>WAIT_LOCK</name><argument_list>(<argument><expr><name>g_best_block_mutex</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>g_best_block</name> <operator>==</operator> <name>hashWatchedChain</name> <operator>&amp;&amp;</operator> <call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>g_best_block_cv</name><operator>.</operator><name>wait_until</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>checktxtime</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>std</name><operator>::</operator><name>cv_status</name><operator>::</operator><name>timeout</name></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Timeout: Check transactions for update</comment>
                    <comment type="line">// without holding ::mempool.cs to avoid deadlocks</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>mempool</name><operator>.</operator><name>GetTransactionsUpdated</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nTransactionsUpdatedLastLP</name></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>checktxtime</name> <operator>+=</operator> <call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>seconds</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
        <expr_stmt><expr><call><name>ENTER_CRITICAL_SECTION</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsRPCRunning</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_CLIENT_NOT_CONNECTED</name></expr></argument>, <argument><expr><literal type="string">"Shutting down"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
        <comment type="line">// TODO: Maybe recheck connections/IBD and (if something wrong) send an expires-immediately template to stop miners?</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// GBT must be called with 'segwit' set in the rules</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>setClientRules</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><literal type="string">"segwit"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"getblocktemplate must be called with the segwit rule set (call with {\"rules\": [\"segwit\"]})"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Update block</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPrev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>nStart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlockTemplate</name></expr></argument>&gt;</argument_list></name></type> <name>pblocktemplate</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pindexPrev</name> <operator>!=</operator> <call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call> <operator>||</operator>
        <operator>(</operator><call><name><name>mempool</name><operator>.</operator><name>GetTransactionsUpdated</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>nTransactionsUpdatedLast</name> <operator>&amp;&amp;</operator> <call><name>GetTime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>nStart</name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Clear pindexPrev so future calls make a new block, despite any failures from here on</comment>
        <expr_stmt><expr><name>pindexPrev</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>

        <comment type="line">// Store the pindexBest used before CreateNewBlock, to avoid races</comment>
        <expr_stmt><expr><name>nTransactionsUpdatedLast</name> <operator>=</operator> <call><name><name>mempool</name><operator>.</operator><name>GetTransactionsUpdated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CBlockIndex</name><modifier>*</modifier></type> <name>pindexPrevNew</name> <init>= <expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nStart</name> <operator>=</operator> <call><name>GetTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create new block</comment>
        <decl_stmt><decl><type><name>CScript</name></type> <name>scriptDummy</name> <init>= <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_TRUE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pblocktemplate</name> <operator>=</operator> <call><name>BlockAssembler</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>CreateNewBlock</name><argument_list>(<argument><expr><name>scriptDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pblocktemplate</name></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <comment type="line">// Need to update only after we know CreateNewBlock succeeded</comment>
        <expr_stmt><expr><name>pindexPrev</name> <operator>=</operator> <name>pindexPrevNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>pindexPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CBlock</name><modifier>*</modifier></type> <name>pblock</name> <init>= <expr><operator>&amp;</operator><name><name>pblocktemplate</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// pointer for convenience</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>Consensus</name><operator>::</operator><name>Params</name></name><modifier>&amp;</modifier></type> <name>consensusParams</name> <init>= <expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Update nTime</comment>
    <expr_stmt><expr><call><name>UpdateTime</name><argument_list>(<argument><expr><name>pblock</name></expr></argument>, <argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>pindexPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pblock</name><operator>-&gt;</operator><name>nNonce</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fPreSegWit</name> <init>= <expr><operator>(</operator><name><name>pindexPrev</name><operator>-&gt;</operator><name>nHeight</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>consensusParams</name><operator>.</operator><name>SegwitHeight</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>aCaps</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>aCaps</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"proposal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>transactions</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>setTxIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name></name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>txHash</name> <init>= <expr><call><name><name>tx</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>setTxIndex</name><index>[<expr><name>txHash</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>tx</name><operator>.</operator><name>IsCoinBase</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>entry</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><call><name>EncodeHexTx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"txid"</literal></expr></argument>, <argument><expr><call><name><name>txHash</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"hash"</literal></expr></argument>, <argument><expr><call><name><name>tx</name><operator>.</operator><name>GetWitnessHash</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>UniValue</name></type> <name>deps</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CTxIn</name> <modifier>&amp;</modifier></type><name>in</name> <range>: <expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>setTxIndex</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>in</name><operator>.</operator><name>prevout</name><operator>.</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>deps</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>setTxIndex</name><index>[<expr><name><name>in</name><operator>.</operator><name>prevout</name><operator>.</operator><name>hash</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"depends"</literal></expr></argument>, <argument><expr><name>deps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>index_in_template</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>vTxFees</name><index>[<expr><name>index_in_template</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nTxSigOps</name> <init>= <expr><name><name>pblocktemplate</name><operator>-&gt;</operator><name>vTxSigOpsCost</name><index>[<expr><name>index_in_template</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fPreSegWit</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>nTxSigOps</name> <operator>%</operator> <name>WITNESS_SCALE_FACTOR</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nTxSigOps</name> <operator>/=</operator> <name>WITNESS_SCALE_FACTOR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"sigops"</literal></expr></argument>, <argument><expr><name>nTxSigOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><call><name>GetTransactionWeight</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>transactions</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>aux</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>hashTarget</name> <init>= <expr><call><name>arith_uint256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>SetCompact</name><argument_list>(<argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>nBits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>aMutable</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aMutable</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aMutable</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>aMutable</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"prevblock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"capabilities"</literal></expr></argument>, <argument><expr><name>aCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>aRules</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>vbavailable</name><argument_list>(<argument><expr><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>Consensus</name><operator>::</operator><name>MAX_VERSION_BITS_DEPLOYMENTS</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name></type> <name>pos</name> <init>= <expr><call><name><name>Consensus</name><operator>::</operator><name>DeploymentPos</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ThresholdState</name></type> <name>state</name> <init>= <expr><call><name>VersionBitsState</name><argument_list>(<argument><expr><name>pindexPrev</name></expr></argument>, <argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>versionbitscache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>DEFINED</name></name></expr>:</case>
            <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>FAILED</name></name></expr>:</case>
                <comment type="line">// Not exposed to GBT at all</comment>
                <break>break;</break>
            <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>LOCKED_IN</name></name></expr>:</case>
                <comment type="line">// Ensure bit is set in block version</comment>
                <expr_stmt><expr><name><name>pblock</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>|=</operator> <call><name>VersionBitsMask</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// FALL THROUGH to get vbavailable set...</comment>
            <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>STARTED</name></name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>VBDeploymentInfo</name></name><modifier>&amp;</modifier></type> <name>vbinfo</name> <init>= <expr><name><name>VersionBitsDeploymentInfo</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>vbavailable</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><call><name>gbt_vb_name</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>consensusParams</name><operator>.</operator><name>vDeployments</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>setClientRules</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>vbinfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>setClientRules</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vbinfo</name><operator>.</operator><name>gbt_force</name></name></expr>)</condition> <block>{<block_content>
                        <comment type="line">// If the client doesn't support this, don't indicate it in the [default] version</comment>
                        <expr_stmt><expr><name><name>pblock</name><operator>-&gt;</operator><name>nVersion</name></name> <operator>&amp;=</operator> <operator>~</operator><call><name>VersionBitsMask</name><argument_list>(<argument><expr><name>consensusParams</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>ThresholdState</name><operator>::</operator><name>ACTIVE</name></name></expr>:</case>
            <block>{<block_content>
                <comment type="line">// Add to rules only</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>VBDeploymentInfo</name></name><modifier>&amp;</modifier></type> <name>vbinfo</name> <init>= <expr><name><name>VersionBitsDeploymentInfo</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>aRules</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>gbt_vb_name</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>setClientRules</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>vbinfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>setClientRules</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Not supported by the client; make sure it's safe to proceed</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>vbinfo</name><operator>.</operator><name>gbt_force</name></name></expr>)</condition> <block>{<block_content>
                        <comment type="line">// If we do anything other than throw an exception here, be sure version/force isn't sent to old clients</comment>
                        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"Support for '%s' rule requires explicit client support"</literal></expr></argument>, <argument><expr><name><name>vbinfo</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"rules"</literal></expr></argument>, <argument><expr><name>aRules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vbavailable"</literal></expr></argument>, <argument><expr><name>vbavailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"vbrequired"</literal></expr></argument>, <argument><expr><call><name>int</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nMaxVersionPreVB</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here</comment>
        <comment type="line">// Because BIP 34 changed how the generation transaction is serialized, we can only use version/force back to v2 blocks</comment>
        <comment type="line">// This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated</comment>
        <comment type="line">// Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated</comment>
        <expr_stmt><expr><call><name><name>aMutable</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"version/force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"previousblockhash"</literal></expr></argument>, <argument><expr><call><name><name>pblock</name><operator>-&gt;</operator><name>hashPrevBlock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"transactions"</literal></expr></argument>, <argument><expr><name>transactions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"coinbaseaux"</literal></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"coinbasevalue"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pblock</name><operator>-&gt;</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>vout</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"longpollid"</literal></expr></argument>, <argument><expr><call><name><operator>::</operator><name>ChainActive</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Tip</name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>GetBlockHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>i64tostr</name><argument_list>(<argument><expr><name>nTransactionsUpdatedLast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"target"</literal></expr></argument>, <argument><expr><call><name><name>hashTarget</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mintime"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name><name>pindexPrev</name><operator>-&gt;</operator><name>GetMedianTimePast</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"mutable"</literal></expr></argument>, <argument><expr><name>aMutable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"noncerange"</literal></expr></argument>, <argument><expr><literal type="string">"00000000ffffffff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSigOpLimit</name> <init>= <expr><name>MAX_BLOCK_SIGOPS_COST</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nSizeLimit</name> <init>= <expr><name>MAX_BLOCK_SERIALIZED_SIZE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fPreSegWit</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>nSigOpLimit</name> <operator>%</operator> <name>WITNESS_SCALE_FACTOR</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSigOpLimit</name> <operator>/=</operator> <name>WITNESS_SCALE_FACTOR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK_NONFATAL</name><argument_list>(<argument><expr><name>nSizeLimit</name> <operator>%</operator> <name>WITNESS_SCALE_FACTOR</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSizeLimit</name> <operator>/=</operator> <name>WITNESS_SCALE_FACTOR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"sigoplimit"</literal></expr></argument>, <argument><expr><name>nSigOpLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"sizelimit"</literal></expr></argument>, <argument><expr><name>nSizeLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fPreSegWit</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"weightlimit"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>MAX_BLOCK_WEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"curtime"</literal></expr></argument>, <argument><expr><call><name><name>pblock</name><operator>-&gt;</operator><name>GetBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"bits"</literal></expr></argument>, <argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%08x"</literal></expr></argument>, <argument><expr><name><name>pblock</name><operator>-&gt;</operator><name>nBits</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"height"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pindexPrev</name><operator>-&gt;</operator><name>nHeight</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>vchCoinbaseCommitment</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"default_witness_commitment"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>vchCoinbaseCommitment</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pblocktemplate</name><operator>-&gt;</operator><name>vchCoinbaseCommitment</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<class>class <name>submitblock_StateCatcher</name> <super_list>: <super><specifier>public</specifier> <name>CValidationInterface</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>

    <constructor><specifier>explicit</specifier> <name>submitblock_StateCatcher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>hashIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>hash</name><argument_list>(<argument><expr><name>hashIn</name></expr></argument>)</argument_list></call>, <call><name>found</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>, <call><name>state</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

</public><protected>protected:
    <function><type><name>void</name></type> <name>BlockChecked</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockValidationState</name><modifier>&amp;</modifier></type> <name>stateIn</name></decl></parameter>)</parameter_list> <specifier>override</specifier> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>hash</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>stateIn</name></expr>;</expr_stmt>
    </block_content>}</block></function>
</protected>}</block>;</class>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>submitblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// We allow 2 arguments for compliance with BIP22. Argument 2 is ignored.</comment>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"submitblock"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nAttempts to submit new block to network.\n"</literal>
                <literal type="string">"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"hexdata"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"the hex-encoded block data to submit"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"dummy"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"ignored"</literal></expr><operator>,</operator> <expr><literal type="string">"dummy value, for compatibility with BIP22. This value is ignored."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResults</name><argument_list>{}</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"submitblock"</literal></expr></argument>, <argument><expr><literal type="string">"\"mydata\""</literal></expr></argument>)</argument_list></call>
            <operator>+</operator> <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"submitblock"</literal></argument>, <argument><literal type="string">"\"mydata\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CBlock</name></expr></argument>&gt;</argument_list></name></type> <name>blockptr</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>make_shared</name><argument_list type="generic">&lt;<argument><expr><name>CBlock</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBlock</name><modifier>&amp;</modifier></type> <name>block</name> <init>= <expr><operator>*</operator><name>blockptr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeHexBlk</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block decode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><call><name>IsCoinBase</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block does not start with a coinbase"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pindex</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>pindex</name><operator>-&gt;</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>BLOCK_VALID_SCRIPTS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"duplicate"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pindex</name><operator>-&gt;</operator><name>nStatus</name></name> <operator>&amp;</operator> <name>BLOCK_FAILED_MASK</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"duplicate-invalid"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CBlockIndex</name><modifier>*</modifier></type> <name>pindex</name> <init>= <expr><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>block</name><operator>.</operator><name>hashPrevBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pindex</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>UpdateUncommittedBlockStructures</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>pindex</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>GetConsensus</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>bool</name></type> <name>new_block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>submitblock_StateCatcher</name></type> <name>sc</name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>RegisterValidationInterface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>accepted</name> <init>= <expr><call><name>ProcessNewBlock</name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>blockptr</name></expr></argument>, <comment type="block">/* fForceProcessing */</comment> <argument><expr><literal type="boolean">true</literal></expr></argument>, <comment type="block">/* fNewBlock */</comment> <argument><expr><operator>&amp;</operator><name>new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UnregisterValidationInterface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_block</name> <operator>&amp;&amp;</operator> <name>accepted</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"duplicate"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sc</name><operator>.</operator><name>found</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"inconclusive"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>BIP22ValidationResult</name><argument_list>(<argument><expr><name><name>sc</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>submitheader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"submitheader"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nDecode the given hexdata as a header and submit it as a candidate chain tip if valid."</literal>
                <literal type="string">"\nThrows when the header is invalid.\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"hexdata"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR_HEX</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"the hex-encoded block header data"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"None"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><call><name>HelpExampleCli</name><argument_list>(<argument><expr><literal type="string">"submitheader"</literal></expr></argument>, <argument><expr><literal type="string">"\"aabbcc\""</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                    <macro><name>HelpExampleRpc</name><argument_list>(<argument><literal type="string">"submitheader"</literal></argument>, <argument><literal type="string">"\"aabbcc\""</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>h</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DecodeHexBlockHeader</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_DESERIALIZATION_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Block header decode failed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOCK</name><argument_list>(<argument><expr><name>cs_main</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupBlockIndex</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>hashPrevBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_VERIFY_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Must submit previous header ("</literal> <operator>+</operator> <call><name><name>h</name><operator>.</operator><name>hashPrevBlock</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">") first"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <decl_stmt><decl><type><name>BlockValidationState</name></type> <name>state</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ProcessNewBlockHeaders</name><argument_list>(<argument><expr><block>{<expr><name>h</name></expr>}</block></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>Params</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NullUniValue</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>IsError</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_VERIFY_ERROR</name></expr></argument>, <argument><expr><call><name>FormatStateMessage</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>
    <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_VERIFY_ERROR</name></expr></argument>, <argument><expr><call><name><name>state</name><operator>.</operator><name>GetRejectReason</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>estimatesmartfee</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"estimatesmartfee"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nEstimates the approximate fee per kilobyte needed for a transaction to begin\n"</literal>
                <literal type="string">"confirmation within conf_target blocks if possible and return the number of blocks\n"</literal>
                <literal type="string">"for which the estimate is valid. Uses virtual transaction size as defined\n"</literal>
                <literal type="string">"in BIP 141 (witness data is discounted).\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"conf_target"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Confirmation target in blocks (1 - 1008)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"estimate_mode"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>STR</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"CONSERVATIVE"</literal></expr><operator>,</operator> <expr><literal type="string">"The fee estimate mode.\n"</literal>
            <literal type="string">"                   Whether to return a more conservative estimate which also satisfies\n"</literal>
            <literal type="string">"                   a longer history. A conservative estimate potentially returns a\n"</literal>
            <literal type="string">"                   higher feerate and is more likely to be sufficient for the desired\n"</literal>
            <literal type="string">"                   target, but is not as responsive to short term drops in the\n"</literal>
            <literal type="string">"                   prevailing fee market.  Must be one of:\n"</literal>
            <literal type="string">"       \"UNSET\"\n"</literal>
            <literal type="string">"       \"ECONOMICAL\"\n"</literal>
            <literal type="string">"       \"CONSERVATIVE\""</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"feerate\" : x.x,     (numeric, optional) estimate fee rate in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB\n"</literal>
            <literal type="string">"  \"errors\": [ str... ] (json array of strings, optional) Errors encountered during processing\n"</literal>
            <literal type="string">"  \"blocks\" : n         (numeric) block number where estimate was found\n"</literal>
            <literal type="string">"}\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"The request target will be clamped between 2 and the highest target\n"</literal>
            <literal type="string">"fee estimation is able to return based on how long it has been running.\n"</literal>
            <literal type="string">"An error is returned if not enough transactions and blocks\n"</literal>
            <literal type="string">"have been observed to make an estimate for any number of blocks.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"estimatesmartfee"</literal></argument>, <argument><literal type="string">"6"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VSTR</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
    <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_target</name> <init>= <expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>HighestTargetTracked</name></name><argument_list>(<argument><expr><name><name>FeeEstimateHorizon</name><operator>::</operator><name>LONG_HALFLIFE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>conf_target</name> <init>= <expr><call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>max_target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>conservative</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>FeeEstimateMode</name></type> <name>fee_mode</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FeeModeFromString</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fee_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid estimate_mode parameter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>fee_mode</name> <operator>==</operator> <name><name>FeeEstimateMode</name><operator>::</operator><name>ECONOMICAL</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>conservative</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>UniValue</name></type> <name>errors</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>FeeCalculation</name></type> <name>feeCalc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feeRate</name> <init>= <expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>estimateSmartFee</name></name><argument_list>(<argument><expr><name>conf_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>feeCalc</name></expr></argument>, <argument><expr><name>conservative</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>feeRate</name> <operator>!=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"feerate"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Insufficient data or no feerate found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"blocks"</literal></expr></argument>, <argument><expr><name><name>feeCalc</name><operator>.</operator><name>returnedTarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}

static <function><type><name>UniValue</name></type> <name>estimaterawfee</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
            <expr_stmt><expr><call><name>RPCHelpMan</name><argument_list>{<argument><expr><literal type="string">"estimaterawfee"</literal></expr></argument>,
                <argument><expr><literal type="string">"\nWARNING: This interface is unstable and may disappear or change!\n"</literal>
                <literal type="string">"\nWARNING: This is an advanced API call that is tightly coupled to the specific\n"</literal>
                <literal type="string">"         implementation of fee estimation. The parameters it can be called with\n"</literal>
                <literal type="string">"         and the results it returns will change if the internal implementation changes.\n"</literal>
                <literal type="string">"\nEstimates the approximate fee per kilobyte needed for a transaction to begin\n"</literal>
                <literal type="string">"confirmation within conf_target blocks if possible. Uses virtual transaction size as\n"</literal>
                <literal type="string">"defined in BIP 141 (witness data is discounted).\n"</literal></expr></argument>,
                <block>{<block_content>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"conf_target"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Optional</name><operator>::</operator><name>NO</name></name></expr><operator>,</operator> <expr><literal type="string">"Confirmation target in blocks (1 - 1008)"</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                    <block>{<block_content><expr_stmt><expr><literal type="string">"threshold"</literal></expr><operator>,</operator> <expr><name><name>RPCArg</name><operator>::</operator><name>Type</name><operator>::</operator><name>NUM</name></name></expr><operator>,</operator> <comment type="block">/* default */</comment> <expr><literal type="string">"0.95"</literal></expr><operator>,</operator> <expr><literal type="string">"The proportion of transactions in a given feerate range that must have been\n"</literal>
            <literal type="string">"               confirmed within conf_target in order to consider those feerates as high enough and proceed to check\n"</literal>
            <literal type="string">"               lower buckets."</literal></expr></expr_stmt>}</block_content></block><operator>,</operator>
                <expr_stmt/>}</block_content></block>,
                <argument><expr><call><name>RPCResult</name><argument_list>{
            <argument><expr><literal type="string">"{\n"</literal>
            <literal type="string">"  \"short\" : {            (json object, optional) estimate for short time horizon\n"</literal>
            <literal type="string">"      \"feerate\" : x.x,        (numeric, optional) estimate fee rate in "</literal> <operator>+</operator> <name>CURRENCY_UNIT</name> <operator>+</operator> <literal type="string">"/kB\n"</literal>
            <literal type="string">"      \"decay\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\n"</literal>
            <literal type="string">"      \"scale\" : x,            (numeric) The resolution of confirmation targets at this time horizon\n"</literal>
            <literal type="string">"      \"pass\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\n"</literal>
            <literal type="string">"          \"startrange\" : x.x,     (numeric) start of feerate range\n"</literal>
            <literal type="string">"          \"endrange\" : x.x,       (numeric) end of feerate range\n"</literal>
            <literal type="string">"          \"withintarget\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\n"</literal>
            <literal type="string">"          \"totalconfirmed\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\n"</literal>
            <literal type="string">"          \"inmempool\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\n"</literal>
            <literal type="string">"          \"leftmempool\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\n"</literal>
            <literal type="string">"      },\n"</literal>
            <literal type="string">"      \"fail\" : { ... },       (json object, optional) information about the highest range of feerates to fail to meet the threshold\n"</literal>
            <literal type="string">"      \"errors\":  [ str... ]   (json array of strings, optional) Errors encountered during processing\n"</literal>
            <literal type="string">"  },\n"</literal>
            <literal type="string">"  \"medium\" : { ... },    (json object, optional) estimate for medium time horizon\n"</literal>
            <literal type="string">"  \"long\" : { ... }       (json object) estimate for long time horizon\n"</literal>
            <literal type="string">"}\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Results are returned for any horizon which tracks blocks up to the confirmation target.\n"</literal></expr></argument>
                }</argument_list></call></expr></argument>,
                <argument><expr><call><name>RPCExamples</name><argument_list>{
                    <argument><expr><macro><name>HelpExampleCli</name><argument_list>(<argument><literal type="string">"estimaterawfee"</literal></argument>, <argument><literal type="string">"6 0.9"</literal></argument>)</argument_list></macro></expr></argument>
                }</argument_list></call></expr></argument>,
            }</argument_list></call><operator>.</operator><call><name>Check</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RPCTypeCheck</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name></name></expr></argument>, <block>{<block_content><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr><operator>,</operator> <expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></block_content>}</block></argument_list></call></expr></expr_stmt><operator>,</operator> <expr_stmt><expr><literal type="boolean">true</literal></expr></expr_stmt>)</block_content></block>;</function>
    <expr_stmt><expr><call><name>RPCTypeCheckArgument</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>UniValue</name><operator>::</operator><name>VNUM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_target</name> <init>= <expr><call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>HighestTargetTracked</name></name><argument_list>(<argument><expr><name><name>FeeEstimateHorizon</name><operator>::</operator><name>LONG_HALFLIFE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>conf_target</name> <init>= <expr><call><name>ParseConfirmTarget</name><argument_list>(<argument><expr><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>max_target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>threshold</name> <init>= <expr><literal type="number">0.95</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>isNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>threshold</name> <operator>=</operator> <name><name>request</name><operator>.</operator><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_real</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>threshold</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>threshold</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <throw>throw <expr><call><name>JSONRPCError</name><argument_list>(<argument><expr><name>RPC_INVALID_PARAMETER</name></expr></argument>, <argument><expr><literal type="string">"Invalid threshold"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></if></if_stmt>

    <function_decl><type><name>UniValue</name></type> <name>result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>FeeEstimateHorizon</name></type> <name>horizon</name> <range>: <expr><block>{<expr><name><name>FeeEstimateHorizon</name><operator>::</operator><name>SHORT_HALFLIFE</name></name></expr>, <expr><name><name>FeeEstimateHorizon</name><operator>::</operator><name>MED_HALFLIFE</name></name></expr>, <expr><name><name>FeeEstimateHorizon</name><operator>::</operator><name>LONG_HALFLIFE</name></name></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>CFeeRate</name></type> <name>feeRate</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EstimationResult</name></type> <name>buckets</name></decl>;</decl_stmt>

        <comment type="line">// Only output results for horizons which track the target</comment>
        <if_stmt><if>if <condition>(<expr><name>conf_target</name> <operator>&gt;</operator> <call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>HighestTargetTracked</name></name><argument_list>(<argument><expr><name>horizon</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>feeRate</name> <operator>=</operator> <call><name><operator>::</operator><name>feeEstimator</name><operator>.</operator><name>estimateRawFee</name></name><argument_list>(<argument><expr><name>conf_target</name></expr></argument>, <argument><expr><name>threshold</name></expr></argument>, <argument><expr><name>horizon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>UniValue</name></type> <name>horizon_result</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name>UniValue</name></type> <name>errors</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VARR</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><type><name>UniValue</name></type> <name>passbucket</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"startrange"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"endrange"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"withintarget"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>withinTarget</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"totalconfirmed"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>totalConfirmed</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"inmempool"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>inMempool</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>passbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"leftmempool"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>pass</name><operator>.</operator><name>leftMempool</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>UniValue</name></type> <name>failbucket</name><parameter_list>(<parameter><decl><type><name><name>UniValue</name><operator>::</operator><name>VOBJ</name></name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"startrange"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"endrange"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"withintarget"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>withinTarget</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"totalconfirmed"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>totalConfirmed</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"inmempool"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>inMempool</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>failbucket</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"leftmempool"</literal></expr></argument>, <argument><expr><call><name>round</name><argument_list>(<argument><expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>leftMempool</name></name> <operator>*</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// CFeeRate(0) is used to indicate error as a return value from estimateRawFee</comment>
        <if_stmt><if>if <condition>(<expr><name>feeRate</name> <operator>!=</operator> <call><name>CFeeRate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"feerate"</literal></expr></argument>, <argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><call><name><name>feeRate</name><operator>.</operator><name>GetFeePerK</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"decay"</literal></expr></argument>, <argument><expr><name><name>buckets</name><operator>.</operator><name>decay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scale"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buckets</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>, <argument><expr><name>passbucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output</comment>
            <if_stmt><if>if <condition>(<expr><name><name>buckets</name><operator>.</operator><name>fail</name><operator>.</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><name>failbucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Output only information that is still meaningful in the event of error</comment>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"decay"</literal></expr></argument>, <argument><expr><name><name>buckets</name><operator>.</operator><name>decay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"scale"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buckets</name><operator>.</operator><name>scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"fail"</literal></expr></argument>, <argument><expr><name>failbucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errors</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="string">"Insufficient data or no feerate found which meets threshold"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>horizon_result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>,<argument><expr><name>errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pushKV</name></name><argument_list>(<argument><expr><call><name>StringForFeeEstimateHorizon</name><argument_list>(<argument><expr><name>horizon</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>horizon_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
}

<comment type="line">// clang-format off</comment>
static <decl_stmt><decl><type><specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>commands</name><index>[]</index></name> <init>=
<expr><block>{ <comment type="line">//  category              name                      actor (function)         argNames</comment>
  <comment type="line">//  --------------------- ------------------------  -----------------------  ----------</comment>
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"getnetworkhashps"</literal></expr>,       <expr><operator>&amp;</operator><name>getnetworkhashps</name></expr>,       <expr><block>{<expr><literal type="string">"nblocks"</literal></expr>,<expr><literal type="string">"height"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"getmininginfo"</literal></expr>,          <expr><operator>&amp;</operator><name>getmininginfo</name></expr>,          <expr><block>{}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"prioritisetransaction"</literal></expr>,  <expr><operator>&amp;</operator><name>prioritisetransaction</name></expr>,  <expr><block>{<expr><literal type="string">"txid"</literal></expr>,<expr><literal type="string">"dummy"</literal></expr>,<expr><literal type="string">"fee_delta"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"getblocktemplate"</literal></expr>,       <expr><operator>&amp;</operator><name>getblocktemplate</name></expr>,       <expr><block>{<expr><literal type="string">"template_request"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"submitblock"</literal></expr>,            <expr><operator>&amp;</operator><name>submitblock</name></expr>,            <expr><block>{<expr><literal type="string">"hexdata"</literal></expr>,<expr><literal type="string">"dummy"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"mining"</literal></expr>,             <expr><literal type="string">"submitheader"</literal></expr>,           <expr><operator>&amp;</operator><name>submitheader</name></expr>,           <expr><block>{<expr><literal type="string">"hexdata"</literal></expr>}</block></expr> }</block></expr>,


    <expr><block>{ <expr><literal type="string">"generating"</literal></expr>,         <expr><literal type="string">"generatetoaddress"</literal></expr>,      <expr><operator>&amp;</operator><name>generatetoaddress</name></expr>,      <expr><block>{<expr><literal type="string">"nblocks"</literal></expr>,<expr><literal type="string">"address"</literal></expr>,<expr><literal type="string">"maxtries"</literal></expr>}</block></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"generating"</literal></expr>,         <expr><literal type="string">"generatetodescriptor"</literal></expr>,   <expr><operator>&amp;</operator><name>generatetodescriptor</name></expr>,   <expr><block>{<expr><literal type="string">"num_blocks"</literal></expr>,<expr><literal type="string">"descriptor"</literal></expr>,<expr><literal type="string">"maxtries"</literal></expr>}</block></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="string">"util"</literal></expr>,               <expr><literal type="string">"estimatesmartfee"</literal></expr>,       <expr><operator>&amp;</operator><name>estimatesmartfee</name></expr>,       <expr><block>{<expr><literal type="string">"conf_target"</literal></expr>, <expr><literal type="string">"estimate_mode"</literal></expr>}</block></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="string">"hidden"</literal></expr>,             <expr><literal type="string">"estimaterawfee"</literal></expr>,         <expr><operator>&amp;</operator><name>estimaterawfee</name></expr>,         <expr><block>{<expr><literal type="string">"conf_target"</literal></expr>, <expr><literal type="string">"threshold"</literal></expr>}</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="line">// clang-format on</comment>

<function><type><name>void</name></type> <name>RegisterMiningRPCCommands</name><parameter_list>(<parameter><decl><type><name>CRPCTable</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>vcidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>vcidx</name> <operator>&lt;</operator> <call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>vcidx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>appendCommand</name></name><argument_list>(<argument><expr><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commands</name><index>[<expr><name>vcidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>
</unit>
