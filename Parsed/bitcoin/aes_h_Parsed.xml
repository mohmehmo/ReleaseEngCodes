<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/crypto/aes.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<comment type="line">//</comment>
<comment type="line">// C++ wrapper around ctaes, a constant-time AES implementation</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CRYPTO_AES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CRYPTO_AES_H</name></cpp:macro></cpp:define>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/ctaes/ctaes.h&gt;</cpp:file></cpp:include>
</block_content>}</block></extern>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>AES_BLOCKSIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>AES256_KEYSIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** An encryption class for AES-256. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AES256Encrypt</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>AES256_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <function_decl><type><name>explicit</name></type> <name>AES256Encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><operator>~</operator><call><name>AES256Encrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>Encrypt</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <name><name>ciphertext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name><name>plaintext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** A decryption class for AES-256. */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>AES256Decrypt</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>AES256_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <function_decl><type><name>explicit</name></type> <name>AES256Decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><operator>~</operator><call><name>AES256Decrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name></type> <name>Decrypt</name><argument_list>(<argument><expr><name>unsigned</name> <name>char</name> <name><name>plaintext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <name><name>ciphertext</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list> const</decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AES256CBCEncrypt</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>AES256CBCEncrypt</name><argument_list>(<argument>const unsigned char key[AES256_KEYSIZE]</argument>, <argument>const unsigned char ivIn[AES_BLOCKSIZE]</argument>, <argument>bool padIn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>AES256CBCEncrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>AES256Encrypt</name></type> <name>enc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>pad</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AES256CBCDecrypt</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <macro><name>AES256CBCDecrypt</name><argument_list>(<argument>const unsigned char key[AES256_KEYSIZE]</argument>, <argument>const unsigned char ivIn[AES_BLOCKSIZE]</argument>, <argument>bool padIn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>AES256CBCDecrypt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>int</name> <name>size</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name><operator>*</operator> <name>out</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><specifier>const</specifier> <name>AES256Decrypt</name></type> <name>dec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>pad</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[<expr><name>AES_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CRYPTO_AES_H</comment>
</unit>
