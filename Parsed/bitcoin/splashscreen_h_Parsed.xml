<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/splashscreen.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_SPLASHSCREEN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_SPLASHSCREEN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QWidget&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>NetworkStyle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Wallet</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Class for the splashscreen with information of the running client.
 *
 * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization
 * can take a long time, and in that case a progress window that cannot be
 * moved around and minimized has turned out to be frustrating to the user.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>SplashScreen</name> <range>: <expr><name>public</name> <name>QWidget</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <macro><name>SplashScreen</name><argument_list>(<argument>interfaces::Node&amp; node</argument>, <argument>Qt::WindowFlags f</argument>, <argument>const NetworkStyle *networkStyle</argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><call><name>SplashScreen</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>void</name> <call><name>paintEvent</name><argument_list>(<argument><expr><name>QPaintEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>closeEvent</name><argument_list>(<argument><expr><name>QCloseEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Hide the splash screen window and schedule the splash screen object for deletion */</comment>
    <name>void</name> <call><name>finish</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Show message and progress */</comment>
    <expr><name>void</name> <macro><name>showMessage</name><argument_list>(<argument>const QString &amp;message</argument>, <argument>int alignment</argument>, <argument>const QColor &amp;color</argument>)</argument_list></macro></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator> <name>obj</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator> <name>ev</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Connect core signals to splash screen */</comment>
    <name>void</name> <call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Disconnect core signals to splash screen */</comment>
    <expr><name>void</name> <call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Connect wallet signals to splash screen */</comment>
    <expr><name>void</name> <call><name>ConnectWallet</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name> <name>wallet</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>QPixmap</name> <name>pixmap</name></expr>;
    <expr><name>QString</name> <name>curMessage</name></expr>;
    <expr><name>QColor</name> <name>curColor</name></expr>;
    <expr><name>int</name> <name>curAlignment</name></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_init_message</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_show_progress</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_load_wallet</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Wallet</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_connected_wallets</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>m_connected_wallet_handlers</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_SPLASHSCREEN_H</comment>
</unit>
