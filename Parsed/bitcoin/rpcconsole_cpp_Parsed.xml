<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/rpcconsole.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/rpcconsole.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/forms/ui_debugwindow.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/bantablemodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/clientmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/platformstyle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/walletmodel.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chainparams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;db_cxx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wallet/wallet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QKeyEvent&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMenu&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMessageBox&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScrollBar&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QScreen&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSettings&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTimer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QStringList&gt;</cpp:file></cpp:include>

<comment type="line">// TODO: add a scrollback limit, as there is currently none</comment>
<comment type="line">// TODO: make it possible to filter out categories (esp debug messages when implemented)</comment>
<comment type="line">// TODO: receive errors and debug messages through ClientModel</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>CONSOLE_HISTORY</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INITIAL_TRAFFIC_GRAPH_MINS</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>QSize</name></type> <name>FONT_RANGE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>fontSizeSettingsKey</name><index>[]</index></name> <init>= <expr><literal type="string">"consoleFontSize"</literal></expr></init></decl>;</decl_stmt>

<struct><specifier>const</specifier> struct <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>ICON_MAPPING</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"cmd-request"</literal></expr>, <expr><literal type="string">":/icons/tx_input"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cmd-reply"</literal></expr>, <expr><literal type="string">":/icons/tx_output"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"cmd-error"</literal></expr>, <expr><literal type="string">":/icons/tx_output"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"misc"</literal></expr>, <expr><literal type="string">":/icons/tx_inout"</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="null">nullptr</literal></expr>, <expr><literal type="null">nullptr</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>

<namespace>namespace <block>{

<comment type="line">// don't add private key handling cmd's to the history</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>QStringList</name></type> <name>historyFilter</name> <init>= <expr><call><name>QStringList</name><argument_list>()</argument_list></call>
    <operator>&lt;&lt;</operator> <literal type="string">"importprivkey"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"importmulti"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"sethdseed"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"signmessagewithprivkey"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"signrawtransactionwithkey"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"walletpassphrase"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"walletpassphrasechange"</literal>
    <operator>&lt;&lt;</operator> <literal type="string">"encryptwallet"</literal></expr></init></decl>;</decl_stmt>

}</block></namespace>

<comment type="block">/* Object for executing console RPC commands in a separate thread.
*/</comment>
<class>class <name>RPCExecutor</name> <super_list>: <super><specifier>public</specifier> <name>QObject</name></super></super_list>
<block>{<private type="default">
    <macro><name>Q_OBJECT</name></macro>
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>RPCExecutor</name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

</public><public>public <name>Q_SLOTS</name>:
    <function_decl><type><name>void</name></type> <name>request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name></decl></parameter>)</parameter_list>;</function_decl>

<label><name>Q_SIGNALS</name>:</label>
    <function_decl><type><name>void</name></type> <name>reply</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>m_node</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="block" format="doxygen">/** Class for handling RPC timers
 * (used for e.g. re-locking the wallet after a timeout)
 */</comment>
<class>class <name>QtRPCTimerBase</name><super_list>: <super><specifier>public</specifier> <name>QObject</name></super>, <super><specifier>public</specifier> <name>RPCTimerBase</name></super></super_list>
<block>{<private type="default">
    <macro><name>Q_OBJECT</name></macro>
</private><public>public:
    <constructor><name>QtRPCTimerBase</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>_func</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>millis</name></decl></parameter>)</parameter_list><member_init_list>:
        <call><name>func</name><argument_list>(<argument><expr><name>_func</name></expr></argument>)</argument_list></call>
    </member_init_list><block>{<block_content>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>setSingleShot</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTimer</name><operator>::</operator><name>timeout</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture><block>{<block_content> <expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
    <destructor><name>~QtRPCTimerBase</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></destructor>
</public><private>private:
    <decl_stmt><decl><type><name>QTimer</name></type> <name>timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name></type> <name>func</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>QtRPCTimerInterface</name><super_list>: <super><specifier>public</specifier> <name>RPCTimerInterface</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <destructor><name>~QtRPCTimerInterface</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></destructor>
    <function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Name</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"Qt"</literal></expr>;</return> </block_content>}</block></function>
    <function><type><name>RPCTimerBase</name><modifier>*</modifier></type> <name>NewTimer</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>millis</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>QtRPCTimerBase</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/rpcconsole.moc&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Split shell command line into a list of arguments and optionally execute the command(s).
 * Aims to emulate \c bash and friends.
 *
 * - Command nesting is possible with parenthesis; for example: validateaddress(getnewaddress())
 * - Arguments are delimited with whitespace or comma
 * - Extra whitespace at the beginning and end and between arguments will be ignored
 * - Text can be "double" or 'single' quoted
 * - The backslash \c \ is used as escape character
 *   - Outside quotes, any character can be escaped
 *   - Within double quotes, only escape \c " and backslashes before a \c " or another backslash
 *   - Within single quotes, no escaping is possible and no special interpretation takes place
 *
 * @param[in]    node    optional node to execute command on
 * @param[out]   strResult   stringified result from the executed command(chain)
 * @param[in]    strCommand  Command line to split
 * @param[in]    fExecute    set true if you want the command to be executed
 * @param[out]   pstrFilteredOut  Command line, filtered to remove any sensitive data
 */</comment>

<function><type><name>bool</name></type> <name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>strResult</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>strCommand</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fExecute</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pstrFilteredOut</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <enum>enum <name>CmdParseState</name>
    <block>{
        <decl><name>STATE_EATING_SPACES</name></decl>,
        <decl><name>STATE_EATING_SPACES_IN_ARG</name></decl>,
        <decl><name>STATE_EATING_SPACES_IN_BRACKETS</name></decl>,
        <decl><name>STATE_ARGUMENT</name></decl>,
        <decl><name>STATE_SINGLEQUOTED</name></decl>,
        <decl><name>STATE_DOUBLEQUOTED</name></decl>,
        <decl><name>STATE_ESCAPE_OUTER</name></decl>,
        <decl><name>STATE_ESCAPE_DOUBLEQUOTED</name></decl>,
        <decl><name>STATE_COMMAND_EXECUTED</name></decl>,
        <decl><name>STATE_COMMAND_EXECUTED_INNER</name></decl>
    }</block> <decl><name>state</name> <init>= <expr><name>STATE_EATING_SPACES</name></expr></init></decl>;</enum>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>curarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>lastResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>nDepthInsideSensitive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>filter_begin_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>chpos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>filter_ranges</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>add_to_current_stack</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>strArg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>nDepthInsideSensitive</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>historyFilter</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>strArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>CaseInsensitive</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nDepthInsideSensitive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>filter_begin_pos</name> <operator>=</operator> <name>chpos</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// Make sure stack is not empty before adding something</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>strArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>close_out_params</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nDepthInsideSensitive</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>nDepthInsideSensitive</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>filter_begin_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>filter_ranges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>filter_begin_pos</name></expr></argument>, <argument><expr><name>chpos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>filter_begin_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strCommandTerminated</name> <init>= <expr><name>strCommand</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>strCommandTerminated</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>strCommandTerminated</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>chpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chpos</name> <operator>&lt;</operator> <call><name><name>strCommandTerminated</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>chpos</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>strCommandTerminated</name><index>[<expr><name>chpos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch<condition>(<expr><name>state</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>STATE_COMMAND_EXECUTED_INNER</name></expr>:</case>
            <case>case <expr><name>STATE_COMMAND_EXECUTED</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>breakParsing</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                <switch>switch<condition>(<expr><name>ch</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><literal type="char">'['</literal></expr>:</case> <expr_stmt><expr><call><name><name>curarg</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_COMMAND_EXECUTED_INNER</name></expr>;</expr_stmt> <break>break;</break>
                    <default>default:</default>
                        <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>STATE_COMMAND_EXECUTED_INNER</name></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition>
                            <block>{<block_content>
                                <comment type="line">// append char to the current argument (which is also used for the query command)</comment>
                                <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt>
                                <break>break;</break>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>curarg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>fExecute</name></expr>)</condition>
                            <block>{<block_content>
                                <comment type="line">// if we have a value query, query arrays with index and objects with a string key</comment>
                                <decl_stmt><decl><type><name>UniValue</name></type> <name>subelement</name></decl>;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><call><name><name>lastResult</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition>
                                <block>{<block_content>
                                    <for>for<control>(<init><decl><type><name>char</name></type> <name>argch</name><range>: <expr><name>curarg</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsDigit</name><argument_list>(<argument><expr><name>argch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid result query"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt></block_content></block></for>
                                    <expr_stmt><expr><name>subelement</name> <operator>=</operator> <name><name>lastResult</name><index>[<expr><call><name>atoi</name><argument_list>(<argument><expr><call><name><name>curarg</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <if type="elseif">else if <condition>(<expr><call><name><name>lastResult</name><operator>.</operator><name>isObject</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><name>subelement</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>lastResult</name></expr></argument>, <argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                                <else>else<block type="pseudo"><block_content>
                                    <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid result query"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></else></if_stmt> <comment type="line">//no array or object: abort</comment>
                                <expr_stmt><expr><name>lastResult</name> <operator>=</operator> <name>subelement</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_COMMAND_EXECUTED</name></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <comment type="line">// don't break parsing when the char is required for the next argument</comment>
                        <expr_stmt><expr><name>breakParsing</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

                        <comment type="line">// pop the stack and return the result to the current command arguments</comment>
                        <expr_stmt><expr><call><name>close_out_params</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// don't stringify the json in case of a string to avoid doublequotes</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>lastResult</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>curarg</name> <operator>=</operator> <call><name><name>lastResult</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <else>else<block type="pseudo"><block_content>
                            <expr_stmt><expr><name>curarg</name> <operator>=</operator> <call><name><name>lastResult</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <comment type="line">// if we have a non empty result, use it as stack argument otherwise as general result</comment>
                        <if_stmt><if>if <condition>(<expr><call><name><name>curarg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>add_to_current_stack</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                            <else>else<block type="pseudo"><block_content>
                                <expr_stmt><expr><name>strResult</name> <operator>=</operator> <name>curarg</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>curarg</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// assume eating space state</comment>
                        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EATING_SPACES</name></expr>;</expr_stmt>
                </block_content>}</block></switch>
                <if_stmt><if>if <condition>(<expr><name>breakParsing</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block>
            <case>case <expr><name>STATE_ARGUMENT</name></expr>:</case> <comment type="line">// In or after argument</comment>
            <case>case <expr><name>STATE_EATING_SPACES_IN_ARG</name></expr>:</case>
            <case>case <expr><name>STATE_EATING_SPACES_IN_BRACKETS</name></expr>:</case>
            <case>case <expr><name>STATE_EATING_SPACES</name></expr>:</case> <comment type="line">// Handle runs of whitespace</comment>
                <switch>switch<condition>(<expr><name>ch</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DOUBLEQUOTED</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="char">'\''</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_SINGLEQUOTED</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ESCAPE_OUTER</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="char">'('</literal></expr>:</case> <case>case <expr><literal type="char">')'</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>STATE_EATING_SPACES_IN_ARG</name></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Syntax"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>STATE_ARGUMENT</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>nDepthInsideSensitive</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><operator>++</operator><name>nDepthInsideSensitive</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// don't allow commands after executed commands on baselevel</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Syntax"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>add_to_current_stack</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>curarg</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EATING_SPACES_IN_BRACKETS</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>fExecute</name></expr>)</condition> <block>{<block_content>
                            <comment type="line">// Convert argument list to JSON objects in method-dependent way,</comment>
                            <comment type="line">// and pass it along with the method name to the dispatcher.</comment>
                            <decl_stmt><decl><type><name>UniValue</name></type> <name>params</name> <init>= <expr><call><name>RPCConvertValues</name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>method</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>uri</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
                            <if_stmt><if>if <condition>(<expr><name>wallet_model</name></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>QByteArray</name></type> <name>encodedName</name> <init>= <expr><call><name><name>QUrl</name><operator>::</operator><name>toPercentEncoding</name></name><argument_list>(<argument><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>getWalletName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>uri</name> <operator>=</operator> <literal type="string">"/wallet/"</literal><operator>+</operator><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><call><name><name>encodedName</name><operator>.</operator><name>constData</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>encodedName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>lastResult</name> <operator>=</operator> <call><name><name>node</name><operator>-&gt;</operator><name>executeRpc</name></name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_COMMAND_EXECUTED</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>curarg</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">','</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
                    <if_stmt><if>if<condition>(<expr><name>state</name> <operator>==</operator> <name>STATE_EATING_SPACES_IN_ARG</name> <operator>&amp;&amp;</operator> <call><name><name>curarg</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
                        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid Syntax"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if>

                    <if type="elseif">else if<condition>(<expr><name>state</name> <operator>==</operator> <name>STATE_ARGUMENT</name></expr>)</condition> <comment type="line">// Space ends argument</comment>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>add_to_current_stack</name><argument_list>(<argument><expr><name>curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>curarg</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>state</name> <operator>==</operator> <name>STATE_EATING_SPACES_IN_BRACKETS</name> <operator>||</operator> <name>state</name> <operator>==</operator> <name>STATE_ARGUMENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EATING_SPACES_IN_ARG</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_EATING_SPACES</name></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default> <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ARGUMENT</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
                <break>break;</break>
            <case>case <expr><name>STATE_SINGLEQUOTED</name></expr>:</case> <comment type="line">// Single-quoted string</comment>
                <switch>switch<condition>(<expr><name>ch</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="char">'\''</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ARGUMENT</name></expr>;</expr_stmt> <break>break;</break>
                <default>default:</default> <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
                <break>break;</break>
            <case>case <expr><name>STATE_DOUBLEQUOTED</name></expr>:</case> <comment type="line">// Double-quoted string</comment>
                <switch>switch<condition>(<expr><name>ch</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="char">'"'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ARGUMENT</name></expr>;</expr_stmt> <break>break;</break>
                <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ESCAPE_DOUBLEQUOTED</name></expr>;</expr_stmt> <break>break;</break>
                <default>default:</default> <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt>
            </block_content>}</block></switch>
                <break>break;</break>
            <case>case <expr><name>STATE_ESCAPE_OUTER</name></expr>:</case> <comment type="line">// '\' outside quotes</comment>
                <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_ARGUMENT</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>STATE_ESCAPE_DOUBLEQUOTED</name></expr>:</case> <comment type="line">// '\' in double-quoted text</comment>
                <if_stmt><if>if<condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// keep '\' for everything but the quote and '\' itself</comment>
                <expr_stmt><expr><name>curarg</name> <operator>+=</operator> <name>ch</name></expr>;</expr_stmt> <expr_stmt><expr><name>state</name> <operator>=</operator> <name>STATE_DOUBLEQUOTED</name></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>pstrFilteredOut</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>STATE_COMMAND_EXECUTED</name> <operator>==</operator> <name>state</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>close_out_params</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>pstrFilteredOut</name> <operator>=</operator> <name>strCommand</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><call><name><name>filter_ranges</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <call><name><name>filter_ranges</name><operator>.</operator><name>rend</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pstrFilteredOut</name><operator>-&gt;</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name> <operator>-</operator> <name><name>i</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="string">"(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
    <switch>switch<condition>(<expr><name>state</name></expr>)</condition> <comment type="line">// final state</comment>
    <block>{<block_content>
        <case>case <expr><name>STATE_COMMAND_EXECUTED</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>lastResult</name><operator>.</operator><name>isStr</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>strResult</name> <operator>=</operator> <call><name><name>lastResult</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>strResult</name> <operator>=</operator> <call><name><name>lastResult</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <case>case <expr><name>STATE_ARGUMENT</name></expr>:</case>
        <case>case <expr><name>STATE_EATING_SPACES</name></expr>:</case>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <default>default:</default> <comment type="line">// ERROR to end in one of the other states</comment>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCExecutor</name><operator>::</operator><name>request</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <try>try
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>executableCommand</name> <init>= <expr><call><name><name>command</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Catch the console-only-help command before RPC call is executed and reply with help text as-if a RPC reply.</comment>
        <if_stmt><if>if<condition>(<expr><name>executableCommand</name> <operator>==</operator> <literal type="string">"help-console\n"</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_REPLY</name></name></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n"</literal>
                <literal type="string">"This console accepts RPC commands using the standard syntax.\n"</literal>
                <literal type="string">"   example:    getblockhash 0\n\n"</literal>

                <literal type="string">"This console can also accept RPC commands using the parenthesized syntax.\n"</literal>
                <literal type="string">"   example:    getblockhash(0)\n\n"</literal>

                <literal type="string">"Commands may be nested when specified with the parenthesized syntax.\n"</literal>
                <literal type="string">"   example:    getblock(getblockhash(0) 1)\n\n"</literal>

                <literal type="string">"A space or a comma can be used to delimit arguments for either syntax.\n"</literal>
                <literal type="string">"   example:    getblockhash 0\n"</literal>
                <literal type="string">"               getblockhash,0\n\n"</literal>

                <literal type="string">"Named results can be queried with a non-quoted key string in brackets using the parenthesized syntax.\n"</literal>
                <literal type="string">"   example:    getblock(getblockhash(0) 1)[tx]\n\n"</literal>

                <literal type="string">"Results without keys can be queried with an integer in brackets using the parenthesized syntax.\n"</literal>
                <literal type="string">"   example:    getblock(getblockhash(0),1)[tx][0]\n\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><name>m_node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>executableCommand</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>wallet_model</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_ERROR</name></name></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Parse error: unbalanced ' or \""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_REPLY</name></name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><name>UniValue</name><modifier>&amp;</modifier></type> <name>objError</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <try>try <comment type="line">// Nice formatting for standard-format error</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>objError</name></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>message</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>objError</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_ERROR</name></name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" (code "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block>
        <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>runtime_error</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <comment type="line">// raised when converting to invalid type, i.e. missing code or message</comment>
        <block>{<block_content>   <comment type="line">// Show raw JSON object</comment>
            <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_ERROR</name></name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>objError</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></catch>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>reply</name><argument_list>(<argument><expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_ERROR</name></name></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Error: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<constructor><name><name>RPCConsole</name><operator>::</operator><name>RPCConsole</name></name><parameter_list>(<parameter><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PlatformStyle</name> <modifier>*</modifier></type><name>_platformStyle</name></decl></parameter>, <parameter><decl><type><name>QWidget</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list> <member_init_list>:
    <call><name>QWidget</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call>,
    <call><name>m_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call>,
    <call><name>ui</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Ui</name><operator>::</operator><name>RPCConsole</name></name></expr></argument>)</argument_list></call>,
    <call><name>platformStyle</name><argument_list>(<argument><expr><name>_platformStyle</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>setupUi</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>restoreGeometry</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><literal type="string">"RPCConsoleWindowGeometry"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Restore failed (perhaps missing setting), center the window</comment>
        <expr_stmt><expr><call><name>move</name><argument_list>(<argument><expr><call><name><name>QGuiApplication</name><operator>::</operator><name>primaryScreen</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>availableGeometry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>frameGeometry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>center</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>QChar</name></type> <name>nonbreaking_hyphen</name><argument_list>(<argument><expr><literal type="number">8209</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>dataDir</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>dataDir</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name>nonbreaking_hyphen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"datadir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>blocksDir</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>blocksDir</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><name>nonbreaking_hyphen</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"blocksdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>openDebugLogfileButton</name><operator>-&gt;</operator><name>setToolTip</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>openDebugLogfileButton</name><operator>-&gt;</operator><name>toolTip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>getImagesOnButtons</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>openDebugLogfileButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/export"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fontBiggerButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/fontbigger"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>fontSmallerButton</name><operator>-&gt;</operator><name>setIcon</name></name><argument_list>(<argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorIcon</name></name><argument_list>(<argument><expr><literal type="string">":/icons/fontsmaller"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install event filter for up and down arrow</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>installEventFilter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>clearButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>clear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>fontBiggerButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>fontBigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>fontSmallerButton</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>fontSmaller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>btnClearTrafficGraph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QPushButton</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name><name>ui</name><operator>-&gt;</operator><name>trafficGraph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>TrafficGraphWidget</name><operator>::</operator><name>clear</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// disable the wallet selector by default</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelectorLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set library version labels</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>berkeleyDBVersion</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DbEnv</name><operator>::</operator><name>version</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>label_berkeleyDBVersion</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>berkeleyDBVersion</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line">// Register RPC timer interface</comment>
    <expr_stmt><expr><name>rpcTimerInterface</name> <operator>=</operator> <operator>new</operator> <call><name>QtRPCTimerInterface</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// avoid accidentally overwriting an existing, non QTThread</comment>
    <comment type="line">// based timer interface</comment>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>rpcSetTimerInterfaceIfUnset</name></name><argument_list>(<argument><expr><name>rpcTimerInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setTrafficGraphRange</name><argument_list>(<argument><expr><name>INITIAL_TRAFFIC_GRAPH_MINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>detailWidget</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerHeading</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select a peer to view detailed information."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>consoleFontSize</name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>value</name></name><argument_list>(<argument><expr><name>fontSizeSettingsKey</name></expr></argument>, <argument><expr><call><name>QFontInfo</name><argument_list>(<argument><expr><call><name>QFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>pointSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<destructor><name><name>RPCConsole</name><operator>::</operator><name>~RPCConsole</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><literal type="string">"RPCConsoleWindowGeometry"</literal></expr></argument>, <argument><expr><call><name>saveGeometry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>rpcUnsetTimerInterface</name></name><argument_list>(<argument><expr><name>rpcTimerInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>rpcTimerInterface</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>ui</name></expr>;</expr_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>RPCConsole</name><operator>::</operator><name>eventFilter</name></name><parameter_list>(<parameter><decl><type><name>QObject</name><modifier>*</modifier></type> <name>obj</name></decl></parameter>, <parameter><decl><type><name>QEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name><name>event</name><operator>-&gt;</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>QEvent</name><operator>::</operator><name>KeyPress</name></name></expr>)</condition> <comment type="line">// Special key handling</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>keyevt</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>QKeyEvent</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>keyevt</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Qt</name><operator>::</operator><name>KeyboardModifiers</name></name></type> <name>mod</name> <init>= <expr><call><name><name>keyevt</name><operator>-&gt;</operator><name>modifiers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch<condition>(<expr><name>key</name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_Up</name></name></expr>:</case> <if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>browseHistory</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> </block_content>}</block></if></if_stmt> <break>break;</break>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_Down</name></name></expr>:</case> <if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>browseHistory</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> </block_content>}</block></if></if_stmt> <break>break;</break>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_PageUp</name></name></expr>:</case> <comment type="block">/* pass paging keys to messages widget */</comment>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_PageDown</name></name></expr>:</case>
            <if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>postEvent</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QKeyEvent</name><argument_list>(<argument><expr><operator>*</operator><name>keyevt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_Return</name></name></expr>:</case>
        <case>case <expr><name><name>Qt</name><operator>::</operator><name>Key_Enter</name></name></expr>:</case>
            <comment type="line">// forward these events to lineEdit</comment>
            <if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <call><name><name>autoCompleter</name><operator>-&gt;</operator><name>popup</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>postEvent</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QKeyEvent</name><argument_list>(<argument><expr><operator>*</operator><name>keyevt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>autoCompleter</name><operator>-&gt;</operator><name>popup</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <comment type="line">// Typing in messages widget brings focus to line edit, and redirects key there</comment>
            <comment type="line">// Exclude most combinations and keys that emit no text, except paste shortcuts</comment>
            <if_stmt><if>if<condition>(<expr><name>obj</name> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name></name> <operator>&amp;&amp;</operator> <operator>(</operator>
                  <operator>(</operator><operator>!</operator><name>mod</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>keyevt</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>Key_Tab</name></name><operator>)</operator> <operator>||</operator>
                  <operator>(</operator><operator>(</operator><name>mod</name> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>ControlModifier</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>key</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_V</name></name><operator>)</operator> <operator>||</operator>
                  <operator>(</operator><operator>(</operator><name>mod</name> <operator>&amp;</operator> <name><name>Qt</name><operator>::</operator><name>ShiftModifier</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>key</name> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Insert</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>QApplication</name><operator>::</operator><name>postEvent</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>QKeyEvent</name><argument_list>(<argument><expr><operator>*</operator><name>keyevt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>QWidget</name><operator>::</operator><name>eventFilter</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setClientModel</name></name><parameter_list>(<parameter><decl><type><name>ClientModel</name> <modifier>*</modifier></type><name>model</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>clientModel</name> <operator>=</operator> <name>model</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>wallet_enabled</name><argument_list>{<argument><expr><literal type="boolean">false</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr_stmt><expr><name>wallet_enabled</name> <operator>=</operator> <call><name><name>WalletModel</name><operator>::</operator><name>isWalletEnabled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wallet_enabled</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Show warning, for example if this is a prerelease version</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>alertsChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>updateAlerts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateAlerts</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getStatusBarWarnings</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>trafficGraph</name><operator>-&gt;</operator><name>setClientModel</name></name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>model</name> <operator>&amp;&amp;</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// Keep up to date with client</comment>
        <expr_stmt><expr><call><name>setNumConnections</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getNumConnections</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>numConnectionsChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>setNumConnections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>&amp;</modifier></type> <name>node</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setNumBlocks</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getNumBlocks</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>QDateTime</name><operator>::</operator><name>fromTime_t</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getLastBlockTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>node</name><operator>.</operator><name>getVerificationProgress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>numBlocksChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>setNumBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>networkActiveChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>setNetworkActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateTrafficStats</name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getTotalBytesRecv</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>node</name><operator>.</operator><name>getTotalBytesSent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>bytesChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>updateTrafficStats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>model</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ClientModel</name><operator>::</operator><name>mempoolSizeChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>setMempoolSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set up peer table</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>verticalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setEditTriggers</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>NoEditTriggers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setSelectionBehavior</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>SelectRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setSelectionMode</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>ExtendedSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setContextMenuPolicy</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CustomContextMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name><name>PeerTableModel</name><operator>::</operator><name>Address</name></name></expr></argument>, <argument><expr><name>ADDRESS_COLUMN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name><name>PeerTableModel</name><operator>::</operator><name>Subversion</name></name></expr></argument>, <argument><expr><name>SUBVERSION_COLUMN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name><name>PeerTableModel</name><operator>::</operator><name>Ping</name></name></expr></argument>, <argument><expr><name>PING_COLUMN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setStretchLastSection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create peer table context menu actions</comment>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>disconnectAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Disconnect"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>banAction1h</name>      <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ban for"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"1 &amp;hour"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>banAction24h</name>     <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ban for"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"1 &amp;day"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>banAction7d</name>      <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ban for"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"1 &amp;week"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>banAction365d</name>    <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Ban for"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"1 &amp;year"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// create peer table context menu</comment>
        <expr_stmt><expr><name>peersTableContextMenu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>disconnectAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>banAction1h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>banAction24h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>banAction7d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>banAction365d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>banAction1h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content> <expr_stmt><expr><call><name>banSelectedNode</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>banAction24h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content> <expr_stmt><expr><call><name>banSelectedNode</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>banAction7d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content> <expr_stmt><expr><call><name>banSelectedNode</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>banAction365d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>this</name></argument>]</capture> <block>{<block_content> <expr_stmt><expr><call><name>banSelectedNode</name><argument_list>(<argument><expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">365</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// peer table context menu signals</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTableView</name><operator>::</operator><name>customContextMenuRequested</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>showPeersTableContextMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>disconnectAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>disconnectSelectedNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// peer table signal handling - update peer details when selecting new node</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QItemSelectionModel</name><operator>::</operator><name>selectionChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>peerSelected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// peer table signal handling - update peer details when new nodes are added to the model</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PeerTableModel</name><operator>::</operator><name>layoutChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>peerLayoutChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// peer table signal handling - cache selected node ids</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>PeerTableModel</name><operator>::</operator><name>layoutAboutToBeChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>peerLayoutAboutToChange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// set up ban table</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setModel</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>verticalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>hide</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setEditTriggers</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>NoEditTriggers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setSelectionBehavior</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>SelectRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setSelectionMode</name></name><argument_list>(<argument><expr><name><name>QAbstractItemView</name><operator>::</operator><name>SingleSelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setContextMenuPolicy</name></name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CustomContextMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name><name>BanTableModel</name><operator>::</operator><name>Address</name></name></expr></argument>, <argument><expr><name>BANSUBNET_COLUMN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setColumnWidth</name></name><argument_list>(<argument><expr><name><name>BanTableModel</name><operator>::</operator><name>Bantime</name></name></expr></argument>, <argument><expr><name>BANTIME_COLUMN_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>horizontalHeader</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setStretchLastSection</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create ban table context menu action</comment>
        <decl_stmt><decl><type><name>QAction</name><modifier>*</modifier></type> <name>unbanAction</name> <init>= <expr><operator>new</operator> <call><name>QAction</name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"&amp;Unban"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// create ban table context menu</comment>
        <expr_stmt><expr><name>banTableContextMenu</name> <operator>=</operator> <operator>new</operator> <call><name>QMenu</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>banTableContextMenu</name><operator>-&gt;</operator><name>addAction</name></name><argument_list>(<argument><expr><name>unbanAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ban table context menu signals</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTableView</name><operator>::</operator><name>customContextMenuRequested</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>showBanTableContextMenu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>unbanAction</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QAction</name><operator>::</operator><name>triggered</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>unbanSelectedNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ban table signal handling - clear peer details when clicking a peer in the ban table</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QTableView</name><operator>::</operator><name>clicked</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>clearSelectedNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ban table signal handling - ensure ban table is shown or hidden (if empty)</comment>
        <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>BanTableModel</name><operator>::</operator><name>layoutChanged</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>showOrHideBanTableIfRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showOrHideBanTableIfRequired</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Provide initial values</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>clientVersion</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>formatFullVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>clientUserAgent</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>formatSubVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>dataDir</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>dataDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>blocksDir</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>blocksDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>startupTime</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>-&gt;</operator><name>formatClientStartupTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>networkName</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name>Params</name><argument_list>()</argument_list></call><operator>.</operator><call><name>NetworkIDString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Setup autocomplete and attach it</comment>
        <decl_stmt><decl><type><name>QStringList</name></type> <name>wordList</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>commandList</name> <init>= <expr><call><name><name>m_node</name><operator>.</operator><name>listRpcCommands</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>commandList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>wordList</name> <operator>&lt;&lt;</operator> <name><name>commandList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>wordList</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="string">"help "</literal> <operator>+</operator> <name><name>commandList</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>wordList</name> <operator>&lt;&lt;</operator> <literal type="string">"help-console"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wordList</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>autoCompleter</name> <operator>=</operator> <operator>new</operator> <call><name>QCompleter</name><argument_list>(<argument><expr><name>wordList</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>autoCompleter</name><operator>-&gt;</operator><name>setModelSorting</name></name><argument_list>(<argument><expr><name><name>QCompleter</name><operator>::</operator><name>CaseSensitivelySortedModel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ui-&gt;lineEdit is initially disabled because running commands is only</comment>
        <comment type="line">// possible from now on.</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setCompleter</name></name><argument_list>(<argument><expr><name>autoCompleter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>autoCompleter</name><operator>-&gt;</operator><name>popup</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>installEventFilter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Start thread to execute RPC commands.</comment>
        <expr_stmt><expr><call><name>startExecutor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>model</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Client model is being set to 0, this means shutdown() is about to be called.</comment>
        <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>wait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>addWallet</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>walletModel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// use name for text and wallet model for internal data object (to allow to move to a wallet id later)</comment>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>addItem</name></name><argument_list>(<argument><expr><call><name><name>walletModel</name><operator>-&gt;</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>QVariant</name><operator>::</operator><name>fromValue</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// First wallet added, set to default so long as the window isn't presently visible (and potentially in use)</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelectorLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>removeWallet</name></name><parameter_list>(<parameter><decl><type><name>WalletModel</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>walletModel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>removeItem</name></name><argument_list>(<argument><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>findData</name></name><argument_list>(<argument><expr><call><name><name>QVariant</name><operator>::</operator><name>fromValue</name></name><argument_list>(<argument><expr><name>walletModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>count</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelectorLabel</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>QString</name></type> <name>categoryClass</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch<condition>(<expr><name>category</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_REQUEST</name></name></expr>:</case>  <return>return <expr><literal type="string">"cmd-request"</literal></expr>;</return> <break>break;</break>
    <case>case <expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_REPLY</name></name></expr>:</case>    <return>return <expr><literal type="string">"cmd-reply"</literal></expr>;</return> <break>break;</break>
    <case>case <expr><name><name>RPCConsole</name><operator>::</operator><name>CMD_ERROR</name></name></expr>:</case>    <return>return <expr><literal type="string">"cmd-error"</literal></expr>;</return> <break>break;</break>
    <default>default:</default>                       <return>return <expr><literal type="string">"misc"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>fontBigger</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setFontSize</name><argument_list>(<argument><expr><name>consoleFontSize</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>fontSmaller</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setFontSize</name><argument_list>(<argument><expr><name>consoleFontSize</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setFontSize</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QSettings</name></type> <name>settings</name></decl>;</decl_stmt>

    <comment type="line">//don't allow an insane font size</comment>
    <if_stmt><if>if <condition>(<expr><name><name>newSize</name> <argument_list type="generic">&lt; <argument><expr><name><name>FONT_RANGE</name><operator>.</operator><name>width</name></name><operator>(</operator><operator>)</operator> <operator>||</operator> <name>newSize</name></expr></argument> &gt;</argument_list></name> <call><name><name>FONT_RANGE</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// temp. store the console content</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>str</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>toHtml</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// replace font tags size in current content</comment>
    <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"font-size:%1pt"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>consoleFontSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"font-size:%1pt"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// store the new font size</comment>
    <expr_stmt><expr><name>consoleFontSize</name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>settings</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>fontSizeSettingsKey</name></expr></argument>, <argument><expr><name>consoleFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// clear console (reset icon sizes, default stylesheet) and re-add the content</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>oldPosFactor</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>maximum</name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>value</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>setHtml</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setValue</name><argument_list>(<argument><expr><name>oldPosFactor</name> <operator>*</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>maximum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>clear</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>clearHistory</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>clearHistory</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>historyPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add smoothly scaled icon images.</comment>
    <comment type="line">// (when using width/height on an img, Qt uses nearest instead of linear interpolation)</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ICON_MAPPING</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>url</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>document</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>addResource</name><argument_list>(
                    <argument><expr><name><name>QTextDocument</name><operator>::</operator><name>ImageResource</name></name></expr></argument>,
                    <argument><expr><call><name>QUrl</name><argument_list>(<argument><expr><name><name>ICON_MAPPING</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>platformStyle</name><operator>-&gt;</operator><name>SingleColorImage</name></name><argument_list>(<argument><expr><name><name>ICON_MAPPING</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>scaled</name><argument_list>(<argument><expr><call><name>QSize</name><argument_list>(<argument><expr><name>consoleFontSize</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>consoleFontSize</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>IgnoreAspectRatio</name></name></expr></argument>, <argument><expr><name><name>Qt</name><operator>::</operator><name>SmoothTransformation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Set default style sheet</comment>
    <decl_stmt><decl><type><name>QFontInfo</name></type> <name>fixedFontInfo</name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>fixedPitchFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>document</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>setDefaultStyleSheet</name><argument_list>(
        <argument><expr><call><name>QString</name><argument_list>(
                <argument><expr><literal type="string">"table { }"</literal>
                <literal type="string">"td.time { color: #808080; font-size: %2; padding-top: 3px; } "</literal>
                <literal type="string">"td.message { font-family: %1; font-size: %2; white-space:pre-wrap; } "</literal>
                <literal type="string">"td.cmd-request { color: #006060; } "</literal>
                <literal type="string">"td.cmd-error { color: red; } "</literal>
                <literal type="string">".secwarning { color: red; }"</literal>
                <literal type="string">"b { color: #006060; } "</literal></expr></argument>
            )</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>fixedFontInfo</name><operator>.</operator><name>family</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1pt"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>consoleFontSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <decl_stmt><decl><type><name>QString</name></type> <name>clsKey</name> <init>= <expr><literal type="string">"(â)-L"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>QString</name></type> <name>clsKey</name> <init>= <expr><literal type="string">"Ctrl-L"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>CMD_REPLY</name></expr></argument>, <argument><expr><operator>(</operator><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Welcome to the %1 RPC console."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal> <operator>+</operator>
                        <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Use up and down arrows to navigate history, and %1 to clear screen."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;"</literal><operator>+</operator><name>clsKey</name><operator>+</operator><literal type="string">"&lt;/b&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal> <operator>+</operator>
                        <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Type %1 for an overview of available commands."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;help&lt;/b&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"&lt;br&gt;"</literal> <operator>+</operator>
                        <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"For more information on using this console type %1."</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;help-console&lt;/b&gt;"</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                        <literal type="string">"&lt;br&gt;&lt;span class=\"secwarning\"&gt;&lt;br&gt;"</literal> <operator>+</operator>
                        <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command."</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                        <literal type="string">"&lt;/span&gt;"</literal><operator>)</operator></expr></argument>,
                        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>keyPressEvent</name></name><parameter_list>(<parameter><decl><type><name>QKeyEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>windowType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Qt</name><operator>::</operator><name>Widget</name></name> <operator>&amp;&amp;</operator> <call><name><name>event</name><operator>-&gt;</operator><name>key</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Qt</name><operator>::</operator><name>Key_Escape</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>message</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QString</name> <modifier>&amp;</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>html</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QTime</name></type> <name>time</name> <init>= <expr><call><name><name>QTime</name><operator>::</operator><name>currentTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>timeString</name> <init>= <expr><call><name><name>time</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>out</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="string">"&lt;table&gt;&lt;tr&gt;&lt;td class=\"time\" width=\"65\"&gt;"</literal> <operator>+</operator> <name>timeString</name> <operator>+</operator> <literal type="string">"&lt;/td&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="string">"&lt;td class=\"icon\" width=\"32\"&gt;&lt;img src=\""</literal> <operator>+</operator> <call><name>categoryClass</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\"&gt;&lt;/td&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="string">"&lt;td class=\"message "</literal> <operator>+</operator> <call><name>categoryClass</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\" valign=\"middle\"&gt;"</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>html</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>message</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>out</name> <operator>+=</operator> <call><name><name>GUIUtil</name><operator>::</operator><name>HtmlEscape</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="string">"&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>append</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>updateNetworkState</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>connections</name> <init>= <expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getNumConnections</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>connections</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"In:"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getNumConnections</name></name><argument_list>(<argument><expr><name>CONNECTIONS_IN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" / "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>connections</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Out:"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getNumConnections</name></name><argument_list>(<argument><expr><name>CONNECTIONS_OUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>node</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNetworkActive</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>connections</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Network activity disabled"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>numberOfConnections</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setNumConnections</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setNetworkActive</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>networkActive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setNumBlocks</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QDateTime</name><modifier>&amp;</modifier></type> <name>blockDate</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>nVerificationProgress</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>headers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>headers</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>numberOfBlocks</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lastBlockTime</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>blockDate</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setMempoolSize</name></name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>numberOfTxs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dynUsage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>mempoolNumberTxs</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>numberOfTxs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dynUsage</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>mempoolSize</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>dynUsage</name><operator>/</operator><literal type="number">1000.0</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" KB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>mempoolSize</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name>dynUsage</name><operator>/</operator><literal type="number">1000000.0</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>on_lineEdit_returnPressed</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QString</name></type> <name>cmd</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>cmd</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strFilteredCmd</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dummy</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RPCParseCommandLine</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><call><name><name>cmd</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strFilteredCmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Failed to parse command, so we cannot even filter it for the history</comment>
                <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><literal type="string">"Invalid command line"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>exception</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>QMessageBox</name><operator>::</operator><name>critical</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>, <argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"Error: "</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>cmdBeforeBrowsing</name> <operator>=</operator> <call><name>QString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>WalletModel</name><modifier>*</modifier></type> <name>wallet_model</name><argument_list>{<argument><expr><literal type="null">nullptr</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wallet_index</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>currentIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>wallet_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>wallet_model</name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>WalletSelector</name><operator>-&gt;</operator><name>itemData</name></name><argument_list>(<argument><expr><name>wallet_index</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>value</name><argument_list type="generic">&lt;<argument><expr><name>WalletModel</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>m_last_wallet_model</name> <operator>!=</operator> <name>wallet_model</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>wallet_model</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>CMD_REQUEST</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Executing command using \"%1\" wallet"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>wallet_model</name><operator>-&gt;</operator><name>getWalletName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>CMD_REQUEST</name></expr></argument>, <argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Executing command without any wallet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>m_last_wallet_model</name> <operator>=</operator> <name>wallet_model</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>message</name><argument_list>(<argument><expr><name>CMD_REQUEST</name></expr></argument>, <argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>strFilteredCmd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Q_EMIT</name></type> <name>cmdRequest</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>m_last_wallet_model</name></expr></argument>)</argument_list></decl>;</decl_stmt>

        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name>strFilteredCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove command, if already in history</comment>
        <expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>removeOne</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Append command to history</comment>
        <expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Enforce maximum history size</comment>
        <while>while<condition>(<expr><call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>CONSOLE_HISTORY</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        <comment type="line">// Set pointer to end of history</comment>
        <expr_stmt><expr><name>historyPtr</name> <operator>=</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Scroll console view to end</comment>
        <expr_stmt><expr><call><name>scrollToEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>browseHistory</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// store current text when start browsing through the history</comment>
    <if_stmt><if>if <condition>(<expr><name>historyPtr</name> <operator>==</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmdBeforeBrowsing</name> <operator>=</operator> <call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>text</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>historyPtr</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>historyPtr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>historyPtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>historyPtr</name> <operator>&gt;</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>historyPtr</name> <operator>=</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>cmd</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>historyPtr</name> <operator>&lt;</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name><name>history</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>historyPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>cmdBeforeBrowsing</name><operator>.</operator><name>isNull</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>cmdBeforeBrowsing</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>startExecutor</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RPCExecutor</name> <modifier>*</modifier></type><name>executor</name> <init>= <expr><operator>new</operator> <call><name>RPCExecutor</name><argument_list>(<argument><expr><name>m_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>executor</name><operator>-&gt;</operator><name>moveToThread</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Replies from executor object must go to this object</comment>
    <macro><name>connect</name><argument_list>(<argument>executor</argument>, <argument>&amp;RPCExecutor::reply</argument>, <argument>this</argument>, <argument>static_cast&lt;void (RPCConsole::*)(int, const QString&amp;)&gt;(&amp;RPCConsole::message)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <comment type="line">// Requests from this object must go to executor</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCConsole</name><operator>::</operator><name>cmdRequest</name></name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCExecutor</name><operator>::</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure executor object is deleted in its own thread</comment>
    <expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>QThread</name><operator>::</operator><name>finished</name></name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>RPCExecutor</name><operator>::</operator><name>deleteLater</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Default implementation of QThread::run() simply spins up an event loop in the thread,</comment>
    <comment type="line">// which is what we want.</comment>
    <expr_stmt><expr><call><name><name>thread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>on_tabWidget_currentChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>widget</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ui</name><operator>-&gt;</operator><name>tab_console</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lineEdit</name><operator>-&gt;</operator><name>setFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>on_openDebugLogfileButton_clicked</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>GUIUtil</name><operator>::</operator><name>openDebugLogfile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>scrollToEnd</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QScrollBar</name> <modifier>*</modifier></type><name>scrollbar</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>messagesWidget</name><operator>-&gt;</operator><name>verticalScrollBar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scrollbar</name><operator>-&gt;</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>scrollbar</name><operator>-&gt;</operator><name>maximum</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>on_sldGraphRange_valueChanged</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>multiplier</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt> <comment type="line">// each position on the slider represents 5 min</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mins</name> <init>= <expr><name>value</name> <operator>*</operator> <name>multiplier</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setTrafficGraphRange</name><argument_list>(<argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setTrafficGraphRange</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>trafficGraph</name><operator>-&gt;</operator><name>setGraphRangeMins</name></name><argument_list>(<argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lblGraphRange</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatDurationStr</name></name><argument_list>(<argument><expr><name>mins</name> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>updateTrafficStats</name></name><parameter_list>(<parameter><decl><type><name>quint64</name></type> <name>totalBytesIn</name></decl></parameter>, <parameter><decl><type><name>quint64</name></type> <name>totalBytesOut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lblBytesIn</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>totalBytesIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>lblBytesOut</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>totalBytesOut</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>peerSelected</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QItemSelection</name> <modifier>&amp;</modifier></type><name>selected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>QItemSelection</name> <modifier>&amp;</modifier></type><name>deselected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Q_UNUSED</name><argument_list>(<argument><expr><name>deselected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name> <operator>||</operator> <operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>selected</name><operator>.</operator><name>indexes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CNodeCombinedStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNodeStats</name><argument_list>(<argument><expr><call><name><name>selected</name><operator>.</operator><name>indexes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>first</name><argument_list>()</argument_list></call><operator>.</operator><call><name>row</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>updateNodeDetail</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>peerLayoutAboutToChange</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QModelIndexList</name></type> <name>selected</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>selectedIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cachedNodeids</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>selected</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CNodeCombinedStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNodeStats</name><argument_list>(<argument><expr><call><name><name>selected</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>row</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cachedNodeids</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nodeid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>peerLayoutChanged</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name> <operator>||</operator> <operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>CNodeCombinedStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><literal type="null">nullptr</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fUnselect</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fReselect</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name><name>cachedNodeids</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// no node selected yet</comment>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// find the currently selected row</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>selectedRow</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QModelIndexList</name></type> <name>selectedModelIndex</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>selectedIndexes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>selectedModelIndex</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>selectedRow</name> <operator>=</operator> <call><name><name>selectedModelIndex</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>row</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check if our detail node has a row in the table (it may not necessarily</comment>
    <comment type="line">// be at selectedRow since its position can change after a layout change)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>detailNodeRow</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getRowByNodeId</name><argument_list>(<argument><expr><call><name><name>cachedNodeids</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>detailNodeRow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// detail node disappeared from table (node disconnected)</comment>
        <expr_stmt><expr><name>fUnselect</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>detailNodeRow</name> <operator>!=</operator> <name>selectedRow</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// detail node moved position</comment>
            <expr_stmt><expr><name>fUnselect</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>fReselect</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get fresh stats on the detail node.</comment>
        <expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNodeStats</name><argument_list>(<argument><expr><name>detailNodeRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fUnselect</name> <operator>&amp;&amp;</operator> <name>selectedRow</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>clearSelectedNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>fReselect</name></expr>)</condition>
    <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>cachedNodeids</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>selectRow</name></name><argument_list>(<argument><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getRowByNodeId</name><argument_list>(<argument><expr><call><name><name>cachedNodeids</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>stats</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>updateNodeDetail</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>updateNodeDetail</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNodeCombinedStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// update the detail ui with latest node information</comment>
    <decl_stmt><decl><type><name>QString</name></type> <name>peerAddrDetails</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>addrName</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>peerAddrDetails</name> <operator>+=</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"(node id: %1)"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nodeid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>addrLocal</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>peerAddrDetails</name> <operator>+=</operator> <literal type="string">"&lt;br /&gt;"</literal> <operator>+</operator> <call><name>tr</name><argument_list>(<argument><expr><literal type="string">"via %1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>addrLocal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerHeading</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>peerAddrDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerServices</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatServicesStr</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nServices</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerLastSend</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nLastSend</name></name></expr> ?</condition><then> <expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatDurationStr</name></name><argument_list>(<argument><expr><call><name>GetSystemTimeInSeconds</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nLastSend</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerLastRecv</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nLastRecv</name></name></expr> ?</condition><then> <expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatDurationStr</name></name><argument_list>(<argument><expr><call><name>GetSystemTimeInSeconds</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nLastRecv</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerBytesSent</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nSendBytes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerBytesRecv</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nRecvBytes</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerConnTime</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatDurationStr</name></name><argument_list>(<argument><expr><call><name>GetSystemTimeInSeconds</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nTimeConnected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerPingTime</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatPingTime</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>dPingTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerPingWait</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatPingTime</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>dPingWait</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerMinPing</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatPingTime</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>dMinPing</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>timeoffset</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GUIUtil</name><operator>::</operator><name>formatTimeOffset</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nTimeOffset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerVersion</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerSubversion</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>fromStdString</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>cleanSubVer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerDirection</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>fInbound</name></name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Inbound"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Outbound"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerHeight</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><call><name><name>QString</name><operator>::</operator><name>number</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>nStartingHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWhitelisted</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><ternary><condition><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>m_legacyWhitelisted</name></name></expr> ?</condition><then> <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This check fails for example if the lock was busy and</comment>
    <comment type="line">// nodeStateStats couldn't be fetched.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>fNodeStateStatsAvailable</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Ban score is init to 0</comment>
        <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerBanScore</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStateStats</name><operator>.</operator><name>nMisbehavior</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sync height is init to -1</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStateStats</name><operator>.</operator><name>nSyncHeight</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerSyncHeight</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStateStats</name><operator>.</operator><name>nSyncHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerSyncHeight</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Common height is init to -1</comment>
        <if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStateStats</name><operator>.</operator><name>nCommonHeight</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerCommonHeight</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>QString</name><argument_list>(<argument><expr><literal type="string">"%1"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>arg</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStateStats</name><operator>.</operator><name>nCommonHeight</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerCommonHeight</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>detailWidget</name><operator>-&gt;</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>resizeEvent</name></name><parameter_list>(<parameter><decl><type><name>QResizeEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>resizeEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>showEvent</name></name><parameter_list>(<parameter><decl><type><name>QShowEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>showEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name> <operator>||</operator> <operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// start PeerTableModel auto refresh</comment>
    <expr_stmt><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>startAutoRefresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>hideEvent</name></name><parameter_list>(<parameter><decl><type><name>QHideEvent</name> <modifier>*</modifier></type><name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>QWidget</name><operator>::</operator><name>hideEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name> <operator>||</operator> <operator>!</operator><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// stop PeerTableModel auto refresh</comment>
    <expr_stmt><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>stopAutoRefresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>showPeersTableContextMenu</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QPoint</name><modifier>&amp;</modifier></type> <name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QModelIndex</name></type> <name>index</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>indexAt</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>peersTableContextMenu</name><operator>-&gt;</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>QCursor</name><operator>::</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>showBanTableContextMenu</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QPoint</name><modifier>&amp;</modifier></type> <name>point</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>QModelIndex</name></type> <name>index</name> <init>= <expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>indexAt</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>index</name><operator>.</operator><name>isValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>banTableContextMenu</name><operator>-&gt;</operator><name>exec</name></name><argument_list>(<argument><expr><call><name><name>QCursor</name><operator>::</operator><name>pos</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>disconnectSelectedNode</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Get selected peer addresses</comment>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>getEntryData</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name></name></expr></argument>, <argument><expr><name><name>PeerTableModel</name><operator>::</operator><name>NetNodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// Get currently selected peer address</comment>
        <decl_stmt><decl><type><name>NodeId</name></type> <name>id</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Find the node, disconnect it and clear the selected node</comment>
        <if_stmt><if>if<condition>(<expr><call><name><name>m_node</name><operator>.</operator><name>disconnect</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>clearSelectedNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>banSelectedNode</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bantime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// Get selected peer addresses</comment>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>getEntryData</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name></name></expr></argument>, <argument><expr><name><name>PeerTableModel</name><operator>::</operator><name>NetNodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// Get currently selected peer address</comment>
        <decl_stmt><decl><type><name>NodeId</name></type> <name>id</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLongLong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get currently selected peer address</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>detailNodeRow</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getRowByNodeId</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>detailNodeRow</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <comment type="line">// Find possible nodes, ban it and clear the selected node</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CNodeCombinedStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getPeerTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>getNodeStats</name><argument_list>(<argument><expr><name>detailNodeRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>stats</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>ban</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name>BanReasonManuallyAdded</name></expr></argument>, <argument><expr><name>bantime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m_node</name><operator>.</operator><name>disconnect</name></name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>nodeStats</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>clearSelectedNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>unbanSelectedNode</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <comment type="line">// Get selected ban addresses</comment>
    <decl_stmt><decl><type><name><name>QList</name><argument_list type="generic">&lt;<argument><expr><name>QModelIndex</name></expr></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>GUIUtil</name><operator>::</operator><name>getEntryData</name></name><argument_list>(<argument><expr><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name></name></expr></argument>, <argument><expr><name><name>BanTableModel</name><operator>::</operator><name>Address</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodes</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// Get currently selected ban address</comment>
        <decl_stmt><decl><type><name>QString</name></type> <name>strNode</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSubNet</name></type> <name>possibleSubnet</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>LookupSubNet</name><argument_list>(<argument><expr><call><name><name>strNode</name><operator>.</operator><name>toStdString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>possibleSubnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>possibleSubnet</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m_node</name><operator>.</operator><name>unban</name></name><argument_list>(<argument><expr><name>possibleSubnet</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>clearSelectedNode</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerWidget</name><operator>-&gt;</operator><name>selectionModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>clearSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cachedNodeids</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>detailWidget</name><operator>-&gt;</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>peerHeading</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>tr</name><argument_list>(<argument><expr><literal type="string">"Select a peer to view detailed information."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>showOrHideBanTableIfRequired</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>clientModel</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>visible</name> <init>= <expr><call><name><name>clientModel</name><operator>-&gt;</operator><name>getBanTableModel</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><call><name>shouldShow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banlistWidget</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>banHeading</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>setTabFocus</name></name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>TabTypes</name></name></type> <name>tabType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>setCurrentIndex</name></name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><name>tabType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>QString</name></type> <name><name>RPCConsole</name><operator>::</operator><name>tabTitle</name></name><parameter_list>(<parameter><decl><type><name>TabTypes</name></type> <name>tab_type</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>ui</name><operator>-&gt;</operator><name>tabWidget</name><operator>-&gt;</operator><name>tabText</name></name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><name>tab_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>QKeySequence</name></type> <name><name>RPCConsole</name><operator>::</operator><name>tabShortcut</name></name><parameter_list>(<parameter><decl><type><name>TabTypes</name></type> <name>tab_type</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>tab_type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>TabTypes</name><operator>::</operator><name>INFO</name></name></expr>:</case> <return>return <expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_I</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name><name>TabTypes</name><operator>::</operator><name>CONSOLE</name></name></expr>:</case> <return>return <expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_T</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name><name>TabTypes</name><operator>::</operator><name>GRAPH</name></name></expr>:</case> <return>return <expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_N</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name><name>TabTypes</name><operator>::</operator><name>PEERS</name></name></expr>:</case> <return>return <expr><call><name>QKeySequence</name><argument_list>(<argument><expr><name><name>Qt</name><operator>::</operator><name>CTRL</name></name> <operator>+</operator> <name><name>Qt</name><operator>::</operator><name>Key_P</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch> <comment type="line">// no default case, so the compiler can warn about missing cases</comment>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>RPCConsole</name><operator>::</operator><name>updateAlerts</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QString</name><modifier>&amp;</modifier></type> <name>warnings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>ui</name><operator>-&gt;</operator><name>label_alerts</name><operator>-&gt;</operator><name>setVisible</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>warnings</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>ui</name><operator>-&gt;</operator><name>label_alerts</name><operator>-&gt;</operator><name>setText</name></name><argument_list>(<argument><expr><name>warnings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
