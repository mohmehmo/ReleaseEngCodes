<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/db/db_impl.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_DB_DB_IMPL_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_DB_DB_IMPL_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/dbformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/log_writer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/snapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/thread_annotations.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>MemTable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TableCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VersionEdit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>VersionSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DBImpl</name> <range>: <expr><name>public</name> <name>DB</name> <block>{
 <expr><name>public</name><operator>:</operator>
  <call><name>DBImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>options</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>dbname</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <operator>~</operator><call><name>DBImpl</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Implementations of the DB interface</comment>
  <expr><name>virtual</name> <name>Status</name> <call><name>Put</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WriteOptions</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>Status</name> <call><name>Delete</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WriteOptions</name><operator>&amp;</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>Status</name> <call><name>Write</name><argument_list>(<argument><expr><specifier>const</specifier> <name>WriteOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>, <argument><expr><name>WriteBatch</name><operator>*</operator> <name>updates</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>Status</name> <call><name>Get</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadOptions</name><operator>&amp;</operator> <name>options</name></expr></argument>,
                     <argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>key</name></expr></argument>,
                     <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>Iterator</name><operator>*</operator> <call><name>NewIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadOptions</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <specifier>const</specifier> <name>Snapshot</name><operator>*</operator> <call><name>GetSnapshot</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> <name>void</name> <call><name>ReleaseSnapshot</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Snapshot</name><operator>*</operator> <name>snapshot</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>bool</name> <call><name>GetProperty</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>&amp;</operator> <name>property</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name><operator>*</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>virtual</name> <name>void</name> <macro><name>GetApproximateSizes</name><argument_list>(<argument>const Range* range</argument>, <argument>int n</argument>, <argument>uint64_t* sizes</argument>)</argument_list></macro></expr>;
  <expr><name>virtual</name> <name>void</name> <call><name>CompactRange</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Slice</name><operator>*</operator> <name>begin</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>Slice</name><operator>*</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Extra methods (for testing) that are not in the public DB interface</comment>

  <comment type="line">// Compact any files in the named level that overlap [*begin,*end]</comment>
  <expr><name>void</name> <macro><name>TEST_CompactRange</name><argument_list>(<argument>int level</argument>, <argument>const Slice* begin</argument>, <argument>const Slice* end</argument>)</argument_list></macro></expr>;

  <comment type="line">// Force current memtable contents to be compacted.</comment>
  <expr><name>Status</name> <call><name>TEST_CompactMemTable</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Return an internal iterator over the current state of the database.</comment>
  <comment type="line">// The keys of this iterator are internal keys (see format.h).</comment>
  <comment type="line">// The returned iterator should be deleted when no longer needed.</comment>
  <expr><name>Iterator</name><operator>*</operator> <call><name>TEST_NewInternalIterator</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Return the maximum overlapping data (in bytes) at next level for any</comment>
  <comment type="line">// file at a level &gt;= 1.</comment>
  <expr><name>int64_t</name> <call><name>TEST_MaxNextLevelOverlappingBytes</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Record a sample of bytes read at the specified internal key.</comment>
  <comment type="line">// Samples are taken approximately once every config::kReadBytesPeriod</comment>
  <comment type="line">// bytes.</comment>
  <expr><name>void</name> <macro><name>RecordReadSample</name><argument_list>(<argument>Slice key</argument>)</argument_list></macro></expr>;

 <expr><name>private</name><operator>:</operator>
  <name>friend</name> <name>class</name> <name>DB</name></expr>;
  struct <expr><name>CompactionState</name></expr>;
  struct <expr><name>Writer</name></expr>;

  <expr><name>Iterator</name><operator>*</operator> <call><name>NewInternalIterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ReadOptions</name><operator>&amp;</operator></expr></argument>,
                                <argument><expr><name>SequenceNumber</name><operator>*</operator> <name>latest_snapshot</name></expr></argument>,
                                <argument><expr><name>uint32_t</name><operator>*</operator> <name>seed</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Status</name> <call><name>NewDB</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Recover the descriptor from persistent storage.  May do a significant</comment>
  <comment type="line">// amount of work to recover recently logged updates.  Any changes to</comment>
  <comment type="line">// be made to the descriptor are added to *edit.</comment>
  <expr><name>Status</name> <macro><name>Recover</name><argument_list>(<argument>VersionEdit* edit</argument>, <argument>bool* save_manifest</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>MaybeIgnoreError</name><argument_list>(<argument>Status* s</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

  <comment type="line">// Delete any unneeded files and stale in-memory entries.</comment>
  <expr><name>void</name> <call><name>DeleteObsoleteFiles</name><argument_list>()</argument_list></call></expr>;

  <comment type="line">// Compact the in-memory write buffer to disk.  Switches to a new</comment>
  <comment type="line">// log-file/memtable and writes a new descriptor iff successful.</comment>
  <comment type="line">// Errors are recorded in bg_error_.</comment>
  <expr><name>void</name> <macro><name>CompactMemTable</name><argument_list>()</argument_list></macro> <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Status</name> <macro><name>RecoverLogFile</name><argument_list>(<argument>uint64_t log_number</argument>, <argument>bool last_log</argument>, <argument>bool* save_manifest</argument>,
                        <argument>VersionEdit* edit</argument>, <argument>SequenceNumber* max_sequence</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Status</name> <macro><name>WriteLevel0Table</name><argument_list>(<argument>MemTable* mem</argument>, <argument>VersionEdit* edit</argument>, <argument>Version* base</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Status</name> <macro><name>MakeRoomForWrite</name><argument_list>(<argument>bool force</argument> <comment type="block">/* compact even if there is room? */</comment>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>WriteBatch</name><operator>*</operator> <call><name>BuildBatchGroup</name><argument_list>(<argument><expr><name>Writer</name><operator>*</operator><operator>*</operator> <name>last_writer</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <call><name>RecordBackgroundError</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Status</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>MaybeScheduleCompaction</name><argument_list>()</argument_list></macro> <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
  <expr><specifier>static</specifier> <name>void</name> <call><name>BGWork</name><argument_list>(<argument><expr><name>void</name><operator>*</operator> <name>db</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>BackgroundCall</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name>  <macro><name>BackgroundCompaction</name><argument_list>()</argument_list></macro> <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>CleanupCompaction</name><argument_list>(<argument>CompactionState* compact</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>Status</name> <macro><name>DoCompactionWork</name><argument_list>(<argument>CompactionState* compact</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Status</name> <call><name>OpenCompactionOutputFile</name><argument_list>(<argument><expr><name>CompactionState</name><operator>*</operator> <name>compact</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>Status</name> <call><name>FinishCompactionOutputFile</name><argument_list>(<argument><expr><name>CompactionState</name><operator>*</operator> <name>compact</name></expr></argument>, <argument><expr><name>Iterator</name><operator>*</operator> <name>input</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>Status</name> <macro><name>InstallCompactionResults</name><argument_list>(<argument>CompactionState* compact</argument>)</argument_list></macro>
      <call><name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name>mutex_</name></expr></argument>)</argument_list></call></expr>;

  <comment type="line">// Constant after construction</comment>
  <expr><name>Env</name><operator>*</operator> <specifier>const</specifier> <name>env_</name></expr>;
  <expr><specifier>const</specifier> <name>InternalKeyComparator</name> <name>internal_comparator_</name></expr>;
  <expr><specifier>const</specifier> <name>InternalFilterPolicy</name> <name>internal_filter_policy_</name></expr>;
  <expr><specifier>const</specifier> <name>Options</name> <name>options_</name></expr>;  <comment type="line">// options_.comparator == &amp;internal_comparator_</comment>
  <expr><name>bool</name> <name>owns_info_log_</name></expr>;
  <expr><name>bool</name> <name>owns_cache_</name></expr>;
  <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>dbname_</name></expr>;

  <comment type="line">// table_cache_ provides its own synchronization</comment>
  <expr><name>TableCache</name><operator>*</operator> <name>table_cache_</name></expr>;

  <comment type="line">// Lock over the persistent DB state.  Non-NULL iff successfully acquired.</comment>
  <expr><name>FileLock</name><operator>*</operator> <name>db_lock_</name></expr>;

  <comment type="line">// State below is protected by mutex_</comment>
  <expr><name>port</name><operator>::</operator><name>Mutex</name> <name>mutex_</name></expr>;
  <expr><name>port</name><operator>::</operator><name>AtomicPointer</name> <name>shutting_down_</name></expr>;
  <expr><name>port</name><operator>::</operator><name>CondVar</name> <name>bg_cv_</name></expr>;          <comment type="line">// Signalled when background work finishes</comment>
  <expr><name>MemTable</name><operator>*</operator> <name>mem_</name></expr>;
  <expr><name>MemTable</name><operator>*</operator> <name>imm_</name></expr>;                <comment type="line">// Memtable being compacted</comment>
  <expr><name>port</name><operator>::</operator><name>AtomicPointer</name> <name>has_imm_</name></expr>;  <comment type="line">// So bg thread can detect non-NULL imm_</comment>
  <expr><name>WritableFile</name><operator>*</operator> <name>logfile_</name></expr>;
  <expr><name>uint64_t</name> <name>logfile_number_</name></expr>;
  <expr><name>log</name><operator>::</operator><name>Writer</name><operator>*</operator> <name>log_</name></expr>;
  <expr><name>uint32_t</name> <name>seed_</name></expr>;                <comment type="line">// For sampling.</comment>

  <comment type="line">// Queue of writers.</comment>
  <expr><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>Writer</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>writers_</name></expr>;
  <expr><name>WriteBatch</name><operator>*</operator> <name>tmp_batch_</name></expr>;

  <expr><name>SnapshotList</name> <name>snapshots_</name></expr>;

  <comment type="line">// Set of table files to protect from deletion because they are</comment>
  <comment type="line">// part of ongoing compactions.</comment>
  <expr><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name> <name>pending_outputs_</name></expr>;

  <comment type="line">// Has a background compaction been scheduled or is running?</comment>
  <expr><name>bool</name> <name>bg_compaction_scheduled_</name></expr>;

  <comment type="line">// Information for a manual compaction</comment>
  struct <expr><name>ManualCompaction</name> <block>{
    <expr><name>int</name> <name>level</name></expr>;
    <expr><name>bool</name> <name>done</name></expr>;
    <expr><specifier>const</specifier> <name>InternalKey</name><operator>*</operator> <name>begin</name></expr>;   <comment type="line">// NULL means beginning of key range</comment>
    <expr><specifier>const</specifier> <name>InternalKey</name><operator>*</operator> <name>end</name></expr>;     <comment type="line">// NULL means end of key range</comment>
    <expr><name>InternalKey</name> <name>tmp_storage</name></expr>;    <comment type="line">// Used to keep track of compaction progress</comment>
  }</block></expr>;
  <expr><name>ManualCompaction</name><operator>*</operator> <name>manual_compaction_</name></expr>;

  <expr><name>VersionSet</name><operator>*</operator> <name>versions_</name></expr>;

  <comment type="line">// Have we encountered a background error in paranoid mode?</comment>
  <expr><name>Status</name> <name>bg_error_</name></expr>;

  <comment type="line">// Per level compaction stats.  stats_[level] stores the stats for</comment>
  <comment type="line">// compactions that produced data for the specified "level".</comment>
  struct <expr><name>CompactionStats</name> <block>{
    <expr><name>int64_t</name> <name>micros</name></expr>;
    <expr><name>int64_t</name> <name>bytes_read</name></expr>;
    <expr><name>int64_t</name> <name>bytes_written</name></expr>;

    <expr><call><name>CompactionStats</name><argument_list>()</argument_list></call> <operator>:</operator> <call><name>micros</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>bytes_read</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>, <macro><name>bytes_written</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{ }</block>

    <name>void</name> <macro><name>Add</name><argument_list>(<argument>const CompactionStats&amp; c</argument>)</argument_list></macro> <block>{
      <expr><name><name>this</name><operator>-&gt;</operator><name>micros</name></name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>micros</name></name></expr>;
      <expr><name><name>this</name><operator>-&gt;</operator><name>bytes_read</name></name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>bytes_read</name></name></expr>;
      <expr><name><name>this</name><operator>-&gt;</operator><name>bytes_written</name></name> <operator>+=</operator> <name><name>c</name><operator>.</operator><name>bytes_written</name></name></expr>;
    }</block></expr>
  }</block></expr>;
  <expr><name>CompactionStats</name> <name><name>stats_</name><index>[<expr><name>config</name><operator>::</operator><name>kNumLevels</name></expr>]</index></name></expr>;

  <comment type="line">// No copying allowed</comment>
  <expr><call><name>DBImpl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>DBImpl</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <name>operator</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>DBImpl</name><operator>&amp;</operator><operator>)</operator></expr>;

  <expr><specifier>const</specifier> <name>Comparator</name><operator>*</operator> <macro><name>user_comparator</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{
    <return>return <expr><call><name><name>internal_comparator_</name><operator>.</operator><name>user_comparator</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block>
}</expr>;

<comment type="line">// Sanitize db options.  The caller should delete result.info_log if</comment>
<comment type="line">// it is not equal to src.info_log.</comment>
<expr><specifier>extern</specifier> <name>Options</name> <call><name>SanitizeOptions</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>db</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>InternalKeyComparator</name><operator>*</operator> <name>icmp</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>InternalFilterPolicy</name><operator>*</operator> <name>ipolicy</name></expr></argument>,
                               <argument><expr><specifier>const</specifier> <name>Options</name><operator>&amp;</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;

}</block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_DB_DB_IMPL_H_</comment>
</unit>
