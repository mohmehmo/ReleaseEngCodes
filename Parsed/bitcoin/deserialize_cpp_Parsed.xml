<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/fuzz/deserialize.cpp"><comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;blockfilter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;coins.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;compressor.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;key.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;merkleblock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/block.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psbt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/keyorigin.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;undo.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/fuzz/fuzz.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// Fuzzers using pubkey must hold an ECCVerifyHandle.</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <specifier>auto</specifier></type> <name>verify_handle</name> <init>= <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>ECCVerifyHandle</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_one_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint8_t</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CDataStream</name></type> <name>ds</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>SER_NETWORK</name></expr></argument>, <argument><expr><name>INIT_PROTO_VERSION</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nVersion</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>nVersion</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ds</name><operator>.</operator><name>SetVersion</name></name><argument_list>(<argument><expr><name>nVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></catch></try>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BLOCK_FILTER_DESERIALIZE</name></expr></cpp:if>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>BlockFilter</name></type> <name>block_filter</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>block_filter</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ADDR_INFO_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrInfo</name></type> <name>addr_info</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>addr_info</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCK_FILE_INFO_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockFileInfo</name></type> <name>block_file_info</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>block_file_info</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockHeaderAndShortTxIDs</name></type> <name>block_header_and_short_txids</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>block_header_and_short_txids</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>FEE_RATE_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CFeeRate</name></type> <name>fee_rate</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>fee_rate</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MERKLE_BLOCK_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CMerkleBlock</name></type> <name>merkle_block</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>merkle_block</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>OUT_POINT_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>COutPoint</name></type> <name>out_point</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>out_point</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PARTIAL_MERKLE_TREE_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CPartialMerkleTree</name></type> <name>partial_merkle_tree</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>partial_merkle_tree</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PUB_KEY_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pub_key</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>pub_key</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SCRIPT_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>script</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SUB_NET_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CSubNet</name></type> <name>sub_net</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>sub_net</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TX_IN_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CTxIn</name></type> <name>tx_in</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>tx_in</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>FLAT_FILE_POS_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>FlatFilePos</name></type> <name>flat_file_pos</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>flat_file_pos</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>KEY_ORIGIN_INFO_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>KeyOriginInfo</name></type> <name>key_origin_info</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>key_origin_info</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PARTIALLY_SIGNED_TRANSACTION_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>PartiallySignedTransaction</name></type> <name>partially_signed_transaction</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>partially_signed_transaction</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PREFILLED_TRANSACTION_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>PrefilledTransaction</name></type> <name>prefilled_transaction</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>prefilled_transaction</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PSBT_INPUT_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>PSBTInput</name></type> <name>psbt_input</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>psbt_input</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>PSBT_OUTPUT_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>PSBTOutput</name></type> <name>psbt_output</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>psbt_output</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCK_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKLOCATOR_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockLocator</name></type> <name>bl</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>bl</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKMERKLEROOT</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>block</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>mutated</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mutated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ADDRMAN_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CAddrMan</name></type> <name>am</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>am</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKHEADER_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockHeader</name></type> <name>bh</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>bh</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BANENTRY_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBanEntry</name></type> <name>be</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>be</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TXUNDO_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CTxUndo</name></type> <name>tu</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>tu</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKUNDO_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBlockUndo</name></type> <name>bu</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>bu</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>COINS_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>Coin</name></type> <name>coin</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>coin</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>NETADDR_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CNetAddr</name></type> <name>na</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>na</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SERVICE_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CService</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>MESSAGEHEADER_DESERIALIZE</name></expr></cpp:elif>
    <decl_stmt><decl><type><name><name>CMessageHeader</name><operator>::</operator><name>MessageStartChars</name></name></type> <name>pchMessageStart</name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CMessageHeader</name></type> <name>mh</name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>mh</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>mh</name><operator>.</operator><name>IsValid</name></name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ADDRESS_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CAddress</name></type> <name>a</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>INV_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CInv</name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOOMFILTER_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CBloomFilter</name></type> <name>bf</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>bf</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>DISKBLOCKINDEX_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>CDiskBlockIndex</name></type> <name>dbi</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>dbi</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>TXOUTCOMPRESSOR_DESERIALIZE</name></expr></cpp:elif>
    <decl_stmt><decl><type><name>CTxOut</name></type> <name>to</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CTxOutCompressor</name></type> <name>toc</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <try>try <block>{<block_content>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>toc</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKTRANSACTIONS_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>BlockTransactions</name></type> <name>bt</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>bt</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BLOCKTRANSACTIONSREQUEST_DESERIALIZE</name></expr></cpp:elif>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>BlockTransactionsRequest</name></type> <name>btr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ds</name> <operator>&gt;&gt;</operator> <name>btr</name></expr>;</expr_stmt>
    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>failure</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></catch></try>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> Need at least one fuzz target to compile</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
