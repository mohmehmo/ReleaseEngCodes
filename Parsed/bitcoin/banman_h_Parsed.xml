<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/banman.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2017 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_BANMAN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_BANMAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;addrdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net_types.h&gt;</cpp:file></cpp:include> <comment type="line">// For banmap_t</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<comment type="line">// NOTE: When adjusting this, update rpcnet:setban's help ("24h")</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_MISBEHAVING_BANTIME</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Default 24-hour ban</comment>

<decl_stmt><decl><type><name>class</name></type> <name>CClientUIInterface</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CNetAddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CSubNet</name></decl>;</decl_stmt>

<comment type="line">// Denial-of-service detection/prevention</comment>
<comment type="line">// The idea is to detect peers that are behaving</comment>
<comment type="line">// badly and disconnect/ban them, but do it in a</comment>
<comment type="line">// one-coding-mistake-won't-shatter-the-entire-network</comment>
<comment type="line">// way.</comment>
<comment type="line">// IMPORTANT:  There should be nothing I can give a</comment>
<comment type="line">// node that it will forward on that will make that</comment>
<comment type="line">// node's peers drop it. If there is, an attacker</comment>
<comment type="line">// can isolate a node and/or try to split the network.</comment>
<comment type="line">// Dropping a node for sending stuff that is invalid</comment>
<comment type="line">// now but might be valid in a later version is also</comment>
<comment type="line">// dangerous, because it can cause a network split</comment>
<comment type="line">// between nodes running old code and nodes running</comment>
<comment type="line">// new code.</comment>

<decl_stmt><decl><type><name>class</name></type> <name>BanMan</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><operator>~</operator><call><name>BanMan</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>BanMan</name><argument_list>(<argument>fs::path ban_file</argument>, <argument>CClientUIInterface* client_interface</argument>, <argument>int64_t default_ban_time</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <function_decl><type><name>void</name></type> <name>Ban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BanReason</name><modifier>&amp;</modifier></type> <name>ban_reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>since_unix_epoch</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>Ban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>sub_net</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BanReason</name><modifier>&amp;</modifier></type> <name>ban_reason</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ban_time_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>since_unix_epoch</name> <init>= <expr><name>false</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>ClearBanned</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>IsBannedLevel</name><parameter_list>(<parameter><decl><type><name>CNetAddr</name></type> <name>net_addr</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>IsBanned</name><parameter_list>(<parameter><decl><type><name>CNetAddr</name></type> <name>net_addr</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>IsBanned</name><parameter_list>(<parameter><decl><type><name>CSubNet</name></type> <name>sub_net</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>Unban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNetAddr</name><modifier>&amp;</modifier></type> <name>net_addr</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>Unban</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CSubNet</name><modifier>&amp;</modifier></type> <name>sub_net</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>GetBanned</name><parameter_list>(<parameter><decl><type><name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>DumpBanlist</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <function_decl><type><name>void</name></type> <name>SetBanned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>banmap_t</name><modifier>&amp;</modifier></type> <name>banmap</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>BannedSetIsDirty</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="line" format="doxygen">//!set the "dirty" flag for the banlist</comment>
    <function_decl><type><name>void</name></type> <name>SetBannedSetDirty</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>dirty</name> <init>= <expr><name>true</name></expr></init></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="line" format="doxygen">//!clean unused entries (if bantime has expired)</comment>
    <function_decl><type><name>void</name></type> <name>SweepBanned</name><parameter_list>()</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>CCriticalSection</name></type> <name>m_cs_banned</name></decl>;</decl_stmt>
    <function_decl><type><name>banmap_t</name> <name>m_banned</name></type> <name>GUARDED_BY</name><parameter_list>(<parameter><decl><type><name>m_cs_banned</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name> <name>m_is_dirty</name></type> <name>GUARDED_BY</name><parameter_list>(<parameter><decl><type><name>m_cs_banned</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>CClientUIInterface</name><modifier>*</modifier></type> <name>m_client_interface</name> <init>= <expr><name>nullptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CBanDB</name></type> <name>m_ban_db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>m_default_ban_time</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
