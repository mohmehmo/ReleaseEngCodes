<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/standard.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/standard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/sha256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pubkey.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>valtype</name>;</typedef>

<decl_stmt><decl><type><name>bool</name></type> <name>fAcceptDatacarrier</name> <init>= <expr><name>DEFAULT_ACCEPT_DATACARRIER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>nMaxDatacarrierBytes</name> <init>= <expr><name>MAX_OP_RETURN_RELAY</name></expr></init></decl>;</decl_stmt>

<constructor><name><name>CScriptID</name><operator>::</operator><name>CScriptID</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>uint160</name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<constructor><name><name>ScriptHash</name><operator>::</operator><name>ScriptHash</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>uint160</name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<constructor><name><name>PKHash</name><operator>::</operator><name>PKHash</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>uint160</name><argument_list>(<argument><expr><call><name><name>pubkey</name><operator>.</operator><name>GetID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<constructor><name><name>WitnessV0ScriptHash</name><operator>::</operator><name>WitnessV0ScriptHash</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CSHA256</name><argument_list>()</argument_list></call><operator>.</operator><call><name>Write</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>in</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>Finalize</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetTxnOutputType</name><parameter_list>(<parameter><decl><type><name>txnouttype</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>t</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>TX_NONSTANDARD</name></expr>:</case> <return>return <expr><literal type="string">"nonstandard"</literal></expr>;</return>
    <case>case <expr><name>TX_PUBKEY</name></expr>:</case> <return>return <expr><literal type="string">"pubkey"</literal></expr>;</return>
    <case>case <expr><name>TX_PUBKEYHASH</name></expr>:</case> <return>return <expr><literal type="string">"pubkeyhash"</literal></expr>;</return>
    <case>case <expr><name>TX_SCRIPTHASH</name></expr>:</case> <return>return <expr><literal type="string">"scripthash"</literal></expr>;</return>
    <case>case <expr><name>TX_MULTISIG</name></expr>:</case> <return>return <expr><literal type="string">"multisig"</literal></expr>;</return>
    <case>case <expr><name>TX_NULL_DATA</name></expr>:</case> <return>return <expr><literal type="string">"nulldata"</literal></expr>;</return>
    <case>case <expr><name>TX_WITNESS_V0_KEYHASH</name></expr>:</case> <return>return <expr><literal type="string">"witness_v0_keyhash"</literal></expr>;</return>
    <case>case <expr><name>TX_WITNESS_V0_SCRIPTHASH</name></expr>:</case> <return>return <expr><literal type="string">"witness_v0_scripthash"</literal></expr>;</return>
    <case>case <expr><name>TX_WITNESS_UNKNOWN</name></expr>:</case> <return>return <expr><literal type="string">"witness_unknown"</literal></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><literal type="null">nullptr</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchPayToPubkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>valtype</name><modifier>&amp;</modifier></type> <name>pubkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CPubKey</name><operator>::</operator><name>SIZE</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>CPubKey</name><operator>::</operator><name>SIZE</name></name> <operator>&amp;&amp;</operator> <call><name><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OP_CHECKSIG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name>valtype</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>CPubKey</name><operator>::</operator><name>SIZE</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>CPubKey</name><operator>::</operator><name>ValidSize</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name> <operator>&amp;&amp;</operator> <call><name><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>OP_CHECKSIG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkey</name> <operator>=</operator> <call><name>valtype</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>CPubKey</name><operator>::</operator><name>COMPRESSED_SIZE</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>CPubKey</name><operator>::</operator><name>ValidSize</name></name><argument_list>(<argument><expr><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchPayToPubkeyHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>valtype</name><modifier>&amp;</modifier></type> <name>pubkeyhash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OP_DUP</name> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_HASH160</name> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>==</operator> <name>OP_EQUALVERIFY</name> <operator>&amp;&amp;</operator> <name><name>script</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>==</operator> <name>OP_CHECKSIG</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pubkeyhash</name> <operator>=</operator> <call><name>valtype</name><argument_list>(<argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name> <argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Test for "small positive integer" script opcodes - OP_1 through OP_16. */</comment>
<function><type><specifier>static</specifier> <specifier>constexpr</specifier> <name>bool</name></type> <name>IsSmallInteger</name><parameter_list>(<parameter><decl><type><name>opcodetype</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>opcode</name> <operator>&gt;=</operator> <name>OP_1</name> <operator>&amp;&amp;</operator> <name>opcode</name> <operator>&lt;=</operator> <name>OP_16</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MatchMultisig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>script</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name><modifier>&amp;</modifier></type> <name>required</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>pubkeys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>valtype</name></type> <name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>CScript</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>script</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>script</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>script</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>OP_CHECKMULTISIG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>script</name><operator>.</operator><name>GetOp</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>IsSmallInteger</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>required</name> <operator>=</operator> <call><name><name>CScript</name><operator>::</operator><name>DecodeOP_N</name></name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>script</name><operator>.</operator><name>GetOp</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>CPubKey</name><operator>::</operator><name>ValidSize</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>pubkeys</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsSmallInteger</name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>keys</name> <init>= <expr><call><name><name>CScript</name><operator>::</operator><name>DecodeOP_N</name></name><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>pubkeys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>keys</name> <operator>||</operator> <name>keys</name> <operator>&lt;</operator> <name>required</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>it</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>script</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>txnouttype</name></type> <name>Solver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vSolutionsRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Shortcut for pay-to-script-hash, which are more constrained than the other types:</comment>
    <comment type="line">// it is always OP_HASH160 20 [20 byte hash] OP_EQUAL</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>scriptPubKey</name><operator>.</operator><name>IsPayToScriptHash</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>hashBytes</name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">22</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>hashBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TX_SCRIPTHASH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>witnessversion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>witnessprogram</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>scriptPubKey</name><operator>.</operator><name>IsWitnessProgram</name></name><argument_list>(<argument><expr><name>witnessversion</name></expr></argument>, <argument><expr><name>witnessprogram</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>witnessversion</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>witnessprogram</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>WITNESS_V0_KEYHASH_SIZE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>witnessprogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TX_WITNESS_V0_KEYHASH</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>witnessversion</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>witnessprogram</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>WITNESS_V0_SCRIPTHASH_SIZE</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>witnessprogram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TX_WITNESS_V0_SCRIPTHASH</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>witnessversion</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <macro><name>vSolutionsRet</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;{(unsigned char)witnessversion}</argument>)</argument_list></macro></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>witnessprogram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TX_WITNESS_UNKNOWN</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>TX_NONSTANDARD</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Provably prunable, data-carrying output</comment>
    <comment type="line">//</comment>
    <comment type="line">// So long as script passes the IsUnspendable() test and all but the first</comment>
    <comment type="line">// byte passes the IsPushOnly() test we don't care what exactly is in the</comment>
    <comment type="line">// script.</comment>
    <if_stmt><if>if <condition>(<expr><call><name><name>scriptPubKey</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>scriptPubKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>OP_RETURN</name> <operator>&amp;&amp;</operator> <call><name><name>scriptPubKey</name><operator>.</operator><name>IsPushOnly</name></name><argument_list>(<argument><expr><call><name><name>scriptPubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TX_NULL_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MatchPayToPubkey</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TX_PUBKEY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>MatchPayToPubkeyHash</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TX_PUBKEYHASH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>required</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MatchMultisig</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>required</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr>static_cast<operator>&lt;</operator><name>unsigned</name> <name>char</name><operator>&gt;</operator><operator>(</operator><name>required</name><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// safe as required is in range 1..16</comment>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr>static_cast<operator>&lt;</operator><name>unsigned</name> <name>char</name><operator>&gt;</operator><operator>(</operator><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// safe as size is in range 1..16</comment>
        <return>return <expr><name>TX_MULTISIG</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>vSolutionsRet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TX_NONSTANDARD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ExtractDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>CTxDestination</name><modifier>&amp;</modifier></type> <name>addressRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>vSolutions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>whichType</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>vSolutions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_PUBKEY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubKey</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubKey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <call><name>PKHash</name><argument_list>(<argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_PUBKEYHASH</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <call><name>PKHash</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_SCRIPTHASH</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <call><name>ScriptHash</name><argument_list>(<argument><expr><call><name>uint160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_WITNESS_V0_KEYHASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>WitnessV0KeyHash</name></type> <name>hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_WITNESS_V0_SCRIPTHASH</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>WitnessV0ScriptHash</name></type> <name>hash</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>whichType</name> <operator>==</operator> <name>TX_WITNESS_UNKNOWN</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>WitnessUnknown</name></type> <name>unk</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>unk</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>unk</name><operator>.</operator><name>program</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>unk</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>vSolutions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addressRet</name> <operator>=</operator> <name>unk</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Multisig txns have more than one address...</comment>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ExtractDestinations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptPubKey</name></decl></parameter>, <parameter><decl><type><name>txnouttype</name><modifier>&amp;</modifier></type> <name>typeRet</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTxDestination</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>addressRet</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>nRequiredRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name><name>addressRet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>valtype</name></expr></argument>&gt;</argument_list></name></type> <name>vSolutions</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>typeRet</name> <operator>=</operator> <call><name>Solver</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>vSolutions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>typeRet</name> <operator>==</operator> <name>TX_NONSTANDARD</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>typeRet</name> <operator>==</operator> <name>TX_NULL_DATA</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// This is data, not addresses</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>typeRet</name> <operator>==</operator> <name>TX_MULTISIG</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>nRequiredRet</name> <operator>=</operator> <call><name><name>vSolutions</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vSolutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CPubKey</name></type> <name>pubKey</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pubKey</name><operator>.</operator><name>IsValid</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name> <init>= <expr><call><name>PKHash</name><argument_list>(<argument><expr><name>pubKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>addressRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name><name>addressRet</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>nRequiredRet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CTxDestination</name></type> <name>address</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExtractDestination</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
           <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>addressRet</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<namespace>namespace
<block>{
<class>class <name>CScriptVisitor</name> <super_list>: <super><specifier>public</specifier> <name><name>boost</name><operator>::</operator><name>static_visitor</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></super></super_list>
<block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name>CScript</name> <modifier>*</modifier></type><name>script</name></decl>;</decl_stmt>
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>CScriptVisitor</name><parameter_list>(<parameter><decl><type><name>CScript</name> <modifier>*</modifier></type><name>scriptin</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>script</name> <operator>=</operator> <name>scriptin</name></expr>;</expr_stmt> </block_content>}</block></constructor>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CNoDestination</name> <modifier>&amp;</modifier></type><name>dest</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PKHash</name> <modifier>&amp;</modifier></type><name>keyID</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>script</name> <operator>&lt;&lt;</operator> <name>OP_DUP</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>keyID</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUALVERIFY</name> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ScriptHash</name> <modifier>&amp;</modifier></type><name>scriptID</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>script</name> <operator>&lt;&lt;</operator> <name>OP_HASH160</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>scriptID</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_EQUAL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessV0KeyHash</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>script</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessV0ScriptHash</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>script</name> <operator>&lt;&lt;</operator> <name>OP_0</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WitnessUnknown</name><modifier>&amp;</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>script</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>script</name> <operator>&lt;&lt;</operator> <call><name><name>CScript</name><operator>::</operator><name>EncodeOP_N</name></name><argument_list>(<argument><expr><name><name>id</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>id</name><operator>.</operator><name>program</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>program</name></name> <operator>+</operator> <name><name>id</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
}</block></namespace> <comment type="line">// namespace</comment>

<function><type><name>CScript</name></type> <name>GetScriptForDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>apply_visitor</name></name><argument_list>(<argument><expr><call><name>CScriptVisitor</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CScript</name></type> <name>GetScriptForRawPubKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>pubKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>CScript</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>pubKey</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pubKey</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKSIG</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CScript</name></type> <name>GetScriptForMultisig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nRequired</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CPubKey</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CScript</name></type> <name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>script</name> <operator>&lt;&lt;</operator> <call><name><name>CScript</name><operator>::</operator><name>EncodeOP_N</name></name><argument_list>(<argument><expr><name>nRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>CPubKey</name><modifier>&amp;</modifier></type> <name>key</name> <range>: <expr><name>keys</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>script</name> <operator>&lt;&lt;</operator> <call><name>ToByteVector</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>script</name> <operator>&lt;&lt;</operator> <call><name><name>CScript</name><operator>::</operator><name>EncodeOP_N</name></name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>OP_CHECKMULTISIG</name></expr>;</expr_stmt>
    <return>return <expr><name>script</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>CScript</name></type> <name>GetScriptForWitness</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>redeemscript</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vSolutions</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>txnouttype</name></type> <name>typ</name> <init>= <expr><call><name>Solver</name><argument_list>(<argument><expr><name>redeemscript</name></expr></argument>, <argument><expr><name>vSolutions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>typ</name> <operator>==</operator> <name>TX_PUBKEY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><call><name>Hash160</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>typ</name> <operator>==</operator> <name>TX_PUBKEYHASH</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0KeyHash</name><argument_list>(<argument><expr><name><name>vSolutions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>GetScriptForDestination</name><argument_list>(<argument><expr><call><name>WitnessV0ScriptHash</name><argument_list>(<argument><expr><name>redeemscript</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsValidDestination</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTxDestination</name><modifier>&amp;</modifier></type> <name>dest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>dest</name><operator>.</operator><name>which</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
