<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/primitives/transaction.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;primitives/transaction.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tinyformat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>COutPoint</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"COutPoint(%s, %u)"</literal></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>CTxIn</name><operator>::</operator><name>CTxIn</name></name><parameter_list>(<parameter><decl><type><name>COutPoint</name></type> <name>prevoutIn</name></decl></parameter>, <parameter><decl><type><name>CScript</name></type> <name>scriptSigIn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nSequenceIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>prevout</name> <operator>=</operator> <name>prevoutIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <name>scriptSigIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nSequence</name> <operator>=</operator> <name>nSequenceIn</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>CTxIn</name><operator>::</operator><name>CTxIn</name></name><parameter_list>(<parameter><decl><type><name>uint256</name></type> <name>hashPrevTx</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nOut</name></decl></parameter>, <parameter><decl><type><name>CScript</name></type> <name>scriptSigIn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nSequenceIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>prevout</name> <operator>=</operator> <call><name>COutPoint</name><argument_list>(<argument><expr><name>hashPrevTx</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptSig</name> <operator>=</operator> <name>scriptSigIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nSequence</name> <operator>=</operator> <name>nSequenceIn</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CTxIn</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">"CTxIn("</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name><name>prevout</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>prevout</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">", coinbase %s"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">", scriptSig=%s"</literal></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>scriptSig</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nSequence</name> <operator>!=</operator> <name>SEQUENCE_FINAL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">", nSequence=%u"</literal></expr></argument>, <argument><expr><name>nSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>CTxOut</name><operator>::</operator><name>CTxOut</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CAmount</name><modifier>&amp;</modifier></type> <name>nValueIn</name></decl></parameter>, <parameter><decl><type><name>CScript</name></type> <name>scriptPubKeyIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>nValue</name> <operator>=</operator> <name>nValueIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scriptPubKey</name> <operator>=</operator> <name>scriptPubKeyIn</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CTxOut</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"CTxOut(nValue=%d.%08d, scriptPubKey=%s)"</literal></expr></argument>, <argument><expr><name>nValue</name> <operator>/</operator> <name>COIN</name></expr></argument>, <argument><expr><name>nValue</name> <operator>%</operator> <name>COIN</name></expr></argument>, <argument><expr><call><name>HexStr</name><argument_list>(<argument><expr><name>scriptPubKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>CMutableTransaction</name><operator>::</operator><name>CMutableTransaction</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>nVersion</name><argument_list>(<argument><expr><name><name>CTransaction</name><operator>::</operator><name>CURRENT_VERSION</name></name></expr></argument>)</argument_list></call>, <call><name>nLockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
<constructor><name><name>CMutableTransaction</name><operator>::</operator><name>CMutableTransaction</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>vin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></argument>)</argument_list></call>, <call><name>vout</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call>, <call><name>nVersion</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call>, <call><name>nLockTime</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>uint256</name></type> <name><name>CMutableTransaction</name><operator>::</operator><name>GetHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>SerializeHash</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><name>SERIALIZE_TRANSACTION_NO_WITNESS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint256</name></type> <name><name>CTransaction</name><operator>::</operator><name>ComputeHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>SerializeHash</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><name>SERIALIZE_TRANSACTION_NO_WITNESS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint256</name></type> <name><name>CTransaction</name><operator>::</operator><name>ComputeWitnessHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HasWitness</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>hash</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>SerializeHash</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>SER_GETHASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* For backward compatibility, the hash is initialized to 0. TODO: remove the need for this default constructor entirely. */</comment>
<constructor><name><name>CTransaction</name><operator>::</operator><name>CTransaction</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>vin</name><argument_list>()</argument_list></call>, <call><name>vout</name><argument_list>()</argument_list></call>, <call><name>nVersion</name><argument_list>(<argument><expr><name><name>CTransaction</name><operator>::</operator><name>CURRENT_VERSION</name></name></expr></argument>)</argument_list></call>, <call><name>nLockTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>hash</name><argument_list>{}</argument_list></call>, <call><name>m_witness_hash</name><argument_list>{}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
<constructor><name><name>CTransaction</name><operator>::</operator><name>CTransaction</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CMutableTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>vin</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></argument>)</argument_list></call>, <call><name>vout</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call>, <call><name>nVersion</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call>, <call><name>nLockTime</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name></expr></argument>)</argument_list></call>, <call><name>hash</name><argument_list>{<argument><expr><macro><name>ComputeHash</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call>, <call><name>m_witness_hash</name><argument_list>{<argument><expr><macro><name>ComputeWitnessHash</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
<constructor><name><name>CTransaction</name><operator>::</operator><name>CTransaction</name></name><parameter_list>(<parameter><decl><type><name>CMutableTransaction</name><modifier>&amp;&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>vin</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>vout</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>vout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>, <call><name>nVersion</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name></expr></argument>)</argument_list></call>, <call><name>nLockTime</name><argument_list>(<argument><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name></expr></argument>)</argument_list></call>, <call><name>hash</name><argument_list>{<argument><expr><macro><name>ComputeHash</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call>, <call><name>m_witness_hash</name><argument_list>{<argument><expr><macro><name>ComputeWitnessHash</name><argument_list>()</argument_list></macro></expr></argument>}</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function><type><name>CAmount</name></type> <name><name>CTransaction</name><operator>::</operator><name>GetValueOut</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>CAmount</name></type> <name>nValueOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx_out</name> <range>: <expr><name>vout</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>nValueOut</name> <operator>+=</operator> <name><name>tx_out</name><operator>.</operator><name>nValue</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MoneyRange</name><argument_list>(<argument><expr><name><name>tx_out</name><operator>.</operator><name>nValue</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>MoneyRange</name><argument_list>(<argument><expr><name>nValueOut</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>__func__</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": value out of range"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>nValueOut</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>CTransaction</name><operator>::</operator><name>GetTotalSize</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><operator>::</operator><name>GetSerializeSize</name></name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>PROTOCOL_VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CTransaction</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"CTransaction(hash=%s, ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)\n"</literal></expr></argument>,
        <argument><expr><call><name>GetHash</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>nVersion</name></expr></argument>,
        <argument><expr><call><name><name>vin</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>vout</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>nLockTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx_in</name> <range>: <expr><name>vin</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">"    "</literal> <operator>+</operator> <call><name><name>tx_in</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx_in</name> <range>: <expr><name>vin</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">"    "</literal> <operator>+</operator> <call><name><name>tx_in</name><operator>.</operator><name>scriptWitness</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></for>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>tx_out</name> <range>: <expr><name>vout</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="string">"    "</literal> <operator>+</operator> <call><name><name>tx_out</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>
</unit>
