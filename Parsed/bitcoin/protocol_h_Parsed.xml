<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/protocol.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__cplusplus</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> This header can only be compiled as C++.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_PROTOCOL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_PROTOCOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netaddress.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** Message header.
 * (4) message start.
 * (12) command.
 * (4) size.
 * (4) checksum.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CMessageHeader</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>MESSAGE_START_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>COMMAND_SIZE</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>MESSAGE_SIZE_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>CHECKSUM_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>MESSAGE_SIZE_OFFSET</name> <init>= <expr><name>MESSAGE_START_SIZE</name> <operator>+</operator> <name>COMMAND_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>CHECKSUM_OFFSET</name> <init>= <expr><name>MESSAGE_SIZE_OFFSET</name> <operator>+</operator> <name>MESSAGE_SIZE_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>constexpr</name> <name>size_t</name></type> <name>HEADER_SIZE</name> <init>= <expr><name>MESSAGE_START_SIZE</name> <operator>+</operator> <name>COMMAND_SIZE</name> <operator>+</operator> <name>MESSAGE_SIZE_SIZE</name> <operator>+</operator> <name>CHECKSUM_SIZE</name></expr></init></decl>;</decl_stmt>
    <typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>MessageStartChars</name><index>[<expr><name>MESSAGE_START_SIZE</name></expr>]</index></name>;</typedef>

    <function_decl><type><name>explicit</name></type> <name>CMessageHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageStartChars</name><modifier>&amp;</modifier></type> <name>pchMessageStartIn</name></decl></parameter>)</parameter_list>;</function_decl>
    <macro><name>CMessageHeader</name><argument_list>(<argument>const MessageStartChars&amp; pchMessageStartIn</argument>, <argument>const char* pszCommand</argument>, <argument>unsigned int nMessageSizeIn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetCommand</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>IsValid</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MessageStartChars</name><operator>&amp;</operator> <name>messageStart</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nMessageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>pchChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name>char</name></type> <name><name>pchMessageStart</name><index>[<expr><name>MESSAGE_START_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>pchCommand</name><index>[<expr><name>COMMAND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nMessageSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pchChecksum</name><index>[<expr><name>CHECKSUM_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/**
 * Bitcoin protocol message types. When adding new message types, don't forget
 * to update allNetMessageTypes in protocol.cpp.
 */</comment>
<decl_stmt><decl><type><name>namespace</name></type> <name>NetMsgType</name> <block>{<block_content>

<comment type="block" format="doxygen">/**
 * The version message provides information about the transmitting node to the
 * receiving node at the beginning of a connection.
 * @see https://bitcoin.org/en/developer-reference#version
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>VERSION</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The verack message acknowledges a previously-received version message,
 * informing the connecting node that it can begin to send other messages.
 * @see https://bitcoin.org/en/developer-reference#verack
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>VERACK</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The addr (IP address) message relays connection information for peers on the
 * network.
 * @see https://bitcoin.org/en/developer-reference#addr
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ADDR</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The inv message (inventory message) transmits one or more inventories of
 * objects known to the transmitting peer.
 * @see https://bitcoin.org/en/developer-reference#inv
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>INV</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The getdata message requests one or more data objects from another node.
 * @see https://bitcoin.org/en/developer-reference#getdata
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETDATA</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The merkleblock message is a reply to a getdata message which requested a
 * block using the inventory type MSG_MERKLEBLOCK.
 * @since protocol version 70001 as described by BIP37.
 * @see https://bitcoin.org/en/developer-reference#merkleblock
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MERKLEBLOCK</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The getblocks message requests an inv message that provides block header
 * hashes starting from a particular point in the block chain.
 * @see https://bitcoin.org/en/developer-reference#getblocks
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETBLOCKS</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The getheaders message requests a headers message that provides block
 * headers starting from a particular point in the block chain.
 * @since protocol version 31800.
 * @see https://bitcoin.org/en/developer-reference#getheaders
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETHEADERS</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The tx message transmits a single transaction.
 * @see https://bitcoin.org/en/developer-reference#tx
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TX</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The headers message sends one or more block headers to a node which
 * previously requested certain headers with a getheaders message.
 * @since protocol version 31800.
 * @see https://bitcoin.org/en/developer-reference#headers
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HEADERS</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The block message transmits a single serialized block.
 * @see https://bitcoin.org/en/developer-reference#block
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BLOCK</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The getaddr message requests an addr message from the receiving node,
 * preferably one with lots of IP addresses of other receiving nodes.
 * @see https://bitcoin.org/en/developer-reference#getaddr
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETADDR</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The mempool message requests the TXIDs of transactions that the receiving
 * node has verified as valid but which have not yet appeared in a block.
 * @since protocol version 60002.
 * @see https://bitcoin.org/en/developer-reference#mempool
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MEMPOOL</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The ping message is sent periodically to help confirm that the receiving
 * peer is still connected.
 * @see https://bitcoin.org/en/developer-reference#ping
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PING</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The pong message replies to a ping message, proving to the pinging node that
 * the ponging node is still alive.
 * @since protocol version 60001 as described by BIP31.
 * @see https://bitcoin.org/en/developer-reference#pong
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PONG</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The notfound message is a reply to a getdata message which requested an
 * object the receiving node does not have available for relay.
 * @since protocol version 70001.
 * @see https://bitcoin.org/en/developer-reference#notfound
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NOTFOUND</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The filterload message tells the receiving peer to filter all relayed
 * transactions and requested merkle blocks through the provided filter.
 * @since protocol version 70001 as described by BIP37.
 *   Only available with service bit NODE_BLOOM since protocol version
 *   70011 as described by BIP111.
 * @see https://bitcoin.org/en/developer-reference#filterload
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERLOAD</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The filteradd message tells the receiving peer to add a single element to a
 * previously-set bloom filter, such as a new public key.
 * @since protocol version 70001 as described by BIP37.
 *   Only available with service bit NODE_BLOOM since protocol version
 *   70011 as described by BIP111.
 * @see https://bitcoin.org/en/developer-reference#filteradd
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERADD</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The filterclear message tells the receiving peer to remove a previously-set
 * bloom filter.
 * @since protocol version 70001 as described by BIP37.
 *   Only available with service bit NODE_BLOOM since protocol version
 *   70011 as described by BIP111.
 * @see https://bitcoin.org/en/developer-reference#filterclear
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERCLEAR</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Indicates that a node prefers to receive new block announcements via a
 * "headers" message rather than an "inv".
 * @since protocol version 70012 as described by BIP130.
 * @see https://bitcoin.org/en/developer-reference#sendheaders
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SENDHEADERS</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * The feefilter message tells the receiving peer not to inv us any txs
 * which do not meet the specified min fee rate.
 * @since protocol version 70013 as described by BIP133
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FEEFILTER</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Contains a 1-byte bool and 8-byte LE version number.
 * Indicates that a node is willing to provide blocks via "cmpctblock" messages.
 * May indicate that a node prefers to receive new block announcements via a
 * "cmpctblock" message rather than an "inv", depending on message contents.
 * @since protocol version 70014 as described by BIP 152
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SENDCMPCT</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Contains a CBlockHeaderAndShortTxIDs object - providing a header and
 * list of "short txids".
 * @since protocol version 70014 as described by BIP 152
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CMPCTBLOCK</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Contains a BlockTransactionsRequest
 * Peer should respond with "blocktxn" message.
 * @since protocol version 70014 as described by BIP 152
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETBLOCKTXN</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Contains a BlockTransactions.
 * Sent in response to a "getblocktxn" message.
 * @since protocol version 70014 as described by BIP 152
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BLOCKTXN</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block">/* Get a vector of all valid message types (see above) */</comment>
<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><call><name>getAllNetMessageTypes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** nServices flags */</comment>
<enum>enum <name>ServiceFlags</name> : <type><name>uint64_t</name></type> <block>{
    <comment type="line">// Nothing</comment>
    <decl><name>NODE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <comment type="line">// NODE_NETWORK means that the node is capable of serving the complete block chain. It is currently</comment>
    <comment type="line">// set by all Bitcoin Core non pruned nodes, and is unset by SPV clients or other light clients.</comment>
    <decl><name>NODE_NETWORK</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.</comment>
    <comment type="line">// Bitcoin Core does not support this but a patch set called Bitcoin XT does.</comment>
    <comment type="line">// See BIP 64 for details on how this is implemented.</comment>
    <decl><name>NODE_GETUTXO</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// NODE_BLOOM means the node is capable and willing to handle bloom-filtered connections.</comment>
    <comment type="line">// Bitcoin Core nodes used to support this by default, without advertising this bit,</comment>
    <comment type="line">// but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)</comment>
    <decl><name>NODE_BLOOM</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// NODE_WITNESS indicates that a node can be asked for blocks and transactions including</comment>
    <comment type="line">// witness data.</comment>
    <decl><name>NODE_WITNESS</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>,
    <comment type="line">// NODE_NETWORK_LIMITED means the same as NODE_NETWORK with the limitation of only</comment>
    <comment type="line">// serving the last 288 (2 day) blocks</comment>
    <comment type="line">// See BIP159 for details on how this is implemented.</comment>
    <decl><name>NODE_NETWORK_LIMITED</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></init></decl>,

    <comment type="line">// Bits 24-31 are reserved for temporary experiments. Just pick a bit that</comment>
    <comment type="line">// isn't getting used, or one not being used much, and notify the</comment>
    <comment type="line">// bitcoin-development mailing list. Remember that service bits are just</comment>
    <comment type="line">// unauthenticated advertisements, so your code must be robust against</comment>
    <comment type="line">// collisions and other cases where nodes may be advertising a service they</comment>
    <comment type="line">// do not actually support. Other service bits should be allocated via the</comment>
    <comment type="line">// BIP process.</comment>
}</block>;</enum>

<comment type="block" format="doxygen">/**
 * Gets the set of service flags which are "desirable" for a given peer.
 *
 * These are the flags which are required for a peer to support for them
 * to be "interesting" to us, ie for us to wish to use one of our few
 * outbound connection slots for or for us to wish to prioritize keeping
 * their connection around.
 *
 * Relevant service flags may be peer- and state-specific in that the
 * version of the peer may determine which flags are required (eg in the
 * case of NODE_NETWORK_LIMITED where we seek out NODE_NETWORK peers
 * unless they set NODE_NETWORK_LIMITED and we are out of IBD, in which
 * case NODE_NETWORK_LIMITED suffices).
 *
 * Thus, generally, avoid calling with peerServices == NODE_NONE, unless
 * state-specific flags must absolutely be avoided. When called with
 * peerServices == NODE_NONE, the returned desirable service flags are
 * guaranteed to not change dependent on state - ie they are suitable for
 * use when describing peers which we know to be desirable, but for which
 * we do not have a confirmed set of service flags.
 *
 * If the NODE_NONE return value is changed, contrib/seeds/makeseeds.py
 * should be updated appropriately to filter for the same nodes.
 */</comment>
<function_decl><type><name>ServiceFlags</name></type> <name>GetDesirableServiceFlags</name><parameter_list>(<parameter><decl><type><name>ServiceFlags</name></type> <name>services</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Set the current IBD status in order to figure out the desirable service flags */</comment>
<function_decl><type><name>void</name></type> <name>SetServiceFlagsIBDCache</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * A shortcut for (services &amp; GetDesirableServiceFlags(services))
 * == GetDesirableServiceFlags(services), ie determines whether the given
 * set of service flags are sufficient for a peer to be "relevant".
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>HasAllDesirableServiceFlags</name><parameter_list>(<parameter><decl><type><name>ServiceFlags</name></type> <name>services</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><operator>(</operator><call><name>GetDesirableServiceFlags</name><argument_list>(<argument><expr><name>services</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>~</operator><name>services</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Checks if a peer with the given service flags may be capable of having a
 * robust address-storage DB.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>MayHaveUsefulAddressDB</name><parameter_list>(<parameter><decl><type><name>ServiceFlags</name></type> <name>services</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>services</name> <operator>&amp;</operator> <name>NODE_NETWORK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>services</name> <operator>&amp;</operator> <name>NODE_NETWORK_LIMITED</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** A CService with information about it as peer */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CAddress</name> <range>: <expr><name>public</name> <name>CService</name>
<block>{
<expr><name>public</name><operator>:</operator>
    <call><name>CAddress</name><argument_list>()</argument_list></call></expr>;
    <expr><name>explicit</name> <macro><name>CAddress</name><argument_list>(<argument>CService ipIn</argument>, <argument>ServiceFlags nServicesIn</argument>)</argument_list></macro></expr>;

    <expr><name>void</name> <call><name>Init</name><argument_list>()</argument_list></call></expr>;

    <expr><name>ADD_SERIALIZE_METHODS</name></expr>;

    <expr><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name> <macro><name>SerializationOp</name><argument_list>(<argument>Stream&amp; s</argument>, <argument>Operation ser_action</argument>)</argument_list></macro>
    <block>{
        <if_stmt><if>if <condition>(<expr><call><name><name>ser_action</name><operator>.</operator><name>ForRead</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <name>int</name> <name>nVersion</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>GetVersion</name></name><argument_list>()</argument_list></call></block></expr>;
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>SER_DISK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></range></decl></decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>s</name><operator>.</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>SER_DISK</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>nVersion</name> <operator>&gt;=</operator> <name>CADDR_TIME_VERSION</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>GetType</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>SER_GETHASH</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>nServicesInt</name> <init>= <expr><name>nServices</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>nServicesInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nServices</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>ServiceFlags</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nServicesInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITEAS</name><argument_list>(<argument><expr><name>CService</name></expr></argument>, <argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }

    <comment type="line">// TODO: make private (improves encapsulation)</comment>
public:
    <decl_stmt><decl><type><name>ServiceFlags</name></type> <name>nServices</name></decl>;</decl_stmt>

    <comment type="line">// disk and network only</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nTime</name></decl>;</decl_stmt>
};

<comment type="block" format="doxygen">/** getdata message type flags */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>MSG_WITNESS_FLAG</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>MSG_TYPE_MASK</name>    <init>= <expr><literal type="number">0xffffffff</literal> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** getdata / inv message types.
 * These numbers are defined by the protocol. When adding a new value, be sure
 * to mention it in the respective BIP.
 */</comment>
<enum>enum <name>GetDataMsg</name>
<block>{
    <decl><name>UNDEFINED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
    <decl><name>MSG_TX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
    <decl><name>MSG_BLOCK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
    <comment type="line">// The following can only occur in getdata. Invs always use TX or BLOCK.</comment>
    <decl><name>MSG_FILTERED_BLOCK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,  <comment type="line" format="doxygen">//!&lt; Defined in BIP37</comment>
    <decl><name>MSG_CMPCT_BLOCK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,     <comment type="line" format="doxygen">//!&lt; Defined in BIP152</comment>
    <decl><name>MSG_WITNESS_BLOCK</name> <init>= <expr><name>MSG_BLOCK</name> <operator>|</operator> <name>MSG_WITNESS_FLAG</name></expr></init></decl>, <comment type="line" format="doxygen">//!&lt; Defined in BIP144</comment>
    <decl><name>MSG_WITNESS_TX</name> <init>= <expr><name>MSG_TX</name> <operator>|</operator> <name>MSG_WITNESS_FLAG</name></expr></init></decl>,       <comment type="line" format="doxygen">//!&lt; Defined in BIP144</comment>
    <decl><name>MSG_FILTERED_WITNESS_BLOCK</name> <init>= <expr><name>MSG_FILTERED_BLOCK</name> <operator>|</operator> <name>MSG_WITNESS_FLAG</name></expr></init></decl>,
}</block>;</enum>

<comment type="block" format="doxygen">/** inv message data */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>CInv</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>CInv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>CInv</name><argument_list>(<argument>int typeIn</argument>, <argument>const uint256&amp; hashIn</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

    <expr_stmt><expr><name>ADD_SERIALIZE_METHODS</name></expr>;</expr_stmt>

    <function><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Stream</name></expr></argument>, <argument><expr><name>typename</name> <name>Operation</name></expr></argument>&gt;</argument_list></name>
    <specifier>inline</specifier> <name>void</name></type> <name>SerializationOp</name><parameter_list>(<parameter><decl><type><name>Stream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>Operation</name></type> <name>ser_action</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>READWRITE</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <expr_stmt><expr><name>friend</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>CInv</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>CInv</name><operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetCommand</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>ToString</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>public</name>:</label>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint256</name></type> <name>hash</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_PROTOCOL_H</comment>
</unit>
