<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/rpc_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/client.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;core_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/chain.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;node/context.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/algorithm/string.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/blockchain.h&gt;</cpp:file></cpp:include>

<function><type><name>UniValue</name></type> <name>CallRPC</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>vArgs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>boost</name><operator>::</operator><name>split</name></name><argument_list>(<argument><expr><name>vArgs</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><call><name><name>boost</name><operator>::</operator><name>is_any_of</name></name><argument_list>(<argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>strMethod</name> <init>= <expr><name><name>vArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vArgs</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vArgs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>JSONRPCRequest</name></type> <name>request</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>strMethod</name></name> <operator>=</operator> <name>strMethod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>params</name></name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><name>strMethod</name></expr></argument>, <argument><expr><name>vArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>request</name><operator>.</operator><name>fHelp</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>RPCIsInWarmup</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetRPCWarmupFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <try>try <block>{<block_content>
        <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name> <init>= <expr><call><name><name>tableRPC</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block>
    <catch>catch <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UniValue</name><modifier>&amp;</modifier></type> <name>objError</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>runtime_error</name></name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><name>objError</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></catch></try>
</block_content>}</block></function>


<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>rpc_tests</argument>, <argument>TestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_rawparams</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Test raw transaction API argument handling</comment>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getrawtransaction"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getrawtransaction not_hex"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getrawtransaction a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed not_int"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction null null"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction not_array"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction {} {}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [] {}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [] {} extra"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction null"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction DEADBEEF"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rawtx</name> <init>= <expr><literal type="string">"0100000001a15d57094aa7a21a28cb20b59aab8fc7d1149a3bdbcddba9c622e4f5f6a99ece010000006c493046022100f93bb0e7d8db7bd46e40132d1f8242026e045f03a0efe71bbb8e3f475e970d790221009337cd7f1f929f00cc6ff01f03729b069a7c21b59b1736ddfee5db5946c5da8c0121033b9b137ee87d5a812d6f506efdd37f0affa7ffc310711c06c7f3e097c9447c52ffffffff0100e1f505000000001976a9140389035a9225b3839e2bbf32d826a1e222031fd888ac00000000"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>rawtx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">193</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"locktime"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>rawtx</name><operator>+</operator><literal type="string">" extra"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>rawtx</name><operator>+</operator><literal type="string">" false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"decoderawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>rawtx</name><operator>+</operator><literal type="string">" false extra"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only check failure cases for sendrawtransaction, there's no network to send to...</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"sendrawtransaction"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"sendrawtransaction null"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"sendrawtransaction DEADBEEF"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"sendrawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>rawtx</name><operator>+</operator><literal type="string">" extra"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_togglenetwork</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>r</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getnetworkinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>netState</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"networkactive"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>netState</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"setnetworkactive false"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getnetworkinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numConnection</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"connections"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>numConnection</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>netState</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"networkactive"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>netState</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"setnetworkactive true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"getnetworkinfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>netState</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"networkactive"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>netState</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_rawsign</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>r</name></decl>;</decl_stmt>
    <comment type="line">// input is a 1-of-2 multisig (so is output):</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>prevout</name> <init>=
      <expr><literal type="string">"[{\"txid\":\"b4cc287e58f87cdae59417329f710f3ecd75a4ee1d2872b7248f50977c8493f3\","</literal>
      <literal type="string">"\"vout\":1,\"scriptPubKey\":\"a914b10c9df5f7edf436c697f02f1efdba4cf399615187\","</literal>
      <literal type="string">"\"redeemScript\":\"512103debedc17b3df2badbcdd86d5feb4562b86fe182e5998abd8bcd4f122c6155b1b21027e940bb73ab8732bfdf7f9216ecefca5b94d6df834e77e108f68e66f126044c052ae\"}]"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"createrawtransaction "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>prevout</name><operator>+</operator><literal type="string">" "</literal><operator>+</operator>
      <literal type="string">"{\"3HqAe9LtNBjnsfM4CyYaWTnvCaUYT7v4oZ\":11}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>notsigned</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>privkey1</name> <init>= <expr><literal type="string">"\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>privkey2</name> <init>= <expr><literal type="string">"\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>NodeContext</name></type> <name>node</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>chain</name></name> <operator>=</operator> <call><name><name>interfaces</name><operator>::</operator><name>MakeChain</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_rpc_node</name> <operator>=</operator> <operator>&amp;</operator><name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"signrawtransactionwithkey "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>notsigned</name><operator>+</operator><literal type="string">" [] "</literal><operator>+</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"complete"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"signrawtransactionwithkey "</literal></expr></argument>)</argument_list></call><operator>+</operator><name>notsigned</name><operator>+</operator><literal type="string">" ["</literal><operator>+</operator><name>privkey1</name><operator>+</operator><literal type="string">","</literal><operator>+</operator><name>privkey2</name><operator>+</operator><literal type="string">"] "</literal><operator>+</operator><name>prevout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>find_value</name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>get_obj</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"complete"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_bool</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_rpc_node</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_createraw_op_return</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [{\"txid\":\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\",\"vout\":0}] {\"data\":\"68656c6c6f776f726c64\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Key not "data" (bad address)</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [{\"txid\":\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\",\"vout\":0}] {\"somedata\":\"68656c6c6f776f726c64\"}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bad hex encoding of data output</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [{\"txid\":\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\",\"vout\":0}] {\"data\":\"12345\"}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [{\"txid\":\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\",\"vout\":0}] {\"data\":\"12345g\"}"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Data 81 bytes long</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><literal type="string">"createrawtransaction [{\"txid\":\"a3b807410df0b60fcb9736768df5823938b2f838694939ba45f3c0a1bff150ed\",\"vout\":0}] {\"data\":\"010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_format_monetary_values</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"0.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">1LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"0.00000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">17622195LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"0.17622195"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">50000000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"0.50000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">89898989LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"0.89898989"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">100000000LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"1.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">2099999999999990LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"20999999.99999990"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">2099999999999999LL</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"20999999.99999999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><operator>(</operator><name>COIN</name><operator>/</operator><literal type="number">10000</literal><operator>)</operator><operator>*</operator><literal type="number">123456789</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12345.67890000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><operator>-</operator><name>COIN</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-1.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><operator>-</operator><name>COIN</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-0.10000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"100000000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">10000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"10000000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1000000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">100000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"100000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">10000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"10000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1000.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"100.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"10.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.00000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.10000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.01000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00100000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">10000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00010000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00001000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00000100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">10000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00000010"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ValueFromAmount</name><argument_list>(<argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0.00000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>ValueFromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name> <modifier>&amp;</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>value</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>setNumStr</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_parse_monetary_values</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"-0.00000001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.00000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.00000001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.17622195"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17622195LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">50000000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.50000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">50000000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.89898989"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">89898989LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"1.00000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100000000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"20999999.9999999"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2099999999999990LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"20999999.99999999"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2099999999999999LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"1e-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.1e-7"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.01e-6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.0000000000000000000000000000000000000000000000000000000000000000000000000001e+68"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name><operator>/</operator><literal type="number">100000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"10000000000000000000000000000000000000000000000000000000000000000e-64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000e64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>COIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"1e-9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should fail</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.000000019"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should fail</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.00000001000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should pass, cut trailing 0</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"19e-9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should fail</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"0.19e-6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should pass, leading 0 is present</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"92233720368.54775808"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//overflow error</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"1e+11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//overflow error</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"1e11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//overflow error signless</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ValueFromString</name><argument_list>(<argument><expr><literal type="string">"93e+9"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//overflow error</comment>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>json_parse_errors</argument>)</argument_list></macro>
<block>{<block_content>
    <comment type="line">// Valid</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"1.0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_real</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Valid, with leading or trailing whitespace</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">" 1.0"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_real</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"1.0 "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get_real</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">".19e-6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//should fail, missing leading 0, therefore invalid JSON</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>AmountFromValue</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"0.00000000000000000000000000000000000001e+30 "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Invalid, initial garbage</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"[1.0"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"a1.0"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Invalid, trailing garbage</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"1.0sds"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"1.0]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// BTC addresses should fail parsing</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><call><name>ParseNonRFCJSONValue</name><argument_list>(<argument><expr><literal type="string">"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_ban</argument>)</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"clearbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UniValue</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0:8334"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//portnumber for setban not allowed</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>ar</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>o1</name> <init>= <expr><name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>adr</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"127.0.0.0/32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0 remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0/24 add 9907731200 true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adr</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>banned_until</name> <init>= <expr><call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"banned_until"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"127.0.0.0/24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>banned_until</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9907731200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// absolute time check</comment>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"clearbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0/24 add 200"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adr</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>banned_until</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"banned_until"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"127.0.0.0/24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>GetTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>banned_until</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>banned_until</name><operator>.</operator><name>get_int64</name></name><argument_list>()</argument_list></call><operator>-</operator><name>now</name> <operator>&lt;=</operator> <literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// must throw an exception because 127.0.0.1 is in already banned subnet range</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.1 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0/24 remove"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.0.0/255.255.0.0 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 127.0.1.1 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"clearbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>ar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban test add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//invalid IP</comment>

    <comment type="line">//IPv6 tests</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban FE80:0000:0000:0000:0202:B3FF:FE1E:8329 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adr</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fe80::202:b3ff:fe1e:8329/128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"clearbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 2001:db8::/ffff:fffc:0:0:0:0:0:0 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adr</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2001:db8::/30"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"clearbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"setban 2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128 add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>r</name> <operator>=</operator> <call><name>CallRPC</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"listbanned"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ar</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>get_array</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>o1</name> <operator>=</operator> <name><name>ar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_obj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adr</name> <operator>=</operator> <call><name>find_value</name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>adr</name><operator>.</operator><name>get_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>rpc_convert_values_generatetoaddress</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>UniValue</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>result</name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>, <block>{<block_content><expr><literal type="string">"101"</literal></expr><operator>,</operator> <expr><literal type="string">"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a"</literal></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>)</block_content></block>)<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>result</name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>, <block>{<block_content><expr><literal type="string">"101"</literal></expr><operator>,</operator> <expr><literal type="string">"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU"</literal></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>))<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>result</name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>, <block>{<block_content><expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a"</literal></expr><operator>,</operator> <expr><literal type="string">"9"</literal></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>))<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mkESjLZW66TmHhiFX8MCaBjrhZ543PPh9a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_NO_THROW</name><argument_list>(<argument><expr><name>result</name> <operator>=</operator> <call><name>RPCConvertValues</name><argument_list>(<argument><expr><literal type="string">"generatetoaddress"</literal></expr></argument>, <block>{<block_content><expr><literal type="string">"1"</literal></expr><operator>,</operator> <expr><literal type="string">"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU"</literal></expr><operator>,</operator> <expr><literal type="string">"9"</literal></expr></block_content>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>))<empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>get_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mhMbmE2tE9xzJYCV9aNC8jKWN31vtGrguU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>get_int</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}

BOOST_AUTO_TEST_CASE<expr_stmt><expr><operator>(</operator><name>rpc_getblockstats_calculate_percentiles_by_weight</name><operator>)</operator>
<block>{
    <expr><name>int64_t</name> <name>total_weight</name> <operator>=</operator> <literal type="number">200</literal></expr>;
    <expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>CAmount</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>feerates</name></expr>;
    <expr><name>CAmount</name> <name><name>result</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr> }</block></expr>;

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> ,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt/></block_content></block></for>}</block></expr></expr_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> ,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>feerates</name></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test with more pairs, and two pairs overlapping 2 percentiles.</comment>
    <expr_stmt><expr><name>total_weight</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name><name>result2</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//10th + 25th percentile</comment>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument> ,<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//50th + 75th percentile</comment>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument> ,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument> ,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// 90th percentile</comment>

    <expr_stmt><expr><call><name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>result2</name></expr></argument>, <argument><expr><name>feerates</name></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Same test as above, but one of the percentile-overlapping pairs is split in 2.</comment>
    <expr_stmt><expr><name>total_weight</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name><name>result3</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10th percentile</comment>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 25th percentile</comment>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument> ,<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//50th + 75th percentile</comment>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument> ,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument> ,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 90th percentile</comment>

    <expr_stmt><expr><call><name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>result3</name></expr></argument>, <argument><expr><name>feerates</name></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test with one transaction spanning all percentiles.</comment>
    <expr_stmt><expr><name>total_weight</name> <operator>=</operator> <literal type="number">104</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CAmount</name></type> <name><name>result4</name><index>[<expr><name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>feerates</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><literal type="number">999999</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CalculatePercentilesByWeight</name><argument_list>(<argument><expr><name>result4</name></expr></argument>, <argument><expr><name>feerates</name></expr></argument>, <argument><expr><name>total_weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_GETBLOCKSTATS_PERCENTILES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name><name>result4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
}

BOOST_AUTO_TEST_SUITE_END<expr><operator>(</operator><operator>)</operator></expr>
</unit>
