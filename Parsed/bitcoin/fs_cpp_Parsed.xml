<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/fs.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fs.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NOMINMAX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOMINMAX</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;codecvt&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<namespace>namespace <name>fsbridge</name> <block>{

<function><type><name>FILE</name> <modifier>*</modifier></type><name>fopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
    <return>return <expr><call><name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>wstring_convert</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>codecvt_utf8_utf16</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name>utf8_cvt</name></decl>;</decl_stmt>
    <return>return <expr><call><name><operator>::</operator><name>_wfopen</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>wstring</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>utf8_cvt</name><operator>.</operator><name>from_bytes</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>GetErrorReason</name><parameter_list>()</parameter_list> <block>{<block_content>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>strerror</name></name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>FileLock</name><operator>::</operator><name>FileLock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>GetErrorReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>FileLock</name><operator>::</operator><name>~FileLock</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>FileLock</name><operator>::</operator><name>TryLock</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>F_WRLCK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>GetErrorReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>GetErrorReason</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>err</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>FormatMessageW</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> <operator>|</operator> <name>FORMAT_MESSAGE_FROM_SYSTEM</name> <operator>|</operator> <name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,
        <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><cast type="reinterpret">reinterpret_cast<argument_list type="generic">&lt;<argument><expr><name>WCHAR</name><operator>*</operator></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>wstring</name></name></type> <name>err_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>wstring_convert</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>codecvt_utf8_utf16</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to_bytes</name><argument_list>(<argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<constructor><name><name>FileLock</name><operator>::</operator><name>FileLock</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>wstring</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_DELETE</name></expr></argument>,
        <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>GetErrorReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></constructor>

<destructor><name><name>FileLock</name><operator>::</operator><name>~FileLock</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></destructor>

<function><type><name>bool</name></type> <name><name>FileLock</name><operator>::</operator><name>TryLock</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hFile</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>_OVERLAPPED</name></type> <name>overlapped</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LockFileEx</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>LOCKFILE_EXCLUSIVE_LOCK</name> <operator>|</operator> <name>LOCKFILE_FAIL_IMMEDIATELY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>DWORD</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>DWORD</name></expr></argument>&gt;</argument_list><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>reason</name> <operator>=</operator> <call><name>GetErrorReason</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>get_filesystem_error_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>filesystem_error</name></name><modifier>&amp;</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
    <return>return <expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// Convert from Multi Byte to utf-16</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>mb_string</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>what</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mb_string</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mb_string</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>wstring</name></name></type> <name>utf16_string</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'\0'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mb_string</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mb_string</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><operator>*</operator><call><name><name>utf16_string</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Convert from utf-16 to utf-8</comment>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>wstring_convert</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>codecvt_utf8_utf16</name><argument_list type="generic">&lt;<argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>to_bytes</name><argument_list>(<argument><expr><name>utf16_string</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GLIBCXX__</name></cpp:ifdef>

<comment type="line">// reference: https://github.com/gcc-mirror/gcc/blob/gcc-7_3_0-release/libstdc%2B%2B-v3/include/std/fstream#L270</comment>

<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>openmodeToStr</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>openmode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>ate</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>trunc</name></name></expr>:</case>
        <return>return <expr><literal type="string">"w"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name></expr>:</case>
        <return>return <expr><literal type="string">"a"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name></expr>:</case>
        <return>return <expr><literal type="string">"r"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name></expr>:</case>
        <return>return <expr><literal type="string">"r+"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>trunc</name></name></expr>:</case>
        <return>return <expr><literal type="string">"w+"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name></expr>:</case>
        <return>return <expr><literal type="string">"a+"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>trunc</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"wb"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"ab"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"rb"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"r+b"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>trunc</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"w+b"</literal></expr>;</return>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
    <case>case <expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>app</name></name> <operator>|</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>binary</name></name></expr>:</case>
        <return>return <expr><literal type="string">"a+b"</literal></expr>;</return>
    <default>default:</default>
        <return>return <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ifstream</name><operator>::</operator><name>open</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>openmode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>in</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_file</name> <operator>=</operator> <call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>openmodeToStr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>m_file</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>m_filebuf</name> <operator>=</operator> <call><name><name>__gnu_cxx</name><operator>::</operator><name>stdio_filebuf</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_file</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rdbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_filebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>ate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>seekg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ifstream</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_file</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_filebuf</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>m_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>m_file</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ofstream</name><operator>::</operator><name>open</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>fs</name><operator>::</operator><name>path</name></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>openmode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>out</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_file</name> <operator>=</operator> <call><name><name>fsbridge</name><operator>::</operator><name>fopen</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>openmodeToStr</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>m_file</name> <operator>==</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>m_filebuf</name> <operator>=</operator> <call><name><name>__gnu_cxx</name><operator>::</operator><name>stdio_filebuf</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_file</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rdbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>m_filebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>ate</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>seekp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name><name>ofstream</name><operator>::</operator><name>close</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>m_file</name> <operator>!=</operator> <literal type="null">nullptr</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>m_filebuf</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>m_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>m_file</name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// __GLIBCXX__</comment>

<assert type="static">static_assert<argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><call><name><name>fs</name><operator>::</operator><name>path</name></name><argument_list>()</argument_list></call><operator>.</operator><name>BOOST_FILESYSTEM_C_STR</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
    <argument><expr><literal type="string">"Warning: This build is using boost::filesystem ofstream and ifstream "</literal>
    <literal type="string">"implementations which will fail to open paths containing multibyte "</literal>
    <literal type="string">"characters. You should delete this static_assert to ignore this warning, "</literal>
    <literal type="string">"or switch to a different C++ standard library like the Microsoft C++ "</literal>
    <literal type="string">"Standard Library (where boost uses non-standard extensions to construct "</literal>
    <literal type="string">"stream objects with wide filenames), or the GNU libstdc++ library (where "</literal>
    <literal type="string">"a more complicated workaround has been implemented above)."</literal></expr></argument>)</argument_list>;</assert>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// __GLIBCXX__</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// WIN32</comment>

}</block></namespace> <comment type="line">// fsbridge</comment>
</unit>
