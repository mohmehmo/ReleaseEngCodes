<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/secp256k1/src/field_5x52_impl.h"><comment type="block" format="doxygen">/**********************************************************************
 * Copyright (c) 2013, 2014 Pieter Wuille                             *
 * Distributed under the MIT software license, see the accompanying   *
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.*
 **********************************************************************/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SECP256K1_FIELD_REPR_IMPL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECP256K1_FIELD_REPR_IMPL_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_CONFIG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsecp256k1-config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ASM_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field_5x52_asm_impl.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"field_5x52_int128_impl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F,
 *  represented as 5 uint64_t's in base 2^52. The values are allowed to contain &gt;52 each. In particular,
 *  each FieldElem has a 'magnitude' associated with it. Internally, a magnitude M means each element
 *  is at most M*(2^53-1), except the most significant one, which is limited to M*(2^49-1). All operations
 *  accept any input with magnitude at most M, and have different rules for propagating magnitude to their
 *  output.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr></else></ternary></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
   <comment type="block">/* secp256k1 'p' value defined in "Standards for Efficient Cryptography" (SEC2) 2.7.1. */</comment>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal> <operator>*</operator> <name>m</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">2048</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>r</name> <operator>&amp;=</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xFFFFEFFFFFC2FULL</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t4 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">49</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At most a single final reduction is needed; check if the value is &gt;= the field characteristic */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t4</name> <operator>==</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator>
        <operator>&amp;</operator> <operator>(</operator><name>t0</name> <operator>&gt;=</operator> <literal type="number">0xFFFFEFFFFFC2FULL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Apply the final reduction (for constant-time behaviour, we do it always) */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* If t4 didn't carry to bit 48 already, then it should have after any final reduction */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Mask off the possible multiple of 2^256 from the final reduction */</comment>
    <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_weak</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t4 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">49</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_normalize_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Reduce t4 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">49</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* At most a single final reduction is needed; check if the value is &gt;= the field characteristic */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>t4</name> <operator>==</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator>
        <operator>&amp;</operator> <operator>(</operator><name>t0</name> <operator>&gt;=</operator> <literal type="number">0xFFFFEFFFFFC2FULL</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>t0</name> <operator>+=</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

        <comment type="block">/* If t4 didn't carry to bit 48 already, then it should have after any final reduction */</comment>
        <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal> <operator>==</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Mask off the possible multiple of 2^256 from the final reduction */</comment>
        <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t1</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t3</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>

    <comment type="block">/* Reduce t4 at the start so there will be at most a single carry from the first pass */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name> <init>= <expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t0</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name>  <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name>  <operator>=</operator> <name>t0</name> <operator>^</operator> <literal type="number">0x1000003D0ULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
                                                <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t4</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t4</name> <operator>^</operator> <literal type="number">0xF000000000000ULL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">49</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>z0</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>z1</name> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_normalizes_to_zero_var</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>, <decl><type ref="prev"/><name>t4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Reduce t4 at the start so there will be at most a single carry from the first pass */</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr>;</expr_stmt>

    <comment type="block">/* The first pass ensures the magnitude is 1, ... */</comment>
    <expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>x</name> <operator>*</operator> <literal type="number">0x1000003D1ULL</literal></expr>;</expr_stmt>

    <comment type="block">/* z0 tracks a possible raw value of 0, z1 tracks a possible raw value of P */</comment>
    <expr_stmt><expr><name>z0</name> <operator>=</operator> <name>t0</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>z1</name> <operator>=</operator> <name>z0</name> <operator>^</operator> <literal type="number">0x1000003D0ULL</literal></expr>;</expr_stmt>

    <comment type="block">/* Fast return path should catch the majority of cases */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>z0</name> <operator>!=</operator> <literal type="number">0ULL</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>z1</name> <operator>!=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>t1</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>t4</name> <operator>&amp;=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>t1</name> <operator>+=</operator> <operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t2</name> <operator>+=</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t1</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t3</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t2</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t4</name> <operator>+=</operator> <operator>(</operator><name>t3</name> <operator>&gt;&gt;</operator> <literal type="number">52</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t3</name> <operator>&amp;=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt> <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t3</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t3</name></expr>;</expr_stmt>
                                                <expr_stmt><expr><name>z0</name> <operator>|=</operator> <name>t4</name></expr>;</expr_stmt> <expr_stmt><expr><name>z1</name> <operator>&amp;=</operator> <name>t4</name> <operator>^</operator> <literal type="number">0xF000000000000ULL</literal></expr>;</expr_stmt>

    <comment type="block">/* ... except for a possible carry at bit 48 of t4 (i.e. bit 256 of the field element) */</comment>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>t4</name> <operator>&gt;&gt;</operator> <literal type="number">49</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>z0</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>z1</name> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_set_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_zero</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_is_odd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_clear</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_cmp_var</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>secp256k1_fe_set_b32</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">31</literal></expr>]</index></name>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator>  <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">18</literal></expr>]</index></name>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">9</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">8</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">7</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>  <operator>&lt;&lt;</operator> <literal type="number">44</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">5</literal></expr>]</index></name>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator>
            <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xFFFFEFFFFFC2FULL</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/** Convert a field element to a 32-byte big endian value. Requires the input to be normalized */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_get_b32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">44</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_negate</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFEFFFFFC2FULL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x0FFFFFFFFFFFFULL</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul_int</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SECP256K1_INLINE</name> <specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_add</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>+=</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_mul</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier> <name>SECP256K1_RESTRICT</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_fe_mul_inner</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_sqr</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>secp256k1_fe_sqr_inner</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>secp256k1_fe_verify</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mask0</name> <operator>=</operator> <name>flag</name> <operator>+</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>mask1</name> <operator>=</operator> <operator>~</operator><name>mask0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>&gt;</operator> <name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>magnitude</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>&amp;=</operator> <name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_storage_cmov</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>mask0</name></decl>, <decl><type ref="prev"/><name>mask1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>mask0</name> <operator>=</operator> <name>flag</name> <operator>+</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>mask1</name> <operator>=</operator> <operator>~</operator><name>mask0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask0</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask1</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>secp256k1_fe_to_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><call><name>VERIFY_CHECK</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>normalized</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">52</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">36</literal> <operator>|</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SECP256K1_INLINE</name> <name>void</name></type> <name>secp256k1_fe_from_storage</name><parameter_list>(<parameter><decl><type><name>secp256k1_fe</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>secp256k1_fe_storage</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">52</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">40</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">28</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">36</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFFFFFFULL</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>n</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VERIFY</name></cpp:ifdef>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>magnitude</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>normalized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SECP256K1_FIELD_REPR_IMPL_H */</comment>
</unit>
