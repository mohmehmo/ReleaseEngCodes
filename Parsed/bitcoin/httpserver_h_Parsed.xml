<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/httpserver.h"><comment type="line">// Copyright (c) 2015-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_HTTPSERVER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_HTTPSERVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_HTTP_THREADS</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_HTTP_WORKQUEUE</name><init>=<expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>DEFAULT_HTTP_SERVER_TIMEOUT</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<struct_decl>struct <name>evhttp_request</name>;</struct_decl>
<struct_decl>struct <name>event_base</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>CService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HTTPRequest</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Initialize HTTP server.
 * Call this before RegisterHTTPHandler or EventBase().
 */</comment>
<function_decl><type><name>bool</name></type> <name>InitHTTPServer</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Start HTTP server.
 * This is separate from InitHTTPServer to give users race-condition-free time
 * to register their handlers between InitHTTPServer and StartHTTPServer.
 */</comment>
<function_decl><type><name>void</name></type> <name>StartHTTPServer</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Interrupt HTTP server threads */</comment>
<function_decl><type><name>void</name></type> <name>InterruptHTTPServer</name><parameter_list>()</parameter_list>;</function_decl>
<comment type="block" format="doxygen">/** Stop HTTP server */</comment>
<function_decl><type><name>void</name></type> <name>StopHTTPServer</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Change logging level for libevent. Removes BCLog::LIBEVENT from log categories if
 * libevent doesn't support debug logging.*/</comment>
<function_decl><type><name>bool</name></type> <name>UpdateHTTPServerLogging</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Handler for requests to a certain HTTP path */</comment>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>bool</name><operator>(</operator><name>HTTPRequest</name><operator>*</operator> <name>req</name>, <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>HTTPRequestHandler</name></expr>;</expr_stmt></typedef>
<comment type="block" format="doxygen">/** Register handler for prefix.
 * If multiple handlers match a prefix, the first-registered one will
 * be invoked.
 */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>RegisterHTTPHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>prefix</name></expr></argument>, <argument><expr><name>bool</name> <name>exactMatch</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>HTTPRequestHandler</name> <operator>&amp;</operator><name>handler</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Unregister handler for prefix */</comment>
<decl_stmt><decl><type><name>void</name></type> <name>UnregisterHTTPHandler</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>prefix</name></expr></argument>, <argument><expr><name>bool</name> <name>exactMatch</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Return evhttp event base. This can be used by submodules to
 * queue timers or custom events.
 */</comment>
<function_decl><type><name><name>struct</name> <name>event_base</name></name><modifier>*</modifier></type> <name>EventBase</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** In-flight HTTP request.
 * Thin C++ wrapper around evhttp_request.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>HTTPRequest</name>
<block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name><name>struct</name> <name>evhttp_request</name></name><modifier>*</modifier></type> <name>req</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>replySent</name></decl>;</decl_stmt>

<label><name>public</name>:</label>
    <function_decl><type><name>explicit</name></type> <name>HTTPRequest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>evhttp_request</name></name><modifier>*</modifier></type> <name>req</name></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><operator>~</operator><call><name>HTTPRequest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <enum>enum <name>RequestMethod</name> <block>{
        <decl><name>UNKNOWN</name></decl>,
        <decl><name>GET</name></decl>,
        <decl><name>POST</name></decl>,
        <decl><name>HEAD</name></decl>,
        <decl><name>PUT</name></decl>
    }</block>;</enum>

    <comment type="block" format="doxygen">/** Get requested URI.
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <macro><name>GetURI</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Get CService (address:ip) for the origin of the http request.
     */</comment>
    <expr_stmt><expr><name>CService</name> <macro><name>GetPeer</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Get request method.
     */</comment>
    <expr_stmt><expr><name>RequestMethod</name> <macro><name>GetRequestMethod</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Get the request header specified by hdr, or an empty string.
     * Return a pair (isPresent,string).
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <macro><name>GetHeader</name><argument_list>(<argument>const std::string&amp; hdr</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Read request body.
     *
     * @note As this consumes the underlying buffer, call this only once.
     * Repeated calls will return an empty string.
     */</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>ReadBody</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Write output header.
     *
     * @note call this before calling WriteErrorReply or Reply.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>WriteHeader</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>hdr</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/**
     * Write HTTP reply.
     * nStatus is the HTTP status code to send.
     * strReply is the body of the reply. Keep it empty to send a standard message.
     *
     * @note Can be called only once. As this will give the request back to the
     * main thread, do not call any other HTTPRequest methods after calling this.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>WriteReply</name><argument_list>(<argument><expr><name>int</name> <name>nStatus</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name><operator>&amp;</operator> <name>strReply</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Event handler closure.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>HTTPClosure</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <expr_stmt><expr><name>virtual</name> <name>void</name> <call><call><name>operator</name><argument_list>()</argument_list></call><argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>virtual</name> <operator>~</operator><macro><name>HTTPClosure</name><argument_list>()</argument_list></macro> <block>{}</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Event class. This can be used either as a cross-thread trigger or as a timer.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>HTTPEvent</name>
<block>{<block_content>
<label><name>public</name>:</label>
    <comment type="block" format="doxygen">/** Create a new event.
     * deleteWhenTriggered deletes this event object after the event is triggered (and the handler called)
     * handler is the handler to call when the event is triggered.
     */</comment>
    <macro><name>HTTPEvent</name><argument_list>(<argument>struct event_base* base</argument>, <argument>bool deleteWhenTriggered</argument>, <argument>const std::function&lt;void()&gt;&amp; handler</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>HTTPEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/** Trigger the event. If tv is 0, trigger it immediately. Otherwise trigger it after
     * the given time has elapsed.
     */</comment>
    <function_decl><type><name>void</name></type> <name>trigger</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name><modifier>*</modifier></type> <name>tv</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt><decl><type><name>bool</name></type> <name>deleteWhenTriggered</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>function</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>(</operator><operator>)</operator></expr></argument>&gt;</argument_list></name> <name>handler</name></expr>;</expr_stmt>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name><modifier>*</modifier></type> <name>ev</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_HTTPSERVER_H</comment>
</unit>
