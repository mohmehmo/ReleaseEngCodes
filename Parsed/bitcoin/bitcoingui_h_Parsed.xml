<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoingui.h"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_BITCOINGUI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_BITCOINGUI_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/optionsdialog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QLabel&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMainWindow&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMap&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPoint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSystemTrayIcon&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/macos_appnap.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NetworkStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Notificator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RPCConsole</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SendCoinsRecipient</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>UnitDisplayStatusBarControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletController</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletFrame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>HelpMessageDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ModalOverlay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QAction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QComboBox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QMenu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QProgressBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QProgressDialog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<name>namespace</name></type> <name>GUIUtil</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>ClickableLabel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ClickableProgressBar</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block" format="doxygen">/**
  Bitcoin GUI main class. This class represents the main window of the Bitcoin UI. It communicates with both the client and
  wallet models to give the user an up-to-date view of the current core state.
*/</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BitcoinGUI</name> <range>: <expr><name>public</name> <name>QMainWindow</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <specifier>static</specifier> <specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <name>DEFAULT_UIPLATFORM</name></expr>;

    <expr><name>explicit</name> <call><name>BitcoinGUI</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>NetworkStyle</name> <operator>*</operator><name>networkStyle</name></expr></argument>, <argument><expr><name>QWidget</name> <operator>*</operator><name>parent</name> <operator>=</operator> <name>nullptr</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>BitcoinGUI</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Set the client model.
        The client model represents the part of the core that communicates with the P2P network, and is wallet-agnostic.
    */</comment>
    <expr><name>void</name> <call><name>setClientModel</name><argument_list>(<argument><expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr></argument>)</argument_list></call></expr>;
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr><name>void</name> <call><name>setWalletController</name><argument_list>(<argument><expr><name>WalletController</name><operator>*</operator> <name>wallet_controller</name></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="block" format="doxygen">/** Set the wallet model.
        The wallet model represents a bitcoin wallet, and offers access to the list of transactions, address book and sending
        functionality.
    */</comment>
    <expr><name>void</name> <call><name>addWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>walletModel</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>removeWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>walletModel</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>removeAllWallets</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
    <expr><name>bool</name> <name>enableWallet</name> <operator>=</operator> <name>false</name></expr>;

    <comment type="block" format="doxygen">/** Get the tray icon status.
        Some systems have not "system tray" or "notification area" available.
    */</comment>
    <expr><name>bool</name> <macro><name>hasTrayIcon</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>trayIcon</name></expr>;</return> }</block>

    <comment type="block" format="doxygen">/** Disconnect core signals from GUI client */</comment>
    <name>void</name> <call><name>unsubscribeFromCoreSignals</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <name>void</name> <call><name>changeEvent</name><argument_list>(<argument><expr><name>QEvent</name> <operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>closeEvent</name><argument_list>(<argument><expr><name>QCloseEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>showEvent</name><argument_list>(<argument><expr><name>QShowEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>dragEnterEvent</name><argument_list>(<argument><expr><name>QDragEnterEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <call><name>dropEvent</name><argument_list>(<argument><expr><name>QDropEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>object</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>WalletController</name><operator>*</operator> <name>m_wallet_controller</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_message_box</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Handler</name></expr></argument>&gt;</argument_list></name> <name>m_handler_question</name></expr>;
    <expr><name>ClientModel</name><operator>*</operator> <name>clientModel</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>WalletFrame</name><operator>*</operator> <name>walletFrame</name> <operator>=</operator> <name>nullptr</name></expr>;

    <expr><name>UnitDisplayStatusBarControl</name><operator>*</operator> <name>unitDisplayControl</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QLabel</name><operator>*</operator> <name>labelWalletEncryptionIcon</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QLabel</name><operator>*</operator> <name>labelWalletHDStatusIcon</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>*</operator> <name>labelProxyIcon</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>*</operator> <name>connectionsControl</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>GUIUtil</name><operator>::</operator><name>ClickableLabel</name><operator>*</operator> <name>labelBlocksIcon</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QLabel</name><operator>*</operator> <name>progressBarLabel</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>GUIUtil</name><operator>::</operator><name>ClickableProgressBar</name><operator>*</operator> <name>progressBar</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QProgressDialog</name><operator>*</operator> <name>progressDialog</name> <operator>=</operator> <name>nullptr</name></expr>;

    <expr><name>QMenuBar</name><operator>*</operator> <name>appMenuBar</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QToolBar</name><operator>*</operator> <name>appToolBar</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>overviewAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>historyAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>quitAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>sendCoinsAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>sendCoinsMenuAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>usedSendingAddressesAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>usedReceivingAddressesAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>signMessageAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>verifyMessageAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>aboutAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>receiveCoinsAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>receiveCoinsMenuAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>optionsAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>toggleHideAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>encryptWalletAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>backupWalletAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>changePassphraseAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>aboutQtAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>openRPCConsoleAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>openAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>showHelpMessageAction</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>m_create_wallet_action</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>m_open_wallet_action</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>QMenu</name><operator>*</operator> <name>m_open_wallet_menu</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>m_close_wallet_action</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>m_wallet_selector_label_action</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QAction</name><operator>*</operator> <name>m_wallet_selector_action</name> <operator>=</operator> <name>nullptr</name></expr>;

    <expr><name>QLabel</name> <operator>*</operator><name>m_wallet_selector_label</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>QComboBox</name><operator>*</operator> <name>m_wallet_selector</name> <operator>=</operator> <name>nullptr</name></expr>;

    <expr><name>QSystemTrayIcon</name><operator>*</operator> <name>trayIcon</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>QMenu</name></expr></argument>&gt;</argument_list></name> <name>trayIconMenu</name></expr>;
    <expr><name>Notificator</name><operator>*</operator> <name>notificator</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>RPCConsole</name><operator>*</operator> <name>rpcConsole</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>HelpMessageDialog</name><operator>*</operator> <name>helpMessageDialog</name> <operator>=</operator> <name>nullptr</name></expr>;
    <expr><name>ModalOverlay</name><operator>*</operator> <name>modalOverlay</name> <operator>=</operator> <name>nullptr</name></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifdef>
    <expr><name>CAppNapInhibitor</name><operator>*</operator> <name>m_app_nap_inhibitor</name> <operator>=</operator> <name>nullptr</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block" format="doxygen">/** Keep track of previous number of blocks, to detect progress */</comment>
    <expr><name>int</name> <name>prevBlocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;
    <expr><name>int</name> <name>spinnerFrame</name> <operator>=</operator> <literal type="number">0</literal></expr>;

    <expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr>;
    <expr><specifier>const</specifier> <name>NetworkStyle</name><operator>*</operator> <specifier>const</specifier> <name>m_network_style</name></expr>;

    <comment type="block" format="doxygen">/** Create the main UI actions. */</comment>
    <expr><name>void</name> <call><name>createActions</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Create the menu bar and sub-menus. */</comment>
    <expr><name>void</name> <call><name>createMenuBar</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Create the toolbars */</comment>
    <expr><name>void</name> <call><name>createToolBars</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Create system tray icon and notification */</comment>
    <expr><name>void</name> <call><name>createTrayIcon</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Create system tray menu (or setup the dock menu) */</comment>
    <expr><name>void</name> <call><name>createTrayIconMenu</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Enable or disable all wallet-related actions */</comment>
    <expr><name>void</name> <macro><name>setWalletActionsEnabled</name><argument_list>(<argument>bool enabled</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Connect core signals to GUI client */</comment>
    <expr><name>void</name> <call><name>subscribeToCoreSignals</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Update UI with latest network info from model. */</comment>
    <expr><name>void</name> <call><name>updateNetworkState</name><argument_list>()</argument_list></call></expr>;

    <expr><name>void</name> <call><name>updateHeadersSyncProgressLabel</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Open the OptionsDialog on the specified tab index */</comment>
    <expr><name>void</name> <macro><name>openOptionsDialogWithTab</name><argument_list>(<argument>OptionsDialog::Tab tab</argument>)</argument_list></macro></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Signal raised when a URI was entered or dragged to the GUI */</comment>
    <name>void</name> <call><name>receivedURI</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>uri</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Signal raised when RPC console shown */</comment>
    <expr><name>void</name> <call><name>consoleShown</name><argument_list>(<argument><expr><name>RPCConsole</name><operator>*</operator> <name>console</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Set number of connections shown in the UI */</comment>
    <name>void</name> <macro><name>setNumConnections</name><argument_list>(<argument>int count</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set network state shown in the UI */</comment>
    <expr><name>void</name> <macro><name>setNetworkActive</name><argument_list>(<argument>bool networkActive</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set number of blocks and last block date shown in the UI */</comment>
    <expr><name>void</name> <macro><name>setNumBlocks</name><argument_list>(<argument>int count</argument>, <argument>const QDateTime&amp; blockDate</argument>, <argument>double nVerificationProgress</argument>, <argument>bool headers</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Notify the user of an event from the core network or transaction handling code.
       @param[in] title     the message box / notification title
       @param[in] message   the displayed text
       @param[in] style     modality and style definitions (icon and used buttons - buttons only for message boxes)
                            @see CClientUIInterface::MessageBoxFlags
       @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)
    */</comment>
    <expr><name>void</name> <macro><name>message</name><argument_list>(<argument>const QString&amp; title</argument>, <argument>QString message</argument>, <argument>unsigned int style</argument>, <argument>bool* ret = nullptr</argument>)</argument_list></macro></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr><name>void</name> <call><name>setCurrentWallet</name><argument_list>(<argument><expr><name>WalletModel</name><operator>*</operator> <name>wallet_model</name></expr></argument>)</argument_list></call></expr>;
    <expr><name>void</name> <macro><name>setCurrentWalletBySelectorIndex</name><argument_list>(<argument>int index</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Set the UI status indicators based on the currently selected wallet.
    */</comment>
    <expr><name>void</name> <call><name>updateWalletStatus</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Set the encryption status as shown in the UI.
       @param[in] status            current encryption status
       @see WalletModel::EncryptionStatus
    */</comment>
    <name>void</name> <macro><name>setEncryptionStatus</name><argument_list>(<argument>int status</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Set the hd-enabled status as shown in the UI.
     @param[in] hdEnabled         current hd enabled status
     @see WalletModel::EncryptionStatus
     */</comment>
    <expr><name>void</name> <macro><name>setHDStatus</name><argument_list>(<argument>bool privkeyDisabled</argument>, <argument>int hdEnabled</argument>)</argument_list></macro></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>bool</name> <call><name>handlePaymentRequest</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SendCoinsRecipient</name><operator>&amp;</operator> <name>recipient</name></expr></argument>)</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Show incoming transaction notification for new transactions. */</comment>
    <expr><name>void</name> <macro><name>incomingTransaction</name><argument_list>(<argument>const QString&amp; date</argument>, <argument>int unit</argument>, <argument>const CAmount&amp; amount</argument>, <argument>const QString&amp; type</argument>, <argument>const QString&amp; address</argument>, <argument>const QString&amp; label</argument>, <argument>const QString&amp; walletName</argument>)</argument_list></macro></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>

<expr><name>private</name><operator>:</operator>
    <comment type="block" format="doxygen">/** Set the proxy-enabled icon as shown in the UI. */</comment>
    <name>void</name> <call><name>updateProxyIcon</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>updateWindowTitle</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="block" format="doxygen">/** Switch to overview (home) page */</comment>
    <name>void</name> <call><name>gotoOverviewPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to history (transactions) page */</comment>
    <expr><name>void</name> <call><name>gotoHistoryPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to receive coins page */</comment>
    <expr><name>void</name> <call><name>gotoReceiveCoinsPage</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Switch to send coins page */</comment>
    <expr><name>void</name> <macro><name>gotoSendCoinsPage</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Show Sign/Verify Message dialog and switch to sign message tab */</comment>
    <expr><name>void</name> <macro><name>gotoSignMessageTab</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Show Sign/Verify Message dialog and switch to verify message tab */</comment>
    <expr><name>void</name> <macro><name>gotoVerifyMessageTab</name><argument_list>(<argument>QString addr = <literal type="string">""</literal></argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** Show open dialog */</comment>
    <expr><name>void</name> <call><name>openClicked</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ENABLE_WALLET</comment>
    <comment type="block" format="doxygen">/** Show configuration dialog */</comment>
    <expr><name>void</name> <call><name>optionsClicked</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show about dialog */</comment>
    <expr><name>void</name> <call><name>aboutClicked</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show debug window */</comment>
    <expr><name>void</name> <call><name>showDebugWindow</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show debug window and set focus to the console */</comment>
    <expr><name>void</name> <call><name>showDebugWindowActivateConsole</name><argument_list>()</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Show help message dialog */</comment>
    <expr><name>void</name> <call><name>showHelpMessageClicked</name><argument_list>()</argument_list></call></expr>;
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Q_OS_MAC</name></cpp:ifndef>
    <comment type="block" format="doxygen">/** Handle tray icon clicked */</comment>
    <expr><name>void</name> <macro><name>trayIconActivated</name><argument_list>(<argument>QSystemTrayIcon::ActivationReason reason</argument>)</argument_list></macro></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block" format="doxygen">/** Handle macOS Dock icon clicked */</comment>
    <expr><name>void</name> <call><name>macosDockIconActivated</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block" format="doxygen">/** Show window if hidden, unminimize when minimized, rise when obscured or show if hidden and fToggleHidden is true */</comment>
    <expr><name>void</name> <macro><name>showNormalIfMinimized</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name>showNormalIfMinimized</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>; }</block>
    <name>void</name> <macro><name>showNormalIfMinimized</name><argument_list>(<argument>bool fToggleHidden</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Simply calls showNormalIfMinimized(true) for use in SLOT() macro */</comment>
    <expr><name>void</name> <call><name>toggleHidden</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** called by a timer to check if ShutdownRequested() has been set **/</comment>
    <expr><name>void</name> <call><name>detectShutdown</name><argument_list>()</argument_list></call></expr>;

    <comment type="block" format="doxygen">/** Show progress dialog e.g. for verifychain */</comment>
    <expr><name>void</name> <macro><name>showProgress</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>int nProgress</argument>)</argument_list></macro></expr>;

    <comment type="block" format="doxygen">/** When hideTrayIcon setting is changed in OptionsModel hide or show the icon accordingly. */</comment>
    <expr><name>void</name> <call><name>setTrayIconVisible</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>void</name> <call><name>showModalOverlay</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>UnitDisplayStatusBarControl</name> <range>: <expr><name>public</name> <name>QLabel</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>UnitDisplayStatusBarControl</name><argument_list>(<argument><expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Lets the control know about the Options Model (and its signals) */</comment>
    <expr><name>void</name> <call><name>setOptionsModel</name><argument_list>(<argument><expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr></argument>)</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <comment type="block" format="doxygen">/** So that it responds to left-button clicks */</comment>
    <name>void</name> <call><name>mousePressEvent</name><argument_list>(<argument><expr><name>QMouseEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr>;
    <expr><name>QMenu</name><operator>*</operator> <name>menu</name></expr>;

    <comment type="block" format="doxygen">/** Shows context menu with Display Unit options by the mouse coordinates */</comment>
    <expr><name>void</name> <call><name>onDisplayUnitsClicked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QPoint</name><operator>&amp;</operator> <name>point</name></expr></argument>)</argument_list></call></expr>;
    <comment type="block" format="doxygen">/** Creates context menu, its actions, and wires up all the relevant signals for mouse events. */</comment>
    <expr><name>void</name> <call><name>createContextMenu</name><argument_list>()</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="block" format="doxygen">/** When Display Units are changed on OptionsModel it will refresh the display text of the control on the status bar */</comment>
    <name>void</name> <macro><name>updateDisplayUnit</name><argument_list>(<argument>int newUnits</argument>)</argument_list></macro></expr>;
    <comment type="block" format="doxygen">/** Tells underlying optionsModel to update its current display unit. */</comment>
    <expr><name>void</name> <call><name>onMenuSelection</name><argument_list>(<argument><expr><name>QAction</name><operator>*</operator> <name>action</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_BITCOINGUI_H</comment>
</unit>
