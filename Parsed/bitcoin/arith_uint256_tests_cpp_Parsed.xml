<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/arith_uint256_tests.cpp"><comment type="line">// Copyright (c) 2011-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arith_uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>arith_uint256_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<comment type="line" format="doxygen">/// Convert vector to arith_uint256, via uint256 blob</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>arith_uint256</name></type> <name>arith_uint256V</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256</name><argument_list>(<argument><expr><name>vch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>R1Array</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x9c\x52\x4a\xdb\xcf\x56\x11\x12\x2b\x29\x12\x5e\x5d\x35\xd2\xd2"</literal>
    <literal type="string">"\x22\x81\xaa\xb5\x33\xf0\x08\x32\xd5\x56\xb1\xf9\xea\xe5\x1d\x7d"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>R1ArrayHex</name><index>[]</index></name> <init>= <expr><literal type="string">"7D1DE5EAF9B156D53208F033B5AA8122D2d2355d5e12292b121156cfdb4a529c"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>R1Ldouble</name> <init>= <expr><literal type="number">0.4887374590559308955</literal></expr></init></decl>;</decl_stmt> <comment type="line">// R1L equals roughly R1Ldouble * 2^256</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>R1L</name> <init>= <macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R1Array,R1Array+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>R1LLow64</name> <init>= <expr><literal type="number">0x121156cfdb4a529cULL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>R2Array</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x70\x32\x1d\x7c\x47\xa5\x6b\x40\x26\x7e\x0a\xc3\xa6\x9c\xb6\xbf"</literal>
    <literal type="string">"\x13\x30\x47\xa3\x19\x2d\xda\x71\x49\x13\x72\xf0\xb4\xca\x81\xd7"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>R2L</name> <init>= <macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(R2Array,R2Array+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>R1LplusR2L</name><index>[]</index></name> <init>= <expr><literal type="string">"549FB09FEA236A1EA3E31D4D58F1B1369288D204211CA751527CFC175767850C"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ZeroArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal>
    <literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>ZeroL</name> <init>= <macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(ZeroArray,ZeroArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>OneArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal>
    <literal type="string">"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>OneL</name> <init>= <macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(OneArray,OneArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>MaxArray</name><index>[]</index></name> <init>=
    <expr><literal type="string">"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"</literal>
    <literal type="string">"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>MaxL</name> <init>= <macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(MaxArray,MaxArray+<literal type="number">32</literal>)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>arith_uint256</name></type> <name>HalfL</name> <init>= <expr><operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <literal type="number">255</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ArrayToString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>A</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>stringstream</name></name></type> <name>Stream</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>Stream</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>hex</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>Stream</name><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>setw</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>setfill</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>A</name><index>[<expr><name>width</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>basics</argument> )</argument_list></macro> <comment type="line">// constructors, equality, inequality</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>==</operator> <literal type="number">0</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// constructor arith_uint256(vector&lt;char&gt;):</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R1Array</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>R2Array</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>OneArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>MaxArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>ArrayToString</name><argument_list>(<argument><expr><name>ZeroArray</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// == and !=</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>!=</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>!=</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>OneL</name> <operator>!=</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>!=</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><name>MaxL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>R1L</name> <operator>^</operator> <name>R2L</name><operator>)</operator> <operator>^</operator> <name>R1L</name><operator>)</operator> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>Tmp64</name> <init>= <expr><literal type="number">0xc4dab720d9c7acaaULL</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>!=</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>!=</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>!=</operator> <operator>(</operator><name>R1L</name> <operator>^</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><call><name>arith_uint256</name><argument_list>(<argument><expr><name>Tmp64</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>)</operator> <operator>!=</operator> <name>Tmp64</name> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>==</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// String Constructor and Copy Constructor</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0x"</literal><operator>+</operator><call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>MaxL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"   0x"</literal><operator>+</operator><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"   "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><name>R1ArrayHex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><name>R1L</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><call><name>arith_uint256</name><argument_list>(<argument><expr><name>R1L</name><operator>^</operator><name>R2L</name></expr></argument>)</argument_list></call><operator>^</operator><name>R2L</name><operator>)</operator> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><name>ZeroL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><name>OneL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// uint64_t constructor</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>R1L</name> <operator>&amp;</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0xffffffffffffffff"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><name>R1LLow64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>ZeroL</name> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>OneL</name> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="string">"0xffffffffffffffff"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0xffffffffffffffffULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Assignment (from base_uint)</comment>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>tmpL</name> <init>= <expr><operator>~</operator><name>ZeroL</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>tmpL</name> <operator>==</operator> <operator>~</operator><name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpL</name> <operator>=</operator> <operator>~</operator><name>OneL</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>tmpL</name> <operator>==</operator> <operator>~</operator><name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpL</name> <operator>=</operator> <operator>~</operator><name>R1L</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>tmpL</name> <operator>==</operator> <operator>~</operator><name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpL</name> <operator>=</operator> <operator>~</operator><name>R2L</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>tmpL</name> <operator>==</operator> <operator>~</operator><name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmpL</name> <operator>=</operator> <operator>~</operator><name>MaxL</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>tmpL</name> <operator>==</operator> <operator>~</operator><name>MaxL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shiftArrayRight</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>arrayLength</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitsToShift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>T</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>T</name> <operator>&lt;</operator> <name>arrayLength</name></expr>;</condition> <incr><expr><operator>++</operator><name>T</name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>F</name> <init>= <expr><operator>(</operator><name>T</name><operator>+</operator><name>bitsToShift</name><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>F</name> <operator>&lt;</operator> <name>arrayLength</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name>  <operator>=</operator> <name><name>from</name><index>[<expr><name>F</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bitsToShift</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>F</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>arrayLength</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|=</operator> <name><name>from</name><index>[<expr><operator>(</operator><name>F</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>bitsToShift</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shiftArrayLeft</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>to</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>arrayLength</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>bitsToShift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>T</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>T</name> <operator>&lt;</operator> <name>arrayLength</name></expr>;</condition> <incr><expr><operator>++</operator><name>T</name></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&gt;=</operator> <name>bitsToShift</name><operator>/</operator><literal type="number">8</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>F</name> <init>= <expr><name>T</name><operator>-</operator><name>bitsToShift</name><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name>  <operator>=</operator> <name><name>from</name><index>[<expr><name>F</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>bitsToShift</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>T</name> <operator>&gt;=</operator> <name>bitsToShift</name><operator>/</operator><literal type="number">8</literal><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name> <operator>|=</operator> <name><name>from</name><index>[<expr><name>F</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>bitsToShift</name><operator>%</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>to</name><index>[<expr><name>T</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>shifts</argument> )</argument_list></macro> <block>{<block_content> <comment type="line">// "&lt;&lt;"  "&gt;&gt;"  "&lt;&lt;="  "&gt;&gt;="</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>TmpArray</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>TmpL</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>shiftArrayLeft</name><argument_list>(<argument><expr><name>TmpArray</name></expr></argument>, <argument><expr><name>OneArray</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>OneL</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&lt;&lt;=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">255</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>HalfL</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">255</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shiftArrayLeft</name><argument_list>(<argument><expr><name>TmpArray</name></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&lt;&lt;=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shiftArrayRight</name><argument_list>(<argument><expr><name>TmpArray</name></expr></argument>, <argument><expr><name>R1Array</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&gt;&gt;=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shiftArrayLeft</name><argument_list>(<argument><expr><name>TmpArray</name></expr></argument>, <argument><expr><name>MaxArray</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>MaxL</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&lt;&lt;=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shiftArrayRight</name><argument_list>(<argument><expr><name>TmpArray</name></expr></argument>, <argument><expr><name>MaxArray</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>MaxL</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>&gt;&gt;=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>c1L</name> <init>= <expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0x0123456789abcdefULL</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>c2L</name> <init>= <expr><name>c1L</name> <operator>&lt;&lt;</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>c1L</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>c2L</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">128</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>c1L</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>c2L</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>unaryOperators</argument> )</argument_list></macro> <comment type="line">// !    ~    -</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><name>ZeroL</name> <operator>==</operator> <name>MaxL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>TmpArray</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>TmpArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>R1Array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><macro><name>arith_uint256V</name><argument_list>(<argument>std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+<literal type="number">32</literal>)</argument>)</argument_list></macro> <operator>==</operator> <operator>(</operator><operator>~</operator><name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>-</operator><name>ZeroL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>-</operator><name>R1L</name> <operator>==</operator> <operator>(</operator><operator>~</operator><name>R1L</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>OneL</name><operator>&lt;&lt;</operator><name>i</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block>


<comment type="line">// Check if doing _A_ _OP_ _B_ results in the same as applying _OP_ onto each</comment>
<comment type="line">// element of Aarray and Barray, and then converting the result into an arith_uint256.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKBITWISEOPERATOR</name><parameter_list>(<parameter><type><name>_A_</name></type></parameter>,<parameter><type><name>_B_</name></type></parameter>,<parameter><type><name>_OP_</name></type></parameter>)</parameter_list></cpp:macro>                              \
    <cpp:value>for (unsigned int i = 0; i &lt; 32; ++i) { TmpArray[i] = _A_##Array[i] _OP_ _B_##Array[i]; } \
    BOOST_CHECK(arith_uint256V(std::vector&lt;unsigned char&gt;(TmpArray,TmpArray+32)) == (_A_##L _OP_ _B_##L));</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKASSIGNMENTOPERATOR</name><parameter_list>(<parameter><type><name>_A_</name></type></parameter>,<parameter><type><name>_B_</name></type></parameter>,<parameter><type><name>_OP_</name></type></parameter>)</parameter_list></cpp:macro>                           \
    <cpp:value>TmpL = _A_##L; TmpL _OP_##= _B_##L; BOOST_CHECK(TmpL == (_A_##L _OP_ _B_##L));</cpp:value></cpp:define>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>bitwiseOperators</argument> )</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>TmpArray</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>&amp;</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>TmpL</name></decl>;</decl_stmt>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>R2</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Zero</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>Max</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Zero</argument>,<argument>R1</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKASSIGNMENTOPERATOR</name><argument_list>(<argument>Max</argument>,<argument>R1</argument>,<argument>&amp;</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>Tmp64</name> <init>= <expr><literal type="number">0xe1db685c9a0b47a2ULL</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>|=</operator> <name>Tmp64</name></expr>;</expr_stmt>  <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>|</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><name>Tmp64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>|=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>^=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>^=</operator> <name>Tmp64</name></expr>;</expr_stmt>  <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>^</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><name>Tmp64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>comparison</argument> )</argument_list></macro> <comment type="line">// &lt;= &gt;= &lt; &gt;</comment>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>TmpL</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>TmpL</name><operator>=</operator> <name>OneL</name><operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>&gt;=</operator> <name>ZeroL</name> <operator>&amp;&amp;</operator> <name>TmpL</name> <operator>&gt;</operator> <name>ZeroL</name> <operator>&amp;&amp;</operator> <name>ZeroL</name> <operator>&lt;</operator> <name>TmpL</name> <operator>&amp;&amp;</operator> <name>ZeroL</name> <operator>&lt;=</operator> <name>TmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>TmpL</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name>TmpL</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>TmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>|=</operator> <name>R1L</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>&gt;=</operator> <name>R1L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>TmpL</name> <operator>==</operator> <name>R1L</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>TmpL</name> <operator>&gt;</operator> <name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>TmpL</name> <operator>==</operator> <name>R1L</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>TmpL</name> <operator>&lt;=</operator> <name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>R1L</name> <operator>&lt;=</operator> <name>TmpL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>R1L</name> <operator>==</operator> <name>TmpL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>R1L</name> <operator>&lt;</operator> <name>TmpL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>TmpL</name> <operator>==</operator> <name>R1L</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>R1L</name> <operator>&gt;=</operator> <name>TmpL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator> <operator>(</operator><name>TmpL</name> <operator>&lt;</operator> <name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator> <operator>(</operator><name>R1L</name> <operator>&gt;</operator> <name>TmpL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>plusMinus</argument> )</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>TmpL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name><operator>+</operator><name>R2L</name> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><name>R1LplusR2L</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>+=</operator> <name>R1L</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>+=</operator> <name>R2L</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name> <operator>+</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>OneL</name><operator>+</operator><name>MaxL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name><operator>+</operator><name>OneL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>+</operator> <name>OneL</name> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>OneL</name> <operator>+</operator> <operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>+=</operator> <name>OneL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name><operator>++</operator> <operator>==</operator> <operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>( <argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0xbedc77e27940a7ULL</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0xee8d836fce66fbULL</literal> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0xbedc77e27940a7ULL</literal> <operator>+</operator> <literal type="number">0xee8d836fce66fbULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0xbedc77e27940a7ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>TmpL</name> <operator>+=</operator> <literal type="number">0xee8d836fce66fbULL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <call><name>arith_uint256</name><argument_list>(<argument><expr><literal type="number">0xbedc77e27940a7ULL</literal><operator>+</operator><literal type="number">0xee8d836fce66fbULL</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>-=</operator> <literal type="number">0xee8d836fce66fbULL</literal></expr>;</expr_stmt>  <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <literal type="number">0xbedc77e27940a7ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>++</operator><name>TmpL</name> <operator>==</operator> <name>R1L</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>-</operator><operator>(</operator><operator>-</operator><name>R2L</name><operator>)</operator> <operator>==</operator> <name>R1L</name><operator>+</operator><name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>-</operator><operator>(</operator><operator>-</operator><name>OneL</name><operator>)</operator> <operator>==</operator> <name>R1L</name><operator>+</operator><name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>-</operator> <name>OneL</name> <operator>==</operator> <name>R1L</name><operator>+</operator><operator>(</operator><operator>-</operator><name>OneL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>-</operator><name>OneL</name><operator>)</operator>  <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>OneL</name> <operator>==</operator> <operator>(</operator><name>MaxL</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name><operator>--</operator> <operator>==</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <operator>(</operator><name>HalfL</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>--</operator><name>TmpL</name> <operator>==</operator> <operator>(</operator><name>MaxL</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>TmpL</name> <operator>=</operator> <name>R1L</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>--</operator><name>TmpL</name> <operator>==</operator> <name>R1L</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>multiply</argument> )</argument_list></macro>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <name>R1L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"62a38c0486f01e45879d7910a7761bf30d5237e9873f9bff3642a732c4d84f10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <name>R2L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"de37805e9986996cfba76ff6ba51c008df851987d9dd323f0e5de07760529c40"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <name>ZeroL</name><operator>)</operator> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <name>OneL</name><operator>)</operator> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <name>MaxL</name><operator>)</operator> <operator>==</operator> <operator>-</operator><name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <name>R1L</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>*</operator> <name>R2L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <name>R2L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"ac8c010096767d3cae5005dec28bb2b45a1d85ab7996ccd3e102a650f74ff100"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <name>ZeroL</name><operator>)</operator> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <name>OneL</name><operator>)</operator> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <name>MaxL</name><operator>)</operator> <operator>==</operator> <operator>-</operator><name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>*</operator> <name>MaxL</name> <operator>==</operator> <name>OneL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"7759b1c0ed14047f961ad09b20ff83687876a0181a367b813634046f91def7d4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>*</operator> <literal type="number">0x87654321UL</literal><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"23f7816e30c4ae2017257b7a0fa64d60402f5234d46e746b61c960d09a26d070"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>divide</argument> )</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>D1L</name><argument_list>(<argument><expr><literal type="string">"AD7133AC1977FA2B7"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>D2L</name><argument_list>(<argument><expr><literal type="string">"ECD751716"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>/</operator> <name>D1L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"00000000000000000b8ac01106981635d9ed112290f8895545a7654dde28fb3a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name> <operator>/</operator> <name>D2L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"000000000873ce8efec5b67150bad3aa8c5fcb70e947586153bf2cec7c37c57a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>/</operator> <name>OneL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>/</operator> <name>MaxL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>/</operator> <name>R1L</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>R1L</name> <operator>/</operator> <name>ZeroL</name></expr></argument>, <argument><expr><name>uint_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>/</operator> <name>D1L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"000000000000000013e1665895a1cc981de6d93670105a6b3ec3b73141b3a3c5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R2L</name> <operator>/</operator> <name>D2L</name><operator>)</operator><operator>.</operator><call><name>ToString</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="string">"000000000e8f0abe753bb0afe2e9437ee85d280be60882cf0bd1aaf7fa3cc2c4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R2L</name> <operator>/</operator> <name>OneL</name> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R2L</name> <operator>/</operator> <name>MaxL</name> <operator>==</operator> <name>ZeroL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>MaxL</name> <operator>/</operator> <name>R2L</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_THROW</name><argument_list>(<argument><expr><name>R2L</name> <operator>/</operator> <name>ZeroL</name></expr></argument>, <argument><expr><name>uint_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<function><type><specifier>static</specifier> <name>bool</name></type> <name>almostEqual</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><name>d1</name><operator>-</operator><name>d2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal><operator>*</operator><call><name>fabs</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call><operator>*</operator><call><name><name>std</name><operator>::</operator><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list><operator>::</operator><name>epsilon</name></name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>methods</argument> )</argument_list></macro> <comment type="line">// GetHex SetHex size() GetLow64 GetSerializeSize, Serialize, Unserialize</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>OneL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>MaxL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <function_decl><type><name>arith_uint256</name></type> <name>TmpL</name><parameter_list>(<parameter><decl><type><name>R1L</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>HalfL</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>TmpL</name> <operator>==</operator> <name>HalfL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>TmpL</name><operator>.</operator><name>SetHex</name></name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R2L</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>MaxL</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>R1L</name><operator>.</operator><name>GetLow64</name></name><argument_list>()</argument_list></call>  <operator>==</operator> <name>R1LLow64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>HalfL</name><operator>.</operator><name>GetLow64</name></name><argument_list>()</argument_list></call> <operator>==</operator><literal type="number">0x0000000000000000ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>OneL</name><operator>.</operator><name>GetLow64</name></name><argument_list>()</argument_list></call> <operator>==</operator><literal type="number">0x0000000000000001ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>OneL</name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>.</operator><call><name>getdouble</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>ldexp</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ZeroL</name><operator>.</operator><name>getdouble</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">53</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name>almostEqual</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">256</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getdouble</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ldexp</name><argument_list>(<argument><expr><name>R1Ldouble</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>R1L64part</name> <init>= <expr><operator>(</operator><name>R1L</name><operator>&gt;&gt;</operator><literal type="number">192</literal><operator>)</operator><operator>.</operator><call><name>GetLow64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <comment type="line">// doubles can store all integers in {0,...,2^54-1} exactly</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><name>R1L</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">256</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>.</operator><call><name>getdouble</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>R1L64part</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">64</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>bignum_SetCompact</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>num</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fNegative</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fOverflow</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x00123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x01003456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x02000056</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x03000000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x04000000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x00923456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x01803456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x02800056</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x03800000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x04800000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x01123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000000012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x01120000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure that we don't generate compacts with the 0x00800000 bit set</comment>
    <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x02008000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x01fedcba</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"000000000000000000000000000000000000000000000000000000000000007e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x01fe0000U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x02123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000001234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x02123400U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x03123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000000123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x03123456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x04123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000012345600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x04123456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x04923456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000012345600"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x04923456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x05009234</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0000000000000000000000000000000000000000000000000000000092340000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x05009234U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0x20123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetHex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1234560000000000000000000000000000000000000000000000000000000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>GetCompact</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x20123456U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>SetCompact</name></name><argument_list>(<argument><expr><literal type="number">0xff123456</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fNegative</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fOverflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fNegative</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><name>fOverflow</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>


<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>( <argument>getmaxcoverage</argument> )</argument_list></macro> <comment type="line">// some more tests just to get 100% coverage</comment>
<block>{<block_content>
    <comment type="line">// ~R1L give a base_uint&lt;256&gt;</comment>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>(</operator><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>R1L</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&lt;</operator> <name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&lt;=</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&gt;</operator> <name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><operator>~</operator><name>R1L</name> <operator>&gt;=</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>R1L</name> <operator>&lt;</operator> <operator>~</operator><operator>~</operator><name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>&lt;=</operator> <operator>~</operator><operator>~</operator><name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>R1L</name> <operator>&gt;</operator> <operator>~</operator><operator>~</operator><name>R1L</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>&gt;=</operator> <operator>~</operator><operator>~</operator><name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><operator>~</operator><name>R1L</name> <operator>+</operator> <name>R2L</name> <operator>==</operator> <name>R1L</name> <operator>+</operator> <operator>~</operator><operator>~</operator><name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><operator>~</operator><name>R1L</name> <operator>-</operator> <name>R2L</name> <operator>==</operator> <name>R1L</name> <operator>-</operator> <operator>~</operator><operator>~</operator><name>R2L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>~</operator><name>R1L</name> <operator>!=</operator> <name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>R1L</name> <operator>!=</operator> <operator>~</operator><name>R1L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>TmpArray</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>~R1</argument>,<argument>R2</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>~R1</argument>,<argument>R2</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>~R1</argument>,<argument>R2</argument>,<argument>&amp;</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>~R2</argument>,<argument>|</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>~R2</argument>,<argument>^</argument>)</argument_list></macro>
    <macro><name>CHECKBITWISEOPERATOR</name><argument_list>(<argument>R1</argument>,<argument>~R2</argument>,<argument>&amp;</argument>)</argument_list></macro>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
