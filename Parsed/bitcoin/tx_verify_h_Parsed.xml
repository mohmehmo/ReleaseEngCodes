<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/consensus/tx_verify.h"><comment type="line">// Copyright (c) 2017-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_CONSENSUS_TX_VERIFY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_CONSENSUS_TX_VERIFY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;amount.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>CBlockIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CCoinsViewCache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTransaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>TxValidationState</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Transaction validation functions */</comment>

<decl_stmt><decl><type><name>namespace</name></type> <name>Consensus</name> <block>{<block_content>
<comment type="block" format="doxygen">/**
 * Check whether all inputs of this transaction are valid (no double spends and amounts)
 * This does not modify the UTXO set. This does not check scripts and sigs.
 * @param[out] txfee Set to the transaction fee if successful.
 * Preconditions: tx.IsCoinBase() is false.
 */</comment>
<function_decl><type><name>bool</name></type> <name>CheckTxInputs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><name>TxValidationState</name><modifier>&amp;</modifier></type> <name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nSpendHeight</name></decl></parameter>, <parameter><decl><type><name>CAmount</name><modifier>&amp;</modifier></type> <name>txfee</name></decl></parameter>)</parameter_list>;</function_decl>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace Consensus</comment>

<comment type="block" format="doxygen">/** Auxiliary functions for transaction validation (ideally should not be exposed) */</comment>

<comment type="block" format="doxygen">/**
 * Count ECDSA signature operations the old-fashioned (pre-0.6) way
 * @return number of sigops this transaction's outputs will produce when spent
 * @see CTransaction::FetchInputs
 */</comment>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>GetLegacySigOpCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Count ECDSA signature operations in pay-to-script-hash inputs.
 *
 * @param[in] mapInputs Map of previous transactions that have outputs we're spending
 * @return maximum number of sigops required to validate this transaction's inputs
 * @see CTransaction::FetchInputs
 */</comment>
<function_decl><type><name>unsigned</name> <name>int</name></type> <name>GetP2SHSigOpCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>mapInputs</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Compute total signature operation cost of a transaction.
 * @param[in] tx     Transaction for which we are computing the cost
 * @param[in] inputs Map of previous transactions that have outputs we're spending
 * @param[out] flags Script verification flags
 * @return Total signature operation cost of tx
 */</comment>
<function_decl><type><name>int64_t</name></type> <name>GetTransactionSigOpCost</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name><modifier>&amp;</modifier></type> <name>tx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CCoinsViewCache</name><modifier>&amp;</modifier></type> <name>inputs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Check if transaction is final and can be included in a block with the
 * specified height and time. Consensus critical.
 */</comment>
<function_decl><type><name>bool</name></type> <name>IsFinalTx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CTransaction</name> <modifier>&amp;</modifier></type><name>tx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBlockHeight</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nBlockTime</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * Calculates the block height and previous block's median time past at
 * which the transaction will be considered final in the context of BIP 68.
 * Also removes from the vector of input heights any entries which did not
 * correspond to sequence locked inputs as they do not affect the calculation.
 */</comment>
<expr_stmt><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <macro><name>CalculateSequenceLocks</name><argument_list>(<argument>const CTransaction &amp;tx</argument>, <argument>int flags</argument>, <argument>std::vector&lt;int&gt;* prevHeights</argument>, <argument>const CBlockIndex&amp; block</argument>)</argument_list></macro></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>EvaluateSequenceLocks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>&amp;</operator> <name>block</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name> <name>lockPair</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<comment type="block" format="doxygen">/**
 * Check if transaction is final per BIP 68 sequence numbers and can be included in a block.
 * Consensus critical. Takes as input a list of heights at which tx's inputs (in order) confirmed.
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>SequenceLocks</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CTransaction</name> <operator>&amp;</operator><name>tx</name></expr></argument>, <argument><expr><name>int</name> <name>flags</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>*</operator> <name>prevHeights</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>&amp;</operator> <name>block</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_CONSENSUS_TX_VERIFY_H</comment>
</unit>
