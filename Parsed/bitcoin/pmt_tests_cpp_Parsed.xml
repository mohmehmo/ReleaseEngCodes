<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/pmt_tests.cpp"><comment type="line">// Copyright (c) 2012-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/merkle.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;merkleblock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serialize.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;streams.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arith_uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;version.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<class>class <name>CPartialMerkleTreeTester</name> <super_list>: <super><specifier>public</specifier> <name>CPartialMerkleTree</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <comment type="line">// flip one bit in one of the hashes - this should break the authentication</comment>
    <function><type><name>void</name></type> <name>Damage</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><call><name>InsecureRandRange</name><argument_list>(<argument><expr><call><name><name>vHash</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>vHash</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><name>bit</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>^=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>bit</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>pmt_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>pmt_test1</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>nTxCounts</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">312</literal></expr>, <expr><literal type="number">513</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">4095</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nTx</name> <init>= <expr><name><name>nTxCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// build a block with some dummy transactions</comment>
        <decl_stmt><decl><type><name>CBlock</name></type> <name>block</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nTx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nLockTime</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <comment type="line">// actual transaction data doesn't matter; just make the nLockTime's unique</comment>
            <expr_stmt><expr><call><name><name>block</name><operator>.</operator><name>vtx</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MakeTransactionRef</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// calculate actual merkle root and height</comment>
        <decl_stmt><decl><type><name>uint256</name></type> <name>merkleRoot1</name> <init>= <expr><call><name>BlockMerkleRoot</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vTxid</name><argument_list>(<argument><expr><name>nTx</name></expr></argument>, <argument><expr><call><name>uint256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nTx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>vTxid</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>vtx</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><call><name>GetHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>nHeight</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nTx_</name> <init>= <expr><name>nTx</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>nTx_</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nTx_</name> <operator>=</operator> <operator>(</operator><name>nTx_</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nHeight</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="line">// check with random subsets with inclusion chances 1, 1/2, 1/4, ..., 1/128</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>att</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>att</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>att</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// build random subset of txid's</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vMatch</name><argument_list>(<argument><expr><name>nTx</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatchTxid1</name></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nTx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>fInclude</name> <init>= <expr><call><name>InsecureRandBits</name><argument_list>(<argument><expr><name>att</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>vMatch</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>fInclude</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>fInclude</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>vMatchTxid1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vTxid</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// build the partial merkle tree</comment>
            <function_decl><type><name>CPartialMerkleTree</name></type> <name>pmt1</name><parameter_list>(<parameter><decl><type><name>vTxid</name></type></decl></parameter>, <parameter><decl><type><name>vMatch</name></type></decl></parameter>)</parameter_list>;</function_decl>

            <comment type="line">// serialize</comment>
            <function_decl><type><name>CDataStream</name></type> <name>ss</name><parameter_list>(<parameter><decl><type><name>SER_NETWORK</name></type></decl></parameter>, <parameter><decl><type><name>PROTOCOL_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
            <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>pmt1</name></expr>;</expr_stmt>

            <comment type="line">// verify CPartialMerkleTree's size guarantees</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>nTx</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <call><name><name>vMatchTxid1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>*</operator><name>nHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><literal type="number">258</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// deserialize into a tester copy</comment>
            <decl_stmt><decl><type><name>CPartialMerkleTreeTester</name></type> <name>pmt2</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>ss</name> <operator>&gt;&gt;</operator> <name>pmt2</name></expr>;</expr_stmt>

            <comment type="line">// extract merkle root and matched txids from copy</comment>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatchTxid2</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint256</name></type> <name>merkleRoot2</name> <init>= <expr><call><name><name>pmt2</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatchTxid2</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// check that it has the same merkle root as the original, and a valid one</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>merkleRoot1</name> <operator>==</operator> <name>merkleRoot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>merkleRoot2</name><operator>.</operator><name>IsNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// check that it contains the matched transactions (in the same order!)</comment>
            <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>vMatchTxid1</name> <operator>==</operator> <name>vMatchTxid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// check that random bit flips break the authentication</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <function_decl><type><name>CPartialMerkleTreeTester</name></type> <name>pmt3</name><parameter_list>(<parameter><decl><type><name>pmt2</name></type></decl></parameter>)</parameter_list>;</function_decl>
                <expr_stmt><expr><call><name><name>pmt3</name><operator>.</operator><name>Damage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vMatchTxid3</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>uint256</name></type> <name>merkleRoot3</name> <init>= <expr><call><name><name>pmt3</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vMatchTxid3</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><name>merkleRoot3</name> <operator>!=</operator> <name>merkleRoot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>pmt_malleability</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint256</name></expr></argument>&gt;</argument_list></name></type> <name>vTxid</name> <init>= <expr><block>{
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,
        <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vMatch</name> <init>= <expr><block>{<expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">false</literal></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><literal type="boolean">true</literal></expr>, <expr><literal type="boolean">false</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <function_decl><type><name>CPartialMerkleTree</name></type> <name>tree</name><parameter_list>(<parameter><decl><type><name>vTxid</name></type></decl></parameter>, <parameter><decl><type><name>vMatch</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vIndex</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK</name><argument_list>(<argument><expr><call><name><name>tree</name><operator>.</operator><name>ExtractMatches</name></name><argument_list>(<argument><expr><name>vTxid</name></expr></argument>, <argument><expr><name>vIndex</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>IsNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
