<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/paymentserver.h"><comment type="line">// Copyright (c) 2011-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_PAYMENTSERVER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_PAYMENTSERVER_H</name></cpp:macro></cpp:define>

<comment type="line">// This class handles payment requests from clicking on</comment>
<comment type="line">// bitcoin: URIs</comment>
<comment type="line">//</comment>
<comment type="line">// This is somewhat tricky, because we have to deal with</comment>
<comment type="line">// the situation where the user clicks on a link during</comment>
<comment type="line">// startup/initialization, when the splash-screen is up</comment>
<comment type="line">// but the main window (and the Send Coins tab) is not.</comment>
<comment type="line">//</comment>
<comment type="line">// So, the strategy is:</comment>
<comment type="line">//</comment>
<comment type="line">// Create the server, and register the event handler,</comment>
<comment type="line">// when the application is created. Save any URIs</comment>
<comment type="line">// received at or during startup in a list.</comment>
<comment type="line">//</comment>
<comment type="line">// When startup is finished and the main window is</comment>
<comment type="line">// shown, a signal is sent to slot uiReady(), which</comment>
<comment type="line">// emits a receivedURI() signal for any payment</comment>
<comment type="line">// requests that happened during startup.</comment>
<comment type="line">//</comment>
<comment type="line">// After startup, receivedURI() happens as usual.</comment>
<comment type="line">//</comment>
<comment type="line">// This class has one more feature: a static</comment>
<comment type="line">// method that finds URIs passed in the command line</comment>
<comment type="line">// and, if a server is running in another process,</comment>
<comment type="line">// sends them to the server.</comment>
<comment type="line">//</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/sendcoinsrecipient.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QString&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<decl_stmt><decl><type><name>QT_BEGIN_NAMESPACE</name>
<name>class</name></type> <name>QApplication</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QByteArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QLocalServer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>QUrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>QT_END_NAMESPACE</name>

<name>class</name></type> <name>PaymentServer</name> <range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>

<name>public</name><operator>:</operator>
    <comment type="line">// Parse URIs on command line</comment>
    <comment type="line">// Returns false on error</comment>
    <specifier>static</specifier> <name>void</name> <macro><name>ipcParseCommandLine</name><argument_list>(<argument>interfaces::Node&amp; node</argument>, <argument>int argc</argument>, <argument>char *argv[]</argument>)</argument_list></macro></expr>;

    <comment type="line">// Returns true if there were URIs on the command line</comment>
    <comment type="line">// which were successfully sent to an already-running</comment>
    <comment type="line">// process.</comment>
    <comment type="line">// Note: if a payment request is given, SelectParams(MAIN/TESTNET)</comment>
    <comment type="line">// will be called so we startup in the right mode.</comment>
    <expr><specifier>static</specifier> <name>bool</name> <call><name>ipcSendCommandLine</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// parent should be QApplication object</comment>
    <expr><name>explicit</name> <macro><name>PaymentServer</name><argument_list>(<argument>QObject* parent</argument>, <argument>bool startLocalServer = true</argument>)</argument_list></macro></expr>;
    <expr><operator>~</operator><call><name>PaymentServer</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// OptionsModel is used for getting proxy settings and display unit</comment>
    <expr><name>void</name> <call><name>setOptionsModel</name><argument_list>(<argument><expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <comment type="line">// Fired when a valid payment request is received</comment>
    <name>void</name> <call><name>receivedPaymentRequest</name><argument_list>(<argument><expr><name>SendCoinsRecipient</name></expr></argument>)</argument_list></call></expr>;

    <comment type="line">// Fired when a message should be reported to the user</comment>
    <expr><name>void</name> <macro><name>message</name><argument_list>(<argument>const QString &amp;title</argument>, <argument>const QString &amp;message</argument>, <argument>unsigned int style</argument>)</argument_list></macro></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <comment type="line">// Signal this when the main window's UI is ready</comment>
    <comment type="line">// to display payment requests to the user</comment>
    <name>void</name> <call><name>uiReady</name><argument_list>()</argument_list></call></expr>;

    <comment type="line">// Handle an incoming URI, URI with local file scheme or file</comment>
    <expr><name>void</name> <call><name>handleURIOrFile</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name><operator>&amp;</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>handleURIConnection</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>
    <comment type="line">// Constructor registers this on the parent QApplication to</comment>
    <comment type="line">// receive QEvent::FileOpen and QEvent:Drop events</comment>
    <name>bool</name> <call><name>eventFilter</name><argument_list>(<argument><expr><name>QObject</name> <operator>*</operator><name>object</name></expr></argument>, <argument><expr><name>QEvent</name> <operator>*</operator><name>event</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>bool</name> <name>saveURIs</name></expr>;                      <comment type="line">// true during startup</comment>
    <expr><name>QLocalServer</name><operator>*</operator> <name>uriServer</name></expr>;
    <expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_PAYMENTSERVER_H</comment>
</unit>
