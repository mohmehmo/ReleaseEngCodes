<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/node/context.h"><comment type="line">// Copyright (c) 2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NODE_CONTEXT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NODE_CONTEXT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BanMan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CConnman</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CTxMemPool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PeerLogicValidation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ChainClient</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<comment type="line" format="doxygen">//! NodeContext struct containing references to chain state and connection</comment>
<comment type="line" format="doxygen">//! state.</comment>
<comment type="line" format="doxygen">//!</comment>
<comment type="line" format="doxygen">//! This is used by init, rpc, and test code to pass object references around</comment>
<comment type="line" format="doxygen">//! without needing to declare the same variables and parameters repeatedly, or</comment>
<comment type="line" format="doxygen">//! to use globals. More variables could be added to this struct (particularly</comment>
<comment type="line" format="doxygen">//! references to validation objects) to eliminate use of globals</comment>
<comment type="line" format="doxygen">//! and make code more modular and testable. The struct isn't intended to have</comment>
<comment type="line" format="doxygen">//! any member functions. It should just be a collection of references that can</comment>
<comment type="line" format="doxygen">//! be used without pulling in unwanted dependencies or functionality.</comment>
<struct>struct <name>NodeContext</name> <block>{
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>CConnman</name></expr></argument>&gt;</argument_list></name> <name>connman</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CTxMemPool</name><modifier>*</modifier></type> <name>mempool</name><block>{<block_content><expr><name>nullptr</name></expr></block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt> <comment type="line">// Currently a raw pointer because the memory is not managed by this struct</comment>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>PeerLogicValidation</name></expr></argument>&gt;</argument_list></name> <name>peer_logic</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>BanMan</name></expr></argument>&gt;</argument_list></name> <name>banman</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>Chain</name></expr></argument>&gt;</argument_list></name> <name>chain</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>interfaces</name><operator>::</operator><name>ChainClient</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>chain_clients</name></expr>;</expr_stmt>

    <comment type="line" format="doxygen">//! Declare default constructor and destructor that are not inline, so code</comment>
    <comment type="line" format="doxygen">//! instantiating the NodeContext struct doesn't need to #include class</comment>
    <comment type="line" format="doxygen">//! definitions for all the unique_ptr members.</comment>
    <expr_stmt><expr><call><name>NodeContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>~</operator><call><name>NodeContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NODE_CONTEXT_H</comment>
</unit>
