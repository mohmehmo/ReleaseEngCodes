<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/util/mutexlock.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/port.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/thread_annotations.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<comment type="line">// Helper class that locks a mutex on construction and unlocks the mutex when</comment>
<comment type="line">// the destructor of the MutexLock object is invoked.</comment>
<comment type="line">//</comment>
<comment type="line">// Typical usage:</comment>
<comment type="line">//</comment>
<comment type="line">//   void MyClass::MyMethod() {</comment>
<comment type="line">//     MutexLock l(&amp;mu_);       // mu_ is an instance variable</comment>
<comment type="line">//     ... some complex code, possibly with multiple return paths ...</comment>
<comment type="line">//   }</comment>

<decl_stmt><decl><type><name>class</name> <name>SCOPED_LOCKABLE</name></type> <name>MutexLock</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <decl_stmt><decl><type><name>explicit</name></type> <name>MutexLock</name><argument_list>(<argument><expr><name>port</name><operator>::</operator><name>Mutex</name> <operator>*</operator><name>mu</name></expr></argument>)</argument_list> <name>EXCLUSIVE_LOCK_FUNCTION</name><argument_list>(<argument><expr><name>mu</name></expr></argument>)</argument_list>
      <range>: <macro><name>mu_</name><argument_list>(<argument>mu</argument>)</argument_list></macro>  <expr><block>{
    <expr><call><name><name>this</name><operator>-&gt;</operator><name>mu_</name><operator>-&gt;</operator><name>Lock</name></name><argument_list>()</argument_list></call></expr>;
  }</block>
  <operator>~</operator><macro><name>MutexLock</name><argument_list>()</argument_list></macro> <macro><name>UNLOCK_FUNCTION</name><argument_list>()</argument_list></macro> <block>{ <expr><call><name><name>this</name><operator>-&gt;</operator><name>mu_</name><operator>-&gt;</operator><name>Unlock</name></name><argument_list>()</argument_list></call></expr>; }</block>

 <name>private</name><operator>:</operator>
  <name>port</name><operator>::</operator><name>Mutex</name> <operator>*</operator><specifier>const</specifier> <name>mu_</name></expr></range></decl>;</decl_stmt>
  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>MutexLock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>MutexLock</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>MutexLock</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_UTIL_MUTEXLOCK_H_</comment>
</unit>
