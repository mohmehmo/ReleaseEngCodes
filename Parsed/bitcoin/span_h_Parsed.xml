<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/span.h"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SPAN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SPAN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/** A Span is an object that can refer to a contiguous sequence of objects.
 *
 * It implements a subset of C++20's std::span.
 */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>C</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>Span</name>
<block>{<block_content>
    <decl_stmt><decl><type><name>C</name><modifier>*</modifier></type> <name>m_data</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>m_size</name></expr>;</expr_stmt>

<label><name>public</name>:</label>
    <expr_stmt><expr><name>constexpr</name> <macro><name>Span</name><argument_list>()</argument_list></macro> <name>noexcept</name> <operator>:</operator> <call><name>m_data</name><argument_list>(<argument><expr><name>nullptr</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_size</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block>
    <name>constexpr</name> <macro><name>Span</name><argument_list>(<argument>C* data</argument>, <argument>std::ptrdiff_t size</argument>)</argument_list></macro> <name>noexcept</name> <operator>:</operator> <call><name>m_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_size</name><argument_list>(<argument>size</argument>)</argument_list></macro> <expr><block>{}</block>
    <name>constexpr</name> <macro><name>Span</name><argument_list>(<argument>C* data</argument>, <argument>C* end</argument>)</argument_list></macro> <name>noexcept</name> <operator>:</operator> <call><name>m_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>m_size</name><argument_list>(<argument>end - data</argument>)</argument_list></macro> <expr><block>{}</block>

    <name>constexpr</name> <name>C</name><operator>*</operator> <macro><name>data</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>m_data</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>constexpr</name> <name>C</name><operator>*</operator> <macro><name>begin</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>m_data</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>constexpr</name> <name>C</name><operator>*</operator> <macro><name>end</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>m_data</name> <operator>+</operator> <name>m_size</name></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>constexpr</name> <name>std</name><operator>::</operator><name>ptrdiff_t</name> <macro><name>size</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <name>noexcept</name> <block>{ <return>return <expr><name>m_size</name></expr>;</return> }</block></expr></expr_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name>C</name><modifier>&amp;</modifier></type> <name><name>operator</name><index>[]</index></name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>pos</name></expr></argument>)</argument_list> const <name>noexcept</name> <block>{<block_content> <return>return <expr><name><name>m_data</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <decl_stmt><decl><type><name>constexpr</name> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>subspan</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>offset</name></expr></argument>)</argument_list> const <name>noexcept</name> <block>{<block_content> <return>return <expr><call><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>m_size</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>subspan</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>offset</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>count</name></expr></argument>)</argument_list> const <name>noexcept</name> <block>{<block_content> <return>return <expr><call><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_data</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>first</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>count</name></expr></argument>)</argument_list> const <name>noexcept</name> <block>{<block_content> <return>return <expr><call><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>
    <decl_stmt><decl><type><name>constexpr</name> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>last</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><name>ptrdiff_t</name> <name>count</name></expr></argument>)</argument_list> const <name>noexcept</name> <block>{<block_content> <return>return <expr><call><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>m_data</name> <operator>+</operator> <name>m_size</name> <operator>-</operator> <name>count</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>std</name><operator>::</operator><call><name>equal</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>==</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><name>std</name><operator>::</operator><call><name>lexicographical_compare</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&lt;=</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>b</name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><operator>(</operator><name>b</name> <operator>&lt;</operator> <name>a</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
    <expr_stmt><expr><name>friend</name> <name>constexpr</name> <name>bool</name> <name>operator</name><operator>&gt;=</operator><operator>(</operator><specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>a</name><operator>,</operator> <specifier>const</specifier> <name>Span</name><operator>&amp;</operator> <name>b</name><operator>)</operator> <name>noexcept</name> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/** Create a span to a container exposing data() and size().
 *
 * This correctly deals with constness: the returned Span's element type will be
 * whatever data() returns a pointer to. If either the passed container is const,
 * or its element type is const, the resulting span will have a const element type.
 *
 * std::span will have a constructor that implements this functionality directly.
 */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>A</name></expr></argument>, <argument><expr><name>int</name> <name>N</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name></type> <name>MakeSpan</name><argument_list>(<argument><expr><call><name>A</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list> <block>{<block_content> <return>return <expr><call><name><name>Span</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></decl></decl_stmt>

<expr_stmt><expr><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>V</name></expr></argument>&gt;</argument_list></name>
<name>constexpr</name> <name>Span</name><operator>&lt;</operator><name>typename</name> <name>std</name><operator>::</operator><name>remove_pointer</name><operator>&lt;</operator><call><name>decltype</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name><operator>&gt;</operator> <macro><name>MakeSpan</name><argument_list>(<argument>V&amp; v</argument>)</argument_list></macro> <block>{ <return>return <expr><name>Span</name><operator>&lt;</operator><name>typename</name> <name>std</name><operator>::</operator><name>remove_pointer</name><operator>&lt;</operator><call><name>decltype</name><argument_list>(<argument><expr><name>std</name><operator>::</operator><call><name><name>declval</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><operator>.</operator><call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&gt;</operator><operator>::</operator><name>type</name><operator>&gt;</operator><operator>(</operator><call><name><name>v</name><operator>.</operator><name>data</name></name><argument_list>()</argument_list></call><operator>,</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return> }</block></expr></expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
