<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/leveldb/include/leveldb/iterator.h"><comment type="line">// Copyright (c) 2011 The LevelDB Authors. All rights reserved.</comment>
<comment type="line">// Use of this source code is governed by a BSD-style license that can be</comment>
<comment type="line">// found in the LICENSE file. See the AUTHORS file for names of contributors.</comment>
<comment type="line">//</comment>
<comment type="line">// An iterator yields a sequence of key/value pairs from a source.</comment>
<comment type="line">// The following class defines the interface.  Multiple implementations</comment>
<comment type="line">// are provided by this library.  In particular, iterators are provided</comment>
<comment type="line">// to access the contents of a Table or a DB.</comment>
<comment type="line">//</comment>
<comment type="line">// Multiple threads can invoke const methods on an Iterator without</comment>
<comment type="line">// external synchronization, but if any of the threads may call a</comment>
<comment type="line">// non-const method, all threads accessing the same Iterator must use</comment>
<comment type="line">// external synchronization.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STORAGE_LEVELDB_INCLUDE_ITERATOR_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_LEVELDB_INCLUDE_ITERATOR_H_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"leveldb/status.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>leveldb</name> <block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>Iterator</name> <block>{<block_content>
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>Iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// An iterator is either positioned at a key/value pair, or</comment>
  <comment type="line">// not valid.  This method returns true iff the iterator is valid.</comment>
  <expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>Valid</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Position at the first key in the source.  The iterator is Valid()</comment>
  <comment type="line">// after this call iff the source is not empty.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SeekToFirst</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Position at the last key in the source.  The iterator is</comment>
  <comment type="line">// Valid() after this call iff the source is not empty.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>SeekToLast</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Position at the first key in the source that is at or past target.</comment>
  <comment type="line">// The iterator is Valid() after this call iff the source contains</comment>
  <comment type="line">// an entry that comes at or past target.</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Seek</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Slice</name><modifier>&amp;</modifier></type> <name>target</name></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Moves to the next entry in the source.  After this call, Valid() is</comment>
  <comment type="line">// true iff the iterator was not positioned at the last entry in the source.</comment>
  <comment type="line">// REQUIRES: Valid()</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Next</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Moves to the previous entry in the source.  After this call, Valid() is</comment>
  <comment type="line">// true iff the iterator was not positioned at the first entry in source.</comment>
  <comment type="line">// REQUIRES: Valid()</comment>
  <function_decl><type><name>virtual</name> <name>void</name></type> <name>Prev</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

  <comment type="line">// Return the key for the current entry.  The underlying storage for</comment>
  <comment type="line">// the returned slice is valid only until the next modification of</comment>
  <comment type="line">// the iterator.</comment>
  <comment type="line">// REQUIRES: Valid()</comment>
  <expr_stmt><expr><name>virtual</name> <name>Slice</name> <macro><name>key</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Return the value for the current entry.  The underlying storage for</comment>
  <comment type="line">// the returned slice is valid only until the next modification of</comment>
  <comment type="line">// the iterator.</comment>
  <comment type="line">// REQUIRES: Valid()</comment>
  <expr_stmt><expr><name>virtual</name> <name>Slice</name> <macro><name>value</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// If an error has occurred, return it.  Else return an ok status.</comment>
  <expr_stmt><expr><name>virtual</name> <name>Status</name> <macro><name>status</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// Clients are allowed to register function/arg1/arg2 triples that</comment>
  <comment type="line">// will be invoked when this iterator is destroyed.</comment>
  <comment type="line">//</comment>
  <comment type="line">// Note that unlike all of the preceding methods, this method is</comment>
  <comment type="line">// not abstract and therefore clients should not override it.</comment>
  <typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>CleanupFunction</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg2</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
  <function_decl><type><name>void</name></type> <name>RegisterCleanup</name><parameter_list>(<parameter><decl><type><name>CleanupFunction</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <struct>struct <name>Cleanup</name> <block>{
    <decl_stmt><decl><type><name>CleanupFunction</name></type> <name>function</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>arg1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>arg2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cleanup</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  }</block>;</struct>
  <decl_stmt><decl><type><name>Cleanup</name></type> <name>cleanup_</name></decl>;</decl_stmt>

  <comment type="line">// No copying allowed</comment>
  <expr_stmt><expr><call><name>Iterator</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Iterator</name><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name></type> <name>operator</name><init>=<expr><operator>(</operator><specifier>const</specifier> <name>Iterator</name><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// Return an empty iterator (yields nothing).</comment>
<function_decl><type><specifier>extern</specifier> <name>Iterator</name><modifier>*</modifier></type> <name>NewEmptyIterator</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">// Return an empty iterator with the specified status.</comment>
<function_decl><type><specifier>extern</specifier> <name>Iterator</name><modifier>*</modifier></type> <name>NewErrorIterator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Status</name><modifier>&amp;</modifier></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt>  <comment type="line">// namespace leveldb</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// STORAGE_LEVELDB_INCLUDE_ITERATOR_H_</comment>
</unit>
