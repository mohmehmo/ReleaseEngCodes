<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/arith_uint256.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arith_uint256.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uint256.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/common.h&gt;</cpp:file></cpp:include>


<constructor><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>base_uint</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <assert type="static">static_assert<argument_list>(<argument><expr><name>BITS</name><operator>/</operator><literal type="number">32</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>BITS</name><operator>%</operator><literal type="number">32</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Template parameter BITS must be a positive multiple of 32."</literal></expr></argument>)</argument_list>;</assert>

    <expr_stmt><expr><call><name>SetHex</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>&lt;&lt;=</name></name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>shift</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>shift</name> <operator>=</operator> <name>shift</name> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>WIDTH</name> <operator>&amp;&amp;</operator> <name>shift</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>k</name> <operator>&lt;</operator> <name>WIDTH</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>&gt;&gt;=</name></name></name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>shift</name> <operator>/</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>shift</name> <operator>=</operator> <name>shift</name> <operator>%</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>shift</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>*=</name></name></name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>b32</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><name>carry</name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>b32</name> <operator>*</operator> <name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>*=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><name>carry</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pn</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>/=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>base_uint</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name></type> <name>div</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>     <comment type="line">// make a copy, so we can shift.</comment>
    <decl_stmt><decl><type><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name></type> <name>num</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt> <comment type="line">// make a copy, so we can subtract.</comment>
    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                   <comment type="line">// the quotient.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>num_bits</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>bits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>div_bits</name> <init>= <expr><call><name><name>div</name><operator>.</operator><name>bits</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>div_bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <throw>throw <expr><call><name>uint_error</name><argument_list>(<argument><expr><literal type="string">"Division by zero"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>div_bits</name> <operator>&gt;</operator> <name>num_bits</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// the result is certainly 0.</comment>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><name>num_bits</name> <operator>-</operator> <name>div_bits</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>div</name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt> <comment type="line">// shift so that div and num align.</comment>
    <while>while <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <name>div</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>num</name> <operator>-=</operator> <name>div</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pn</name><index>[<expr><name>shift</name> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>shift</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt> <comment type="line">// set a bit of the result.</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>div</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// shift back.</comment>
        <expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="line">// num now contains the remainder of the division.</comment>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>CompareTo</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>EqualTo</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0xfffffffful</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>double</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>getdouble</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>ret</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>fact</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WIDTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>fact</name> <operator>*</operator> <name><name>pn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>fact</name> <operator>*=</operator> <literal type="number">4294967296.0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>GetHex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name>ArithToUint256</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>GetHex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>UintToArith256</name><argument_list>(<argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>SetHex</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GetHex</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>unsigned</name> <name>int</name></type> <name>BITS</name></parameter>&gt;</parameter_list></template>
<type><name>unsigned</name> <name>int</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><name>BITS</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>bits</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>WIDTH</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pos</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>nbits</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>nbits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nbits</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>pn</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>nbits</name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">32</literal> <operator>*</operator> <name>pos</name> <operator>+</operator> <name>nbits</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="number">32</literal> <operator>*</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Explicit instantiations for base_uint&lt;256&gt;</comment>
<constructor_decl><specifier>template</specifier> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>base_uint</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</constructor_decl>
<function_decl type="operator"><type><specifier>template</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>&lt;&lt;=</name></name></name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>template</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>&gt;&gt;=</name></name></name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>template</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>*=</name></name></name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>b32</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>template</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>*=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><specifier>template</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>/=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>int</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>CompareTo</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>bool</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>EqualTo</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>double</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>getdouble</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>GetHex</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>void</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>SetHex</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>string</name></name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>template</specifier> <name>unsigned</name> <name>int</name></type> <name><name><name>base_uint</name><argument_list type="generic">&lt;<argument><expr><literal type="number">256</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>bits</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

<comment type="line">// This implementation directly uses shifts instead of going</comment>
<comment type="line">// through an intermediate MPI representation.</comment>
<function><type><name>arith_uint256</name><modifier>&amp;</modifier></type> <name><name>arith_uint256</name><operator>::</operator><name>SetCompact</name></name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>nCompact</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pfNegative</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pfOverflow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nSize</name> <init>= <expr><name>nCompact</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nWord</name> <init>= <expr><name>nCompact</name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nWord</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>nSize</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nWord</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <name>nWord</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>nSize</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pfNegative</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>pfNegative</name> <operator>=</operator> <name>nWord</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nCompact</name> <operator>&amp;</operator> <literal type="number">0x00800000</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pfOverflow</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>pfOverflow</name> <operator>=</operator> <name>nWord</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>nSize</name> <operator>&gt;</operator> <literal type="number">34</literal><operator>)</operator> <operator>||</operator>
                                     <operator>(</operator><name>nWord</name> <operator>&gt;</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>nSize</name> <operator>&gt;</operator> <literal type="number">33</literal><operator>)</operator> <operator>||</operator>
                                     <operator>(</operator><name>nWord</name> <operator>&gt;</operator> <literal type="number">0xffff</literal> <operator>&amp;&amp;</operator> <name>nSize</name> <operator>&gt;</operator> <literal type="number">32</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name><name>arith_uint256</name><operator>::</operator><name>GetCompact</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fNegative</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nSize</name> <init>= <expr><operator>(</operator><call><name>bits</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>nCompact</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nSize</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nCompact</name> <operator>=</operator> <call><name>GetLow64</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>nSize</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>arith_uint256</name></type> <name>bn</name> <init>= <expr><operator>*</operator><name>this</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>nSize</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nCompact</name> <operator>=</operator> <call><name><name>bn</name><operator>.</operator><name>GetLow64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// The 0x00800000 bit denotes the sign.</comment>
    <comment type="line">// Thus, if it is already set, divide the mantissa by 256 and increase the exponent.</comment>
    <if_stmt><if>if <condition>(<expr><name>nCompact</name> <operator>&amp;</operator> <literal type="number">0x00800000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nCompact</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSize</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>nCompact</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x007fffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nSize</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCompact</name> <operator>|=</operator> <name>nSize</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nCompact</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name>fNegative</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>nCompact</name> <operator>&amp;</operator> <literal type="number">0x007fffff</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00800000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>nCompact</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint256</name></type> <name>ArithToUint256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>arith_uint256</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint256</name></type> <name>b</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>a</name><operator>.</operator><name>WIDTH</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>WriteLE32</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>pn</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>arith_uint256</name></type> <name>UintToArith256</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>arith_uint256</name></type> <name>b</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>WIDTH</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>b</name><operator>.</operator><name>pn</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>ReadLE32</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
</unit>
