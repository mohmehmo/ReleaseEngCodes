<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/test/hash_tests.cpp"><comment type="line">// Copyright (c) 2013-2019 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;clientversion.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypto/siphash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/test/unit_test.hpp&gt;</cpp:file></cpp:include>

<macro><name>BOOST_FIXTURE_TEST_SUITE</name><argument_list>(<argument>hash_tests</argument>, <argument>BasicTestingSetup</argument>)</argument_list></macro>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>murmurhash3</argument>)</argument_list></macro>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>expected</name></type></parameter>, <parameter><type><name>seed</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>BOOST_CHECK_EQUAL(MurmurHash3(seed, ParseHex(data)), expected)</cpp:value></cpp:define>

    <comment type="line">// Test MurmurHash3 with various inputs. Of course this is retested in the</comment>
    <comment type="line">// bloom filter tests - they would fail if MurmurHash3() had any problems -</comment>
    <comment type="line">// but is useful for those trying to implement Bitcoin libraries as a</comment>
    <comment type="line">// source of test data for their MurmurHash3() primitive during</comment>
    <comment type="line">// development.</comment>
    <comment type="line">//</comment>
    <comment type="line">// The magic number 0xFBA4C795 comes from CBloomFilter::Hash()</comment>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x00000000U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x6a396f08U</literal></expr></argument>, <argument><expr><literal type="number">0xFBA4C795</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x81f16f39U</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x514e28b7U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xea3f0b17U</literal></expr></argument>, <argument><expr><literal type="number">0xFBA4C795</literal></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xfd6cf10dU</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"ff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x16c6b7abU</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"0011"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x8eb51c3dU</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"001122"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xb4471bf8U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"00112233"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xe2301fa8U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"0011223344"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xfc2e4a15U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"001122334455"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xb074502cU</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"00112233445566"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0x8034d2a0U</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"0011223344556677"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>T</name><argument_list>(<argument><expr><literal type="number">0xb4698defU</literal></expr></argument>, <argument><expr><literal type="number">0x00000000</literal></expr></argument>, <argument><expr><literal type="string">"001122334455667788"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>
</block_content>}</block>

<comment type="block">/*
   SipHash-2-4 output with
   k = 00 01 02 ...
   and
   in = (empty string)
   in = 00 (1 byte)
   in = 00 01 (2 bytes)
   in = 00 01 02 (3 bytes)
   ...
   in = 00 01 02 ... 3e (63 bytes)

   from: https://131002.net/siphash/siphash24.c
*/</comment>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>siphash_4_2_testvec</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x726fdb47dd0e0e31</literal></expr>, <expr><literal type="number">0x74f839c593dc67fd</literal></expr>, <expr><literal type="number">0x0d6c8009d9a94f5a</literal></expr>, <expr><literal type="number">0x85676696d7fb7e2d</literal></expr>,
    <expr><literal type="number">0xcf2794e0277187b7</literal></expr>, <expr><literal type="number">0x18765564cd99a68d</literal></expr>, <expr><literal type="number">0xcbc9466e58fee3ce</literal></expr>, <expr><literal type="number">0xab0200f58b01d137</literal></expr>,
    <expr><literal type="number">0x93f5f5799a932462</literal></expr>, <expr><literal type="number">0x9e0082df0ba9e4b0</literal></expr>, <expr><literal type="number">0x7a5dbbc594ddb9f3</literal></expr>, <expr><literal type="number">0xf4b32f46226bada7</literal></expr>,
    <expr><literal type="number">0x751e8fbc860ee5fb</literal></expr>, <expr><literal type="number">0x14ea5627c0843d90</literal></expr>, <expr><literal type="number">0xf723ca908e7af2ee</literal></expr>, <expr><literal type="number">0xa129ca6149be45e5</literal></expr>,
    <expr><literal type="number">0x3f2acc7f57c29bdb</literal></expr>, <expr><literal type="number">0x699ae9f52cbe4794</literal></expr>, <expr><literal type="number">0x4bc1b3f0968dd39c</literal></expr>, <expr><literal type="number">0xbb6dc91da77961bd</literal></expr>,
    <expr><literal type="number">0xbed65cf21aa2ee98</literal></expr>, <expr><literal type="number">0xd0f2cbb02e3b67c7</literal></expr>, <expr><literal type="number">0x93536795e3a33e88</literal></expr>, <expr><literal type="number">0xa80c038ccd5ccec8</literal></expr>,
    <expr><literal type="number">0xb8ad50c6f649af94</literal></expr>, <expr><literal type="number">0xbce192de8a85b8ea</literal></expr>, <expr><literal type="number">0x17d835b85bbb15f3</literal></expr>, <expr><literal type="number">0x2f2e6163076bcfad</literal></expr>,
    <expr><literal type="number">0xde4daaaca71dc9a5</literal></expr>, <expr><literal type="number">0xa6a2506687956571</literal></expr>, <expr><literal type="number">0xad87a3535c49ef28</literal></expr>, <expr><literal type="number">0x32d892fad841c342</literal></expr>,
    <expr><literal type="number">0x7127512f72f27cce</literal></expr>, <expr><literal type="number">0xa7f32346f95978e3</literal></expr>, <expr><literal type="number">0x12e0b01abb051238</literal></expr>, <expr><literal type="number">0x15e034d40fa197ae</literal></expr>,
    <expr><literal type="number">0x314dffbe0815a3b4</literal></expr>, <expr><literal type="number">0x027990f029623981</literal></expr>, <expr><literal type="number">0xcadcd4e59ef40c4d</literal></expr>, <expr><literal type="number">0x9abfd8766a33735c</literal></expr>,
    <expr><literal type="number">0x0e3ea96b5304a7d0</literal></expr>, <expr><literal type="number">0xad0c42d6fc585992</literal></expr>, <expr><literal type="number">0x187306c89bc215a9</literal></expr>, <expr><literal type="number">0xd4a60abcf3792b95</literal></expr>,
    <expr><literal type="number">0xf935451de4f21df2</literal></expr>, <expr><literal type="number">0xa9538f0419755787</literal></expr>, <expr><literal type="number">0xdb9acddff56ca510</literal></expr>, <expr><literal type="number">0xd06c98cd5c0975eb</literal></expr>,
    <expr><literal type="number">0xe612a3cb9ecba951</literal></expr>, <expr><literal type="number">0xc766e62cfcadaf96</literal></expr>, <expr><literal type="number">0xee64435a9752fe72</literal></expr>, <expr><literal type="number">0xa192d576b245165a</literal></expr>,
    <expr><literal type="number">0x0a8787bf8ecb74b2</literal></expr>, <expr><literal type="number">0x81b3e73d20b49b6f</literal></expr>, <expr><literal type="number">0x7fa8220ba3b2ecea</literal></expr>, <expr><literal type="number">0x245731c13ca42499</literal></expr>,
    <expr><literal type="number">0xb78dbfaf3a8d83bd</literal></expr>, <expr><literal type="number">0xea1ad565322a1a0b</literal></expr>, <expr><literal type="number">0x60e61c23a3795013</literal></expr>, <expr><literal type="number">0x6606d7e446282b93</literal></expr>,
    <expr><literal type="number">0x6ca4ecb15c5f91e1</literal></expr>, <expr><literal type="number">0x9f626da15c9625f3</literal></expr>, <expr><literal type="number">0xe51b38608ef25f57</literal></expr>, <expr><literal type="number">0x958a324ceb064572</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<macro><name>BOOST_AUTO_TEST_CASE</name><argument_list>(<argument>siphash</argument>)</argument_list></macro>
<block>{<block_content>
    <decl_stmt><decl><type><name>CSipHasher</name></type> <name>hasher</name><argument_list>(<argument><expr><literal type="number">0x0706050403020100ULL</literal></expr></argument>, <argument><expr><literal type="number">0x0F0E0D0C0B0A0908ULL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x726fdb47dd0e0e31ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x74f839c593dc67fdull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x93f5f5799a932462ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><literal type="number">0x0F0E0D0C0B0A0908ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x3f2acc7f57c29bdbull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x4bc1b3f0968dd39cull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t3</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x2f2e6163076bcfadull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>t4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>t4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x7127512f72f27cceull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><literal type="number">0x2726252423222120ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0x0e3ea96b5304a7d0ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hasher</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><literal type="number">0x2F2E2D2C2B2A2928ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>,  <argument><expr><literal type="number">0xe612a3cb9ecba951ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>SipHashUint256</name><argument_list>(<argument><expr><literal type="number">0x0706050403020100ULL</literal></expr></argument>, <argument><expr><literal type="number">0x0F0E0D0C0B0A0908ULL</literal></expr></argument>, <argument><expr><call><name>uint256S</name><argument_list>(<argument><expr><literal type="string">"1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x7127512f72f27cceull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check test vectors from spec, one byte at a time</comment>
    <decl_stmt><decl><type><name>CSipHasher</name></type> <name>hasher2</name><argument_list>(<argument><expr><literal type="number">0x0706050403020100ULL</literal></expr></argument>, <argument><expr><literal type="number">0x0F0E0D0C0B0A0908ULL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>siphash_4_2_testvec</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher2</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>siphash_4_2_testvec</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher2</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line">// Check test vectors from spec, eight bytes at a time</comment>
    <decl_stmt><decl><type><name>CSipHasher</name></type> <name>hasher3</name><argument_list>(<argument><expr><literal type="number">0x0706050403020100ULL</literal></expr></argument>, <argument><expr><literal type="number">0x0F0E0D0C0B0A0908ULL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>siphash_4_2_testvec</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name><name>hasher3</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>siphash_4_2_testvec</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hasher3</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>|</operator>
                     <operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">48</literal><operator>)</operator><operator>|</operator><operator>(</operator><call><name>uint64_t</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <function_decl><type><name>CHashWriter</name></type> <name>ss</name><parameter_list>(<parameter><decl><type><name>SER_DISK</name></type></decl></parameter>, <parameter><decl><type><name>CLIENT_VERSION</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>CMutableTransaction</name></type> <name>tx</name></decl>;</decl_stmt>
    <comment type="line">// Note these tests were originally written with tx.nVersion=1</comment>
    <comment type="line">// and the test would be affected by default tx version bumps if not fixed.</comment>
    <expr_stmt><expr><name><name>tx</name><operator>.</operator><name>nVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>tx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>SipHashUint256</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>ss</name><operator>.</operator><name>GetHash</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x79751e980c2a0a35ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check consistency between CSipHasher and SipHashUint256[Extra].</comment>
    <decl_stmt><decl><type><name>FastRandomContext</name></type> <name>ctx</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>k2</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>rand64</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint256</name></type> <name>x</name> <init>= <expr><call><name>InsecureRand256</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>rand32</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nb</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>WriteLE32</name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <function_decl><type><name>CSipHasher</name></type> <name>sip256</name><parameter_list>(<parameter><decl><type><name>k1</name></type></decl></parameter>, <parameter><decl><type><name>k2</name></type></decl></parameter>)</parameter_list>;</function_decl>
        <expr_stmt><expr><call><name><name>sip256</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CSipHasher</name></type> <name>sip288</name> <init>= <expr><name>sip256</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sip288</name><operator>.</operator><name>Write</name></name><argument_list>(<argument><expr><name>nb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>SipHashUint256</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sip256</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>BOOST_CHECK_EQUAL</name><argument_list>(<argument><expr><call><name>SipHashUint256Extra</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sip288</name><operator>.</operator><name>Finalize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<macro><name>BOOST_AUTO_TEST_SUITE_END</name><argument_list>()</argument_list></macro>
</unit>
