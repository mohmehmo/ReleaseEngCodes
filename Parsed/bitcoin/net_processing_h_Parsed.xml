<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/net_processing.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_NET_PROCESSING_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_NET_PROCESSING_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;validationinterface.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;consensus/params.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sync.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>CCriticalSection</name></type> <name>cs_main</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Default for -maxorphantx, maximum number of orphan transactions kept in memory */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_MAX_ORPHAN_TRANSACTIONS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** Default number of orphan+recently-replaced txn to keep around for block reconstruction */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bool</name></type> <name>DEFAULT_PEERBLOOMFILTERS</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name> <name>PeerLogicValidation</name></type> <name>final</name> <range>: <expr><name>public</name> <name>CValidationInterface</name></expr></range></decl>, <decl><type ref="prev"/><name>public</name> <name>NetEventsInterface</name> <block>{<block_content>
<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>CConnman</name><modifier>*</modifier> <specifier>const</specifier></type> <name>connman</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BanMan</name><modifier>*</modifier> <specifier>const</specifier></type> <name>m_banman</name></decl>;</decl_stmt>

    <function_decl><type><name>bool</name></type> <name>CheckIfBanned</name><parameter_list>(<parameter><decl><type><name>CNode</name><modifier>*</modifier></type> <name>pnode</name></decl></parameter>)</parameter_list> EXCLUSIVE_LOCKS_REQUIRED<parameter_list>(<parameter><decl><type><name>cs_main</name></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>public</name>:</label>
    <expr_stmt><expr><call><name>PeerLogicValidation</name><argument_list>(<argument><expr><name>CConnman</name><operator>*</operator> <name>connman</name></expr></argument>, <argument><expr><name>BanMan</name><operator>*</operator> <name>banman</name></expr></argument>, <argument><expr><name>CScheduler</name><operator>&amp;</operator> <name>scheduler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" format="doxygen">/**
     * Overridden from CValidationInterface.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>BlockConnected</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>pblock</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name><operator>*</operator> <name>pindexConnected</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CTransactionRef</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>vtxConflicted</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Overridden from CValidationInterface.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>UpdatedBlockTip</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlockIndex</name> <operator>*</operator><name>pindexNew</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>CBlockIndex</name> <operator>*</operator><name>pindexFork</name></expr></argument>, <argument><expr><name>bool</name> <name>fInitialDownload</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Overridden from CValidationInterface.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>BlockChecked</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlock</name><operator>&amp;</operator> <name>block</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>BlockValidationState</name><operator>&amp;</operator> <name>state</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
     * Overridden from CValidationInterface.
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>NewPoWValidBlock</name><argument_list>(<argument><expr><specifier>const</specifier> <name>CBlockIndex</name> <operator>*</operator><name>pindex</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>shared_ptr</name><argument_list type="generic">&lt;<argument><expr><specifier>const</specifier> <name>CBlock</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>pblock</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>InitializeNode</name><argument_list>(<argument><expr><name>CNode</name><operator>*</operator> <name>pnode</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** Handle removal of a peer by updating various state and removing it from mapNodeState */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>FinalizeNode</name><argument_list>(<argument><expr><name>NodeId</name> <name>nodeid</name></expr></argument>, <argument><expr><name>bool</name><operator>&amp;</operator> <name>fUpdateConnectionTime</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
    * Process protocol messages received from a given node
    *
    * @param[in]   pfrom           The node which we have received messages from.
    * @param[in]   interrupt       Interrupt condition for processing threads
    */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ProcessMessages</name><argument_list>(<argument><expr><name>CNode</name><operator>*</operator> <name>pfrom</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>interrupt</name></expr></argument>)</argument_list> <name>override</name></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/**
    * Send queued protocol messages to be sent to a give node.
    *
    * @param[in]   pto             The node which we are sending messages to.
    * @return                      True if there is more work to be done
    */</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>SendMessages</name><argument_list>(<argument><expr><name>CNode</name><operator>*</operator> <name>pto</name></expr></argument>)</argument_list> <name>override</name> <name>EXCLUSIVE_LOCKS_REQUIRED</name><argument_list>(<argument><expr><name><name>pto</name><operator>-&gt;</operator><name>cs_sendProcessing</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <comment type="block" format="doxygen">/** Consider evicting an outbound peer based on the amount of time they've been behind our tip */</comment>
    <function_decl><type><name>void</name></type> <name>ConsiderEviction</name><parameter_list>(<parameter><decl><type><name>CNode</name> <modifier>*</modifier></type><name>pto</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time_in_seconds</name></decl></parameter>)</parameter_list> EXCLUSIVE_LOCKS_REQUIRED<parameter_list>(<parameter><decl><type><name>cs_main</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="doxygen">/** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>CheckForStaleTipAndEvictPeers</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Consensus</name><operator>::</operator><name>Params</name> <operator>&amp;</operator><name>consensusParams</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <comment type="block" format="doxygen">/** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */</comment>
    <function_decl><type><name>void</name></type> <name>EvictExtraOutboundPeers</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>time_in_seconds</name></decl></parameter>)</parameter_list> EXCLUSIVE_LOCKS_REQUIRED<parameter_list>(<parameter><decl><type><name>cs_main</name></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>private</name>:</label>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>m_stale_tip_check_time</name></decl>;</decl_stmt> <comment type="line" format="doxygen">//!&lt; Next time to check for stale tip</comment>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<struct>struct <name>CNodeStateStats</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nMisbehavior</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nSyncHeight</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCommonHeight</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>vHeightInFlight</name></expr>;</expr_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/** Get statistics from node state */</comment>
<function_decl><type><name>bool</name></type> <name>GetNodeStateStats</name><parameter_list>(<parameter><decl><type><name>NodeId</name></type> <name>nodeid</name></decl></parameter>, <parameter><decl><type><name>CNodeStateStats</name> <modifier>&amp;</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/** Relay transaction to every node */</comment>
<function_decl><type><name>void</name></type> <name>RelayTransaction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CConnman</name><modifier>&amp;</modifier></type> <name>connman</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_NET_PROCESSING_H</comment>
</unit>
