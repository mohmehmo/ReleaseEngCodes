<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/support/allocators/zeroafterfree.h"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;support/cleanse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>T</name></expr></argument>&gt;</argument_list></name>
struct</type> <name>zero_after_free_allocator</name> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <block>{
    <comment type="line">// MSVC8 default copy constructor is broken</comment>
    <typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <name>base</name></expr>;</expr_stmt></typedef></block></expr></range></decl></decl_stmt>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>size_type</name> <name>size_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>difference_type</name> <name>difference_type</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>pointer</name> <name>pointer</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>const_pointer</name> <name>const_pointer</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>reference</name> <name>reference</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>const_reference</name> <name>const_reference</name></expr>;</expr_stmt></typedef>
    <typedef>typedef <expr_stmt><expr><name>typename</name> <name>base</name><operator>::</operator><name>value_type</name> <name>value_type</name></expr>;</expr_stmt></typedef>
    <macro><name>zero_after_free_allocator</name><argument_list>()</argument_list></macro> <macro><name>noexcept</name></macro> <block>{<block_content/>}</block>
    <macro><name>zero_after_free_allocator</name><argument_list>(<argument>const zero_after_free_allocator&amp; a</argument>)</argument_list></macro> <label><name>noexcept</name> :</label> <macro><name>base</name><argument_list>(<argument>a</argument>)</argument_list></macro> <block>{<block_content/>}</block>
    <decl_stmt><decl><type><name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>U</name></expr></argument>&gt;</argument_list></name></type>
    <name>zero_after_free_allocator</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>zero_after_free_allocator</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <name>a</name></expr></argument>)</argument_list> <name>noexcept</name> <range>: <macro><name>base</name><argument_list>(<argument>a</argument>)</argument_list></macro>
    <expr><block>{
    }</block>
    <operator>~</operator><macro><name>zero_after_free_allocator</name><argument_list>()</argument_list></macro> <name>noexcept</name> <block>{}</block>
    <name><name>template</name> <argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>_Other</name></expr></argument>&gt;</argument_list></name>
    struct <name>rebind</name> <block>{
        <typedef>typedef <type><name><name>zero_after_free_allocator</name><argument_list type="generic">&lt;<argument><expr><name>_Other</name></expr></argument>&gt;</argument_list></name></type> <name>other</name>;</typedef>
    }</block></expr></range></decl></decl_stmt><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>deallocate</name><argument_list>(<argument><expr><name>T</name><operator>*</operator> <name>p</name></expr></argument>, <argument><expr><name>std</name><operator>::</operator><name>size_t</name> <name>n</name></expr></argument>)</argument_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>nullptr</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memory_cleanse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>std</name><operator>::</operator><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><call><name>deallocate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></decl></decl_stmt>
};

<comment type="line">// Byte-vector that clears its contents before deletion.</comment>
<typedef>typedef <expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>zero_after_free_allocator</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <name>CSerializeData</name></expr>;</expr_stmt></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_SUPPORT_ALLOCATORS_ZEROAFTERFREE_H</comment>
</unit>
