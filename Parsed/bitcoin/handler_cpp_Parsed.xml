<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/interfaces/handler.cpp"><comment type="line">// Copyright (c) 2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/handler.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/memory.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;boost/signals2/connection.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<namespace>namespace <name>interfaces</name> <block>{
<namespace>namespace <block>{

<class>class <name>HandlerImpl</name> <super_list>: <super><specifier>public</specifier> <name>Handler</name></super></super_list>
<block>{<private type="default">
</private><public>public:
    <constructor><specifier>explicit</specifier> <name>HandlerImpl</name><parameter_list>(<parameter><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>connection</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>m_connection</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

    <function><type><name>void</name></type> <name>disconnect</name><parameter_list>()</parameter_list> <specifier>override</specifier> <block>{<block_content> <expr_stmt><expr><call><name><name>m_connection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

    <decl_stmt><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>scoped_connection</name></name></type> <name>m_connection</name></decl>;</decl_stmt>
</public>}</block>;</class>

}</block></namespace> <comment type="line">// namespace</comment>

<function><type><name><name>std</name><operator>::</operator><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>Handler</name></expr></argument>&gt;</argument_list></name></type> <name>MakeHandler</name><parameter_list>(<parameter><decl><type><name><name>boost</name><operator>::</operator><name>signals2</name><operator>::</operator><name>connection</name></name></type> <name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name><name>MakeUnique</name><argument_list type="generic">&lt;<argument><expr><name>HandlerImpl</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>move</name></name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

}</block></namespace> <comment type="line">// namespace interfaces</comment>
</unit>
