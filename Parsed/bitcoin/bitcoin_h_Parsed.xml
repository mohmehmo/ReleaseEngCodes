<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/qt/bitcoin.h"><comment type="line">// Copyright (c) 2011-2016 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_QT_BITCOIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_QT_BITCOIN_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config/bitcoin-config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QApplication&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>BitcoinGUI</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ClientModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>NetworkStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>OptionsModel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PaymentServer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>PlatformStyle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletController</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>WalletModel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>interfaces</name> <block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>Handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Node</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt> <comment type="line">// namespace interfaces</comment>

<comment type="block" format="doxygen">/** Class encapsulating Bitcoin Core startup and shutdown.
 * Allows running startup and shutdown in a different thread from the UI thread.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BitcoinCore</name><range>: <expr><name>public</name> <name>QObject</name>
<block>{
    <expr><name>Q_OBJECT</name>
<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>BitcoinCore</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <call><name>initialize</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>shutdown</name><argument_list>()</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <macro><name>initializeResult</name><argument_list>(<argument>bool success</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>shutdownResult</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>runawayException</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>message</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <comment type="line" format="doxygen">/// Pass fatal exception message to UI thread</comment>
    <name>void</name> <call><name>handleRunawayException</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>exception</name> <operator>*</operator><name>e</name></expr></argument>)</argument_list></call></expr>;

    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
}</block></expr></range></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Main Bitcoin application object */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>BitcoinApplication</name><range>: <expr><name>public</name> <name>QApplication</name>
<block>{
    <expr><name>Q_OBJECT</name>
<name>public</name><operator>:</operator>
    <name>explicit</name> <call><name>BitcoinApplication</name><argument_list>(<argument><expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>node</name></expr></argument>)</argument_list></call></expr>;
    <expr><operator>~</operator><call><name>BitcoinApplication</name><argument_list>()</argument_list></call></expr>;

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <comment type="line" format="doxygen">/// Create payment server</comment>
    <expr><name>void</name> <call><name>createPaymentServer</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="line" format="doxygen">/// parameter interaction/setup based on rules</comment>
    <expr><name>void</name> <call><name>parameterSetup</name><argument_list>()</argument_list></call></expr>;
    <comment type="line" format="doxygen">/// Create options model</comment>
    <expr><name>void</name> <macro><name>createOptionsModel</name><argument_list>(<argument>bool resetSettings</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">/// Update prune value</comment>
    <expr><name>void</name> <macro><name>SetPrune</name><argument_list>(<argument>bool prune</argument>, <argument>bool force = false</argument>)</argument_list></macro></expr>;
    <comment type="line" format="doxygen">/// Create main window</comment>
    <expr><name>void</name> <call><name>createWindow</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NetworkStyle</name> <operator>*</operator><name>networkStyle</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line" format="doxygen">/// Create splash screen</comment>
    <expr><name>void</name> <call><name>createSplashScreen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>NetworkStyle</name> <operator>*</operator><name>networkStyle</name></expr></argument>)</argument_list></call></expr>;
    <comment type="line" format="doxygen">/// Basic initialization, before starting initialization/shutdown thread. Return true on success.</comment>
    <expr><name>bool</name> <call><name>baseInitialize</name><argument_list>()</argument_list></call></expr>;

    <comment type="line" format="doxygen">/// Request core initialization</comment>
    <expr><name>void</name> <call><name>requestInitialize</name><argument_list>()</argument_list></call></expr>;
    <comment type="line" format="doxygen">/// Request core shutdown</comment>
    <expr><name>void</name> <call><name>requestShutdown</name><argument_list>()</argument_list></call></expr>;

    <comment type="line" format="doxygen">/// Get process return value</comment>
    <expr><name>int</name> <macro><name>getReturnValue</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>returnValue</name></expr>;</return> }</block>

    <comment type="line" format="doxygen">/// Get window identifier of QMainWindow (BitcoinGUI)</comment>
    <name>WId</name> <macro><name>getMainWinId</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

    <comment type="line" format="doxygen">/// Setup platform style</comment>
    <expr><name>void</name> <call><name>setupPlatformStyle</name><argument_list>()</argument_list></call></expr>;

<expr><name>public</name> <name>Q_SLOTS</name><operator>:</operator>
    <name>void</name> <macro><name>initializeResult</name><argument_list>(<argument>bool success</argument>)</argument_list></macro></expr>;
    <expr><name>void</name> <call><name>shutdownResult</name><argument_list>()</argument_list></call></expr>;
    <comment type="line" format="doxygen">/// Handle runaway exceptions. Shows a message box with the problem and quits the program.</comment>
    <expr><name>void</name> <call><name>handleRunawayException</name><argument_list>(<argument><expr><specifier>const</specifier> <name>QString</name> <operator>&amp;</operator><name>message</name></expr></argument>)</argument_list></call></expr>;

<expr><name>Q_SIGNALS</name><operator>:</operator>
    <name>void</name> <call><name>requestedInitialize</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>requestedShutdown</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>splashFinished</name><argument_list>()</argument_list></call></expr>;
    <expr><name>void</name> <call><name>windowShown</name><argument_list>(<argument><expr><name>BitcoinGUI</name><operator>*</operator> <name>window</name></expr></argument>)</argument_list></call></expr>;

<expr><name>private</name><operator>:</operator>
    <name>QThread</name> <operator>*</operator><name>coreThread</name></expr>;
    <expr><name>interfaces</name><operator>::</operator><name>Node</name><operator>&amp;</operator> <name>m_node</name></expr>;
    <expr><name>OptionsModel</name> <operator>*</operator><name>optionsModel</name></expr>;
    <expr><name>ClientModel</name> <operator>*</operator><name>clientModel</name></expr>;
    <expr><name>BitcoinGUI</name> <operator>*</operator><name>window</name></expr>;
    <expr><name>QTimer</name> <operator>*</operator><name>pollShutdownTimer</name></expr>;
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_WALLET</name></cpp:ifdef>
    <expr><name>PaymentServer</name><operator>*</operator> <name>paymentServer</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
    <expr><name>WalletController</name><operator>*</operator> <name>m_wallet_controller</name><block>{<expr><name>nullptr</name></expr>}</block></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><name>int</name> <name>returnValue</name></expr>;
    <expr><specifier>const</specifier> <name>PlatformStyle</name> <operator>*</operator><name>platformStyle</name></expr>;
    <expr><name>std</name><operator>::</operator><name><name>unique_ptr</name><argument_list type="generic">&lt;<argument><expr><name>QWidget</name></expr></argument>&gt;</argument_list></name> <name>shutdownWindow</name></expr>;

    <expr><name>void</name> <call><name>startThread</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>GuiMain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_QT_BITCOIN_H</comment>
</unit>
