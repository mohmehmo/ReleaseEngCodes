<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/script/script.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;script/script.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetOpName</name><parameter_list>(<parameter><decl><type><name>opcodetype</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>
    <comment type="line">// push value</comment>
    <case>case <expr><name>OP_0</name></expr>                      :</case> <return>return <expr><literal type="string">"0"</literal></expr>;</return>
    <case>case <expr><name>OP_PUSHDATA1</name></expr>              :</case> <return>return <expr><literal type="string">"OP_PUSHDATA1"</literal></expr>;</return>
    <case>case <expr><name>OP_PUSHDATA2</name></expr>              :</case> <return>return <expr><literal type="string">"OP_PUSHDATA2"</literal></expr>;</return>
    <case>case <expr><name>OP_PUSHDATA4</name></expr>              :</case> <return>return <expr><literal type="string">"OP_PUSHDATA4"</literal></expr>;</return>
    <case>case <expr><name>OP_1NEGATE</name></expr>                :</case> <return>return <expr><literal type="string">"-1"</literal></expr>;</return>
    <case>case <expr><name>OP_RESERVED</name></expr>               :</case> <return>return <expr><literal type="string">"OP_RESERVED"</literal></expr>;</return>
    <case>case <expr><name>OP_1</name></expr>                      :</case> <return>return <expr><literal type="string">"1"</literal></expr>;</return>
    <case>case <expr><name>OP_2</name></expr>                      :</case> <return>return <expr><literal type="string">"2"</literal></expr>;</return>
    <case>case <expr><name>OP_3</name></expr>                      :</case> <return>return <expr><literal type="string">"3"</literal></expr>;</return>
    <case>case <expr><name>OP_4</name></expr>                      :</case> <return>return <expr><literal type="string">"4"</literal></expr>;</return>
    <case>case <expr><name>OP_5</name></expr>                      :</case> <return>return <expr><literal type="string">"5"</literal></expr>;</return>
    <case>case <expr><name>OP_6</name></expr>                      :</case> <return>return <expr><literal type="string">"6"</literal></expr>;</return>
    <case>case <expr><name>OP_7</name></expr>                      :</case> <return>return <expr><literal type="string">"7"</literal></expr>;</return>
    <case>case <expr><name>OP_8</name></expr>                      :</case> <return>return <expr><literal type="string">"8"</literal></expr>;</return>
    <case>case <expr><name>OP_9</name></expr>                      :</case> <return>return <expr><literal type="string">"9"</literal></expr>;</return>
    <case>case <expr><name>OP_10</name></expr>                     :</case> <return>return <expr><literal type="string">"10"</literal></expr>;</return>
    <case>case <expr><name>OP_11</name></expr>                     :</case> <return>return <expr><literal type="string">"11"</literal></expr>;</return>
    <case>case <expr><name>OP_12</name></expr>                     :</case> <return>return <expr><literal type="string">"12"</literal></expr>;</return>
    <case>case <expr><name>OP_13</name></expr>                     :</case> <return>return <expr><literal type="string">"13"</literal></expr>;</return>
    <case>case <expr><name>OP_14</name></expr>                     :</case> <return>return <expr><literal type="string">"14"</literal></expr>;</return>
    <case>case <expr><name>OP_15</name></expr>                     :</case> <return>return <expr><literal type="string">"15"</literal></expr>;</return>
    <case>case <expr><name>OP_16</name></expr>                     :</case> <return>return <expr><literal type="string">"16"</literal></expr>;</return>

    <comment type="line">// control</comment>
    <case>case <expr><name>OP_NOP</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_NOP"</literal></expr>;</return>
    <case>case <expr><name>OP_VER</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_VER"</literal></expr>;</return>
    <case>case <expr><name>OP_IF</name></expr>                     :</case> <return>return <expr><literal type="string">"OP_IF"</literal></expr>;</return>
    <case>case <expr><name>OP_NOTIF</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_NOTIF"</literal></expr>;</return>
    <case>case <expr><name>OP_VERIF</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_VERIF"</literal></expr>;</return>
    <case>case <expr><name>OP_VERNOTIF</name></expr>               :</case> <return>return <expr><literal type="string">"OP_VERNOTIF"</literal></expr>;</return>
    <case>case <expr><name>OP_ELSE</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_ELSE"</literal></expr>;</return>
    <case>case <expr><name>OP_ENDIF</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_ENDIF"</literal></expr>;</return>
    <case>case <expr><name>OP_VERIFY</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_VERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_RETURN</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_RETURN"</literal></expr>;</return>

    <comment type="line">// stack ops</comment>
    <case>case <expr><name>OP_TOALTSTACK</name></expr>             :</case> <return>return <expr><literal type="string">"OP_TOALTSTACK"</literal></expr>;</return>
    <case>case <expr><name>OP_FROMALTSTACK</name></expr>           :</case> <return>return <expr><literal type="string">"OP_FROMALTSTACK"</literal></expr>;</return>
    <case>case <expr><name>OP_2DROP</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_2DROP"</literal></expr>;</return>
    <case>case <expr><name>OP_2DUP</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_2DUP"</literal></expr>;</return>
    <case>case <expr><name>OP_3DUP</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_3DUP"</literal></expr>;</return>
    <case>case <expr><name>OP_2OVER</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_2OVER"</literal></expr>;</return>
    <case>case <expr><name>OP_2ROT</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_2ROT"</literal></expr>;</return>
    <case>case <expr><name>OP_2SWAP</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_2SWAP"</literal></expr>;</return>
    <case>case <expr><name>OP_IFDUP</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_IFDUP"</literal></expr>;</return>
    <case>case <expr><name>OP_DEPTH</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_DEPTH"</literal></expr>;</return>
    <case>case <expr><name>OP_DROP</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_DROP"</literal></expr>;</return>
    <case>case <expr><name>OP_DUP</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_DUP"</literal></expr>;</return>
    <case>case <expr><name>OP_NIP</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_NIP"</literal></expr>;</return>
    <case>case <expr><name>OP_OVER</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_OVER"</literal></expr>;</return>
    <case>case <expr><name>OP_PICK</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_PICK"</literal></expr>;</return>
    <case>case <expr><name>OP_ROLL</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_ROLL"</literal></expr>;</return>
    <case>case <expr><name>OP_ROT</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_ROT"</literal></expr>;</return>
    <case>case <expr><name>OP_SWAP</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_SWAP"</literal></expr>;</return>
    <case>case <expr><name>OP_TUCK</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_TUCK"</literal></expr>;</return>

    <comment type="line">// splice ops</comment>
    <case>case <expr><name>OP_CAT</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_CAT"</literal></expr>;</return>
    <case>case <expr><name>OP_SUBSTR</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_SUBSTR"</literal></expr>;</return>
    <case>case <expr><name>OP_LEFT</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_LEFT"</literal></expr>;</return>
    <case>case <expr><name>OP_RIGHT</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_RIGHT"</literal></expr>;</return>
    <case>case <expr><name>OP_SIZE</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_SIZE"</literal></expr>;</return>

    <comment type="line">// bit logic</comment>
    <case>case <expr><name>OP_INVERT</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_INVERT"</literal></expr>;</return>
    <case>case <expr><name>OP_AND</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_AND"</literal></expr>;</return>
    <case>case <expr><name>OP_OR</name></expr>                     :</case> <return>return <expr><literal type="string">"OP_OR"</literal></expr>;</return>
    <case>case <expr><name>OP_XOR</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_XOR"</literal></expr>;</return>
    <case>case <expr><name>OP_EQUAL</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_EQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_EQUALVERIFY</name></expr>            :</case> <return>return <expr><literal type="string">"OP_EQUALVERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_RESERVED1</name></expr>              :</case> <return>return <expr><literal type="string">"OP_RESERVED1"</literal></expr>;</return>
    <case>case <expr><name>OP_RESERVED2</name></expr>              :</case> <return>return <expr><literal type="string">"OP_RESERVED2"</literal></expr>;</return>

    <comment type="line">// numeric</comment>
    <case>case <expr><name>OP_1ADD</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_1ADD"</literal></expr>;</return>
    <case>case <expr><name>OP_1SUB</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_1SUB"</literal></expr>;</return>
    <case>case <expr><name>OP_2MUL</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_2MUL"</literal></expr>;</return>
    <case>case <expr><name>OP_2DIV</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_2DIV"</literal></expr>;</return>
    <case>case <expr><name>OP_NEGATE</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_NEGATE"</literal></expr>;</return>
    <case>case <expr><name>OP_ABS</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_ABS"</literal></expr>;</return>
    <case>case <expr><name>OP_NOT</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_NOT"</literal></expr>;</return>
    <case>case <expr><name>OP_0NOTEQUAL</name></expr>              :</case> <return>return <expr><literal type="string">"OP_0NOTEQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_ADD</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_ADD"</literal></expr>;</return>
    <case>case <expr><name>OP_SUB</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_SUB"</literal></expr>;</return>
    <case>case <expr><name>OP_MUL</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_MUL"</literal></expr>;</return>
    <case>case <expr><name>OP_DIV</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_DIV"</literal></expr>;</return>
    <case>case <expr><name>OP_MOD</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_MOD"</literal></expr>;</return>
    <case>case <expr><name>OP_LSHIFT</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_LSHIFT"</literal></expr>;</return>
    <case>case <expr><name>OP_RSHIFT</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_RSHIFT"</literal></expr>;</return>
    <case>case <expr><name>OP_BOOLAND</name></expr>                :</case> <return>return <expr><literal type="string">"OP_BOOLAND"</literal></expr>;</return>
    <case>case <expr><name>OP_BOOLOR</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_BOOLOR"</literal></expr>;</return>
    <case>case <expr><name>OP_NUMEQUAL</name></expr>               :</case> <return>return <expr><literal type="string">"OP_NUMEQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_NUMEQUALVERIFY</name></expr>         :</case> <return>return <expr><literal type="string">"OP_NUMEQUALVERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_NUMNOTEQUAL</name></expr>            :</case> <return>return <expr><literal type="string">"OP_NUMNOTEQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_LESSTHAN</name></expr>               :</case> <return>return <expr><literal type="string">"OP_LESSTHAN"</literal></expr>;</return>
    <case>case <expr><name>OP_GREATERTHAN</name></expr>            :</case> <return>return <expr><literal type="string">"OP_GREATERTHAN"</literal></expr>;</return>
    <case>case <expr><name>OP_LESSTHANOREQUAL</name></expr>        :</case> <return>return <expr><literal type="string">"OP_LESSTHANOREQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_GREATERTHANOREQUAL</name></expr>     :</case> <return>return <expr><literal type="string">"OP_GREATERTHANOREQUAL"</literal></expr>;</return>
    <case>case <expr><name>OP_MIN</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_MIN"</literal></expr>;</return>
    <case>case <expr><name>OP_MAX</name></expr>                    :</case> <return>return <expr><literal type="string">"OP_MAX"</literal></expr>;</return>
    <case>case <expr><name>OP_WITHIN</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_WITHIN"</literal></expr>;</return>

    <comment type="line">// crypto</comment>
    <case>case <expr><name>OP_RIPEMD160</name></expr>              :</case> <return>return <expr><literal type="string">"OP_RIPEMD160"</literal></expr>;</return>
    <case>case <expr><name>OP_SHA1</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_SHA1"</literal></expr>;</return>
    <case>case <expr><name>OP_SHA256</name></expr>                 :</case> <return>return <expr><literal type="string">"OP_SHA256"</literal></expr>;</return>
    <case>case <expr><name>OP_HASH160</name></expr>                :</case> <return>return <expr><literal type="string">"OP_HASH160"</literal></expr>;</return>
    <case>case <expr><name>OP_HASH256</name></expr>                :</case> <return>return <expr><literal type="string">"OP_HASH256"</literal></expr>;</return>
    <case>case <expr><name>OP_CODESEPARATOR</name></expr>          :</case> <return>return <expr><literal type="string">"OP_CODESEPARATOR"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKSIG</name></expr>               :</case> <return>return <expr><literal type="string">"OP_CHECKSIG"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKSIGVERIFY</name></expr>         :</case> <return>return <expr><literal type="string">"OP_CHECKSIGVERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKMULTISIG</name></expr>          :</case> <return>return <expr><literal type="string">"OP_CHECKMULTISIG"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKMULTISIGVERIFY</name></expr>    :</case> <return>return <expr><literal type="string">"OP_CHECKMULTISIGVERIFY"</literal></expr>;</return>

    <comment type="line">// expansion</comment>
    <case>case <expr><name>OP_NOP1</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP1"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKLOCKTIMEVERIFY</name></expr>    :</case> <return>return <expr><literal type="string">"OP_CHECKLOCKTIMEVERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_CHECKSEQUENCEVERIFY</name></expr>    :</case> <return>return <expr><literal type="string">"OP_CHECKSEQUENCEVERIFY"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP4</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP4"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP5</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP5"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP6</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP6"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP7</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP7"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP8</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP8"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP9</name></expr>                   :</case> <return>return <expr><literal type="string">"OP_NOP9"</literal></expr>;</return>
    <case>case <expr><name>OP_NOP10</name></expr>                  :</case> <return>return <expr><literal type="string">"OP_NOP10"</literal></expr>;</return>

    <case>case <expr><name>OP_INVALIDOPCODE</name></expr>          :</case> <return>return <expr><literal type="string">"OP_INVALIDOPCODE"</literal></expr>;</return>

    <default>default:</default>
        <return>return <expr><literal type="string">"OP_UNKNOWN"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>CScript</name><operator>::</operator><name>GetSigOpCount</name></name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>fAccurate</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const_iterator</name></type> <name>pc</name> <init>= <expr><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>opcodetype</name></type> <name>lastOpcode</name> <init>= <expr><name>OP_INVALIDOPCODE</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pc</name> <operator>&lt;</operator> <call><name>end</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOp</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>OP_CHECKSIG</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>OP_CHECKSIGVERIFY</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>OP_CHECKMULTISIG</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>OP_CHECKMULTISIGVERIFY</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>fAccurate</name> <operator>&amp;&amp;</operator> <name>lastOpcode</name> <operator>&gt;=</operator> <name>OP_1</name> <operator>&amp;&amp;</operator> <name>lastOpcode</name> <operator>&lt;=</operator> <name>OP_16</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>DecodeOP_N</name><argument_list>(<argument><expr><name>lastOpcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>MAX_PUBKEYS_PER_MULTISIG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastOpcode</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>CScript</name><operator>::</operator><name>GetSigOpCount</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CScript</name><modifier>&amp;</modifier></type> <name>scriptSig</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsPayToScriptHash</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>GetSigOpCount</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// This is a pay-to-script-hash scriptPubKey;</comment>
    <comment type="line">// get the last item that the scriptSig</comment>
    <comment type="line">// pushes onto the stack:</comment>
    <decl_stmt><decl><type><name>const_iterator</name></type> <name>pc</name> <init>= <expr><call><name><name>scriptSig</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vData</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pc</name> <operator>&lt;</operator> <call><name><name>scriptSig</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scriptSig</name><operator>.</operator><name>GetOp</name></name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>vData</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;</operator> <name>OP_16</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="line" format="doxygen">/// ... and return its opcount:</comment>
    <decl_stmt><decl><type><name>CScript</name></type> <name>subscript</name><argument_list>(<argument><expr><call><name><name>vData</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vData</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><call><name><name>subscript</name><operator>.</operator><name>GetSigOpCount</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>IsPayToScriptHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <comment type="line">// Extra-fast test for pay-to-script-hash CScripts:</comment>
    <return>return <expr><operator>(</operator><call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">23</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>OP_HASH160</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0x14</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">22</literal></expr>]</index> <operator>==</operator> <name>OP_EQUAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>IsPayToWitnessScriptHash</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <comment type="line">// Extra-fast test for pay-to-witness-script-hash CScripts:</comment>
    <return>return <expr><operator>(</operator><call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">34</literal> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <name>OP_0</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">0x20</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// A witness program is any valid CScript that consists of a 1-byte push opcode</comment>
<comment type="line">// followed by a data push between 2 and 40 bytes.</comment>
<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>IsWitnessProgram</name></name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>program</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">42</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <name>OP_0</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;</operator> <name>OP_1</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&gt;</operator> <name>OP_16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <call><name><name>this</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>DecodeOP_N</name><argument_list>(<argument><expr><operator>(</operator><name>opcodetype</name><operator>)</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>program</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>this</name><operator>-&gt;</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>IsPushOnly</name></name><parameter_list>(<parameter><decl><type><name>const_iterator</name></type> <name>pc</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <while>while <condition>(<expr><name>pc</name> <operator>&lt;</operator> <call><name>end</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOp</name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="line">// Note that IsPushOnly() *does* consider OP_RESERVED to be a</comment>
        <comment type="line">// push-type opcode, however execution of OP_RESERVED fails, so</comment>
        <comment type="line">// it's not relevant to P2SH/BIP62 as the scriptSig would fail prior to</comment>
        <comment type="line">// the P2SH special validation code being executed.</comment>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&gt;</operator> <name>OP_16</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>IsPushOnly</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>IsPushOnly</name></name><argument_list>(<argument><expr><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CScriptWitness</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>ret</name> <init>= <expr><literal type="string">"CScriptWitness("</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>HexStr</name><argument_list>(<argument><expr><name><name>stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ret</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CScript</name><operator>::</operator><name>HasValidOps</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>CScript</name><operator>::</operator><name>const_iterator</name></name></type> <name>it</name> <init>= <expr><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>it</name> <operator>&lt;</operator> <call><name>end</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>opcodetype</name></type> <name>opcode</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name></type> <name>item</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetOp</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>opcode</name> <operator>&gt;</operator> <name>MAX_OPCODE</name> <operator>||</operator> <call><name><name>item</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_SCRIPT_ELEMENT_SIZE</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>GetScriptOp</name><parameter_list>(<parameter><decl><type><name><name>CScriptBase</name><operator>::</operator><name>const_iterator</name></name><modifier>&amp;</modifier></type> <name>pc</name></decl></parameter>, <parameter><decl><type><name><name>CScriptBase</name><operator>::</operator><name>const_iterator</name></name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>opcodetype</name><modifier>&amp;</modifier></type> <name>opcodeRet</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name></expr></argument>&gt;</argument_list></name><modifier>*</modifier></type> <name>pvchRet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>opcodeRet</name> <operator>=</operator> <name>OP_INVALIDOPCODE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pvchRet</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>pvchRet</name><operator>-&gt;</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Read instruction</comment>
    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>opcode</name> <init>= <expr><operator>*</operator><name>pc</name><operator>++</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// Immediate operand</comment>
    <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;=</operator> <name>OP_PUSHDATA4</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>&lt;</operator> <name>OP_PUSHDATA1</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>nSize</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>OP_PUSHDATA1</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nSize</name> <operator>=</operator> <operator>*</operator><name>pc</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>OP_PUSHDATA2</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nSize</name> <operator>=</operator> <call><name>ReadLE16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pc</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>OP_PUSHDATA4</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>nSize</name> <operator>=</operator> <call><name>ReadLE32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pc</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pc</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>end</name> <operator>-</operator> <name>pc</name><operator>)</operator> <operator>&lt;</operator> <name>nSize</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pvchRet</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>pvchRet</name><operator>-&gt;</operator><name>assign</name></name><argument_list>(<argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pc</name> <operator>+=</operator> <name>nSize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>opcodeRet</name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>opcodetype</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>
</unit>
