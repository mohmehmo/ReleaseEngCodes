<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/protocol.cpp"><comment type="line">// Copyright (c) 2009-2010 Satoshi Nakamoto</comment>
<comment type="line">// Copyright (c) 2009-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;protocol.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/strencodings.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>std</name><operator>::</operator><name>atomic</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>g_initial_block_download_completed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<namespace>namespace <name>NetMsgType</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>VERSION</name><init>=<expr><literal type="string">"version"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>VERACK</name><init>=<expr><literal type="string">"verack"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ADDR</name><init>=<expr><literal type="string">"addr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>INV</name><init>=<expr><literal type="string">"inv"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETDATA</name><init>=<expr><literal type="string">"getdata"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MERKLEBLOCK</name><init>=<expr><literal type="string">"merkleblock"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETBLOCKS</name><init>=<expr><literal type="string">"getblocks"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETHEADERS</name><init>=<expr><literal type="string">"getheaders"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>TX</name><init>=<expr><literal type="string">"tx"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HEADERS</name><init>=<expr><literal type="string">"headers"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BLOCK</name><init>=<expr><literal type="string">"block"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETADDR</name><init>=<expr><literal type="string">"getaddr"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>MEMPOOL</name><init>=<expr><literal type="string">"mempool"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PING</name><init>=<expr><literal type="string">"ping"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PONG</name><init>=<expr><literal type="string">"pong"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NOTFOUND</name><init>=<expr><literal type="string">"notfound"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERLOAD</name><init>=<expr><literal type="string">"filterload"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERADD</name><init>=<expr><literal type="string">"filteradd"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FILTERCLEAR</name><init>=<expr><literal type="string">"filterclear"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SENDHEADERS</name><init>=<expr><literal type="string">"sendheaders"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>FEEFILTER</name><init>=<expr><literal type="string">"feefilter"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SENDCMPCT</name><init>=<expr><literal type="string">"sendcmpct"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CMPCTBLOCK</name><init>=<expr><literal type="string">"cmpctblock"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GETBLOCKTXN</name><init>=<expr><literal type="string">"getblocktxn"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>BLOCKTXN</name><init>=<expr><literal type="string">"blocktxn"</literal></expr></init></decl>;</decl_stmt>
}</block></namespace> <comment type="line">// namespace NetMsgType</comment>

<comment type="block" format="doxygen">/** All known message types. Keep this in the same order as the list of
 * messages above and in protocol.h.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>allNetMessageTypes</name><index>[]</index></name> <init>= <expr><block>{
    <expr><name><name>NetMsgType</name><operator>::</operator><name>VERSION</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>VERACK</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>ADDR</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>INV</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>GETDATA</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>MERKLEBLOCK</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>GETBLOCKS</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>GETHEADERS</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>TX</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>HEADERS</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>BLOCK</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>GETADDR</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>MEMPOOL</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>PING</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>PONG</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>NOTFOUND</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>FILTERLOAD</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>FILTERADD</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>FILTERCLEAR</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>SENDHEADERS</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>FEEFILTER</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>SENDCMPCT</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>CMPCTBLOCK</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>GETBLOCKTXN</name></name></expr>,
    <expr><name><name>NetMsgType</name><operator>::</operator><name>BLOCKTXN</name></name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>allNetMessageTypesVec</name><argument_list>(<argument><expr><name>allNetMessageTypes</name></expr></argument>, <argument><expr><name>allNetMessageTypes</name><operator>+</operator><call><name>ARRAYLEN</name><argument_list>(<argument><expr><name>allNetMessageTypes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<constructor><name><name>CMessageHeader</name><operator>::</operator><name>CMessageHeader</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageStartChars</name><modifier>&amp;</modifier></type> <name>pchMessageStartIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>, <argument><expr><name>pchMessageStartIn</name></expr></argument>, <argument><expr><name>MESSAGE_START_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pchCommand</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMessageSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pchChecksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CHECKSUM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>CMessageHeader</name><operator>::</operator><name>CMessageHeader</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageStartChars</name><modifier>&amp;</modifier></type> <name>pchMessageStartIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pszCommand</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nMessageSizeIn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>, <argument><expr><name>pchMessageStartIn</name></expr></argument>, <argument><expr><name>MESSAGE_START_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pchCommand</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>, <argument><expr><name>pszCommand</name></expr></argument>, <argument><expr><name>COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMessageSize</name> <operator>=</operator> <name>nMessageSizeIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pchChecksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CHECKSUM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CMessageHeader</name><operator>::</operator><name>GetCommand</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>, <argument><expr><name>pchCommand</name> <operator>+</operator> <call><name>strnlen</name><argument_list>(<argument><expr><name>pchCommand</name></expr></argument>, <argument><expr><name>COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name><name>CMessageHeader</name><operator>::</operator><name>IsValid</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MessageStartChars</name><modifier>&amp;</modifier></type> <name>pchMessageStartIn</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <comment type="line">// Check start string</comment>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pchMessageStart</name></expr></argument>, <argument><expr><name>pchMessageStartIn</name></expr></argument>, <argument><expr><name>MESSAGE_START_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Check the command string for errors</comment>
    <for>for <control>(<init><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name>pchCommand</name></expr></init></decl>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>pchCommand</name> <operator>+</operator> <name>COMMAND_SIZE</name></expr>;</condition> <incr><expr><name>p1</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Must be all zeros after the first zero</comment>
            <for>for <control>(<init>;</init> <condition><expr><name>p1</name> <operator>&lt;</operator> <name>pchCommand</name> <operator>+</operator> <name>COMMAND_SIZE</name></expr>;</condition> <incr><expr><name>p1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name><name>p1</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>p1</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x7E</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Message size</comment>
    <if_stmt><if>if <condition>(<expr><name>nMessageSize</name> <operator>&gt;</operator> <name>MAX_SIZE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LogPrintf</name><argument_list>(<argument><expr><literal type="string">"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize &gt; MAX_SIZE\n"</literal></expr></argument>, <argument><expr><call><name>GetCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>nMessageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>ServiceFlags</name></type> <name>GetDesirableServiceFlags</name><parameter_list>(<parameter><decl><type><name>ServiceFlags</name></type> <name>services</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>services</name> <operator>&amp;</operator> <name>NODE_NETWORK_LIMITED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>g_initial_block_download_completed</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>ServiceFlags</name><argument_list>(<argument><expr><name>NODE_NETWORK_LIMITED</name> <operator>|</operator> <name>NODE_WITNESS</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>ServiceFlags</name><argument_list>(<argument><expr><name>NODE_NETWORK</name> <operator>|</operator> <name>NODE_WITNESS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetServiceFlagsIBDCache</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>g_initial_block_download_completed</name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
</block_content>}</block></function>


<constructor><name><name>CAddress</name><operator>::</operator><name>CAddress</name></name><parameter_list>()</parameter_list> <member_init_list>: <call><name>CService</name><argument_list>()</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>CAddress</name><operator>::</operator><name>CAddress</name></name><parameter_list>(<parameter><decl><type><name>CService</name></type> <name>ipIn</name></decl></parameter>, <parameter><decl><type><name>ServiceFlags</name></type> <name>nServicesIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>CService</name><argument_list>(<argument><expr><name>ipIn</name></expr></argument>)</argument_list></call>
</member_init_list><block>{<block_content>
    <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nServices</name> <operator>=</operator> <name>nServicesIn</name></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>void</name></type> <name><name>CAddress</name><operator>::</operator><name>Init</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>nServices</name> <operator>=</operator> <name>NODE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nTime</name> <operator>=</operator> <literal type="number">100000000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<constructor><name><name>CInv</name><operator>::</operator><name>CInv</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hash</name><operator>.</operator><name>SetNull</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></constructor>

<constructor><name><name>CInv</name><operator>::</operator><name>CInv</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>typeIn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint256</name><modifier>&amp;</modifier></type> <name>hashIn</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>type</name><argument_list>(<argument><expr><name>typeIn</name></expr></argument>)</argument_list></call>, <call><name>hash</name><argument_list>(<argument><expr><name>hashIn</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>

<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CInv</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CInv</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>type</name></name> <operator>||</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>hash</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>hash</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CInv</name><operator>::</operator><name>GetCommand</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>cmd</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>MSG_WITNESS_FLAG</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>cmd</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"witness-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>masked</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <name>MSG_TYPE_MASK</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>masked</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>MSG_TX</name></expr>:</case>             <return>return <expr><call><name><name>cmd</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>NetMsgType</name><operator>::</operator><name>TX</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>MSG_BLOCK</name></expr>:</case>          <return>return <expr><call><name><name>cmd</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>NetMsgType</name><operator>::</operator><name>BLOCK</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>MSG_FILTERED_BLOCK</name></expr>:</case> <return>return <expr><call><name><name>cmd</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>NetMsgType</name><operator>::</operator><name>MERKLEBLOCK</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>MSG_CMPCT_BLOCK</name></expr>:</case>    <return>return <expr><call><name><name>cmd</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>NetMsgType</name><operator>::</operator><name>CMPCTBLOCK</name></name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
        <throw>throw <expr><call><name><name>std</name><operator>::</operator><name>out_of_range</name></name><argument_list>(<argument><expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"CInv::GetCommand(): type=%d unknown type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name><name>CInv</name><operator>::</operator><name>ToString</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>
<block>{<block_content>
    <try>try <block>{<block_content>
        <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><call><name>GetCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block> <catch>catch<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>out_of_range</name></name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>strprintf</name><argument_list>(<argument><expr><literal type="string">"0x%08x %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>hash</name><operator>.</operator><name>ToString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></catch></try>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>getAllNetMessageTypes</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><name>allNetMessageTypesVec</name></expr>;</return>
</block_content>}</block></function>
</unit>
