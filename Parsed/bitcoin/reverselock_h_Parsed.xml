<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/mmm/Projects/bitcoin/src/reverselock.h"><comment type="line">// Copyright (c) 2015-2016 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BITCOIN_REVERSELOCK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITCOIN_REVERSELOCK_H</name></cpp:macro></cpp:define>

<comment type="block" format="doxygen">/**
 * An RAII-style reverse lock. Unlocks on construction and locks on destruction.
 */</comment>
<decl_stmt><decl><type><name><name>template</name><argument_list type="generic">&lt;<argument><expr><name>typename</name> <name>Lock</name></expr></argument>&gt;</argument_list></name>
<name>class</name></type> <name>reverse_lock</name>
<block>{<block_content>
<label><name>public</name>:</label>

    <macro><name>explicit</name></macro> <expr_stmt><expr><call><name>reverse_lock</name><argument_list>(<argument><expr><name>Lock</name><operator>&amp;</operator> <name>_lock</name></expr></argument>)</argument_list></call> <operator>:</operator> <macro><name>lock</name><argument_list>(<argument>_lock</argument>)</argument_list></macro> <block>{
        <expr><call><name><name>_lock</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>_lock</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>templock</name></expr></argument>)</argument_list></call></expr>;
    }</block>

    <operator>~</operator><macro><name>reverse_lock</name><argument_list>()</argument_list></macro> <block>{
        <expr><call><name><name>templock</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;
        <expr><call><name><name>templock</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;
    }</block>

<name>private</name><operator>:</operator>
    <call><name>reverse_lock</name><argument_list>(<argument><expr><name>reverse_lock</name> <specifier>const</specifier><operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>reverse_lock</name><modifier>&amp;</modifier></type> <name>operator</name><init>=<expr><operator>(</operator><name>reverse_lock</name> <specifier>const</specifier><operator>&amp;</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Lock</name><modifier>&amp;</modifier></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Lock</name></type> <name>templock</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// BITCOIN_REVERSELOCK_H</comment>
</unit>
