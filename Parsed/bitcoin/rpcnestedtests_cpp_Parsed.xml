<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="/home/mmm/Projects/bitcoin/src/qt/test/rpcnestedtests.cpp"><comment type="line">// Copyright (c) 2016-2018 The Bitcoin Core developers</comment>
<comment type="line">// Distributed under the MIT software license, see the accompanying</comment>
<comment type="line">// file COPYING or http://www.opensource.org/licenses/mit-license.php.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/test/rpcnestedtests.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interfaces/node.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rpc/server.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qt/rpcconsole.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;test/util/setup_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;univalue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util/system.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QDir&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtGlobal&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>UniValue</name></type> <name>rpcNestedTest_rpc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JSONRPCRequest</name><modifier>&amp;</modifier></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>.</operator><name>fHelp</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"help message"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name><name>request</name><operator>.</operator><name>params</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CRPCCommand</name></type> <name><name>vRPCCommands</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{ <expr><literal type="string">"test"</literal></expr>, <expr><literal type="string">"rpcNestedTest"</literal></expr>, <expr><operator>&amp;</operator><name>rpcNestedTest_rpc</name></expr>, <expr><block>{}</block></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name><name>RPCNestedTests</name><operator>::</operator><name>rpcNestedTests</name></name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="line">// do some test setup</comment>
    <comment type="line">// could be moved to a more generic place when we add more tests on QT level</comment>
    <expr_stmt><expr><call><name><name>tableRPC</name><operator>.</operator><name>appendCommand</name></name><argument_list>(<argument><expr><literal type="string">"rpcNestedTest"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vRPCCommands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TestingSetup</name></type> <name>test</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RPCIsInWarmup</name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SetRPCWarmupFinished</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>result2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>filtered</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>interfaces</name><operator>::</operator><name>Node</name></name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>&amp;</operator><name>m_node</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo()[chain]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//simple result filtering with path</comment>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name><operator>==</operator><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"getblockchaininfo()[chain]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblock(getbestblockhash())"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//simple 2 level nesting</comment>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblock(getblock(getbestblockhash())[hash], true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//4 level nesting with whitespace, filtering path and boolean parameter</comment>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//whitespace at the end will be tolerated</comment>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo()[\"chain\"]"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//Quote path identifier are allowed, but look after a child containing the quotes in the key</comment>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"createrawtransaction [] {} 0"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//parameter not in brackets are allowed</comment>
    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result2</name></expr></argument>, <argument><expr><literal type="string">"createrawtransaction([],{},0)"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//parameter in brackets are allowed</comment>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result2</name></expr></argument>, <argument><expr><literal type="string">"createrawtransaction( [],  {} , 0   )"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//whitespace between parameters is allowed</comment>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>result2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblock(getbestblockhash())[tx][0]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"getblock(getbestblockhash())[tx][0]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"importprivkey"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"importprivkey(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"signmessagewithprivkey abc"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"signmessagewithprivkey(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"signmessagewithprivkey abc,def"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"signmessagewithprivkey(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"signrawtransactionwithkey(abc)"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"signrawtransactionwithkey(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"walletpassphrase(help())"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"walletpassphrase(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"walletpassphrasechange(help(walletpassphrasechange(abc)))"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"walletpassphrasechange(â¦)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"help(encryptwallet(abc, def))"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"help(encryptwallet(â¦))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"help(importprivkey())"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"help(importprivkey(â¦))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"help(importprivkey(help()))"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"help(importprivkey(â¦))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCParseCommandLine</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"help(importprivkey(abc), walletpassphrase(def))"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>filtered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>filtered</name> <operator>==</operator> <literal type="string">"help(importprivkey(â¦), walletpassphrase(â¦))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest ''"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest \"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest '' abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"\",\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest abc '' abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\",\"\",\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest abc  abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\",\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest abc\t\tabc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\",\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest(abc )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest( abc )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest(   abc   ,   cba )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>QVERIFY</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="string">"[\"abc\",\"cba\"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// do the QVERIFY_EXCEPTION_THROWN checks only with Qt5.3 and higher (QVERIFY_EXCEPTION_THROWN was introduced in Qt5.3)</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo() .\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//invalid syntax</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo() getblockchaininfo()"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//invalid syntax</comment>
    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo("</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//tolerate non closing brackets if we have no arguments</comment>
    <expr_stmt><expr><operator>(</operator><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo()()()"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt> <comment type="line">//tolerate non command brackts</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"getblockchaininfo(True)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//invalid argument</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"a(getblockchaininfo(True))"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UniValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//method not found</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest abc,,abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//don't tollerate empty arguments when using ,</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest(abc,,abc)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//don't tollerate empty arguments when using ,</comment>
    <expr_stmt><expr><call><name>QVERIFY_EXCEPTION_THROWN</name><argument_list>(<argument><expr><call><name><name>RPCConsole</name><operator>::</operator><name>RPCExecuteCommandLine</name></name><argument_list>(<argument><expr><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"rpcNestedTest(abc,,)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>runtime_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//don't tollerate empty arguments when using ,</comment>
</block_content>}</block></function>
</unit>
